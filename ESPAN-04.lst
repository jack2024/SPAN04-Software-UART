CCS PCH C Compiler, Version 5.091, 5967               10-¡.Â.-21 16:32

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_8 - Delay - SP - SMS\ESPAN-04.lst

               ROM used:   27568 bytes (42%)
                           Largest free fragment is 37964
               RAM used:   2898 (74%) at main() level
                           2915 (75%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   65A8
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   0552
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   0542
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... //#include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16\ESPAN-04.h"
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
005E2:  DATA 41,54
005E4:  DATA 2B,43
005E6:  DATA 4D,47
005E8:  DATA 46,3D
005EA:  DATA 31,00
005EC:  DATA 41,54
005EE:  DATA 2B,43
005F0:  DATA 4D,47
005F2:  DATA 53,3D
005F4:  DATA 22,00
005F6:  DATA 41,54
005F8:  DATA 2B,43
005FA:  DATA 4D,47
005FC:  DATA 46,3D
005FE:  DATA 31,00
00600:  DATA 41,54
00602:  DATA 2B,43
00604:  DATA 4D,47
00606:  DATA 53,3D
00608:  DATA 22,00
0060A:  DATA 41,54
0060C:  DATA 2B,43
0060E:  DATA 4D,47
00610:  DATA 46,3D
00612:  DATA 31,00
00614:  DATA 41,54
00616:  DATA 2B,43
00618:  DATA 4D,47
0061A:  DATA 53,3D
0061C:  DATA 22,00
0061E:  DATA 41,54
00620:  DATA 2B,43
00622:  DATA 4D,47
00624:  DATA 46,3D
00626:  DATA 31,00
00628:  DATA 41,54
0062A:  DATA 2B,43
0062C:  DATA 4D,47
0062E:  DATA 53,3D
00630:  DATA 22,00
00632:  DATA 41,54
00634:  DATA 2B,43
00636:  DATA 4D,47
00638:  DATA 46,3D
0063A:  DATA 31,00
0063C:  DATA 41,54
0063E:  DATA 2B,43
00640:  DATA 4D,47
00642:  DATA 53,3D
00644:  DATA 22,00
00646:  DATA 41,54
00648:  DATA 2B,43
0064A:  DATA 4D,47
0064C:  DATA 46,3D
0064E:  DATA 31,00
00650:  DATA 41,54
00652:  DATA 2B,43
00654:  DATA 4D,47
00656:  DATA 53,3D
00658:  DATA 22,00
0065A:  DATA 41,54
0065C:  DATA 2B,43
0065E:  DATA 4D,47
00660:  DATA 46,3D
00662:  DATA 31,00
00664:  DATA 41,54
00666:  DATA 2B,43
00668:  DATA 4D,47
0066A:  DATA 53,3D
0066C:  DATA 22,00
0066E:  DATA 41,54
00670:  DATA 2B,43
00672:  DATA 4D,47
00674:  DATA 46,3D
00676:  DATA 31,00
00678:  DATA 41,54
0067A:  DATA 2B,43
0067C:  DATA 4D,47
0067E:  DATA 53,3D
00680:  DATA 22,00
00682:  DATA 41,54
00684:  DATA 2B,43
00686:  DATA 4D,47
00688:  DATA 46,3D
0068A:  DATA 31,00
0068C:  DATA 41,54
0068E:  DATA 2B,43
00690:  DATA 4D,47
00692:  DATA 53,3D
00694:  DATA 22,00
00696:  DATA 41,54
00698:  DATA 2B,43
0069A:  DATA 4D,47
0069C:  DATA 46,3D
0069E:  DATA 31,00
006A0:  DATA 41,54
006A2:  DATA 2B,43
006A4:  DATA 4D,47
006A6:  DATA 53,3D
006A8:  DATA 22,00
006AA:  DATA 41,54
006AC:  DATA 2B,43
006AE:  DATA 4D,47
006B0:  DATA 46,3D
006B2:  DATA 31,00
006B4:  DATA 41,54
006B6:  DATA 2B,43
006B8:  DATA 4D,47
006BA:  DATA 53,3D
006BC:  DATA 22,00
006BE:  DATA 41,54
006C0:  DATA 2B,43
006C2:  DATA 4D,47
006C4:  DATA 46,3D
006C6:  DATA 31,00
006C8:  DATA 41,54
006CA:  DATA 2B,43
006CC:  DATA 4D,47
006CE:  DATA 53,3D
006D0:  DATA 22,00
006D2:  DATA 41,54
006D4:  DATA 2B,43
006D6:  DATA 4D,47
006D8:  DATA 46,3D
006DA:  DATA 31,00
006DC:  DATA 41,54
006DE:  DATA 2B,43
006E0:  DATA 4D,47
006E2:  DATA 53,3D
006E4:  DATA 22,00
006E6:  DATA 41,54
006E8:  DATA 2B,43
006EA:  DATA 4D,47
006EC:  DATA 46,3D
006EE:  DATA 31,00
006F0:  DATA 41,54
006F2:  DATA 2B,43
006F4:  DATA 4D,47
006F6:  DATA 53,3D
006F8:  DATA 22,00
006FA:  DATA 41,54
006FC:  DATA 2B,43
006FE:  DATA 4D,47
00700:  DATA 46,3D
00702:  DATA 31,00
00704:  DATA 41,54
00706:  DATA 2B,43
00708:  DATA 4D,47
0070A:  DATA 53,3D
0070C:  DATA 22,00
0070E:  DATA 41,54
00710:  DATA 2B,43
00712:  DATA 4D,47
00714:  DATA 46,3D
00716:  DATA 31,00
00718:  DATA 41,54
0071A:  DATA 2B,43
0071C:  DATA 4D,47
0071E:  DATA 53,3D
00720:  DATA 22,00
00722:  DATA 41,54
00724:  DATA 2B,43
00726:  DATA 4D,47
00728:  DATA 53,3D
0072A:  DATA 22,00
0072C:  DATA 41,54
0072E:  DATA 2B,43
00730:  DATA 4D,47
00732:  DATA 53,3D
00734:  DATA 22,00
00736:  DATA 41,54
00738:  DATA 2B,43
0073A:  DATA 4D,47
0073C:  DATA 53,3D
0073E:  DATA 22,00
00740:  DATA 41,54
00742:  DATA 2B,43
00744:  DATA 4D,47
00746:  DATA 53,3D
00748:  DATA 22,00
0074A:  DATA 41,54
0074C:  DATA 2B,43
0074E:  DATA 4D,47
00750:  DATA 53,3D
00752:  DATA 22,00
00754:  DATA 41,54
00756:  DATA 2B,43
00758:  DATA 4D,47
0075A:  DATA 53,3D
0075C:  DATA 22,00
0075E:  DATA 41,54
00760:  DATA 2B,43
00762:  DATA 4D,47
00764:  DATA 53,3D
00766:  DATA 22,00
00768:  DATA 41,54
0076A:  DATA 2B,43
0076C:  DATA 4D,47
0076E:  DATA 53,3D
00770:  DATA 22,00
00772:  DATA 41,54
00774:  DATA 2B,43
00776:  DATA 4D,47
00778:  DATA 46,3D
0077A:  DATA 31,00
*
014FA:  MOVLB  B
014FC:  MOVF   x5B,W
014FE:  ANDLW  07
01500:  MOVWF  00
01502:  RRCF   x5B,W
01504:  MOVWF  01
01506:  RRCF   01,F
01508:  RRCF   01,F
0150A:  MOVLW  1F
0150C:  ANDWF  01,F
0150E:  MOVF   01,W
01510:  ADDWF  x5C,W
01512:  MOVWF  FE9
01514:  MOVLW  00
01516:  ADDWFC x5D,W
01518:  MOVWF  FEA
0151A:  MOVFF  FEF,01
0151E:  INCF   00,F
01520:  BRA    1524
01522:  RRCF   01,F
01524:  DECFSZ 00,F
01526:  BRA    1522
01528:  MOVLW  01
0152A:  ANDWF  01,F
0152C:  MOVLB  0
0152E:  RETURN 0
01530:  MOVLB  B
01532:  MOVF   x5C,W
01534:  MULWF  x5E
01536:  MOVFF  FF3,01
0153A:  MOVFF  FF4,00
0153E:  MULWF  x5F
01540:  MOVF   FF3,W
01542:  ADDWF  00,F
01544:  MOVF   x5D,W
01546:  MULWF  x5E
01548:  MOVF   FF3,W
0154A:  ADDWFC 00,W
0154C:  MOVWF  02
0154E:  MOVLB  0
01550:  RETURN 0
01552:  MOVLB  B
01554:  MOVF   x5B,W
01556:  ANDLW  07
01558:  MOVWF  00
0155A:  RRCF   x5B,W
0155C:  MOVWF  01
0155E:  RRCF   01,F
01560:  RRCF   01,F
01562:  MOVLW  1F
01564:  ANDWF  01,F
01566:  MOVF   01,W
01568:  ADDWF  x5D,W
0156A:  MOVWF  FE9
0156C:  MOVLW  00
0156E:  ADDWFC x5E,W
01570:  MOVWF  FEA
01572:  CLRF   01
01574:  INCF   01,F
01576:  INCF   00,F
01578:  BRA    157C
0157A:  RLCF   01,F
0157C:  DECFSZ 00,F
0157E:  BRA    157A
01580:  MOVF   x5C,F
01582:  BZ    158A
01584:  MOVF   01,W
01586:  IORWF  FEF,F
01588:  BRA    1590
0158A:  COMF   01,F
0158C:  MOVF   01,W
0158E:  ANDWF  FEF,F
01590:  MOVLB  0
01592:  GOTO   15E8 (RETURN)
*
01C50:  ADDWF  FE8,W
01C52:  CLRF   FF7
01C54:  RLCF   FF7,F
01C56:  ADDLW  6B
01C58:  MOVWF  FF6
01C5A:  MOVLW  1C
01C5C:  ADDWFC FF7,F
01C5E:  TBLRD*-
01C60:  MOVF   FF5,W
01C62:  MOVWF  FFA
01C64:  TBLRD*
01C66:  MOVF   FF5,W
01C68:  MOVWF  FF9
01C6A:  DATA B6,17
01C6C:  DATA BE,17
01C6E:  DATA C6,17
01C70:  DATA CE,17
01C72:  DATA D6,17
01C74:  DATA DE,17
01C76:  DATA E6,17
01C78:  DATA EE,17
01C7A:  ADDWF  FE8,W
01C7C:  CLRF   FF7
01C7E:  RLCF   FF7,F
01C80:  ADDLW  95
01C82:  MOVWF  FF6
01C84:  MOVLW  1C
01C86:  ADDWFC FF7,F
01C88:  TBLRD*-
01C8A:  MOVF   FF5,W
01C8C:  MOVWF  FFA
01C8E:  TBLRD*
01C90:  MOVF   FF5,W
01C92:  MOVWF  FF9
01C94:  DATA D6,18
01C96:  DATA DE,18
01C98:  DATA E6,18
01C9A:  DATA EE,18
01C9C:  DATA F6,18
01C9E:  DATA FE,18
01CA0:  DATA 06,19
01CA2:  DATA 0E,19
01CA4:  ADDWF  FE8,W
01CA6:  CLRF   FF7
01CA8:  RLCF   FF7,F
01CAA:  ADDLW  BF
01CAC:  MOVWF  FF6
01CAE:  MOVLW  1C
01CB0:  ADDWFC FF7,F
01CB2:  TBLRD*-
01CB4:  MOVF   FF5,W
01CB6:  MOVWF  FFA
01CB8:  TBLRD*
01CBA:  MOVF   FF5,W
01CBC:  MOVWF  FF9
01CBE:  DATA 2A,1A
01CC0:  DATA 32,1A
01CC2:  DATA 3A,1A
01CC4:  DATA 42,1A
01CC6:  DATA 4A,1A
01CC8:  DATA 52,1A
01CCA:  DATA 5A,1A
01CCC:  DATA 62,1A
01CCE:  ADDWF  FE8,W
01CD0:  CLRF   FF7
01CD2:  RLCF   FF7,F
01CD4:  ADDLW  E9
01CD6:  MOVWF  FF6
01CD8:  MOVLW  1C
01CDA:  ADDWFC FF7,F
01CDC:  TBLRD*-
01CDE:  MOVF   FF5,W
01CE0:  MOVWF  FFA
01CE2:  TBLRD*
01CE4:  MOVF   FF5,W
01CE6:  MOVWF  FF9
01CE8:  DATA 48,1B
01CEA:  DATA 50,1B
01CEC:  DATA 58,1B
01CEE:  DATA 60,1B
01CF0:  DATA 68,1B
01CF2:  DATA 70,1B
01CF4:  DATA 78,1B
01CF6:  DATA 80,1B
*
01F44:  TBLRD*+
01F46:  MOVF   FF5,F
01F48:  BZ    1F62
01F4A:  MOVFF  FF6,B56
01F4E:  MOVFF  FF7,B57
01F52:  MOVFF  FF5,B58
01F56:  RCALL  1EFE
01F58:  MOVFF  B56,FF6
01F5C:  MOVFF  B57,FF7
01F60:  BRA    1F44
01F62:  RETURN 0
*
044BA:  MOVF   FEF,F
044BC:  BZ    44DE
044BE:  MOVFF  FEA,B57
044C2:  MOVFF  FE9,B56
044C6:  MOVFF  FEF,B58
044CA:  CALL   1EFE
044CE:  MOVFF  B57,FEA
044D2:  MOVFF  B56,FE9
044D6:  INCF   FE9,F
044D8:  BTFSC  FD8.2
044DA:  INCF   FEA,F
044DC:  BRA    44BA
044DE:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
0077C:  MOVLW  0B
0077E:  MOVWF  FEA
00780:  MOVLW  57
00782:  MOVWF  FE9
00784:  MOVF   FEF,W
00786:  BZ    07AA
00788:  MOVLW  05
0078A:  MOVWF  01
0078C:  MOVLW  BF
0078E:  MOVWF  00
00790:  CLRWDT
00792:  DECFSZ 00,F
00794:  BRA    0790
00796:  DECFSZ 01,F
00798:  BRA    078C
0079A:  MOVLW  2E
0079C:  MOVWF  00
0079E:  DECFSZ 00,F
007A0:  BRA    079E
007A2:  NOP   
007A4:  CLRWDT
007A6:  DECFSZ FEF,F
007A8:  BRA    0788
007AA:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
007DE:  BCF    F92.5
007E0:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
007E2:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
007E4:  MOVLB  B
007E6:  CLRF   x58
007E8:  MOVLW  0A
007EA:  MOVWF  x59
007EC:  MOVLW  AA
007EE:  MOVWF  x5A
007F0:  MOVLB  0
007F2:  RCALL  07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
007F4:  MOVLW  02
007F6:  MOVLB  B
007F8:  MOVWF  x58
007FA:  MOVLW  0A
007FC:  MOVWF  x59
007FE:  MOVLW  AA
00800:  MOVWF  x5A
00802:  MOVLB  0
00804:  RCALL  07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
00806:  MOVLW  04
00808:  MOVLB  B
0080A:  MOVWF  x58
0080C:  MOVLW  0A
0080E:  MOVWF  x59
00810:  MOVLW  AA
00812:  MOVWF  x5A
00814:  MOVLB  0
00816:  RCALL  07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
00818:  MOVLW  06
0081A:  MOVLB  B
0081C:  MOVWF  x58
0081E:  MOVLW  0A
00820:  MOVWF  x59
00822:  MOVLW  AA
00824:  MOVWF  x5A
00826:  MOVLB  0
00828:  RCALL  07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
0082A:  MOVLW  08
0082C:  MOVLB  B
0082E:  MOVWF  x58
00830:  MOVLW  0A
00832:  MOVWF  x59
00834:  MOVLW  AA
00836:  MOVWF  x5A
00838:  MOVLB  0
0083A:  RCALL  07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
0083C:  MOVLW  0A
0083E:  MOVLB  B
00840:  MOVWF  x58
00842:  MOVWF  x59
00844:  MOVLW  AA
00846:  MOVWF  x5A
00848:  MOVLB  0
0084A:  RCALL  07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
0084C:  MOVLW  0C
0084E:  MOVLB  B
00850:  MOVWF  x58
00852:  MOVLW  0A
00854:  MOVWF  x59
00856:  MOVLW  AA
00858:  MOVWF  x5A
0085A:  MOVLB  0
0085C:  RCALL  07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
0085E:  MOVLW  0E
00860:  MOVLB  B
00862:  MOVWF  x58
00864:  MOVLW  0A
00866:  MOVWF  x59
00868:  MOVLW  AA
0086A:  MOVWF  x5A
0086C:  MOVLB  0
0086E:  RCALL  07AC
....................    #endif
00870:  GOTO   669C (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
007AC:  BCF    F92.5
007AE:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
007B0:  MOVLB  B
007B2:  MOVF   x58,W
007B4:  IORLW  40
007B6:  MOVWF  x5B
007B8:  MOVF   FC9,W
007BA:  MOVFF  B5B,FC9
007BE:  RRCF   FC7,W
007C0:  BNC   07BE
....................    #endif
....................    
....................    spi_write(reg);
007C2:  MOVF   FC9,W
007C4:  MOVFF  B59,FC9
007C8:  RRCF   FC7,W
007CA:  BNC   07C8
....................    spi_write(data);
007CC:  MOVF   FC9,W
007CE:  MOVFF  B5A,FC9
007D2:  RRCF   FC7,W
007D4:  BNC   07D2
....................    
....................    output_high(IO_CS_PIN);
007D6:  BCF    F92.5
007D8:  BSF    F89.5
007DA:  MOVLB  0
007DC:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
01486:  BCF    F92.5
01488:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
0148A:  MOVLB  B
0148C:  MOVF   x5A,W
0148E:  IORLW  41
01490:  MOVWF  x5D
01492:  MOVF   FC9,W
01494:  MOVFF  B5D,FC9
01498:  RRCF   FC7,W
0149A:  BNC   1498
....................    #endif
....................    
....................    spi_write(reg);
0149C:  MOVF   FC9,W
0149E:  MOVFF  B5B,FC9
014A2:  RRCF   FC7,W
014A4:  BNC   14A2
....................    retVal = spi_read(0);
014A6:  MOVF   FC9,W
014A8:  CLRF   FC9
014AA:  RRCF   FC7,W
014AC:  BNC   14AA
014AE:  MOVFF  FC9,B5C
....................    
....................    output_high(IO_CS_PIN);
014B2:  BCF    F92.5
014B4:  BSF    F89.5
....................    
....................    return retVal;
014B6:  MOVFF  B5C,01
014BA:  MOVLB  0
014BC:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
01CF8:  MOVFF  B56,B58
01CFC:  MOVLW  0A
01CFE:  MOVLB  B
01D00:  MOVWF  x59
01D02:  MOVFF  B57,B5A
01D06:  MOVLB  0
01D08:  CALL   07AC
....................    #endif
01D0C:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
01D0E:  MOVFF  B56,B58
01D12:  MOVLW  1A
01D14:  MOVLB  B
01D16:  MOVWF  x59
01D18:  MOVFF  B57,B5A
01D1C:  MOVLB  0
01D1E:  CALL   07AC
....................    #endif
01D22:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
014BE:  MOVFF  B58,B5A
014C2:  MOVLW  09
014C4:  MOVLB  B
014C6:  MOVWF  x5B
014C8:  MOVLB  0
014CA:  RCALL  1486
014CC:  MOVFF  01,B59
....................    #endif
....................    
....................    return retVal;
014D0:  MOVLB  B
014D2:  MOVFF  B59,01
014D6:  MOVLB  0
014D8:  GOTO   15FE (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
014DC:  MOVFF  B58,B5A
014E0:  MOVLW  19
014E2:  MOVLB  B
014E4:  MOVWF  x5B
014E6:  MOVLB  0
014E8:  RCALL  1486
014EA:  MOVFF  01,B59
....................    #endif
....................    
....................    return retVal;
014EE:  MOVLB  B
014F0:  MOVFF  B59,01
014F4:  MOVLB  0
014F6:  GOTO   169A (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00874:  MOVFF  B4E,B58
00878:  MOVLB  B
0087A:  CLRF   x59
0087C:  MOVFF  B4F,B5A
00880:  MOVLB  0
00882:  RCALL  07AC
....................    #endif
00884:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00886:  MOVFF  B4E,B58
0088A:  MOVLW  10
0088C:  MOVLB  B
0088E:  MOVWF  x59
00890:  MOVFF  B4F,B5A
00894:  MOVLB  0
00896:  RCALL  07AC
....................    #endif
00898:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... /*
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... */
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
01FBA:  BTFSS  F9E.4
01FBC:  BRA    1FBA
01FBE:  MOVWF  FAD
01FC0:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
01EFE:  BCF    F93.0
01F00:  BCF    F8A.0
01F02:  MOVLW  08
01F04:  MOVWF  01
01F06:  BRA    1F08
01F08:  NOP   
01F0A:  BSF    01.7
01F0C:  BRA    1F2E
01F0E:  BCF    01.7
01F10:  MOVLB  B
01F12:  RRCF   x58,F
01F14:  MOVLB  0
01F16:  BTFSC  FD8.0
01F18:  BSF    F8A.0
01F1A:  BTFSS  FD8.0
01F1C:  BCF    F8A.0
01F1E:  BSF    01.6
01F20:  BRA    1F2E
01F22:  BCF    01.6
01F24:  DECFSZ 01,F
01F26:  BRA    1F10
01F28:  BRA    1F2A
01F2A:  NOP   
01F2C:  BSF    F8A.0
01F2E:  MOVLW  84
01F30:  MOVWF  FE9
01F32:  DECFSZ FE9,F
01F34:  BRA    1F32
01F36:  BRA    1F38
01F38:  NOP   
01F3A:  BTFSC  01.7
01F3C:  BRA    1F0E
01F3E:  BTFSC  01.6
01F40:  BRA    1F22
01F42:  RETURN 0
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10, end_sq = 0x11, code_sq = 0x12, start_addr_hi_sq = 0x13, start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15, ubyte_lo_sq = 0x16, crc_hi_sq = 0x17,second_numofdata = 0x18, byte_count_sq = 0x19, data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[255];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... unsigned char index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[41];
.................... unsigned char SMS_Massage2[41];
.................... unsigned char SMS_Massage3[41];
.................... unsigned char SMS_Massage4[41];
.................... unsigned char SMS_Massage5[41];
.................... unsigned char SMS_Massage6[41];
.................... unsigned char SMS_Massage7[41];
.................... unsigned char SMS_Massage8[41];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Inputt
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8;
.................... 
.................... };
.................... 
.................... 
.................... struct Bit64 Inputt,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[20];
.................... int1 FaultNow[20];
.................... int16 ReleaseTime[20];
.................... int16 FaultDelayTime[20];
.................... int8  AllFaultDelayTime;
.................... int1 FaultNCNO[20];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
01596:  MOVLB  B
01598:  CLRF   x58
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
0159A:  MOVLW  01
0159C:  MOVWF  x58
0159E:  BTFSC  x58.7
015A0:  BRA    15A8
015A2:  MOVF   x58,W
015A4:  SUBLW  10
015A6:  BNC   15EE
....................    {
....................       FaultAgo[i] = FaultNow[i];
015A8:  CLRF   03
015AA:  MOVF   x58,W
015AC:  MOVWF  00
015AE:  BTFSC  FE8.7
015B0:  DECF   03,F
015B2:  MOVWF  x59
015B4:  MOVFF  03,B5A
015B8:  CLRF   03
015BA:  MOVF   x58,W
015BC:  MOVWF  00
015BE:  BTFSC  FE8.7
015C0:  DECF   03,F
015C2:  MOVWF  x5B
015C4:  MOVLW  0A
015C6:  MOVWF  x5D
015C8:  MOVLW  F1
015CA:  MOVWF  x5C
015CC:  MOVLB  0
015CE:  RCALL  14FA
015D0:  MOVFF  B59,B5B
015D4:  MOVLB  B
015D6:  CLRF   x5C
015D8:  BTFSC  01.0
015DA:  INCF   x5C,F
015DC:  MOVLW  0A
015DE:  MOVWF  x5E
015E0:  MOVLW  EE
015E2:  MOVWF  x5D
015E4:  MOVLB  0
015E6:  BRA    1552
015E8:  MOVLB  B
015EA:  INCF   x58,F
015EC:  BRA    159E
....................    }
015EE:  MOVLB  0
015F0:  GOTO   1BB2 (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
01F64:  MOVLB  5
01F66:  SETF   x7B
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
01F68:  SETF   x7A
.................... 
....................    for(i = 0;i < usDataLen;i++)
01F6A:  MOVLB  B
01F6C:  CLRF   x5C
01F6E:  MOVF   x5A,W
01F70:  SUBWF  x5C,W
01F72:  BC    1FB6
....................    {
....................       restart_wdt();
01F74:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
01F76:  MOVF   x5C,W
01F78:  ADDWF  x58,W
01F7A:  MOVWF  FE9
01F7C:  MOVLW  00
01F7E:  ADDWFC x59,W
01F80:  MOVWF  FEA
01F82:  MOVF   FEF,W
01F84:  MOVLB  5
01F86:  XORWF  x7B,W
01F88:  MOVLB  B
01F8A:  MOVWF  x5B
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
01F8C:  CLRF   03
01F8E:  MOVF   x5B,W
01F90:  MOVLB  0
01F92:  CALL   00BA
01F96:  MOVWF  01
01F98:  MOVLB  5
01F9A:  MOVF   x7A,W
01F9C:  XORWF  01,W
01F9E:  MOVWF  x7B
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
01FA0:  CLRF   03
01FA2:  MOVLB  B
01FA4:  MOVF   x5B,W
01FA6:  MOVLB  0
01FA8:  CALL   01CA
01FAC:  MOVFF  FE8,57A
01FB0:  MOVLB  B
01FB2:  INCF   x5C,F
01FB4:  BRA    1F6E
....................    }
01FB6:  MOVLB  0
01FB8:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................     
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
01FC2:  CLRF   1E
....................    
....................    Ack1_8_Send = 0x00;
01FC4:  CLRF   26
....................   
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
01FC6:  MOVLB  A
01FC8:  BTFSC  xE7.0
01FCA:  BRA    1FD4
01FCC:  BTFSC  xE0.0
01FCE:  BRA    1FD4
....................       AckSend.B1 = 1;
01FD0:  BSF    xEA.0
01FD2:  BRA    1FD6
....................    else
....................       AckSend.B1 = 0;
01FD4:  BCF    xEA.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
01FD6:  BTFSC  xE7.1
01FD8:  BRA    1FE2
01FDA:  BTFSC  xE0.1
01FDC:  BRA    1FE2
....................       AckSend.B2 = 1;
01FDE:  BSF    xEA.1
01FE0:  BRA    1FE4
....................    else
....................       AckSend.B2 = 0;
01FE2:  BCF    xEA.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
01FE4:  BTFSC  xE7.2
01FE6:  BRA    1FF0
01FE8:  BTFSC  xE0.2
01FEA:  BRA    1FF0
....................       AckSend.B3 = 1;
01FEC:  BSF    xEA.2
01FEE:  BRA    1FF2
....................    else
....................       AckSend.B3 = 0;
01FF0:  BCF    xEA.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
01FF2:  BTFSC  xE7.3
01FF4:  BRA    1FFE
01FF6:  BTFSC  xE0.3
01FF8:  BRA    1FFE
....................       AckSend.B4 = 1;
01FFA:  BSF    xEA.3
01FFC:  BRA    2000
....................    else
....................       AckSend.B4 = 0;
01FFE:  BCF    xEA.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
02000:  BTFSC  xE7.4
02002:  BRA    200C
02004:  BTFSC  xE0.4
02006:  BRA    200C
....................       AckSend.B5 = 1;
02008:  BSF    xEA.4
0200A:  BRA    200E
....................    else
....................       AckSend.B5 = 0;
0200C:  BCF    xEA.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
0200E:  BTFSC  xE7.5
02010:  BRA    201A
02012:  BTFSC  xE0.5
02014:  BRA    201A
....................       AckSend.B6 = 1;
02016:  BSF    xEA.5
02018:  BRA    201C
....................    else
....................       AckSend.B6 = 0;
0201A:  BCF    xEA.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
0201C:  BTFSC  xE7.6
0201E:  BRA    2028
02020:  BTFSC  xE0.6
02022:  BRA    2028
....................       AckSend.B7 = 1;
02024:  BSF    xEA.6
02026:  BRA    202A
....................    else
....................       AckSend.B7 = 0;
02028:  BCF    xEA.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
0202A:  BTFSC  xE7.7
0202C:  BRA    2036
0202E:  BTFSC  xE0.7
02030:  BRA    2036
....................       AckSend.B8 = 1;
02032:  BSF    xEA.7
02034:  BRA    2038
....................    else
....................       AckSend.B8 = 0;
02036:  BCF    xEA.7
.................... 
....................    
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
02038:  MOVLW  00
0203A:  BTFSC  xEA.7
0203C:  MOVLW  01
0203E:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
02040:  BCF    FD8.0
02042:  RLCF   26,W
02044:  MOVLB  B
02046:  MOVWF  x58
02048:  MOVLW  00
0204A:  MOVLB  A
0204C:  BTFSC  xEA.6
0204E:  MOVLW  01
02050:  MOVLB  B
02052:  IORWF  x58,W
02054:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
02056:  BCF    FD8.0
02058:  RLCF   26,W
0205A:  MOVWF  x58
0205C:  MOVLW  00
0205E:  MOVLB  A
02060:  BTFSC  xEA.5
02062:  MOVLW  01
02064:  MOVLB  B
02066:  IORWF  x58,W
02068:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
0206A:  BCF    FD8.0
0206C:  RLCF   26,W
0206E:  MOVWF  x58
02070:  MOVLW  00
02072:  MOVLB  A
02074:  BTFSC  xEA.4
02076:  MOVLW  01
02078:  MOVLB  B
0207A:  IORWF  x58,W
0207C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
0207E:  BCF    FD8.0
02080:  RLCF   26,W
02082:  MOVWF  x58
02084:  MOVLW  00
02086:  MOVLB  A
02088:  BTFSC  xEA.3
0208A:  MOVLW  01
0208C:  MOVLB  B
0208E:  IORWF  x58,W
02090:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
02092:  BCF    FD8.0
02094:  RLCF   26,W
02096:  MOVWF  x58
02098:  MOVLW  00
0209A:  MOVLB  A
0209C:  BTFSC  xEA.2
0209E:  MOVLW  01
020A0:  MOVLB  B
020A2:  IORWF  x58,W
020A4:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
020A6:  BCF    FD8.0
020A8:  RLCF   26,W
020AA:  MOVWF  x58
020AC:  MOVLW  00
020AE:  MOVLB  A
020B0:  BTFSC  xEA.1
020B2:  MOVLW  01
020B4:  MOVLB  B
020B6:  IORWF  x58,W
020B8:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
020BA:  BCF    FD8.0
020BC:  RLCF   26,W
020BE:  MOVWF  x58
020C0:  MOVLW  00
020C2:  MOVLB  A
020C4:  BTFSC  xEA.0
020C6:  MOVLW  01
020C8:  MOVLB  B
020CA:  IORWF  x58,W
020CC:  MOVWF  26
....................    
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
020CE:  MOVLW  00
020D0:  MOVLB  A
020D2:  BTFSC  xE7.7
020D4:  MOVLW  01
020D6:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
020D8:  BCF    FD8.0
020DA:  RLCF   1E,W
020DC:  MOVLB  B
020DE:  MOVWF  x58
020E0:  MOVLW  00
020E2:  MOVLB  A
020E4:  BTFSC  xE7.6
020E6:  MOVLW  01
020E8:  MOVLB  B
020EA:  IORWF  x58,W
020EC:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
020EE:  BCF    FD8.0
020F0:  RLCF   1E,W
020F2:  MOVWF  x58
020F4:  MOVLW  00
020F6:  MOVLB  A
020F8:  BTFSC  xE7.5
020FA:  MOVLW  01
020FC:  MOVLB  B
020FE:  IORWF  x58,W
02100:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
02102:  BCF    FD8.0
02104:  RLCF   1E,W
02106:  MOVWF  x58
02108:  MOVLW  00
0210A:  MOVLB  A
0210C:  BTFSC  xE7.4
0210E:  MOVLW  01
02110:  MOVLB  B
02112:  IORWF  x58,W
02114:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
02116:  BCF    FD8.0
02118:  RLCF   1E,W
0211A:  MOVWF  x58
0211C:  MOVLW  00
0211E:  MOVLB  A
02120:  BTFSC  xE7.3
02122:  MOVLW  01
02124:  MOVLB  B
02126:  IORWF  x58,W
02128:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
0212A:  BCF    FD8.0
0212C:  RLCF   1E,W
0212E:  MOVWF  x58
02130:  MOVLW  00
02132:  MOVLB  A
02134:  BTFSC  xE7.2
02136:  MOVLW  01
02138:  MOVLB  B
0213A:  IORWF  x58,W
0213C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
0213E:  BCF    FD8.0
02140:  RLCF   1E,W
02142:  MOVWF  x58
02144:  MOVLW  00
02146:  MOVLB  A
02148:  BTFSC  xE7.1
0214A:  MOVLW  01
0214C:  MOVLB  B
0214E:  IORWF  x58,W
02150:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
02152:  BCF    FD8.0
02154:  RLCF   1E,W
02156:  MOVWF  x58
02158:  MOVLW  00
0215A:  MOVLB  A
0215C:  BTFSC  xE7.0
0215E:  MOVLW  01
02160:  MOVLB  B
02162:  IORWF  x58,W
02164:  MOVWF  1E
02166:  MOVLB  0
02168:  GOTO   2B2E (RETURN)
....................      
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... int8 count_bytecount =0;
.................... void checkCommand(void)
.................... {
....................    
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x6F,W
002DE:  SUBWF  x78,W
002E0:  BNZ   030C
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x7A
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  7A
002E6:  ADDWF  x7A,W
002E8:  MOVWF  FE9
002EA:  MOVLW  01
002EC:  MOVWF  FEA
002EE:  BTFSC  FD8.0
002F0:  INCF   FEA,F
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x7A,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x78
....................      count_bytecount =0; // bytecount = 2 Byte //jj10092564
002FE:  MOVLB  B
00300:  CLRF   x48
....................      T_timeout = 0x14; //200ms
00302:  MOVLW  14
00304:  MOVLB  9
00306:  MOVWF  x85
....................    }
00308:  BRA    053C
0030A:  MOVLB  0
....................    else if(sequence == addr_sq)
0030C:  MOVF   x78,W
0030E:  SUBLW  10
00310:  BNZ   03D4
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
00312:  MOVLW  7A
00314:  ADDWF  x7A,W
00316:  MOVWF  FE9
00318:  MOVLW  01
0031A:  MOVWF  FEA
0031C:  BTFSC  FD8.0
0031E:  INCF   FEA,F
00320:  MOVFF  2E,FEF
....................       restart_wdt();
00324:  CLRWDT
....................       RxD_DataLen ++ ;
00326:  INCF   x7A,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00328:  MOVLW  01
0032A:  SUBWF  x7A,W
0032C:  ADDLW  7A
0032E:  MOVWF  FE9
00330:  MOVLW  01
00332:  MOVWF  FEA
00334:  BTFSC  FD8.0
00336:  INCF   FEA,F
00338:  MOVF   FEF,W
0033A:  SUBLW  16
0033C:  BNC   034C
....................        {
....................            sequence = code_sq;
0033E:  MOVFF  70,78
....................            T_timeout = 0x14; //200ms
00342:  MOVLW  14
00344:  MOVLB  9
00346:  MOVWF  x85
....................        }
00348:  BRA    03D0
0034A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
0034C:  MOVLW  01
0034E:  SUBWF  x7A,W
00350:  ADDLW  7A
00352:  MOVWF  FE9
00354:  MOVLW  01
00356:  MOVWF  FEA
00358:  BTFSC  FD8.0
0035A:  INCF   FEA,F
0035C:  MOVF   FEF,W
0035E:  SUBLW  20
00360:  BNZ   0370
....................        {
....................           sequence = ubyte_lo_sq;
00362:  MOVFF  73,78
....................           T_timeout = 0x14; //200ms
00366:  MOVLW  14
00368:  MOVLB  9
0036A:  MOVWF  x85
....................        }
0036C:  BRA    03D0
0036E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
00370:  MOVLW  01
00372:  SUBWF  x7A,W
00374:  ADDLW  7A
00376:  MOVWF  FE9
00378:  MOVLW  01
0037A:  MOVWF  FEA
0037C:  BTFSC  FD8.0
0037E:  INCF   FEA,F
00380:  MOVF   FEF,W
00382:  SUBLW  21
00384:  BNZ   0394
....................        {
....................           sequence = byte_count_sq ;
00386:  MOVFF  76,78
....................           T_timeout = 0x14; //200ms
0038A:  MOVLW  14
0038C:  MOVLB  9
0038E:  MOVWF  x85
....................        }
00390:  BRA    03D0
00392:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
00394:  MOVLW  01
00396:  SUBWF  x7A,W
00398:  ADDLW  7A
0039A:  MOVWF  FE9
0039C:  MOVLW  01
0039E:  MOVWF  FEA
003A0:  BTFSC  FD8.0
003A2:  INCF   FEA,F
003A4:  MOVF   FEF,W
003A6:  SUBLW  22
003A8:  BNZ   03C2
....................        {
....................           if(count_bytecount ==0){ // bytecount first Byte
003AA:  MOVLB  B
003AC:  MOVF   x48,F
003AE:  BNZ   03B4
....................             count_bytecount++;
003B0:  INCF   x48,F
....................           }
003B2:  BRA    03B8
....................           else{ // bytecount Second Byte
....................             sequence = byte_count_sq ;
003B4:  MOVFF  76,78
....................           }
.................... 
....................           T_timeout = 0x14; //200ms
003B8:  MOVLW  14
003BA:  MOVLB  9
003BC:  MOVWF  x85
....................        }
003BE:  BRA    03D0
003C0:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003C2:  CLRF   x7A
....................           sequence = end_sq;
003C4:  MOVFF  6F,78
....................           T_timeout = 0x00; 
003C8:  MOVLB  9
003CA:  CLRF   x85
....................           output_bit(P485ctrl,0);
003CC:  BCF    F8A.3
003CE:  BCF    F93.3
....................        }
....................    }
003D0:  BRA    053C
003D2:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003D4:  MOVF   x76,W
003D6:  SUBWF  x78,W
003D8:  BNZ   0412
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003DA:  MOVLW  7A
003DC:  ADDWF  x7A,W
003DE:  MOVWF  FE9
003E0:  MOVLW  01
003E2:  MOVWF  FEA
003E4:  BTFSC  FD8.0
003E6:  INCF   FEA,F
003E8:  MOVFF  2E,FEF
....................       restart_wdt();
003EC:  CLRWDT
....................       RxD_DataLen ++ ;
003EE:  INCF   x7A,F
....................       /*
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
....................       {
....................          index = (RxD_Buff[2]*100) + RxD_Buff[3];
....................       }
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
....................       }
....................       */
....................       index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
003F0:  MOVLW  01
003F2:  SUBWF  x7A,W
003F4:  ADDLW  7A
003F6:  MOVWF  FE9
003F8:  MOVLW  01
003FA:  MOVWF  FEA
003FC:  BTFSC  FD8.0
003FE:  INCF   FEA,F
00400:  MOVFF  FEF,986
....................       T_timeout = 0x14; //200ms
00404:  MOVLW  14
00406:  MOVLB  9
00408:  MOVWF  x85
....................       sequence = data_sq ;
0040A:  MOVFF  77,78
....................    }
0040E:  BRA    053C
00410:  MOVLB  0
....................    else if(sequence == data_sq)
00412:  MOVF   x77,W
00414:  SUBWF  x78,W
00416:  BNZ   0442
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00418:  MOVLW  7A
0041A:  ADDWF  x7A,W
0041C:  MOVWF  FE9
0041E:  MOVLW  01
00420:  MOVWF  FEA
00422:  BTFSC  FD8.0
00424:  INCF   FEA,F
00426:  MOVFF  2E,FEF
....................       restart_wdt();
0042A:  CLRWDT
....................       RxD_DataLen ++ ;
0042C:  INCF   x7A,F
....................       index -- ;                     //Data Byte Count
0042E:  MOVLB  9
00430:  DECF   x86,F
....................       if(index == 0x01)
00432:  DECFSZ x86,W
00434:  BRA    043A
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
00436:  MOVFF  73,78
....................       }
....................       T_timeout = 0x14; //200ms
0043A:  MOVLW  14
0043C:  MOVWF  x85
....................    }
0043E:  BRA    053C
00440:  MOVLB  0
....................    else if(sequence == code_sq)
00442:  MOVF   x70,W
00444:  SUBWF  x78,W
00446:  BNZ   046C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
00448:  MOVLW  7A
0044A:  ADDWF  x7A,W
0044C:  MOVWF  FE9
0044E:  MOVLW  01
00450:  MOVWF  FEA
00452:  BTFSC  FD8.0
00454:  INCF   FEA,F
00456:  MOVFF  2E,FEF
....................       restart_wdt();
0045A:  CLRWDT
....................       RxD_DataLen ++ ;
0045C:  INCF   x7A,F
....................       sequence = start_addr_hi_sq;
0045E:  MOVFF  71,78
....................       T_timeout = 0x14; //200ms
00462:  MOVLW  14
00464:  MOVLB  9
00466:  MOVWF  x85
.................... 
....................    }
00468:  BRA    053C
0046A:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
0046C:  MOVF   x71,W
0046E:  SUBWF  x78,W
00470:  BNZ   0496
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
00472:  MOVLW  7A
00474:  ADDWF  x7A,W
00476:  MOVWF  FE9
00478:  MOVLW  01
0047A:  MOVWF  FEA
0047C:  BTFSC  FD8.0
0047E:  INCF   FEA,F
00480:  MOVFF  2E,FEF
....................       restart_wdt();
00484:  CLRWDT
....................       RxD_DataLen ++ ;
00486:  INCF   x7A,F
....................       sequence = start_addr_lo_sq;
00488:  MOVFF  72,78
....................       T_timeout = 0x14; //200ms
0048C:  MOVLW  14
0048E:  MOVLB  9
00490:  MOVWF  x85
....................    }
00492:  BRA    053C
00494:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
00496:  MOVF   x72,W
00498:  SUBWF  x78,W
0049A:  BNZ   04C0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
0049C:  MOVLW  7A
0049E:  ADDWF  x7A,W
004A0:  MOVWF  FE9
004A2:  MOVLW  01
004A4:  MOVWF  FEA
004A6:  BTFSC  FD8.0
004A8:  INCF   FEA,F
004AA:  MOVFF  2E,FEF
....................       restart_wdt();
004AE:  CLRWDT
....................       RxD_DataLen ++ ;
004B0:  INCF   x7A,F
....................       sequence = ubyte_hi_sq;
004B2:  MOVLW  15
004B4:  MOVWF  x78
....................       T_timeout = 0x14; //200ms
004B6:  MOVLW  14
004B8:  MOVLB  9
004BA:  MOVWF  x85
....................    }
004BC:  BRA    053C
004BE:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
004C0:  MOVF   x78,W
004C2:  SUBLW  15
004C4:  BNZ   04EA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
004C6:  MOVLW  7A
004C8:  ADDWF  x7A,W
004CA:  MOVWF  FE9
004CC:  MOVLW  01
004CE:  MOVWF  FEA
004D0:  BTFSC  FD8.0
004D2:  INCF   FEA,F
004D4:  MOVFF  2E,FEF
....................       restart_wdt();
004D8:  CLRWDT
....................       RxD_DataLen ++ ;
004DA:  INCF   x7A,F
....................       sequence = ubyte_lo_sq;
004DC:  MOVFF  73,78
....................       T_timeout = 0x14; //200ms
004E0:  MOVLW  14
004E2:  MOVLB  9
004E4:  MOVWF  x85
....................    }
004E6:  BRA    053C
004E8:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
004EA:  MOVF   x73,W
004EC:  SUBWF  x78,W
004EE:  BNZ   0514
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
004F0:  MOVLW  7A
004F2:  ADDWF  x7A,W
004F4:  MOVWF  FE9
004F6:  MOVLW  01
004F8:  MOVWF  FEA
004FA:  BTFSC  FD8.0
004FC:  INCF   FEA,F
004FE:  MOVFF  2E,FEF
....................       restart_wdt();
00502:  CLRWDT
....................       RxD_DataLen ++ ;
00504:  INCF   x7A,F
....................       sequence = crc_hi_sq;
00506:  MOVFF  74,78
....................       T_timeout = 0x14; //200ms
0050A:  MOVLW  14
0050C:  MOVLB  9
0050E:  MOVWF  x85
....................    }
00510:  BRA    053C
00512:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
00514:  MOVF   x74,W
00516:  SUBWF  x78,W
00518:  BNZ   053C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
0051A:  MOVLW  7A
0051C:  ADDWF  x7A,W
0051E:  MOVWF  FE9
00520:  MOVLW  01
00522:  MOVWF  FEA
00524:  BTFSC  FD8.0
00526:  INCF   FEA,F
00528:  MOVFF  2E,FEF
....................       restart_wdt();
0052C:  CLRWDT
....................       sequence = end_sq;
0052E:  MOVFF  6F,78
....................       T_timeout = 0x00;
00532:  MOVLB  9
00534:  CLRF   x85
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
00536:  BSF    30.5
....................       output_bit(P485ctrl,0);
00538:  BCF    F8A.3
0053A:  BCF    F93.3
0053C:  MOVLB  0
....................    }
0053E:  GOTO   054C (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
023D2:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
023D4:  MOVLW  01
023D6:  SUBWF  x7A,W
023D8:  MOVLB  B
023DA:  MOVWF  x57
023DC:  MOVLW  01
023DE:  MOVWF  x59
023E0:  MOVLW  7A
023E2:  MOVWF  x58
023E4:  MOVFF  B57,B5A
023E8:  MOVLB  0
023EA:  RCALL  1F64
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
023EC:  MOVLW  01
023EE:  SUBWF  x7A,W
023F0:  ADDLW  7A
023F2:  MOVWF  FE9
023F4:  MOVLW  01
023F6:  MOVWF  FEA
023F8:  BTFSC  FD8.0
023FA:  INCF   FEA,F
023FC:  MOVF   FEF,W
023FE:  MOVLB  5
02400:  SUBWF  x7B,W
02402:  BTFSS  FD8.2
02404:  GOTO   448C
02408:  MOVLW  7A
0240A:  MOVLB  0
0240C:  ADDWF  x7A,W
0240E:  MOVWF  FE9
02410:  MOVLW  01
02412:  MOVWF  FEA
02414:  BTFSC  FD8.0
02416:  INCF   FEA,F
02418:  MOVF   FEF,W
0241A:  MOVLB  5
0241C:  SUBWF  x7A,W
0241E:  BTFSS  FD8.2
02420:  GOTO   448C
....................    {
....................     
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
02424:  MOVLB  1
02426:  MOVF   x7A,W
02428:  SUBLW  AA
0242A:  BTFSS  FD8.2
0242C:  BRA    26EA
0242E:  MOVF   x7B,W
02430:  SUBLW  20
02432:  BTFSS  FD8.2
02434:  BRA    26EA
....................       {
....................          TxD_Buff[0] = Address ;         //Address
02436:  MOVFF  79,7B
....................          TxD_Buff[1] = 0x20 ;            //function code
0243A:  MOVLW  20
0243C:  MOVLB  0
0243E:  MOVWF  x7C
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
02440:  MOVLW  1C
02442:  MOVWF  x7D
....................          TxD_Buff[3] = InputType1_8 ;    //1
02444:  MOVFF  3A,7E
....................          TxD_Buff[4] = InputType9_16 ;  //2
02448:  MOVFF  3B,7F
....................          TxD_Buff[5] = InputType17_24 ;//3
0244C:  MOVFF  3C,80
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
02450:  MOVFF  3D,81
....................          TxD_Buff[7] = FaultType9_16 ; //5
02454:  MOVFF  3E,82
....................          TxD_Buff[8] = FaultType17_24 ;   //6
02458:  MOVFF  3F,83
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
0245C:  MOVFF  40,84
....................          TxD_Buff[10] = OutputType9_16 ;  //8
02460:  MOVFF  41,85
....................          TxD_Buff[11] = OutputType17_24 ; //9
02464:  MOVFF  42,86
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
02468:  MOVFF  43,87
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
0246C:  MOVFF  44,88
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
02470:  MOVFF  45,89
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
02474:  MOVFF  46,8A
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
02478:  MOVFF  47,8B
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
0247C:  MOVFF  48,8C
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
02480:  MOVFF  FF2,B57
02484:  BCF    FF2.7
02486:  CLRF   FAA
02488:  MOVLW  10
0248A:  MOVWF  FA9
0248C:  BCF    FA6.6
0248E:  BCF    FA6.7
02490:  BSF    FA6.0
02492:  MOVF   FA8,W
02494:  MOVLB  B
02496:  BTFSC  x57.7
02498:  BSF    FF2.7
0249A:  MOVLB  0
0249C:  MOVWF  x8D
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
0249E:  MOVFF  FF2,B57
024A2:  BCF    FF2.7
024A4:  CLRF   FAA
024A6:  MOVLW  11
024A8:  MOVWF  FA9
024AA:  BCF    FA6.6
024AC:  BCF    FA6.7
024AE:  BSF    FA6.0
024B0:  MOVF   FA8,W
024B2:  MOVLB  B
024B4:  BTFSC  x57.7
024B6:  BSF    FF2.7
024B8:  MOVLB  0
024BA:  MOVWF  x8E
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
024BC:  MOVFF  FF2,B57
024C0:  BCF    FF2.7
024C2:  CLRF   FAA
024C4:  MOVLW  12
024C6:  MOVWF  FA9
024C8:  BCF    FA6.6
024CA:  BCF    FA6.7
024CC:  BSF    FA6.0
024CE:  MOVF   FA8,W
024D0:  MOVLB  B
024D2:  BTFSC  x57.7
024D4:  BSF    FF2.7
024D6:  MOVLB  0
024D8:  MOVWF  x8F
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
024DA:  MOVFF  FF2,B57
024DE:  BCF    FF2.7
024E0:  CLRF   FAA
024E2:  MOVLW  13
024E4:  MOVWF  FA9
024E6:  BCF    FA6.6
024E8:  BCF    FA6.7
024EA:  BSF    FA6.0
024EC:  MOVF   FA8,W
024EE:  MOVLB  B
024F0:  BTFSC  x57.7
024F2:  BSF    FF2.7
024F4:  MOVLB  0
024F6:  MOVWF  x90
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
024F8:  MOVFF  FF2,B57
024FC:  BCF    FF2.7
024FE:  CLRF   FAA
02500:  MOVLW  14
02502:  MOVWF  FA9
02504:  BCF    FA6.6
02506:  BCF    FA6.7
02508:  BSF    FA6.0
0250A:  MOVF   FA8,W
0250C:  MOVLB  B
0250E:  BTFSC  x57.7
02510:  BSF    FF2.7
02512:  MOVLB  0
02514:  MOVWF  x91
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
02516:  MOVFF  FF2,B57
0251A:  BCF    FF2.7
0251C:  CLRF   FAA
0251E:  MOVLW  15
02520:  MOVWF  FA9
02522:  BCF    FA6.6
02524:  BCF    FA6.7
02526:  BSF    FA6.0
02528:  MOVF   FA8,W
0252A:  MOVLB  B
0252C:  BTFSC  x57.7
0252E:  BSF    FF2.7
02530:  MOVLB  0
02532:  MOVWF  x92
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
02534:  MOVFF  FF2,B57
02538:  BCF    FF2.7
0253A:  CLRF   FAA
0253C:  MOVLW  16
0253E:  MOVWF  FA9
02540:  BCF    FA6.6
02542:  BCF    FA6.7
02544:  BSF    FA6.0
02546:  MOVF   FA8,W
02548:  MOVLB  B
0254A:  BTFSC  x57.7
0254C:  BSF    FF2.7
0254E:  MOVLB  0
02550:  MOVWF  x93
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
02552:  MOVFF  FF2,B57
02556:  BCF    FF2.7
02558:  CLRF   FAA
0255A:  MOVLW  17
0255C:  MOVWF  FA9
0255E:  BCF    FA6.6
02560:  BCF    FA6.7
02562:  BSF    FA6.0
02564:  MOVF   FA8,W
02566:  MOVLB  B
02568:  BTFSC  x57.7
0256A:  BSF    FF2.7
0256C:  MOVLB  0
0256E:  MOVWF  x94
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
02570:  MOVFF  6A,95
....................          TxD_Buff[27] = AutoAckTime ;        //25
02574:  MOVFF  6B,96
....................          TxD_Buff[28] = FlashingRate ;       //26
02578:  MOVFF  6C,97
....................          TxD_Buff[29] = NoOfPoint ;          //27
0257C:  MOVFF  6D,98
....................          TxD_Buff[30] = FaultDelayTime ;    //28
02580:  MOVLW  1C
02582:  MOVWF  x99
....................          TxD_Buff[31] = Address ;            //29
02584:  MOVFF  79,9A
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
02588:  MOVFF  B1E,9B
....................          TxD_Buff[33] = FaultDelayTime[2] ;
0258C:  MOVFF  B20,9C
....................          TxD_Buff[34] = FaultDelayTime[3] ;
02590:  MOVFF  B22,9D
....................          TxD_Buff[35] = FaultDelayTime[4] ;
02594:  MOVFF  B24,9E
....................          TxD_Buff[36] = FaultDelayTime[5] ;
02598:  MOVFF  B26,9F
....................          TxD_Buff[37] = FaultDelayTime[6] ;
0259C:  MOVFF  B28,A0
....................          TxD_Buff[38] = FaultDelayTime[7] ;
025A0:  MOVFF  B2A,A1
....................          TxD_Buff[39] = FaultDelayTime[8] ;
025A4:  MOVFF  B2C,A2
....................          TxD_Buff[40] = FaultDelayTime[9] ;
025A8:  MOVFF  B2E,A3
....................          TxD_Buff[41] = FaultDelayTime[10] ;
025AC:  MOVFF  B30,A4
....................          TxD_Buff[42] = FaultDelayTime[11] ;
025B0:  MOVFF  B32,A5
....................          TxD_Buff[43] = FaultDelayTime[12] ;
025B4:  MOVFF  B34,A6
....................          TxD_Buff[44] = FaultDelayTime[13] ;
025B8:  MOVFF  B36,A7
....................          TxD_Buff[45] = FaultDelayTime[14] ;
025BC:  MOVFF  B38,A8
....................          TxD_Buff[46] = FaultDelayTime[15] ;
025C0:  MOVFF  B3A,A9
....................          TxD_Buff[47] = FaultDelayTime[16] ;
025C4:  MOVFF  B3C,AA
....................          TxD_Buff[48] = FaultDelayTime[17] ;
025C8:  MOVFF  B3E,AB
....................          TxD_Buff[49] = FaultDelayTime[18] ;
025CC:  MOVFF  B40,AC
....................          TxD_Buff[50] = FaultDelayTime[19] ;
025D0:  MOVFF  B42,AD
....................          TxD_Buff[51] = FaultDelayTime[20] ;
025D4:  MOVFF  B44,AE
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
025D8:  MOVLB  B
025DA:  CLRF   x59
025DC:  MOVLW  7B
025DE:  MOVWF  x58
025E0:  MOVLW  34
025E2:  MOVWF  x5A
025E4:  MOVLB  0
025E6:  RCALL  1F64
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
025E8:  MOVFF  57B,AF
....................          TxD_Buff[53] = CRC_Lo ;
025EC:  MOVFF  57A,B0
.................... 
....................          output_bit(P485ctrl,1);
025F0:  BSF    F8A.3
025F2:  BCF    F93.3
....................          delay_ms(10);
025F4:  MOVLW  0A
025F6:  MOVLB  B
025F8:  MOVWF  x57
025FA:  MOVLB  0
025FC:  CALL   077C
.................... 
....................          putc(Txd_Buff[0]);
02600:  MOVF   x7B,W
02602:  RCALL  1FBA
....................          putc(Txd_Buff[1]);
02604:  MOVF   x7C,W
02606:  RCALL  1FBA
....................          putc(Txd_Buff[2]);
02608:  MOVF   x7D,W
0260A:  RCALL  1FBA
....................          putc(Txd_Buff[3]);
0260C:  MOVF   x7E,W
0260E:  RCALL  1FBA
....................          putc(Txd_Buff[4]);
02610:  MOVF   x7F,W
02612:  RCALL  1FBA
....................          putc(Txd_Buff[5]);
02614:  MOVF   x80,W
02616:  RCALL  1FBA
....................          putc(Txd_Buff[6]);
02618:  MOVF   x81,W
0261A:  RCALL  1FBA
....................          putc(Txd_Buff[7]);
0261C:  MOVF   x82,W
0261E:  RCALL  1FBA
....................          putc(Txd_Buff[8]);
02620:  MOVF   x83,W
02622:  RCALL  1FBA
....................          putc(Txd_Buff[9]);
02624:  MOVF   x84,W
02626:  RCALL  1FBA
....................          putc(Txd_Buff[10]);
02628:  MOVF   x85,W
0262A:  RCALL  1FBA
....................          putc(Txd_Buff[11]);
0262C:  MOVF   x86,W
0262E:  RCALL  1FBA
....................          putc(Txd_Buff[12]);
02630:  MOVF   x87,W
02632:  RCALL  1FBA
....................          putc(Txd_Buff[13]);
02634:  MOVF   x88,W
02636:  RCALL  1FBA
....................          putc(Txd_Buff[14]);
02638:  MOVF   x89,W
0263A:  RCALL  1FBA
....................          putc(Txd_Buff[15]);
0263C:  MOVF   x8A,W
0263E:  RCALL  1FBA
....................          putc(Txd_Buff[16]);
02640:  MOVF   x8B,W
02642:  RCALL  1FBA
....................          putc(Txd_Buff[17]);
02644:  MOVF   x8C,W
02646:  RCALL  1FBA
....................          putc(Txd_Buff[18]);
02648:  MOVF   x8D,W
0264A:  RCALL  1FBA
....................          putc(Txd_Buff[19]);
0264C:  MOVF   x8E,W
0264E:  RCALL  1FBA
....................          putc(Txd_Buff[20]);
02650:  MOVF   x8F,W
02652:  RCALL  1FBA
....................          putc(Txd_Buff[21]);
02654:  MOVF   x90,W
02656:  RCALL  1FBA
....................          putc(Txd_Buff[22]);
02658:  MOVF   x91,W
0265A:  RCALL  1FBA
....................          putc(Txd_Buff[23]);
0265C:  MOVF   x92,W
0265E:  RCALL  1FBA
....................          putc(Txd_Buff[24]);
02660:  MOVF   x93,W
02662:  RCALL  1FBA
....................          putc(Txd_Buff[25]);
02664:  MOVF   x94,W
02666:  RCALL  1FBA
....................          putc(Txd_Buff[26]);
02668:  MOVF   x95,W
0266A:  RCALL  1FBA
....................          putc(Txd_Buff[27]);
0266C:  MOVF   x96,W
0266E:  RCALL  1FBA
....................          putc(Txd_Buff[28]);
02670:  MOVF   x97,W
02672:  RCALL  1FBA
....................          putc(Txd_Buff[29]);
02674:  MOVF   x98,W
02676:  RCALL  1FBA
....................          putc(Txd_Buff[30]);
02678:  MOVF   x99,W
0267A:  RCALL  1FBA
....................          putc(Txd_Buff[31]);
0267C:  MOVF   x9A,W
0267E:  RCALL  1FBA
....................          
....................          putc(Txd_Buff[32]);
02680:  MOVF   x9B,W
02682:  RCALL  1FBA
....................          putc(Txd_Buff[33]);
02684:  MOVF   x9C,W
02686:  RCALL  1FBA
....................          putc(Txd_Buff[34]);
02688:  MOVF   x9D,W
0268A:  RCALL  1FBA
....................          putc(Txd_Buff[35]);
0268C:  MOVF   x9E,W
0268E:  RCALL  1FBA
....................          putc(Txd_Buff[36]);
02690:  MOVF   x9F,W
02692:  RCALL  1FBA
....................          putc(Txd_Buff[37]);
02694:  MOVF   xA0,W
02696:  RCALL  1FBA
....................          putc(Txd_Buff[38]);
02698:  MOVF   xA1,W
0269A:  RCALL  1FBA
....................          putc(Txd_Buff[39]);
0269C:  MOVF   xA2,W
0269E:  RCALL  1FBA
....................          putc(Txd_Buff[40]);
026A0:  MOVF   xA3,W
026A2:  RCALL  1FBA
....................          putc(Txd_Buff[41]);
026A4:  MOVF   xA4,W
026A6:  RCALL  1FBA
....................          
....................          putc(Txd_Buff[42]);
026A8:  MOVF   xA5,W
026AA:  RCALL  1FBA
....................          putc(Txd_Buff[43]);
026AC:  MOVF   xA6,W
026AE:  RCALL  1FBA
....................          putc(Txd_Buff[44]);
026B0:  MOVF   xA7,W
026B2:  RCALL  1FBA
....................          putc(Txd_Buff[45]);
026B4:  MOVF   xA8,W
026B6:  RCALL  1FBA
....................          putc(Txd_Buff[46]);
026B8:  MOVF   xA9,W
026BA:  RCALL  1FBA
....................          putc(Txd_Buff[47]);
026BC:  MOVF   xAA,W
026BE:  RCALL  1FBA
....................          putc(Txd_Buff[48]);
026C0:  MOVF   xAB,W
026C2:  RCALL  1FBA
....................          putc(Txd_Buff[49]);
026C4:  MOVF   xAC,W
026C6:  RCALL  1FBA
....................          putc(Txd_Buff[50]);
026C8:  MOVF   xAD,W
026CA:  RCALL  1FBA
....................          putc(Txd_Buff[51]);
026CC:  MOVF   xAE,W
026CE:  RCALL  1FBA
....................          
....................          putc(Txd_Buff[52]);
026D0:  MOVF   xAF,W
026D2:  RCALL  1FBA
....................          putc(Txd_Buff[53]);
026D4:  MOVF   xB0,W
026D6:  RCALL  1FBA
....................        
....................          delay_ms(3);
026D8:  MOVLW  03
026DA:  MOVLB  B
026DC:  MOVWF  x57
026DE:  MOVLB  0
026E0:  CALL   077C
....................          output_bit(P485ctrl,0);
026E4:  BCF    F8A.3
026E6:  BCF    F93.3
026E8:  MOVLB  1
....................           
....................       }
....................    
.................... 
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
026EA:  MOVLB  0
026EC:  MOVF   x79,W
026EE:  MOVLB  1
026F0:  SUBWF  x7A,W
026F2:  BTFSS  FD8.2
026F4:  GOTO   4482
....................       {
....................       
....................       if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
026F8:  DECFSZ x7B,W
026FA:  BRA    2B20
....................       {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
026FC:  MOVLB  5
026FE:  CLRF   x7F
02700:  MOVFF  17C,57E
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
02704:  MOVFF  57E,57F
02708:  MOVLB  B
0270A:  CLRF   x57
0270C:  MOVF   x57,W
0270E:  MOVLB  1
02710:  IORWF  x7D,W
02712:  MOVLB  5
02714:  MOVWF  x7E
02716:  MOVLB  5
....................             No_PointCount = RxD_Buff[4] ;
02718:  CLRF   x81
0271A:  MOVFF  17E,580
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
0271E:  MOVFF  580,581
02722:  MOVLB  B
02724:  CLRF   x57
02726:  MOVF   x57,W
02728:  MOVLB  1
0272A:  IORWF  x7F,W
0272C:  MOVLB  5
0272E:  MOVWF  x80
02730:  MOVLB  5
.................... 
....................             if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
02732:  MOVF   x7F,F
02734:  BTFSS  FD8.2
02736:  BRA    2AAE
02738:  MOVF   x7E,W
0273A:  SUBLW  0F
0273C:  BTFSS  FD8.0
0273E:  BRA    2AAE
02740:  MOVF   x80,W
02742:  ADDWF  x7E,W
02744:  MOVLB  B
02746:  MOVWF  x57
02748:  MOVLB  5
0274A:  MOVF   x81,W
0274C:  ADDWFC x7F,W
0274E:  MOVLB  B
02750:  MOVWF  x58
02752:  MOVF   x58,F
02754:  BTFSC  FD8.2
02756:  BRA    275C
02758:  MOVLB  5
0275A:  BRA    2AAE
0275C:  MOVF   x57,W
0275E:  SUBLW  10
02760:  BTFSC  FD8.0
02762:  BRA    2768
02764:  MOVLB  5
02766:  BRA    2AAE
....................             {
....................                if(No_PointCount < 9) Data_ByteCount = 0x01 ;
02768:  MOVLB  5
0276A:  MOVF   x81,F
0276C:  BNZ   277A
0276E:  MOVF   x80,W
02770:  SUBLW  08
02772:  BNC   277A
02774:  MOVLW  01
02776:  MOVWF  x82
02778:  BRA    279E
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
0277A:  MOVF   x81,F
0277C:  BNZ   278A
0277E:  MOVF   x80,W
02780:  SUBLW  10
02782:  BNC   278A
02784:  MOVLW  02
02786:  MOVWF  x82
02788:  BRA    279E
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
0278A:  MOVF   x81,F
0278C:  BNZ   279A
0278E:  MOVF   x80,W
02790:  SUBLW  18
02792:  BNC   279A
02794:  MOVLW  03
02796:  MOVWF  x82
02798:  BRA    279E
....................                else   Data_ByteCount = 0x01 ; //----Jack
0279A:  MOVLW  01
0279C:  MOVWF  x82
.................... 
....................                if(Data_ByteCount == 0x01)
0279E:  DECFSZ x82,W
027A0:  BRA    28E6
....................                {
.................... 
....................                   if(Start_Address < 0x09)
027A2:  MOVF   x7F,F
027A4:  BNZ   27C0
027A6:  MOVF   x7E,W
027A8:  SUBLW  08
027AA:  BNC   27C0
....................                   {
....................                      //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                       Data_Buff[0] = Input1_8 >> Start_Address ;
027AC:  MOVFF  49,583
027B0:  MOVF   x7E,W
027B2:  MOVWF  01
027B4:  BZ    27BE
027B6:  BCF    FD8.0
027B8:  RRCF   x83,F
027BA:  DECFSZ 01,F
027BC:  BRA    27B6
....................                       //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                       //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                   }
027BE:  BRA    27F4
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
027C0:  MOVF   x7F,F
027C2:  BNZ   27CA
027C4:  MOVF   x7E,W
027C6:  SUBLW  08
027C8:  BC    27F4
027CA:  MOVF   x7F,F
027CC:  BNZ   27F4
027CE:  MOVF   x7E,W
027D0:  SUBLW  0F
027D2:  BNC   27F4
....................                   {
....................                      //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
027D4:  MOVLW  08
027D6:  SUBWF  x7E,W
027D8:  MOVWF  00
027DA:  MOVLW  00
027DC:  SUBWFB x7F,W
027DE:  MOVWF  03
027E0:  MOVFF  00,01
027E4:  MOVFF  4A,583
027E8:  MOVF   01,F
027EA:  BZ    27F4
027EC:  BCF    FD8.0
027EE:  RRCF   x83,F
027F0:  DECFSZ 01,F
027F2:  BRA    27EC
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
027F4:  MOVF   x80,W
027F6:  SUBLW  08
027F8:  BNZ   2800
027FA:  MOVF   x81,F
027FC:  BNZ   2800
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
027FE:  BRA    286A
....................                   else if(No_PointCount == 0x07)
02800:  MOVF   x80,W
02802:  SUBLW  07
02804:  BNZ   280E
02806:  MOVF   x81,F
02808:  BNZ   280E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
0280A:  BCF    x83.7
....................                   }
0280C:  BRA    286A
....................                   else if(No_PointCount == 0x06)
0280E:  MOVF   x80,W
02810:  SUBLW  06
02812:  BNZ   281E
02814:  MOVF   x81,F
02816:  BNZ   281E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
02818:  MOVLW  3F
0281A:  ANDWF  x83,F
....................                   }
0281C:  BRA    286A
....................                   else if(No_PointCount == 0x05)
0281E:  MOVF   x80,W
02820:  SUBLW  05
02822:  BNZ   282E
02824:  MOVF   x81,F
02826:  BNZ   282E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
02828:  MOVLW  1F
0282A:  ANDWF  x83,F
....................                   }
0282C:  BRA    286A
....................                   else if(No_PointCount == 0x04)
0282E:  MOVF   x80,W
02830:  SUBLW  04
02832:  BNZ   283E
02834:  MOVF   x81,F
02836:  BNZ   283E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
02838:  MOVLW  0F
0283A:  ANDWF  x83,F
....................                   }
0283C:  BRA    286A
....................                   else if(No_PointCount == 0x03)
0283E:  MOVF   x80,W
02840:  SUBLW  03
02842:  BNZ   284E
02844:  MOVF   x81,F
02846:  BNZ   284E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
02848:  MOVLW  07
0284A:  ANDWF  x83,F
....................                   }
0284C:  BRA    286A
....................                   else if(No_PointCount == 0x02)
0284E:  MOVF   x80,W
02850:  SUBLW  02
02852:  BNZ   285E
02854:  MOVF   x81,F
02856:  BNZ   285E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
02858:  MOVLW  03
0285A:  ANDWF  x83,F
....................                   }
0285C:  BRA    286A
....................                   else if(No_PointCount == 0x01)
0285E:  DECFSZ x80,W
02860:  BRA    286A
02862:  MOVF   x81,F
02864:  BNZ   286A
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
02866:  MOVLW  01
02868:  ANDWF  x83,F
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
0286A:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
0286E:  MOVLW  01
02870:  MOVLB  0
02872:  MOVWF  x7C
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02874:  MOVFF  582,7D
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
02878:  MOVFF  583,7E
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
0287C:  MOVLB  B
0287E:  CLRF   x59
02880:  MOVLW  7B
02882:  MOVWF  x58
02884:  MOVLW  04
02886:  MOVWF  x5A
02888:  MOVLB  0
0288A:  CALL   1F64
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
0288E:  MOVFF  57B,7F
....................                   TxD_Buff[5] = CRC_Lo ;
02892:  MOVFF  57A,80
.................... 
.................... 
....................                   output_bit(P485ctrl,1);
02896:  BSF    F8A.3
02898:  BCF    F93.3
....................                   restart_wdt();
0289A:  CLRWDT
....................                   delay_ms(4);
0289C:  MOVLW  04
0289E:  MOVLB  B
028A0:  MOVWF  x57
028A2:  MOVLB  0
028A4:  CALL   077C
....................                   restart_wdt();
028A8:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
028AA:  MOVF   x7B,W
028AC:  CALL   1FBA
....................                   putc(TxD_Buff[1]) ;               //Function Code
028B0:  MOVF   x7C,W
028B2:  CALL   1FBA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
028B6:  MOVF   x7D,W
028B8:  CALL   1FBA
....................                   putc(TxD_Buff[3]) ;
028BC:  MOVF   x7E,W
028BE:  CALL   1FBA
....................                   putc(TxD_Buff[4]) ;
028C2:  MOVF   x7F,W
028C4:  CALL   1FBA
....................                   putc(TxD_Buff[5]) ;
028C8:  MOVF   x80,W
028CA:  CALL   1FBA
.................... 
....................                
....................                   restart_wdt();
028CE:  CLRWDT
....................                   delay_ms(3);
028D0:  MOVLW  03
028D2:  MOVLB  B
028D4:  MOVWF  x57
028D6:  MOVLB  0
028D8:  CALL   077C
....................                   restart_wdt();
028DC:  CLRWDT
....................                   output_bit(P485ctrl,0);
028DE:  BCF    F8A.3
028E0:  BCF    F93.3
....................               
....................                }
028E2:  BRA    2AAA
028E4:  MOVLB  5
....................                else if(Data_ByteCount == 0x02)
028E6:  MOVF   x82,W
028E8:  SUBLW  02
028EA:  BTFSS  FD8.2
028EC:  BRA    2AAC
....................                {
.................... 
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
028EE:  MOVFF  49,583
028F2:  MOVF   x7E,W
028F4:  MOVWF  01
028F6:  BZ    2900
028F8:  BCF    FD8.0
028FA:  RRCF   x83,F
028FC:  DECFSZ 01,F
028FE:  BRA    28F8
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
02900:  MOVFF  4A,584
.................... 
.................... 
....................                   if((No_PointCount - 0x07) == 0x08)
02904:  MOVLW  07
02906:  SUBWF  x80,W
02908:  MOVLB  B
0290A:  MOVWF  x57
0290C:  MOVLW  00
0290E:  MOVLB  5
02910:  SUBWFB x81,W
02912:  MOVLB  B
02914:  MOVWF  x58
02916:  MOVF   x57,W
02918:  SUBLW  08
0291A:  BNZ   2922
0291C:  MOVF   x58,F
0291E:  BNZ   2922
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
02920:  BRA    2A28
....................                   else if((No_PointCount - 0x07) == 0x07)
02922:  MOVLW  07
02924:  MOVLB  5
02926:  SUBWF  x80,W
02928:  MOVLB  B
0292A:  MOVWF  x57
0292C:  MOVLW  00
0292E:  MOVLB  5
02930:  SUBWFB x81,W
02932:  MOVLB  B
02934:  MOVWF  x58
02936:  MOVF   x57,W
02938:  SUBLW  07
0293A:  BNZ   2946
0293C:  MOVF   x58,F
0293E:  BNZ   2946
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
02940:  MOVLB  5
02942:  BCF    x84.7
....................                   }
02944:  BRA    2A26
....................                   else if((No_PointCount - 0x07) == 0x06)
02946:  MOVLW  07
02948:  MOVLB  5
0294A:  SUBWF  x80,W
0294C:  MOVLB  B
0294E:  MOVWF  x57
02950:  MOVLW  00
02952:  MOVLB  5
02954:  SUBWFB x81,W
02956:  MOVLB  B
02958:  MOVWF  x58
0295A:  MOVF   x57,W
0295C:  SUBLW  06
0295E:  BNZ   296C
02960:  MOVF   x58,F
02962:  BNZ   296C
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
02964:  MOVLW  3F
02966:  MOVLB  5
02968:  ANDWF  x84,F
....................                   }
0296A:  BRA    2A26
....................                   else if((No_PointCount - 0x07) == 0x05)
0296C:  MOVLW  07
0296E:  MOVLB  5
02970:  SUBWF  x80,W
02972:  MOVLB  B
02974:  MOVWF  x57
02976:  MOVLW  00
02978:  MOVLB  5
0297A:  SUBWFB x81,W
0297C:  MOVLB  B
0297E:  MOVWF  x58
02980:  MOVF   x57,W
02982:  SUBLW  05
02984:  BNZ   2992
02986:  MOVF   x58,F
02988:  BNZ   2992
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
0298A:  MOVLW  1F
0298C:  MOVLB  5
0298E:  ANDWF  x84,F
....................                   }
02990:  BRA    2A26
....................                   else if((No_PointCount - 0x07) == 0x04)
02992:  MOVLW  07
02994:  MOVLB  5
02996:  SUBWF  x80,W
02998:  MOVLB  B
0299A:  MOVWF  x57
0299C:  MOVLW  00
0299E:  MOVLB  5
029A0:  SUBWFB x81,W
029A2:  MOVLB  B
029A4:  MOVWF  x58
029A6:  MOVF   x57,W
029A8:  SUBLW  04
029AA:  BNZ   29B8
029AC:  MOVF   x58,F
029AE:  BNZ   29B8
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
029B0:  MOVLW  0F
029B2:  MOVLB  5
029B4:  ANDWF  x84,F
....................                   }
029B6:  BRA    2A26
....................                   else if((No_PointCount - 0x07) == 0x03)
029B8:  MOVLW  07
029BA:  MOVLB  5
029BC:  SUBWF  x80,W
029BE:  MOVLB  B
029C0:  MOVWF  x57
029C2:  MOVLW  00
029C4:  MOVLB  5
029C6:  SUBWFB x81,W
029C8:  MOVLB  B
029CA:  MOVWF  x58
029CC:  MOVF   x57,W
029CE:  SUBLW  03
029D0:  BNZ   29DE
029D2:  MOVF   x58,F
029D4:  BNZ   29DE
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
029D6:  MOVLW  07
029D8:  MOVLB  5
029DA:  ANDWF  x84,F
....................                   }
029DC:  BRA    2A26
....................                   else if((No_PointCount - 0x07) == 0x02)
029DE:  MOVLW  07
029E0:  MOVLB  5
029E2:  SUBWF  x80,W
029E4:  MOVLB  B
029E6:  MOVWF  x57
029E8:  MOVLW  00
029EA:  MOVLB  5
029EC:  SUBWFB x81,W
029EE:  MOVLB  B
029F0:  MOVWF  x58
029F2:  MOVF   x57,W
029F4:  SUBLW  02
029F6:  BNZ   2A04
029F8:  MOVF   x58,F
029FA:  BNZ   2A04
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
029FC:  MOVLW  03
029FE:  MOVLB  5
02A00:  ANDWF  x84,F
....................                   }
02A02:  BRA    2A26
....................                   else if((No_PointCount - 0x07) == 0x01)
02A04:  MOVLW  07
02A06:  MOVLB  5
02A08:  SUBWF  x80,W
02A0A:  MOVLB  B
02A0C:  MOVWF  x57
02A0E:  MOVLW  00
02A10:  MOVLB  5
02A12:  SUBWFB x81,W
02A14:  MOVLB  B
02A16:  MOVWF  x58
02A18:  DECFSZ x57,W
02A1A:  BRA    2A28
02A1C:  MOVF   x58,F
02A1E:  BNZ   2A28
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
02A20:  MOVLW  01
02A22:  MOVLB  5
02A24:  ANDWF  x84,F
02A26:  MOVLB  B
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02A28:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
02A2C:  MOVLW  01
02A2E:  MOVLB  0
02A30:  MOVWF  x7C
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02A32:  MOVFF  582,7D
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02A36:  MOVFF  583,7E
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02A3A:  MOVFF  584,7F
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
02A3E:  MOVLB  B
02A40:  CLRF   x59
02A42:  MOVLW  7B
02A44:  MOVWF  x58
02A46:  MOVLW  05
02A48:  MOVWF  x5A
02A4A:  MOVLB  0
02A4C:  CALL   1F64
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
02A50:  MOVFF  57B,80
....................                   TxD_Buff[6] = CRC_Lo ;
02A54:  MOVFF  57A,81
.................... 
.................... 
....................                   output_bit(P485ctrl,1);
02A58:  BSF    F8A.3
02A5A:  BCF    F93.3
....................                   restart_wdt();
02A5C:  CLRWDT
....................                   delay_ms(4);
02A5E:  MOVLW  04
02A60:  MOVLB  B
02A62:  MOVWF  x57
02A64:  MOVLB  0
02A66:  CALL   077C
....................                   restart_wdt();
02A6A:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02A6C:  MOVF   x7B,W
02A6E:  CALL   1FBA
....................                   putc(TxD_Buff[1]) ;               //Function Code
02A72:  MOVF   x7C,W
02A74:  CALL   1FBA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02A78:  MOVF   x7D,W
02A7A:  CALL   1FBA
....................                   putc(TxD_Buff[3]) ;
02A7E:  MOVF   x7E,W
02A80:  CALL   1FBA
....................                   putc(TxD_Buff[4]) ;
02A84:  MOVF   x7F,W
02A86:  CALL   1FBA
....................                   putc(TxD_Buff[5]) ;
02A8A:  MOVF   x80,W
02A8C:  CALL   1FBA
....................                   putc(TxD_Buff[6]) ;
02A90:  MOVF   x81,W
02A92:  CALL   1FBA
.................... 
.................... 
....................                   restart_wdt();
02A96:  CLRWDT
....................                   delay_ms(3);
02A98:  MOVLW  03
02A9A:  MOVLB  B
02A9C:  MOVWF  x57
02A9E:  MOVLB  0
02AA0:  CALL   077C
....................                   restart_wdt();
02AA4:  CLRWDT
....................                   output_bit(P485ctrl,0);
02AA6:  BCF    F8A.3
02AA8:  BCF    F93.3
02AAA:  MOVLB  5
....................               
....................                }
....................             }
02AAC:  BRA    2B1E
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
02AAE:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x81 ;         //Function Code
02AB2:  MOVLW  81
02AB4:  MOVLB  0
02AB6:  MOVWF  x7C
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
02AB8:  MOVLW  02
02ABA:  MOVWF  x7D
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
02ABC:  MOVLB  B
02ABE:  CLRF   x59
02AC0:  MOVLW  7B
02AC2:  MOVWF  x58
02AC4:  MOVLW  03
02AC6:  MOVWF  x5A
02AC8:  MOVLB  0
02ACA:  CALL   1F64
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
02ACE:  MOVFF  57B,7E
....................                TxD_Buff[4] = CRC_Lo ;
02AD2:  MOVFF  57A,7F
.................... 
....................                output_bit(P485ctrl,1);
02AD6:  BSF    F8A.3
02AD8:  BCF    F93.3
....................                restart_wdt();
02ADA:  CLRWDT
....................                delay_ms(4);
02ADC:  MOVLW  04
02ADE:  MOVLB  B
02AE0:  MOVWF  x57
02AE2:  MOVLB  0
02AE4:  CALL   077C
....................                restart_wdt();
02AE8:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
02AEA:  MOVF   x7B,W
02AEC:  CALL   1FBA
....................                putc(TxD_Buff[1]) ;               //Function Code
02AF0:  MOVF   x7C,W
02AF2:  CALL   1FBA
....................                putc(TxD_Buff[2]) ;               //Byte Count
02AF6:  MOVF   x7D,W
02AF8:  CALL   1FBA
....................                putc(TxD_Buff[3]) ;
02AFC:  MOVF   x7E,W
02AFE:  CALL   1FBA
....................                putc(TxD_Buff[4]) ;
02B02:  MOVF   x7F,W
02B04:  CALL   1FBA
.................... 
.................... 
....................                restart_wdt();
02B08:  CLRWDT
....................                delay_ms(3);
02B0A:  MOVLW  03
02B0C:  MOVLB  B
02B0E:  MOVWF  x57
02B10:  MOVLB  0
02B12:  CALL   077C
....................                restart_wdt();
02B16:  CLRWDT
....................                output_bit(P485ctrl,0);
02B18:  BCF    F8A.3
02B1A:  BCF    F93.3
02B1C:  MOVLB  5
02B1E:  MOVLB  1
....................                
....................             }
....................          }
.................... ////\*/
.................... 
.................... 
....................                  /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
02B20:  MOVF   x7B,W
02B22:  SUBLW  07
02B24:  BTFSS  FD8.2
02B26:  BRA    2C8A
....................       {
....................          alarmtosend();
02B28:  MOVLB  0
02B2A:  GOTO   1FC2
....................          
....................          disable_interrupts(INT_TIMER2);
02B2E:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
02B30:  MOVFF  1E,583
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
02B34:  MOVFF  1F,584
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
02B38:  MOVFF  20,585
....................             Data_Buff[3] = Input25_32_Send ;
02B3C:  MOVFF  21,586
....................             Data_Buff[4] = Input33_40_Send ;
02B40:  MOVFF  22,587
....................             Data_Buff[5] = Input41_48_Send ;
02B44:  MOVFF  23,588
....................             Data_Buff[6] = Input49_56_Send ;
02B48:  MOVFF  24,589
....................             Data_Buff[7] = Input57_64_Send ;
02B4C:  MOVFF  25,58A
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
02B50:  MOVFF  26,58B
....................             Data_Buff[9] = Ack9_16_Send ;
02B54:  MOVFF  27,58C
....................             Data_Buff[10] = Ack17_24_Send ;
02B58:  MOVFF  28,58D
....................             Data_Buff[11] = Ack25_32_Send ;
02B5C:  MOVFF  29,58E
....................             Data_Buff[12] = Ack33_40_Send ;
02B60:  MOVFF  2A,58F
....................             Data_Buff[13] = Ack41_48_Send ;
02B64:  MOVFF  2B,590
....................             Data_Buff[14] = Ack49_56_Send ;
02B68:  MOVFF  2C,591
....................             Data_Buff[15] = Ack57_64_Send ;
02B6C:  MOVFF  2D,592
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
02B70:  MOVFF  79,7B
....................             TxD_Buff[1] = 0x07 ;         //Function Code
02B74:  MOVLW  07
02B76:  MOVWF  x7C
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
02B78:  MOVLW  10
02B7A:  MOVLB  5
02B7C:  MOVWF  x82
02B7E:  MOVFF  582,7D
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02B82:  MOVFF  583,7E
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02B86:  MOVFF  584,7F
....................             TxD_Buff[5] = Data_Buff[2] ;  
02B8A:  MOVFF  585,80
....................             TxD_Buff[6] = Data_Buff[3] ;
02B8E:  MOVFF  586,81
....................             TxD_Buff[7] = Data_Buff[4] ;
02B92:  MOVFF  587,82
....................             TxD_Buff[8] = Data_Buff[5] ;
02B96:  MOVFF  588,83
....................             TxD_Buff[9] = Data_Buff[6] ;
02B9A:  MOVFF  589,84
....................             TxD_Buff[10] = Data_Buff[7] ;
02B9E:  MOVFF  58A,85
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
02BA2:  MOVFF  58B,86
....................            TxD_Buff[12] = Data_Buff[9] ;
02BA6:  MOVFF  58C,87
....................            TxD_Buff[13] = Data_Buff[10] ;
02BAA:  MOVFF  58D,88
....................            TxD_Buff[14] = Data_Buff[11] ;
02BAE:  MOVFF  58E,89
....................            TxD_Buff[15] = Data_Buff[12] ;
02BB2:  MOVFF  58F,8A
....................            TxD_Buff[16] = Data_Buff[13] ;
02BB6:  MOVFF  590,8B
....................            TxD_Buff[17] = Data_Buff[14] ;
02BBA:  MOVFF  591,8C
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
02BBE:  MOVFF  592,8D
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
02BC2:  MOVLB  B
02BC4:  CLRF   x59
02BC6:  MOVLW  7B
02BC8:  MOVWF  x58
02BCA:  MOVLW  13
02BCC:  MOVWF  x5A
02BCE:  MOVLB  0
02BD0:  CALL   1F64
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
02BD4:  MOVFF  57B,8E
....................           TxD_Buff[20] = CRC_Lo ;
02BD8:  MOVFF  57A,8F
.................... 
....................         
....................          output_bit(P485ctrl,1);
02BDC:  BSF    F8A.3
02BDE:  BCF    F93.3
....................          restart_wdt();
02BE0:  CLRWDT
....................          delay_ms(4);
02BE2:  MOVLW  04
02BE4:  MOVLB  B
02BE6:  MOVWF  x57
02BE8:  MOVLB  0
02BEA:  CALL   077C
....................          restart_wdt();
02BEE:  CLRWDT
....................          
....................          
....................          
....................          putc(TxD_Buff[0]) ;               //Address
02BF0:  MOVF   x7B,W
02BF2:  CALL   1FBA
....................          putc(TxD_Buff[1]) ;               //Function Code
02BF6:  MOVF   x7C,W
02BF8:  CALL   1FBA
....................          putc(TxD_Buff[2]) ;               //Byte Count
02BFC:  MOVF   x7D,W
02BFE:  CALL   1FBA
....................          putc(TxD_Buff[3]) ;
02C02:  MOVF   x7E,W
02C04:  CALL   1FBA
....................          putc(TxD_Buff[4]) ;
02C08:  MOVF   x7F,W
02C0A:  CALL   1FBA
....................          putc(TxD_Buff[5]) ;
02C0E:  MOVF   x80,W
02C10:  CALL   1FBA
....................          putc(TxD_Buff[6]) ;
02C14:  MOVF   x81,W
02C16:  CALL   1FBA
....................          putc(TxD_Buff[7]) ;
02C1A:  MOVF   x82,W
02C1C:  CALL   1FBA
....................          putc(TxD_Buff[8]) ;
02C20:  MOVF   x83,W
02C22:  CALL   1FBA
....................          putc(TxD_Buff[9]) ;
02C26:  MOVF   x84,W
02C28:  CALL   1FBA
....................          putc(TxD_Buff[10]) ;
02C2C:  MOVF   x85,W
02C2E:  CALL   1FBA
....................          putc(TxD_Buff[11]) ;
02C32:  MOVF   x86,W
02C34:  CALL   1FBA
....................          putc(TxD_Buff[12]) ;
02C38:  MOVF   x87,W
02C3A:  CALL   1FBA
....................          putc(TxD_Buff[13]) ;
02C3E:  MOVF   x88,W
02C40:  CALL   1FBA
....................          putc(TxD_Buff[14]) ;
02C44:  MOVF   x89,W
02C46:  CALL   1FBA
....................          putc(TxD_Buff[15]) ;
02C4A:  MOVF   x8A,W
02C4C:  CALL   1FBA
....................          putc(TxD_Buff[16]) ;
02C50:  MOVF   x8B,W
02C52:  CALL   1FBA
....................          putc(TxD_Buff[17]) ;
02C56:  MOVF   x8C,W
02C58:  CALL   1FBA
....................          putc(TxD_Buff[18]) ;
02C5C:  MOVF   x8D,W
02C5E:  CALL   1FBA
....................          putc(TxD_Buff[19]) ;
02C62:  MOVF   x8E,W
02C64:  CALL   1FBA
....................          putc(TxD_Buff[20]) ;
02C68:  MOVF   x8F,W
02C6A:  CALL   1FBA
.................... 
....................          restart_wdt();
02C6E:  CLRWDT
....................          delay_ms(3);
02C70:  MOVLW  03
02C72:  MOVLB  B
02C74:  MOVWF  x57
02C76:  MOVLB  0
02C78:  CALL   077C
....................          restart_wdt();
02C7C:  CLRWDT
....................          output_bit(P485ctrl,0);
02C7E:  BCF    F8A.3
02C80:  BCF    F93.3
....................            
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
02C82:  BSF    F9D.1
....................      
....................        }
02C84:  GOTO   43EC
02C88:  MOVLB  1
....................       /////////////////////////////////////////////////////////////////
.................... 
....................        else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
02C8A:  MOVF   x7B,W
02C8C:  SUBLW  05
02C8E:  BTFSS  FD8.2
02C90:  BRA    317E
....................          {
....................             //Do Force Coil
....................             Start_Address = RxD_Buff[2] ;
02C92:  MOVLB  5
02C94:  CLRF   x7F
02C96:  MOVFF  17C,57E
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
02C9A:  MOVFF  57E,57F
02C9E:  MOVLB  B
02CA0:  CLRF   x57
02CA2:  MOVF   x57,W
02CA4:  MOVLB  1
02CA6:  IORWF  x7D,W
02CA8:  MOVLB  5
02CAA:  MOVWF  x7E
02CAC:  MOVLB  5
....................             No_PointCount = RxD_Buff[4] ;
02CAE:  CLRF   x81
02CB0:  MOVFF  17E,580
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
02CB4:  MOVFF  580,581
02CB8:  MOVLB  B
02CBA:  CLRF   x57
02CBC:  MOVF   x57,W
02CBE:  MOVLB  1
02CC0:  IORWF  x7F,W
02CC2:  MOVLB  5
02CC4:  MOVWF  x80
02CC6:  MOVLB  5
.................... 
....................             if(Start_Address == 0x00)   ////// Acknowlegde //////
02CC8:  MOVF   x7E,F
02CCA:  BNZ   2D6A
02CCC:  MOVF   x7F,F
02CCE:  BNZ   2D6A
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02CD0:  MOVF   x80,F
02CD2:  BNZ   2D68
02CD4:  INCFSZ x81,W
02CD6:  BRA    2D68
....................                {
....................                   //Modbus_ACK = 1 ;
....................                   AutoAckFlag = 1;
02CD8:  BSF    1A.2
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02CDA:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02CDE:  MOVLW  05
02CE0:  MOVLB  0
02CE2:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02CE4:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02CE8:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02CEC:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02CF0:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02CF4:  MOVLB  B
02CF6:  CLRF   x59
02CF8:  MOVLW  7B
02CFA:  MOVWF  x58
02CFC:  MOVLW  06
02CFE:  MOVWF  x5A
02D00:  MOVLB  0
02D02:  CALL   1F64
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02D06:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02D0A:  MOVFF  57A,82
.................... 
....................                   output_bit(P485ctrl,1);
02D0E:  BSF    F8A.3
02D10:  BCF    F93.3
....................                   restart_wdt();
02D12:  CLRWDT
....................                   delay_ms(4);
02D14:  MOVLW  04
02D16:  MOVLB  B
02D18:  MOVWF  x57
02D1A:  MOVLB  0
02D1C:  CALL   077C
....................                   restart_wdt();
02D20:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02D22:  MOVF   x7B,W
02D24:  CALL   1FBA
....................                   putc(TxD_Buff[1]) ;               //Function Code
02D28:  MOVF   x7C,W
02D2A:  CALL   1FBA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02D2E:  MOVF   x7D,W
02D30:  CALL   1FBA
....................                   putc(TxD_Buff[3]) ;
02D34:  MOVF   x7E,W
02D36:  CALL   1FBA
....................                   putc(TxD_Buff[4]) ;
02D3A:  MOVF   x7F,W
02D3C:  CALL   1FBA
....................                   putc(TxD_Buff[5]) ;
02D40:  MOVF   x80,W
02D42:  CALL   1FBA
....................                   putc(TxD_Buff[6]) ;
02D46:  MOVF   x81,W
02D48:  CALL   1FBA
....................                   putc(TxD_Buff[7]) ;
02D4C:  MOVF   x82,W
02D4E:  CALL   1FBA
.................... 
.................... 
....................                   restart_wdt();
02D52:  CLRWDT
....................                   delay_ms(3);
02D54:  MOVLW  03
02D56:  MOVLB  B
02D58:  MOVWF  x57
02D5A:  MOVLB  0
02D5C:  CALL   077C
....................                   restart_wdt();
02D60:  CLRWDT
....................                   output_bit(P485ctrl,0);
02D62:  BCF    F8A.3
02D64:  BCF    F93.3
02D66:  MOVLB  5
....................               
....................                }
....................             }
02D68:  BRA    3178
....................             else if(Start_Address == 0x01)   ///// Reset //////
02D6A:  DECFSZ x7E,W
02D6C:  BRA    2E0C
02D6E:  MOVF   x7F,F
02D70:  BNZ   2E0C
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02D72:  MOVF   x80,F
02D74:  BNZ   2E0A
02D76:  INCFSZ x81,W
02D78:  BRA    2E0A
....................                {
....................                   //Modbus_RET = 1 ;
....................                   AutoResetFlag = 1;
02D7A:  BSF    1A.3
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
02D7C:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02D80:  MOVLW  05
02D82:  MOVLB  0
02D84:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02D86:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02D8A:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02D8E:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02D92:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02D96:  MOVLB  B
02D98:  CLRF   x59
02D9A:  MOVLW  7B
02D9C:  MOVWF  x58
02D9E:  MOVLW  06
02DA0:  MOVWF  x5A
02DA2:  MOVLB  0
02DA4:  CALL   1F64
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02DA8:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02DAC:  MOVFF  57A,82
.................... 
.................... 
....................               output_bit(P485ctrl,1);
02DB0:  BSF    F8A.3
02DB2:  BCF    F93.3
....................                   restart_wdt();
02DB4:  CLRWDT
....................                   delay_ms(4);
02DB6:  MOVLW  04
02DB8:  MOVLB  B
02DBA:  MOVWF  x57
02DBC:  MOVLB  0
02DBE:  CALL   077C
....................                   restart_wdt();
02DC2:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02DC4:  MOVF   x7B,W
02DC6:  CALL   1FBA
....................                   putc(TxD_Buff[1]) ;               //Function Code
02DCA:  MOVF   x7C,W
02DCC:  CALL   1FBA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02DD0:  MOVF   x7D,W
02DD2:  CALL   1FBA
....................                   putc(TxD_Buff[3]) ;
02DD6:  MOVF   x7E,W
02DD8:  CALL   1FBA
....................                   putc(TxD_Buff[4]) ;
02DDC:  MOVF   x7F,W
02DDE:  CALL   1FBA
....................                   putc(TxD_Buff[5]) ;
02DE2:  MOVF   x80,W
02DE4:  CALL   1FBA
....................                   putc(TxD_Buff[6]) ;
02DE8:  MOVF   x81,W
02DEA:  CALL   1FBA
....................                   putc(TxD_Buff[7]) ;
02DEE:  MOVF   x82,W
02DF0:  CALL   1FBA
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02DF4:  CLRWDT
....................                   delay_ms(3);
02DF6:  MOVLW  03
02DF8:  MOVLB  B
02DFA:  MOVWF  x57
02DFC:  MOVLB  0
02DFE:  CALL   077C
....................                   restart_wdt();
02E02:  CLRWDT
....................                   output_bit(P485ctrl,0);
02E04:  BCF    F8A.3
02E06:  BCF    F93.3
02E08:  MOVLB  5
....................               
....................                }
....................             }
02E0A:  BRA    3178
....................             else if(Start_Address == 0x02)   ///// Test //////
02E0C:  MOVF   x7E,W
02E0E:  SUBLW  02
02E10:  BTFSS  FD8.2
02E12:  BRA    2F5E
02E14:  MOVF   x7F,F
02E16:  BTFSS  FD8.2
02E18:  BRA    2F5E
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02E1A:  MOVF   x80,F
02E1C:  BNZ   2EB4
02E1E:  INCFSZ x81,W
02E20:  BRA    2EB4
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   AutoTestFlag = 1;
02E22:  BSF    1A.4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02E24:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02E28:  MOVLW  05
02E2A:  MOVLB  0
02E2C:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02E2E:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02E32:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02E36:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02E3A:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02E3E:  MOVLB  B
02E40:  CLRF   x59
02E42:  MOVLW  7B
02E44:  MOVWF  x58
02E46:  MOVLW  06
02E48:  MOVWF  x5A
02E4A:  MOVLB  0
02E4C:  CALL   1F64
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02E50:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02E54:  MOVFF  57A,82
.................... 
....................                   output_bit(P485ctrl,1);
02E58:  BSF    F8A.3
02E5A:  BCF    F93.3
....................                   restart_wdt();
02E5C:  CLRWDT
....................                   delay_ms(4);
02E5E:  MOVLW  04
02E60:  MOVLB  B
02E62:  MOVWF  x57
02E64:  MOVLB  0
02E66:  CALL   077C
....................                   restart_wdt();
02E6A:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02E6C:  MOVF   x7B,W
02E6E:  CALL   1FBA
....................                   putc(TxD_Buff[1]) ;               //Function Code
02E72:  MOVF   x7C,W
02E74:  CALL   1FBA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02E78:  MOVF   x7D,W
02E7A:  CALL   1FBA
....................                   putc(TxD_Buff[3]) ;
02E7E:  MOVF   x7E,W
02E80:  CALL   1FBA
....................                   putc(TxD_Buff[4]) ;
02E84:  MOVF   x7F,W
02E86:  CALL   1FBA
....................                   putc(TxD_Buff[5]) ;
02E8A:  MOVF   x80,W
02E8C:  CALL   1FBA
....................                   putc(TxD_Buff[6]) ;
02E90:  MOVF   x81,W
02E92:  CALL   1FBA
....................                   putc(TxD_Buff[7]) ;
02E96:  MOVF   x82,W
02E98:  CALL   1FBA
.................... 
....................                   restart_wdt();
02E9C:  CLRWDT
....................                   delay_ms(3);
02E9E:  MOVLW  03
02EA0:  MOVLB  B
02EA2:  MOVWF  x57
02EA4:  MOVLB  0
02EA6:  CALL   077C
....................                   restart_wdt();
02EAA:  CLRWDT
....................                   output_bit(P485ctrl,0);
02EAC:  BCF    F8A.3
02EAE:  BCF    F93.3
....................              
....................                }
02EB0:  BRA    2F5A
02EB2:  MOVLB  5
....................                else if(No_PointCount == 0x00)   //OFF
02EB4:  MOVF   x80,F
02EB6:  BNZ   2F5C
02EB8:  MOVF   x81,F
02EBA:  BNZ   2F5C
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   AutoTestFlag = 0;
02EBC:  BCF    1A.4
....................                   Read_input();
02EBE:  MOVLB  0
02EC0:  CALL   15F4
....................                   AutoAckFlag = 1;
02EC4:  BSF    1A.2
....................                   check_ack();
02EC6:  CALL   216C
....................                   AutoResetFlag = 1;
02ECA:  BSF    1A.3
....................                   check_reset();
02ECC:  CALL   2250
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02ED0:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02ED4:  MOVLW  05
02ED6:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02ED8:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02EDC:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02EE0:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02EE4:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02EE8:  MOVLB  B
02EEA:  CLRF   x59
02EEC:  MOVLW  7B
02EEE:  MOVWF  x58
02EF0:  MOVLW  06
02EF2:  MOVWF  x5A
02EF4:  MOVLB  0
02EF6:  CALL   1F64
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02EFA:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02EFE:  MOVFF  57A,82
.................... 
....................                   output_bit(P485ctrl,1);
02F02:  BSF    F8A.3
02F04:  BCF    F93.3
....................                   restart_wdt();
02F06:  CLRWDT
....................                   delay_ms(4);
02F08:  MOVLW  04
02F0A:  MOVLB  B
02F0C:  MOVWF  x57
02F0E:  MOVLB  0
02F10:  CALL   077C
....................                   restart_wdt();
02F14:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02F16:  MOVF   x7B,W
02F18:  CALL   1FBA
....................                   putc(TxD_Buff[1]) ;               //Function Code
02F1C:  MOVF   x7C,W
02F1E:  CALL   1FBA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02F22:  MOVF   x7D,W
02F24:  CALL   1FBA
....................                   putc(TxD_Buff[3]) ;
02F28:  MOVF   x7E,W
02F2A:  CALL   1FBA
....................                   putc(TxD_Buff[4]) ;
02F2E:  MOVF   x7F,W
02F30:  CALL   1FBA
....................                   putc(TxD_Buff[5]) ;
02F34:  MOVF   x80,W
02F36:  CALL   1FBA
....................                   putc(TxD_Buff[6]) ;
02F3A:  MOVF   x81,W
02F3C:  CALL   1FBA
....................                   putc(TxD_Buff[7]) ;
02F40:  MOVF   x82,W
02F42:  CALL   1FBA
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02F46:  CLRWDT
....................                   delay_ms(3);
02F48:  MOVLW  03
02F4A:  MOVLB  B
02F4C:  MOVWF  x57
02F4E:  MOVLB  0
02F50:  CALL   077C
....................                   restart_wdt();
02F54:  CLRWDT
....................                   output_bit(P485ctrl,0);
02F56:  BCF    F8A.3
02F58:  BCF    F93.3
02F5A:  MOVLB  5
....................                   
....................                }
....................             }
02F5C:  BRA    3178
....................             else if(Start_Address == 0x03)   ///// Function Test //////
02F5E:  MOVF   x7E,W
02F60:  SUBLW  03
02F62:  BTFSS  FD8.2
02F64:  BRA    30B0
02F66:  MOVF   x7F,F
02F68:  BTFSS  FD8.2
02F6A:  BRA    30B0
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02F6C:  MOVF   x80,F
02F6E:  BNZ   3006
02F70:  INCFSZ x81,W
02F72:  BRA    3006
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   test_fault = 1 ;
02F74:  BSF    1A.5
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02F76:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02F7A:  MOVLW  05
02F7C:  MOVLB  0
02F7E:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02F80:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02F84:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02F88:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02F8C:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02F90:  MOVLB  B
02F92:  CLRF   x59
02F94:  MOVLW  7B
02F96:  MOVWF  x58
02F98:  MOVLW  06
02F9A:  MOVWF  x5A
02F9C:  MOVLB  0
02F9E:  CALL   1F64
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02FA2:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02FA6:  MOVFF  57A,82
.................... 
....................                  output_bit(P485ctrl,1);
02FAA:  BSF    F8A.3
02FAC:  BCF    F93.3
....................                   restart_wdt();
02FAE:  CLRWDT
....................                   delay_ms(4);
02FB0:  MOVLW  04
02FB2:  MOVLB  B
02FB4:  MOVWF  x57
02FB6:  MOVLB  0
02FB8:  CALL   077C
....................                   restart_wdt();
02FBC:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02FBE:  MOVF   x7B,W
02FC0:  CALL   1FBA
....................                   putc(TxD_Buff[1]) ;               //Function Code
02FC4:  MOVF   x7C,W
02FC6:  CALL   1FBA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02FCA:  MOVF   x7D,W
02FCC:  CALL   1FBA
....................                   putc(TxD_Buff[3]) ;
02FD0:  MOVF   x7E,W
02FD2:  CALL   1FBA
....................                   putc(TxD_Buff[4]) ;
02FD6:  MOVF   x7F,W
02FD8:  CALL   1FBA
....................                   putc(TxD_Buff[5]) ;
02FDC:  MOVF   x80,W
02FDE:  CALL   1FBA
....................                   putc(TxD_Buff[6]) ;
02FE2:  MOVF   x81,W
02FE4:  CALL   1FBA
....................                   putc(TxD_Buff[7]) ;
02FE8:  MOVF   x82,W
02FEA:  CALL   1FBA
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02FEE:  CLRWDT
....................                   delay_ms(10);
02FF0:  MOVLW  0A
02FF2:  MOVLB  B
02FF4:  MOVWF  x57
02FF6:  MOVLB  0
02FF8:  CALL   077C
....................                   restart_wdt();
02FFC:  CLRWDT
....................                   output_bit(P485ctrl,0);
02FFE:  BCF    F8A.3
03000:  BCF    F93.3
....................                }
03002:  BRA    30AC
03004:  MOVLB  5
....................                else if(No_PointCount == 0x00)   //OFF
03006:  MOVF   x80,F
03008:  BNZ   30AE
0300A:  MOVF   x81,F
0300C:  BNZ   30AE
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   test_fault = 0;
0300E:  BCF    1A.5
....................                   Read_input();
03010:  MOVLB  0
03012:  CALL   15F4
....................                   AutoAckFlag = 1;
03016:  BSF    1A.2
....................                   check_ack();
03018:  CALL   216C
....................                   AutoResetFlag = 1;
0301C:  BSF    1A.3
....................                   check_reset();
0301E:  CALL   2250
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
03022:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
03026:  MOVLW  05
03028:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0302A:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0302E:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03032:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03036:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0303A:  MOVLB  B
0303C:  CLRF   x59
0303E:  MOVLW  7B
03040:  MOVWF  x58
03042:  MOVLW  06
03044:  MOVWF  x5A
03046:  MOVLB  0
03048:  CALL   1F64
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0304C:  MOVFF  57B,81
....................                   TxD_Buff[7] = CRC_Lo ;
03050:  MOVFF  57A,82
.................... 
....................                   output_bit(P485ctrl,1);
03054:  BSF    F8A.3
03056:  BCF    F93.3
....................                   restart_wdt();
03058:  CLRWDT
....................                   delay_ms(4);
0305A:  MOVLW  04
0305C:  MOVLB  B
0305E:  MOVWF  x57
03060:  MOVLB  0
03062:  CALL   077C
....................                   restart_wdt();
03066:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
03068:  MOVF   x7B,W
0306A:  CALL   1FBA
....................                   putc(TxD_Buff[1]) ;               //Function Code
0306E:  MOVF   x7C,W
03070:  CALL   1FBA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03074:  MOVF   x7D,W
03076:  CALL   1FBA
....................                   putc(TxD_Buff[3]) ;
0307A:  MOVF   x7E,W
0307C:  CALL   1FBA
....................                   putc(TxD_Buff[4]) ;
03080:  MOVF   x7F,W
03082:  CALL   1FBA
....................                   putc(TxD_Buff[5]) ;
03086:  MOVF   x80,W
03088:  CALL   1FBA
....................                   putc(TxD_Buff[6]) ;
0308C:  MOVF   x81,W
0308E:  CALL   1FBA
....................                   putc(TxD_Buff[7]) ;
03092:  MOVF   x82,W
03094:  CALL   1FBA
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
03098:  CLRWDT
....................                   delay_ms(3);
0309A:  MOVLW  03
0309C:  MOVLB  B
0309E:  MOVWF  x57
030A0:  MOVLB  0
030A2:  CALL   077C
....................                   restart_wdt();
030A6:  CLRWDT
....................                   output_bit(P485ctrl,0);
030A8:  BCF    F8A.3
030AA:  BCF    F93.3
030AC:  MOVLB  5
....................                   
....................                }
....................             }
030AE:  BRA    3178
....................             else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
030B0:  MOVF   x7E,W
030B2:  SUBLW  64
030B4:  BNZ   3178
030B6:  MOVF   x7F,F
030B8:  BNZ   3178
....................             {
....................                Address = No_PointCount;
030BA:  MOVFF  580,79
....................                write_eeprom(0x1D,Address);   //Communication Address
030BE:  MOVF   FF2,W
030C0:  MOVWF  00
030C2:  BCF    FF2.7
030C4:  CLRF   FAA
030C6:  MOVLW  1D
030C8:  MOVWF  FA9
030CA:  MOVFF  79,FA8
030CE:  BCF    FA6.6
030D0:  BCF    FA6.7
030D2:  BSF    FA6.2
030D4:  MOVLB  F
030D6:  MOVLW  55
030D8:  MOVWF  FA7
030DA:  MOVLW  AA
030DC:  MOVWF  FA7
030DE:  BSF    FA6.1
030E0:  BTFSC  FA6.1
030E2:  BRA    30E0
030E4:  BCF    FA6.2
030E6:  MOVF   00,W
030E8:  IORWF  FF2,F
....................                
....................                TxD_Buff[0] = Address ;         //Address
030EA:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x05 ;         //Function Code
030EE:  MOVLW  05
030F0:  MOVLB  0
030F2:  MOVWF  x7C
....................                TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
030F4:  MOVFF  17C,7D
....................                TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
030F8:  MOVFF  17D,7E
....................                TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
030FC:  MOVFF  17E,7F
....................                TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03100:  MOVFF  17F,80
.................... 
....................                CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03104:  MOVLB  B
03106:  CLRF   x59
03108:  MOVLW  7B
0310A:  MOVWF  x58
0310C:  MOVLW  06
0310E:  MOVWF  x5A
03110:  MOVLB  0
03112:  CALL   1F64
.................... 
....................                TxD_Buff[6] = CRC_Hi ;
03116:  MOVFF  57B,81
....................                TxD_Buff[7] = CRC_Lo ;
0311A:  MOVFF  57A,82
.................... 
....................                output_bit(P485ctrl,1);
0311E:  BSF    F8A.3
03120:  BCF    F93.3
....................                restart_wdt();
03122:  CLRWDT
....................                delay_ms(4);
03124:  MOVLW  04
03126:  MOVLB  B
03128:  MOVWF  x57
0312A:  MOVLB  0
0312C:  CALL   077C
....................                restart_wdt();
03130:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
03132:  MOVF   x7B,W
03134:  CALL   1FBA
....................                putc(TxD_Buff[1]) ;               //Function Code
03138:  MOVF   x7C,W
0313A:  CALL   1FBA
....................                putc(TxD_Buff[2]) ;               //Byte Count
0313E:  MOVF   x7D,W
03140:  CALL   1FBA
....................                putc(TxD_Buff[3]) ;
03144:  MOVF   x7E,W
03146:  CALL   1FBA
....................                putc(TxD_Buff[4]) ;
0314A:  MOVF   x7F,W
0314C:  CALL   1FBA
....................                putc(TxD_Buff[5]) ;
03150:  MOVF   x80,W
03152:  CALL   1FBA
....................                putc(TxD_Buff[6]) ;
03156:  MOVF   x81,W
03158:  CALL   1FBA
....................                putc(TxD_Buff[7]) ;
0315C:  MOVF   x82,W
0315E:  CALL   1FBA
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
03162:  CLRWDT
....................                delay_ms(3);
03164:  MOVLW  03
03166:  MOVLB  B
03168:  MOVWF  x57
0316A:  MOVLB  0
0316C:  CALL   077C
....................                restart_wdt();
03170:  CLRWDT
....................                output_bit(P485ctrl,0);
03172:  BCF    F8A.3
03174:  BCF    F93.3
03176:  MOVLB  5
.................... 
.................... 
....................                //save_addr();
....................             }
....................          }
03178:  GOTO   43EE
0317C:  MOVLB  1
....................          //--------------------------------------------------//
.................... 
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
0317E:  MOVF   x7B,W
03180:  SUBLW  21
03182:  BTFSS  FD8.2
03184:  GOTO   3AEC
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
03188:  MOVF   FF2,W
0318A:  MOVWF  00
0318C:  BCF    FF2.7
0318E:  CLRF   FAA
03190:  CLRF   FA9
03192:  MOVLW  0F
03194:  MOVWF  FA8
03196:  BCF    FA6.6
03198:  BCF    FA6.7
0319A:  BSF    FA6.2
0319C:  MOVLB  F
0319E:  MOVLW  55
031A0:  MOVWF  FA7
031A2:  MOVLW  AA
031A4:  MOVWF  FA7
031A6:  BSF    FA6.1
031A8:  BTFSC  FA6.1
031AA:  BRA    31A8
031AC:  BCF    FA6.2
031AE:  MOVF   00,W
031B0:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Inputt Type
031B2:  MOVFF  FF2,00
031B6:  BCF    FF2.7
031B8:  CLRF   FAA
031BA:  MOVLW  01
031BC:  MOVWF  FA9
031BE:  MOVFF  17D,FA8
031C2:  BCF    FA6.6
031C4:  BCF    FA6.7
031C6:  BSF    FA6.2
031C8:  MOVLW  55
031CA:  MOVWF  FA7
031CC:  MOVLW  AA
031CE:  MOVWF  FA7
031D0:  BSF    FA6.1
031D2:  BTFSC  FA6.1
031D4:  BRA    31D2
031D6:  BCF    FA6.2
031D8:  MOVF   00,W
031DA:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
031DC:  MOVFF  FF2,00
031E0:  BCF    FF2.7
031E2:  CLRF   FAA
031E4:  MOVLW  02
031E6:  MOVWF  FA9
031E8:  MOVFF  17E,FA8
031EC:  BCF    FA6.6
031EE:  BCF    FA6.7
031F0:  BSF    FA6.2
031F2:  MOVLW  55
031F4:  MOVWF  FA7
031F6:  MOVLW  AA
031F8:  MOVWF  FA7
031FA:  BSF    FA6.1
031FC:  BTFSC  FA6.1
031FE:  BRA    31FC
03200:  BCF    FA6.2
03202:  MOVF   00,W
03204:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
03206:  MOVFF  FF2,00
0320A:  BCF    FF2.7
0320C:  CLRF   FAA
0320E:  MOVLW  03
03210:  MOVWF  FA9
03212:  MOVFF  17F,FA8
03216:  BCF    FA6.6
03218:  BCF    FA6.7
0321A:  BSF    FA6.2
0321C:  MOVLW  55
0321E:  MOVWF  FA7
03220:  MOVLW  AA
03222:  MOVWF  FA7
03224:  BSF    FA6.1
03226:  BTFSC  FA6.1
03228:  BRA    3226
0322A:  BCF    FA6.2
0322C:  MOVF   00,W
0322E:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
03230:  MOVFF  FF2,00
03234:  BCF    FF2.7
03236:  CLRF   FAA
03238:  MOVLW  04
0323A:  MOVWF  FA9
0323C:  MOVFF  180,FA8
03240:  BCF    FA6.6
03242:  BCF    FA6.7
03244:  BSF    FA6.2
03246:  MOVLW  55
03248:  MOVWF  FA7
0324A:  MOVLW  AA
0324C:  MOVWF  FA7
0324E:  BSF    FA6.1
03250:  BTFSC  FA6.1
03252:  BRA    3250
03254:  BCF    FA6.2
03256:  MOVF   00,W
03258:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
0325A:  MOVFF  FF2,00
0325E:  BCF    FF2.7
03260:  CLRF   FAA
03262:  MOVLW  05
03264:  MOVWF  FA9
03266:  MOVFF  181,FA8
0326A:  BCF    FA6.6
0326C:  BCF    FA6.7
0326E:  BSF    FA6.2
03270:  MOVLW  55
03272:  MOVWF  FA7
03274:  MOVLW  AA
03276:  MOVWF  FA7
03278:  BSF    FA6.1
0327A:  BTFSC  FA6.1
0327C:  BRA    327A
0327E:  BCF    FA6.2
03280:  MOVF   00,W
03282:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
03284:  MOVFF  FF2,00
03288:  BCF    FF2.7
0328A:  CLRF   FAA
0328C:  MOVLW  06
0328E:  MOVWF  FA9
03290:  MOVFF  182,FA8
03294:  BCF    FA6.6
03296:  BCF    FA6.7
03298:  BSF    FA6.2
0329A:  MOVLW  55
0329C:  MOVWF  FA7
0329E:  MOVLW  AA
032A0:  MOVWF  FA7
032A2:  BSF    FA6.1
032A4:  BTFSC  FA6.1
032A6:  BRA    32A4
032A8:  BCF    FA6.2
032AA:  MOVF   00,W
032AC:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
032AE:  MOVFF  FF2,00
032B2:  BCF    FF2.7
032B4:  CLRF   FAA
032B6:  MOVLW  07
032B8:  MOVWF  FA9
032BA:  MOVFF  183,FA8
032BE:  BCF    FA6.6
032C0:  BCF    FA6.7
032C2:  BSF    FA6.2
032C4:  MOVLW  55
032C6:  MOVWF  FA7
032C8:  MOVLW  AA
032CA:  MOVWF  FA7
032CC:  BSF    FA6.1
032CE:  BTFSC  FA6.1
032D0:  BRA    32CE
032D2:  BCF    FA6.2
032D4:  MOVF   00,W
032D6:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
032D8:  MOVFF  FF2,00
032DC:  BCF    FF2.7
032DE:  CLRF   FAA
032E0:  MOVLW  08
032E2:  MOVWF  FA9
032E4:  MOVFF  184,FA8
032E8:  BCF    FA6.6
032EA:  BCF    FA6.7
032EC:  BSF    FA6.2
032EE:  MOVLW  55
032F0:  MOVWF  FA7
032F2:  MOVLW  AA
032F4:  MOVWF  FA7
032F6:  BSF    FA6.1
032F8:  BTFSC  FA6.1
032FA:  BRA    32F8
032FC:  BCF    FA6.2
032FE:  MOVF   00,W
03300:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
03302:  MOVFF  FF2,00
03306:  BCF    FF2.7
03308:  CLRF   FAA
0330A:  MOVLW  09
0330C:  MOVWF  FA9
0330E:  MOVFF  185,FA8
03312:  BCF    FA6.6
03314:  BCF    FA6.7
03316:  BSF    FA6.2
03318:  MOVLW  55
0331A:  MOVWF  FA7
0331C:  MOVLW  AA
0331E:  MOVWF  FA7
03320:  BSF    FA6.1
03322:  BTFSC  FA6.1
03324:  BRA    3322
03326:  BCF    FA6.2
03328:  MOVF   00,W
0332A:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
0332C:  MOVFF  FF2,00
03330:  BCF    FF2.7
03332:  CLRF   FAA
03334:  MOVLW  0A
03336:  MOVWF  FA9
03338:  MOVFF  186,FA8
0333C:  BCF    FA6.6
0333E:  BCF    FA6.7
03340:  BSF    FA6.2
03342:  MOVLW  55
03344:  MOVWF  FA7
03346:  MOVLW  AA
03348:  MOVWF  FA7
0334A:  BSF    FA6.1
0334C:  BTFSC  FA6.1
0334E:  BRA    334C
03350:  BCF    FA6.2
03352:  MOVF   00,W
03354:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
03356:  MOVFF  FF2,00
0335A:  BCF    FF2.7
0335C:  CLRF   FAA
0335E:  MOVLW  0B
03360:  MOVWF  FA9
03362:  MOVFF  187,FA8
03366:  BCF    FA6.6
03368:  BCF    FA6.7
0336A:  BSF    FA6.2
0336C:  MOVLW  55
0336E:  MOVWF  FA7
03370:  MOVLW  AA
03372:  MOVWF  FA7
03374:  BSF    FA6.1
03376:  BTFSC  FA6.1
03378:  BRA    3376
0337A:  BCF    FA6.2
0337C:  MOVF   00,W
0337E:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
03380:  MOVFF  FF2,00
03384:  BCF    FF2.7
03386:  CLRF   FAA
03388:  MOVLW  0C
0338A:  MOVWF  FA9
0338C:  MOVFF  188,FA8
03390:  BCF    FA6.6
03392:  BCF    FA6.7
03394:  BSF    FA6.2
03396:  MOVLW  55
03398:  MOVWF  FA7
0339A:  MOVLW  AA
0339C:  MOVWF  FA7
0339E:  BSF    FA6.1
033A0:  BTFSC  FA6.1
033A2:  BRA    33A0
033A4:  BCF    FA6.2
033A6:  MOVF   00,W
033A8:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
033AA:  MOVFF  FF2,00
033AE:  BCF    FF2.7
033B0:  CLRF   FAA
033B2:  MOVLW  0D
033B4:  MOVWF  FA9
033B6:  MOVFF  189,FA8
033BA:  BCF    FA6.6
033BC:  BCF    FA6.7
033BE:  BSF    FA6.2
033C0:  MOVLW  55
033C2:  MOVWF  FA7
033C4:  MOVLW  AA
033C6:  MOVWF  FA7
033C8:  BSF    FA6.1
033CA:  BTFSC  FA6.1
033CC:  BRA    33CA
033CE:  BCF    FA6.2
033D0:  MOVF   00,W
033D2:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
033D4:  MOVFF  FF2,00
033D8:  BCF    FF2.7
033DA:  CLRF   FAA
033DC:  MOVLW  0E
033DE:  MOVWF  FA9
033E0:  MOVFF  18A,FA8
033E4:  BCF    FA6.6
033E6:  BCF    FA6.7
033E8:  BSF    FA6.2
033EA:  MOVLW  55
033EC:  MOVWF  FA7
033EE:  MOVLW  AA
033F0:  MOVWF  FA7
033F2:  BSF    FA6.1
033F4:  BTFSC  FA6.1
033F6:  BRA    33F4
033F8:  BCF    FA6.2
033FA:  MOVF   00,W
033FC:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
033FE:  MOVFF  FF2,00
03402:  BCF    FF2.7
03404:  CLRF   FAA
03406:  MOVLW  0F
03408:  MOVWF  FA9
0340A:  MOVFF  18B,FA8
0340E:  BCF    FA6.6
03410:  BCF    FA6.7
03412:  BSF    FA6.2
03414:  MOVLW  55
03416:  MOVWF  FA7
03418:  MOVLW  AA
0341A:  MOVWF  FA7
0341C:  BSF    FA6.1
0341E:  BTFSC  FA6.1
03420:  BRA    341E
03422:  BCF    FA6.2
03424:  MOVF   00,W
03426:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
03428:  MOVFF  FF2,00
0342C:  BCF    FF2.7
0342E:  CLRF   FAA
03430:  MOVLW  10
03432:  MOVWF  FA9
03434:  MOVFF  18C,FA8
03438:  BCF    FA6.6
0343A:  BCF    FA6.7
0343C:  BSF    FA6.2
0343E:  MOVLW  55
03440:  MOVWF  FA7
03442:  MOVLW  AA
03444:  MOVWF  FA7
03446:  BSF    FA6.1
03448:  BTFSC  FA6.1
0344A:  BRA    3448
0344C:  BCF    FA6.2
0344E:  MOVF   00,W
03450:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
03452:  MOVFF  FF2,00
03456:  BCF    FF2.7
03458:  CLRF   FAA
0345A:  MOVLW  11
0345C:  MOVWF  FA9
0345E:  MOVFF  18D,FA8
03462:  BCF    FA6.6
03464:  BCF    FA6.7
03466:  BSF    FA6.2
03468:  MOVLW  55
0346A:  MOVWF  FA7
0346C:  MOVLW  AA
0346E:  MOVWF  FA7
03470:  BSF    FA6.1
03472:  BTFSC  FA6.1
03474:  BRA    3472
03476:  BCF    FA6.2
03478:  MOVF   00,W
0347A:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
0347C:  MOVFF  FF2,00
03480:  BCF    FF2.7
03482:  CLRF   FAA
03484:  MOVLW  12
03486:  MOVWF  FA9
03488:  MOVFF  18E,FA8
0348C:  BCF    FA6.6
0348E:  BCF    FA6.7
03490:  BSF    FA6.2
03492:  MOVLW  55
03494:  MOVWF  FA7
03496:  MOVLW  AA
03498:  MOVWF  FA7
0349A:  BSF    FA6.1
0349C:  BTFSC  FA6.1
0349E:  BRA    349C
034A0:  BCF    FA6.2
034A2:  MOVF   00,W
034A4:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
034A6:  MOVFF  FF2,00
034AA:  BCF    FF2.7
034AC:  CLRF   FAA
034AE:  MOVLW  13
034B0:  MOVWF  FA9
034B2:  MOVFF  18F,FA8
034B6:  BCF    FA6.6
034B8:  BCF    FA6.7
034BA:  BSF    FA6.2
034BC:  MOVLW  55
034BE:  MOVWF  FA7
034C0:  MOVLW  AA
034C2:  MOVWF  FA7
034C4:  BSF    FA6.1
034C6:  BTFSC  FA6.1
034C8:  BRA    34C6
034CA:  BCF    FA6.2
034CC:  MOVF   00,W
034CE:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
034D0:  MOVFF  FF2,00
034D4:  BCF    FF2.7
034D6:  CLRF   FAA
034D8:  MOVLW  14
034DA:  MOVWF  FA9
034DC:  MOVFF  190,FA8
034E0:  BCF    FA6.6
034E2:  BCF    FA6.7
034E4:  BSF    FA6.2
034E6:  MOVLW  55
034E8:  MOVWF  FA7
034EA:  MOVLW  AA
034EC:  MOVWF  FA7
034EE:  BSF    FA6.1
034F0:  BTFSC  FA6.1
034F2:  BRA    34F0
034F4:  BCF    FA6.2
034F6:  MOVF   00,W
034F8:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
034FA:  MOVFF  FF2,00
034FE:  BCF    FF2.7
03500:  CLRF   FAA
03502:  MOVLW  15
03504:  MOVWF  FA9
03506:  MOVFF  191,FA8
0350A:  BCF    FA6.6
0350C:  BCF    FA6.7
0350E:  BSF    FA6.2
03510:  MOVLW  55
03512:  MOVWF  FA7
03514:  MOVLW  AA
03516:  MOVWF  FA7
03518:  BSF    FA6.1
0351A:  BTFSC  FA6.1
0351C:  BRA    351A
0351E:  BCF    FA6.2
03520:  MOVF   00,W
03522:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
03524:  MOVFF  FF2,00
03528:  BCF    FF2.7
0352A:  CLRF   FAA
0352C:  MOVLW  16
0352E:  MOVWF  FA9
03530:  MOVFF  192,FA8
03534:  BCF    FA6.6
03536:  BCF    FA6.7
03538:  BSF    FA6.2
0353A:  MOVLW  55
0353C:  MOVWF  FA7
0353E:  MOVLW  AA
03540:  MOVWF  FA7
03542:  BSF    FA6.1
03544:  BTFSC  FA6.1
03546:  BRA    3544
03548:  BCF    FA6.2
0354A:  MOVF   00,W
0354C:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
0354E:  MOVFF  FF2,00
03552:  BCF    FF2.7
03554:  CLRF   FAA
03556:  MOVLW  17
03558:  MOVWF  FA9
0355A:  MOVFF  193,FA8
0355E:  BCF    FA6.6
03560:  BCF    FA6.7
03562:  BSF    FA6.2
03564:  MOVLW  55
03566:  MOVWF  FA7
03568:  MOVLW  AA
0356A:  MOVWF  FA7
0356C:  BSF    FA6.1
0356E:  BTFSC  FA6.1
03570:  BRA    356E
03572:  BCF    FA6.2
03574:  MOVF   00,W
03576:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
03578:  MOVFF  FF2,00
0357C:  BCF    FF2.7
0357E:  CLRF   FAA
03580:  MOVLW  18
03582:  MOVWF  FA9
03584:  MOVFF  194,FA8
03588:  BCF    FA6.6
0358A:  BCF    FA6.7
0358C:  BSF    FA6.2
0358E:  MOVLW  55
03590:  MOVWF  FA7
03592:  MOVLW  AA
03594:  MOVWF  FA7
03596:  BSF    FA6.1
03598:  BTFSC  FA6.1
0359A:  BRA    3598
0359C:  BCF    FA6.2
0359E:  MOVF   00,W
035A0:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
035A2:  MOVFF  FF2,00
035A6:  BCF    FF2.7
035A8:  CLRF   FAA
035AA:  MOVLW  19
035AC:  MOVWF  FA9
035AE:  MOVFF  195,FA8
035B2:  BCF    FA6.6
035B4:  BCF    FA6.7
035B6:  BSF    FA6.2
035B8:  MOVLW  55
035BA:  MOVWF  FA7
035BC:  MOVLW  AA
035BE:  MOVWF  FA7
035C0:  BSF    FA6.1
035C2:  BTFSC  FA6.1
035C4:  BRA    35C2
035C6:  BCF    FA6.2
035C8:  MOVF   00,W
035CA:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
035CC:  MOVFF  FF2,00
035D0:  BCF    FF2.7
035D2:  CLRF   FAA
035D4:  MOVLW  1A
035D6:  MOVWF  FA9
035D8:  MOVFF  196,FA8
035DC:  BCF    FA6.6
035DE:  BCF    FA6.7
035E0:  BSF    FA6.2
035E2:  MOVLW  55
035E4:  MOVWF  FA7
035E6:  MOVLW  AA
035E8:  MOVWF  FA7
035EA:  BSF    FA6.1
035EC:  BTFSC  FA6.1
035EE:  BRA    35EC
035F0:  BCF    FA6.2
035F2:  MOVF   00,W
035F4:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
035F6:  MOVFF  FF2,00
035FA:  BCF    FF2.7
035FC:  CLRF   FAA
035FE:  MOVLW  1B
03600:  MOVWF  FA9
03602:  MOVFF  197,FA8
03606:  BCF    FA6.6
03608:  BCF    FA6.7
0360A:  BSF    FA6.2
0360C:  MOVLW  55
0360E:  MOVWF  FA7
03610:  MOVLW  AA
03612:  MOVWF  FA7
03614:  BSF    FA6.1
03616:  BTFSC  FA6.1
03618:  BRA    3616
0361A:  BCF    FA6.2
0361C:  MOVF   00,W
0361E:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //All Fault Delay Time
03620:  MOVFF  FF2,00
03624:  BCF    FF2.7
03626:  CLRF   FAA
03628:  MOVLW  1C
0362A:  MOVWF  FA9
0362C:  MOVFF  198,FA8
03630:  BCF    FA6.6
03632:  BCF    FA6.7
03634:  BSF    FA6.2
03636:  MOVLW  55
03638:  MOVWF  FA7
0363A:  MOVLW  AA
0363C:  MOVWF  FA7
0363E:  BSF    FA6.1
03640:  BTFSC  FA6.1
03642:  BRA    3640
03644:  BCF    FA6.2
03646:  MOVF   00,W
03648:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
0364A:  MOVFF  FF2,00
0364E:  BCF    FF2.7
03650:  CLRF   FAA
03652:  MOVLW  1D
03654:  MOVWF  FA9
03656:  MOVFF  199,FA8
0365A:  BCF    FA6.6
0365C:  BCF    FA6.7
0365E:  BSF    FA6.2
03660:  MOVLW  55
03662:  MOVWF  FA7
03664:  MOVLW  AA
03666:  MOVWF  FA7
03668:  BSF    FA6.1
0366A:  BTFSC  FA6.1
0366C:  BRA    366A
0366E:  BCF    FA6.2
03670:  MOVF   00,W
03672:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Fault Delay Time1
03674:  MOVFF  FF2,00
03678:  BCF    FF2.7
0367A:  CLRF   FAA
0367C:  MOVLW  1E
0367E:  MOVWF  FA9
03680:  MOVFF  19A,FA8
03684:  BCF    FA6.6
03686:  BCF    FA6.7
03688:  BSF    FA6.2
0368A:  MOVLW  55
0368C:  MOVWF  FA7
0368E:  MOVLW  AA
03690:  MOVWF  FA7
03692:  BSF    FA6.1
03694:  BTFSC  FA6.1
03696:  BRA    3694
03698:  BCF    FA6.2
0369A:  MOVF   00,W
0369C:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Fault Delay Time2
0369E:  MOVFF  FF2,00
036A2:  BCF    FF2.7
036A4:  CLRF   FAA
036A6:  MOVLW  1F
036A8:  MOVWF  FA9
036AA:  MOVFF  19B,FA8
036AE:  BCF    FA6.6
036B0:  BCF    FA6.7
036B2:  BSF    FA6.2
036B4:  MOVLW  55
036B6:  MOVWF  FA7
036B8:  MOVLW  AA
036BA:  MOVWF  FA7
036BC:  BSF    FA6.1
036BE:  BTFSC  FA6.1
036C0:  BRA    36BE
036C2:  BCF    FA6.2
036C4:  MOVF   00,W
036C6:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Fault Delay Time3
036C8:  MOVFF  FF2,00
036CC:  BCF    FF2.7
036CE:  CLRF   FAA
036D0:  MOVLW  20
036D2:  MOVWF  FA9
036D4:  MOVFF  19C,FA8
036D8:  BCF    FA6.6
036DA:  BCF    FA6.7
036DC:  BSF    FA6.2
036DE:  MOVLW  55
036E0:  MOVWF  FA7
036E2:  MOVLW  AA
036E4:  MOVWF  FA7
036E6:  BSF    FA6.1
036E8:  BTFSC  FA6.1
036EA:  BRA    36E8
036EC:  BCF    FA6.2
036EE:  MOVF   00,W
036F0:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Fault Delay Time4
036F2:  MOVFF  FF2,00
036F6:  BCF    FF2.7
036F8:  CLRF   FAA
036FA:  MOVLW  21
036FC:  MOVWF  FA9
036FE:  MOVFF  19D,FA8
03702:  BCF    FA6.6
03704:  BCF    FA6.7
03706:  BSF    FA6.2
03708:  MOVLW  55
0370A:  MOVWF  FA7
0370C:  MOVLW  AA
0370E:  MOVWF  FA7
03710:  BSF    FA6.1
03712:  BTFSC  FA6.1
03714:  BRA    3712
03716:  BCF    FA6.2
03718:  MOVF   00,W
0371A:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Fault Delay Time5
0371C:  MOVFF  FF2,00
03720:  BCF    FF2.7
03722:  CLRF   FAA
03724:  MOVLW  22
03726:  MOVWF  FA9
03728:  MOVFF  19E,FA8
0372C:  BCF    FA6.6
0372E:  BCF    FA6.7
03730:  BSF    FA6.2
03732:  MOVLW  55
03734:  MOVWF  FA7
03736:  MOVLW  AA
03738:  MOVWF  FA7
0373A:  BSF    FA6.1
0373C:  BTFSC  FA6.1
0373E:  BRA    373C
03740:  BCF    FA6.2
03742:  MOVF   00,W
03744:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Fault Delay Time6
03746:  MOVFF  FF2,00
0374A:  BCF    FF2.7
0374C:  CLRF   FAA
0374E:  MOVLW  23
03750:  MOVWF  FA9
03752:  MOVFF  19F,FA8
03756:  BCF    FA6.6
03758:  BCF    FA6.7
0375A:  BSF    FA6.2
0375C:  MOVLW  55
0375E:  MOVWF  FA7
03760:  MOVLW  AA
03762:  MOVWF  FA7
03764:  BSF    FA6.1
03766:  BTFSC  FA6.1
03768:  BRA    3766
0376A:  BCF    FA6.2
0376C:  MOVF   00,W
0376E:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Fault Delay Time7
03770:  MOVFF  FF2,00
03774:  BCF    FF2.7
03776:  CLRF   FAA
03778:  MOVLW  24
0377A:  MOVWF  FA9
0377C:  MOVFF  1A0,FA8
03780:  BCF    FA6.6
03782:  BCF    FA6.7
03784:  BSF    FA6.2
03786:  MOVLW  55
03788:  MOVWF  FA7
0378A:  MOVLW  AA
0378C:  MOVWF  FA7
0378E:  BSF    FA6.1
03790:  BTFSC  FA6.1
03792:  BRA    3790
03794:  BCF    FA6.2
03796:  MOVF   00,W
03798:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Fault Delay Time8
0379A:  MOVFF  FF2,00
0379E:  BCF    FF2.7
037A0:  CLRF   FAA
037A2:  MOVLW  25
037A4:  MOVWF  FA9
037A6:  MOVFF  1A1,FA8
037AA:  BCF    FA6.6
037AC:  BCF    FA6.7
037AE:  BSF    FA6.2
037B0:  MOVLW  55
037B2:  MOVWF  FA7
037B4:  MOVLW  AA
037B6:  MOVWF  FA7
037B8:  BSF    FA6.1
037BA:  BTFSC  FA6.1
037BC:  BRA    37BA
037BE:  BCF    FA6.2
037C0:  MOVF   00,W
037C2:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Fault Delay Time9
037C4:  MOVFF  FF2,00
037C8:  BCF    FF2.7
037CA:  CLRF   FAA
037CC:  MOVLW  26
037CE:  MOVWF  FA9
037D0:  MOVFF  1A2,FA8
037D4:  BCF    FA6.6
037D6:  BCF    FA6.7
037D8:  BSF    FA6.2
037DA:  MOVLW  55
037DC:  MOVWF  FA7
037DE:  MOVLW  AA
037E0:  MOVWF  FA7
037E2:  BSF    FA6.1
037E4:  BTFSC  FA6.1
037E6:  BRA    37E4
037E8:  BCF    FA6.2
037EA:  MOVF   00,W
037EC:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Fault Delay Time10
037EE:  MOVFF  FF2,00
037F2:  BCF    FF2.7
037F4:  CLRF   FAA
037F6:  MOVLW  27
037F8:  MOVWF  FA9
037FA:  MOVFF  1A3,FA8
037FE:  BCF    FA6.6
03800:  BCF    FA6.7
03802:  BSF    FA6.2
03804:  MOVLW  55
03806:  MOVWF  FA7
03808:  MOVLW  AA
0380A:  MOVWF  FA7
0380C:  BSF    FA6.1
0380E:  BTFSC  FA6.1
03810:  BRA    380E
03812:  BCF    FA6.2
03814:  MOVF   00,W
03816:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Fault Delay Time11
03818:  MOVFF  FF2,00
0381C:  BCF    FF2.7
0381E:  CLRF   FAA
03820:  MOVLW  28
03822:  MOVWF  FA9
03824:  MOVFF  1A4,FA8
03828:  BCF    FA6.6
0382A:  BCF    FA6.7
0382C:  BSF    FA6.2
0382E:  MOVLW  55
03830:  MOVWF  FA7
03832:  MOVLW  AA
03834:  MOVWF  FA7
03836:  BSF    FA6.1
03838:  BTFSC  FA6.1
0383A:  BRA    3838
0383C:  BCF    FA6.2
0383E:  MOVF   00,W
03840:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Fault Delay Time12
03842:  MOVFF  FF2,00
03846:  BCF    FF2.7
03848:  CLRF   FAA
0384A:  MOVLW  29
0384C:  MOVWF  FA9
0384E:  MOVFF  1A5,FA8
03852:  BCF    FA6.6
03854:  BCF    FA6.7
03856:  BSF    FA6.2
03858:  MOVLW  55
0385A:  MOVWF  FA7
0385C:  MOVLW  AA
0385E:  MOVWF  FA7
03860:  BSF    FA6.1
03862:  BTFSC  FA6.1
03864:  BRA    3862
03866:  BCF    FA6.2
03868:  MOVF   00,W
0386A:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Fault Delay Time13
0386C:  MOVFF  FF2,00
03870:  BCF    FF2.7
03872:  CLRF   FAA
03874:  MOVLW  2A
03876:  MOVWF  FA9
03878:  MOVFF  1A6,FA8
0387C:  BCF    FA6.6
0387E:  BCF    FA6.7
03880:  BSF    FA6.2
03882:  MOVLW  55
03884:  MOVWF  FA7
03886:  MOVLW  AA
03888:  MOVWF  FA7
0388A:  BSF    FA6.1
0388C:  BTFSC  FA6.1
0388E:  BRA    388C
03890:  BCF    FA6.2
03892:  MOVF   00,W
03894:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Fault Delay Time14
03896:  MOVFF  FF2,00
0389A:  BCF    FF2.7
0389C:  CLRF   FAA
0389E:  MOVLW  2B
038A0:  MOVWF  FA9
038A2:  MOVFF  1A7,FA8
038A6:  BCF    FA6.6
038A8:  BCF    FA6.7
038AA:  BSF    FA6.2
038AC:  MOVLW  55
038AE:  MOVWF  FA7
038B0:  MOVLW  AA
038B2:  MOVWF  FA7
038B4:  BSF    FA6.1
038B6:  BTFSC  FA6.1
038B8:  BRA    38B6
038BA:  BCF    FA6.2
038BC:  MOVF   00,W
038BE:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Fault Delay Time15
038C0:  MOVFF  FF2,00
038C4:  BCF    FF2.7
038C6:  CLRF   FAA
038C8:  MOVLW  2C
038CA:  MOVWF  FA9
038CC:  MOVFF  1A8,FA8
038D0:  BCF    FA6.6
038D2:  BCF    FA6.7
038D4:  BSF    FA6.2
038D6:  MOVLW  55
038D8:  MOVWF  FA7
038DA:  MOVLW  AA
038DC:  MOVWF  FA7
038DE:  BSF    FA6.1
038E0:  BTFSC  FA6.1
038E2:  BRA    38E0
038E4:  BCF    FA6.2
038E6:  MOVF   00,W
038E8:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Fault Delay Time16
038EA:  MOVFF  FF2,00
038EE:  BCF    FF2.7
038F0:  CLRF   FAA
038F2:  MOVLW  2D
038F4:  MOVWF  FA9
038F6:  MOVFF  1A9,FA8
038FA:  BCF    FA6.6
038FC:  BCF    FA6.7
038FE:  BSF    FA6.2
03900:  MOVLW  55
03902:  MOVWF  FA7
03904:  MOVLW  AA
03906:  MOVWF  FA7
03908:  BSF    FA6.1
0390A:  BTFSC  FA6.1
0390C:  BRA    390A
0390E:  BCF    FA6.2
03910:  MOVF   00,W
03912:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Fault Delay Time17
03914:  MOVFF  FF2,00
03918:  BCF    FF2.7
0391A:  CLRF   FAA
0391C:  MOVLW  2E
0391E:  MOVWF  FA9
03920:  MOVFF  1AA,FA8
03924:  BCF    FA6.6
03926:  BCF    FA6.7
03928:  BSF    FA6.2
0392A:  MOVLW  55
0392C:  MOVWF  FA7
0392E:  MOVLW  AA
03930:  MOVWF  FA7
03932:  BSF    FA6.1
03934:  BTFSC  FA6.1
03936:  BRA    3934
03938:  BCF    FA6.2
0393A:  MOVF   00,W
0393C:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Fault Delay Time18
0393E:  MOVFF  FF2,00
03942:  BCF    FF2.7
03944:  CLRF   FAA
03946:  MOVLW  2F
03948:  MOVWF  FA9
0394A:  MOVFF  1AB,FA8
0394E:  BCF    FA6.6
03950:  BCF    FA6.7
03952:  BSF    FA6.2
03954:  MOVLW  55
03956:  MOVWF  FA7
03958:  MOVLW  AA
0395A:  MOVWF  FA7
0395C:  BSF    FA6.1
0395E:  BTFSC  FA6.1
03960:  BRA    395E
03962:  BCF    FA6.2
03964:  MOVF   00,W
03966:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Fault Delay Time19
03968:  MOVFF  FF2,00
0396C:  BCF    FF2.7
0396E:  CLRF   FAA
03970:  MOVLW  30
03972:  MOVWF  FA9
03974:  MOVFF  1AC,FA8
03978:  BCF    FA6.6
0397A:  BCF    FA6.7
0397C:  BSF    FA6.2
0397E:  MOVLW  55
03980:  MOVWF  FA7
03982:  MOVLW  AA
03984:  MOVWF  FA7
03986:  BSF    FA6.1
03988:  BTFSC  FA6.1
0398A:  BRA    3988
0398C:  BCF    FA6.2
0398E:  MOVF   00,W
03990:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Fault Delay Time20
03992:  MOVFF  FF2,00
03996:  BCF    FF2.7
03998:  CLRF   FAA
0399A:  MOVLW  31
0399C:  MOVWF  FA9
0399E:  MOVFF  1AD,FA8
039A2:  BCF    FA6.6
039A4:  BCF    FA6.7
039A6:  BSF    FA6.2
039A8:  MOVLW  55
039AA:  MOVWF  FA7
039AC:  MOVLW  AA
039AE:  MOVWF  FA7
039B0:  BSF    FA6.1
039B2:  BTFSC  FA6.1
039B4:  BRA    39B2
039B6:  BCF    FA6.2
039B8:  MOVF   00,W
039BA:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
039BC:  MOVLB  B
039BE:  CLRF   x4F
039C0:  CLRF   x4E
....................             for(; ; a++)
....................             {
....................                restart_wdt();
039C2:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
039C4:  MOVLW  AE
039C6:  ADDWF  x4E,W
039C8:  MOVWF  FE9
039CA:  MOVLW  01
039CC:  ADDWFC x4F,W
039CE:  MOVWF  FEA
039D0:  MOVFF  FEF,B50
....................                if((phonenum == 0x0D) || (a > 15))
039D4:  MOVF   x50,W
039D6:  SUBLW  0D
039D8:  BZ    39E4
039DA:  MOVF   x4F,F
039DC:  BNZ   39E4
039DE:  MOVF   x4E,W
039E0:  SUBLW  0F
039E2:  BC    3A32
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
039E4:  MOVLW  88
039E6:  ADDWF  x4E,W
039E8:  MOVWF  FE9
039EA:  MOVLW  09
039EC:  ADDWFC x4F,W
039EE:  MOVWF  FEA
039F0:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
039F2:  MOVLW  32
039F4:  ADDWF  x4E,W
039F6:  MOVWF  x57
039F8:  MOVLW  00
039FA:  ADDWFC x4F,W
039FC:  MOVWF  x58
039FE:  MOVF   FF2,W
03A00:  MOVWF  00
03A02:  BCF    FF2.7
03A04:  MOVFF  B58,FAA
03A08:  MOVFF  B57,FA9
03A0C:  MOVFF  B50,FA8
03A10:  BCF    FA6.6
03A12:  BCF    FA6.7
03A14:  BSF    FA6.2
03A16:  MOVLB  F
03A18:  MOVLW  55
03A1A:  MOVWF  FA7
03A1C:  MOVLW  AA
03A1E:  MOVWF  FA7
03A20:  BSF    FA6.1
03A22:  BTFSC  FA6.1
03A24:  BRA    3A22
03A26:  BCF    FA6.2
03A28:  MOVF   00,W
03A2A:  IORWF  FF2,F
....................                   break;
03A2C:  BRA    3A88
....................                }
03A2E:  BRA    3A7C
03A30:  MOVLB  B
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
03A32:  MOVLW  88
03A34:  ADDWF  x4E,W
03A36:  MOVWF  FE9
03A38:  MOVLW  09
03A3A:  ADDWFC x4F,W
03A3C:  MOVWF  FEA
03A3E:  MOVFF  B50,FEF
....................                   
....................                   write_eeprom(0x32+a,phonenum);
03A42:  MOVLW  32
03A44:  ADDWF  x4E,W
03A46:  MOVWF  x57
03A48:  MOVLW  00
03A4A:  ADDWFC x4F,W
03A4C:  MOVWF  x58
03A4E:  MOVF   FF2,W
03A50:  MOVWF  00
03A52:  BCF    FF2.7
03A54:  MOVFF  B58,FAA
03A58:  MOVFF  B57,FA9
03A5C:  MOVFF  B50,FA8
03A60:  BCF    FA6.6
03A62:  BCF    FA6.7
03A64:  BSF    FA6.2
03A66:  MOVLB  F
03A68:  MOVLW  55
03A6A:  MOVWF  FA7
03A6C:  MOVLW  AA
03A6E:  MOVWF  FA7
03A70:  BSF    FA6.1
03A72:  BTFSC  FA6.1
03A74:  BRA    3A72
03A76:  BCF    FA6.2
03A78:  MOVF   00,W
03A7A:  IORWF  FF2,F
....................                }
03A7C:  MOVLB  B
03A7E:  INCF   x4E,F
03A80:  BTFSC  FD8.2
03A82:  INCF   x4F,F
03A84:  BRA    39C2
03A86:  MOVLB  F
....................             }
.................... 
....................                         
....................             TxD_Buff[0] = Address ;         //Address
03A88:  MOVFF  79,7B
....................             TxD_Buff[1] = 0x21 ;            //return function code
03A8C:  MOVLW  21
03A8E:  MOVLB  0
03A90:  MOVWF  x7C
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
03A92:  MOVLB  B
03A94:  CLRF   x59
03A96:  MOVLW  7B
03A98:  MOVWF  x58
03A9A:  MOVLW  02
03A9C:  MOVWF  x5A
03A9E:  MOVLB  0
03AA0:  CALL   1F64
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
03AA4:  MOVFF  57B,7D
....................             TxD_Buff[3] = CRC_Lo ;
03AA8:  MOVFF  57A,7E
.................... 
....................             output_bit(P485ctrl,1);
03AAC:  BSF    F8A.3
03AAE:  BCF    F93.3
....................             delay_ms(10);
03AB0:  MOVLW  0A
03AB2:  MOVLB  B
03AB4:  MOVWF  x57
03AB6:  MOVLB  0
03AB8:  CALL   077C
.................... 
....................             putc(Txd_Buff[0]);
03ABC:  MOVF   x7B,W
03ABE:  CALL   1FBA
....................             putc(Txd_Buff[1]);
03AC2:  MOVF   x7C,W
03AC4:  CALL   1FBA
....................             putc(Txd_Buff[2]);
03AC8:  MOVF   x7D,W
03ACA:  CALL   1FBA
....................             putc(Txd_Buff[3]);
03ACE:  MOVF   x7E,W
03AD0:  CALL   1FBA
.................... 
....................             delay_ms(3);
03AD4:  MOVLW  03
03AD6:  MOVLB  B
03AD8:  MOVWF  x57
03ADA:  MOVLB  0
03ADC:  CALL   077C
....................             output_bit(P485ctrl,0);
03AE0:  BCF    F8A.3
03AE2:  BCF    F93.3
....................             
....................             reset_cpu();
03AE4:  RESET
....................             //Read_Config(); //jj
....................          }
03AE6:  GOTO   43EC
03AEA:  MOVLB  1
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
03AEC:  MOVF   x7B,W
03AEE:  SUBLW  22
03AF0:  BTFSS  FD8.2
03AF2:  GOTO   43EC
....................          {
....................             //SMS_Massage
....................             int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
03AF6:  MOVLB  B
03AF8:  CLRF   x52
03AFA:  MOVLW  04
03AFC:  MOVWF  x51
03AFE:  CLRF   x54
03B00:  CLRF   x53
03B02:  CLRF   x56
03B04:  CLRF   x55
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03B06:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03B08:  MOVLW  7A
03B0A:  ADDWF  x51,W
03B0C:  MOVWF  FE9
03B0E:  MOVLW  01
03B10:  ADDWFC x52,W
03B12:  MOVWF  FEA
03B14:  MOVF   FEF,W
03B16:  SUBLW  0D
03B18:  BZ    3B24
03B1A:  MOVF   x54,F
03B1C:  BNZ   3B24
03B1E:  MOVF   x53,W
03B20:  SUBLW  29
03B22:  BC    3B74
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03B24:  MOVLW  5D
03B26:  ADDWF  x51,W
03B28:  MOVWF  x57
03B2A:  MOVLW  00
03B2C:  ADDWFC x52,W
03B2E:  MOVWF  x58
03B30:  MOVLW  7A
03B32:  ADDWF  x51,W
03B34:  MOVWF  FE9
03B36:  MOVLW  01
03B38:  ADDWFC x52,W
03B3A:  MOVWF  FEA
03B3C:  MOVFF  FEF,B59
03B40:  MOVF   FF2,W
03B42:  MOVWF  00
03B44:  BCF    FF2.7
03B46:  MOVFF  B58,FAA
03B4A:  MOVFF  B57,FA9
03B4E:  MOVFF  B59,FA8
03B52:  BCF    FA6.6
03B54:  BCF    FA6.7
03B56:  BSF    FA6.2
03B58:  MOVLB  F
03B5A:  MOVLW  55
03B5C:  MOVWF  FA7
03B5E:  MOVLW  AA
03B60:  MOVWF  FA7
03B62:  BSF    FA6.1
03B64:  BTFSC  FA6.1
03B66:  BRA    3B64
03B68:  BCF    FA6.2
03B6A:  MOVF   00,W
03B6C:  IORWF  FF2,F
....................                   break;
03B6E:  BRA    3BFE
....................                }
03B70:  BRA    3BE6
03B72:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage1[j] = RxD_Buff[i];
03B74:  MOVLW  97
03B76:  ADDWF  x53,W
03B78:  MOVWF  01
03B7A:  MOVLW  09
03B7C:  ADDWFC x54,W
03B7E:  MOVWF  03
03B80:  MOVLW  7A
03B82:  ADDWF  x51,W
03B84:  MOVWF  FE9
03B86:  MOVLW  01
03B88:  ADDWFC x52,W
03B8A:  MOVWF  FEA
03B8C:  MOVFF  FEF,B59
03B90:  MOVFF  03,FEA
03B94:  MOVFF  01,FE9
03B98:  MOVFF  B59,FEF
....................                   
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03B9C:  MOVLW  5D
03B9E:  ADDWF  x51,W
03BA0:  MOVWF  x57
03BA2:  MOVLW  00
03BA4:  ADDWFC x52,W
03BA6:  MOVWF  x58
03BA8:  MOVLW  7A
03BAA:  ADDWF  x51,W
03BAC:  MOVWF  FE9
03BAE:  MOVLW  01
03BB0:  ADDWFC x52,W
03BB2:  MOVWF  FEA
03BB4:  MOVFF  FEF,B59
03BB8:  MOVF   FF2,W
03BBA:  MOVWF  00
03BBC:  BCF    FF2.7
03BBE:  MOVFF  B58,FAA
03BC2:  MOVFF  B57,FA9
03BC6:  MOVFF  B59,FA8
03BCA:  BCF    FA6.6
03BCC:  BCF    FA6.7
03BCE:  BSF    FA6.2
03BD0:  MOVLB  F
03BD2:  MOVLW  55
03BD4:  MOVWF  FA7
03BD6:  MOVLW  AA
03BD8:  MOVWF  FA7
03BDA:  BSF    FA6.1
03BDC:  BTFSC  FA6.1
03BDE:  BRA    3BDC
03BE0:  BCF    FA6.2
03BE2:  MOVF   00,W
03BE4:  IORWF  FF2,F
....................                }
03BE6:  MOVLB  B
03BE8:  MOVFF  B52,03
03BEC:  MOVF   x51,W
03BEE:  INCF   x51,F
03BF0:  BTFSC  FD8.2
03BF2:  INCF   x52,F
03BF4:  INCF   x53,F
03BF6:  BTFSC  FD8.2
03BF8:  INCF   x54,F
03BFA:  BRA    3B06
03BFC:  MOVLB  F
....................             }
....................             SMS_Massage1[j] = '\0' ; // end string
03BFE:  MOVLW  97
03C00:  MOVLB  B
03C02:  ADDWF  x53,W
03C04:  MOVWF  FE9
03C06:  MOVLW  09
03C08:  ADDWFC x54,W
03C0A:  MOVWF  FEA
03C0C:  CLRF   FEF
....................             
....................             j=0;
03C0E:  CLRF   x54
03C10:  CLRF   x53
....................             i++;
03C12:  INCF   x51,F
03C14:  BTFSC  FD8.2
03C16:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03C18:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03C1A:  MOVLW  7A
03C1C:  ADDWF  x51,W
03C1E:  MOVWF  FE9
03C20:  MOVLW  01
03C22:  ADDWFC x52,W
03C24:  MOVWF  FEA
03C26:  MOVF   FEF,W
03C28:  SUBLW  0D
03C2A:  BZ    3C36
03C2C:  MOVF   x54,F
03C2E:  BNZ   3C36
03C30:  MOVF   x53,W
03C32:  SUBLW  29
03C34:  BC    3C86
....................                {  
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03C36:  MOVLW  5D
03C38:  ADDWF  x51,W
03C3A:  MOVWF  x57
03C3C:  MOVLW  00
03C3E:  ADDWFC x52,W
03C40:  MOVWF  x58
03C42:  MOVLW  7A
03C44:  ADDWF  x51,W
03C46:  MOVWF  FE9
03C48:  MOVLW  01
03C4A:  ADDWFC x52,W
03C4C:  MOVWF  FEA
03C4E:  MOVFF  FEF,B59
03C52:  MOVF   FF2,W
03C54:  MOVWF  00
03C56:  BCF    FF2.7
03C58:  MOVFF  B58,FAA
03C5C:  MOVFF  B57,FA9
03C60:  MOVFF  B59,FA8
03C64:  BCF    FA6.6
03C66:  BCF    FA6.7
03C68:  BSF    FA6.2
03C6A:  MOVLB  F
03C6C:  MOVLW  55
03C6E:  MOVWF  FA7
03C70:  MOVLW  AA
03C72:  MOVWF  FA7
03C74:  BSF    FA6.1
03C76:  BTFSC  FA6.1
03C78:  BRA    3C76
03C7A:  BCF    FA6.2
03C7C:  MOVF   00,W
03C7E:  IORWF  FF2,F
....................                   break;
03C80:  BRA    3D10
....................                }
03C82:  BRA    3CF8
03C84:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage2[j] = RxD_Buff[i];
03C86:  MOVLW  C0
03C88:  ADDWF  x53,W
03C8A:  MOVWF  01
03C8C:  MOVLW  09
03C8E:  ADDWFC x54,W
03C90:  MOVWF  03
03C92:  MOVLW  7A
03C94:  ADDWF  x51,W
03C96:  MOVWF  FE9
03C98:  MOVLW  01
03C9A:  ADDWFC x52,W
03C9C:  MOVWF  FEA
03C9E:  MOVFF  FEF,B59
03CA2:  MOVFF  03,FEA
03CA6:  MOVFF  01,FE9
03CAA:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03CAE:  MOVLW  5D
03CB0:  ADDWF  x51,W
03CB2:  MOVWF  x57
03CB4:  MOVLW  00
03CB6:  ADDWFC x52,W
03CB8:  MOVWF  x58
03CBA:  MOVLW  7A
03CBC:  ADDWF  x51,W
03CBE:  MOVWF  FE9
03CC0:  MOVLW  01
03CC2:  ADDWFC x52,W
03CC4:  MOVWF  FEA
03CC6:  MOVFF  FEF,B59
03CCA:  MOVF   FF2,W
03CCC:  MOVWF  00
03CCE:  BCF    FF2.7
03CD0:  MOVFF  B58,FAA
03CD4:  MOVFF  B57,FA9
03CD8:  MOVFF  B59,FA8
03CDC:  BCF    FA6.6
03CDE:  BCF    FA6.7
03CE0:  BSF    FA6.2
03CE2:  MOVLB  F
03CE4:  MOVLW  55
03CE6:  MOVWF  FA7
03CE8:  MOVLW  AA
03CEA:  MOVWF  FA7
03CEC:  BSF    FA6.1
03CEE:  BTFSC  FA6.1
03CF0:  BRA    3CEE
03CF2:  BCF    FA6.2
03CF4:  MOVF   00,W
03CF6:  IORWF  FF2,F
....................                }
03CF8:  MOVLB  B
03CFA:  MOVFF  B52,03
03CFE:  MOVF   x51,W
03D00:  INCF   x51,F
03D02:  BTFSC  FD8.2
03D04:  INCF   x52,F
03D06:  INCF   x53,F
03D08:  BTFSC  FD8.2
03D0A:  INCF   x54,F
03D0C:  BRA    3C18
03D0E:  MOVLB  F
....................             }
....................             SMS_Massage2[j] = '\0' ; // end string
03D10:  MOVLW  C0
03D12:  MOVLB  B
03D14:  ADDWF  x53,W
03D16:  MOVWF  FE9
03D18:  MOVLW  09
03D1A:  ADDWFC x54,W
03D1C:  MOVWF  FEA
03D1E:  CLRF   FEF
....................             
....................             j=0;
03D20:  CLRF   x54
03D22:  CLRF   x53
....................             i++;
03D24:  INCF   x51,F
03D26:  BTFSC  FD8.2
03D28:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03D2A:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03D2C:  MOVLW  7A
03D2E:  ADDWF  x51,W
03D30:  MOVWF  FE9
03D32:  MOVLW  01
03D34:  ADDWFC x52,W
03D36:  MOVWF  FEA
03D38:  MOVF   FEF,W
03D3A:  SUBLW  0D
03D3C:  BZ    3D48
03D3E:  MOVF   x54,F
03D40:  BNZ   3D48
03D42:  MOVF   x53,W
03D44:  SUBLW  29
03D46:  BC    3D98
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03D48:  MOVLW  5D
03D4A:  ADDWF  x51,W
03D4C:  MOVWF  x57
03D4E:  MOVLW  00
03D50:  ADDWFC x52,W
03D52:  MOVWF  x58
03D54:  MOVLW  7A
03D56:  ADDWF  x51,W
03D58:  MOVWF  FE9
03D5A:  MOVLW  01
03D5C:  ADDWFC x52,W
03D5E:  MOVWF  FEA
03D60:  MOVFF  FEF,B59
03D64:  MOVF   FF2,W
03D66:  MOVWF  00
03D68:  BCF    FF2.7
03D6A:  MOVFF  B58,FAA
03D6E:  MOVFF  B57,FA9
03D72:  MOVFF  B59,FA8
03D76:  BCF    FA6.6
03D78:  BCF    FA6.7
03D7A:  BSF    FA6.2
03D7C:  MOVLB  F
03D7E:  MOVLW  55
03D80:  MOVWF  FA7
03D82:  MOVLW  AA
03D84:  MOVWF  FA7
03D86:  BSF    FA6.1
03D88:  BTFSC  FA6.1
03D8A:  BRA    3D88
03D8C:  BCF    FA6.2
03D8E:  MOVF   00,W
03D90:  IORWF  FF2,F
....................                   break;
03D92:  BRA    3E22
....................                }
03D94:  BRA    3E0A
03D96:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage3[j] = RxD_Buff[i];
03D98:  MOVLW  E9
03D9A:  ADDWF  x53,W
03D9C:  MOVWF  01
03D9E:  MOVLW  09
03DA0:  ADDWFC x54,W
03DA2:  MOVWF  03
03DA4:  MOVLW  7A
03DA6:  ADDWF  x51,W
03DA8:  MOVWF  FE9
03DAA:  MOVLW  01
03DAC:  ADDWFC x52,W
03DAE:  MOVWF  FEA
03DB0:  MOVFF  FEF,B59
03DB4:  MOVFF  03,FEA
03DB8:  MOVFF  01,FE9
03DBC:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03DC0:  MOVLW  5D
03DC2:  ADDWF  x51,W
03DC4:  MOVWF  x57
03DC6:  MOVLW  00
03DC8:  ADDWFC x52,W
03DCA:  MOVWF  x58
03DCC:  MOVLW  7A
03DCE:  ADDWF  x51,W
03DD0:  MOVWF  FE9
03DD2:  MOVLW  01
03DD4:  ADDWFC x52,W
03DD6:  MOVWF  FEA
03DD8:  MOVFF  FEF,B59
03DDC:  MOVF   FF2,W
03DDE:  MOVWF  00
03DE0:  BCF    FF2.7
03DE2:  MOVFF  B58,FAA
03DE6:  MOVFF  B57,FA9
03DEA:  MOVFF  B59,FA8
03DEE:  BCF    FA6.6
03DF0:  BCF    FA6.7
03DF2:  BSF    FA6.2
03DF4:  MOVLB  F
03DF6:  MOVLW  55
03DF8:  MOVWF  FA7
03DFA:  MOVLW  AA
03DFC:  MOVWF  FA7
03DFE:  BSF    FA6.1
03E00:  BTFSC  FA6.1
03E02:  BRA    3E00
03E04:  BCF    FA6.2
03E06:  MOVF   00,W
03E08:  IORWF  FF2,F
....................                }
03E0A:  MOVLB  B
03E0C:  MOVFF  B52,03
03E10:  MOVF   x51,W
03E12:  INCF   x51,F
03E14:  BTFSC  FD8.2
03E16:  INCF   x52,F
03E18:  INCF   x53,F
03E1A:  BTFSC  FD8.2
03E1C:  INCF   x54,F
03E1E:  BRA    3D2A
03E20:  MOVLB  F
....................             }
....................             SMS_Massage3[j] = '\0' ; // end string
03E22:  MOVLW  E9
03E24:  MOVLB  B
03E26:  ADDWF  x53,W
03E28:  MOVWF  FE9
03E2A:  MOVLW  09
03E2C:  ADDWFC x54,W
03E2E:  MOVWF  FEA
03E30:  CLRF   FEF
....................             
....................             j=0;
03E32:  CLRF   x54
03E34:  CLRF   x53
....................             i++;
03E36:  INCF   x51,F
03E38:  BTFSC  FD8.2
03E3A:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03E3C:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03E3E:  MOVLW  7A
03E40:  ADDWF  x51,W
03E42:  MOVWF  FE9
03E44:  MOVLW  01
03E46:  ADDWFC x52,W
03E48:  MOVWF  FEA
03E4A:  MOVF   FEF,W
03E4C:  SUBLW  0D
03E4E:  BZ    3E5A
03E50:  MOVF   x54,F
03E52:  BNZ   3E5A
03E54:  MOVF   x53,W
03E56:  SUBLW  29
03E58:  BC    3EAA
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03E5A:  MOVLW  5D
03E5C:  ADDWF  x51,W
03E5E:  MOVWF  x57
03E60:  MOVLW  00
03E62:  ADDWFC x52,W
03E64:  MOVWF  x58
03E66:  MOVLW  7A
03E68:  ADDWF  x51,W
03E6A:  MOVWF  FE9
03E6C:  MOVLW  01
03E6E:  ADDWFC x52,W
03E70:  MOVWF  FEA
03E72:  MOVFF  FEF,B59
03E76:  MOVF   FF2,W
03E78:  MOVWF  00
03E7A:  BCF    FF2.7
03E7C:  MOVFF  B58,FAA
03E80:  MOVFF  B57,FA9
03E84:  MOVFF  B59,FA8
03E88:  BCF    FA6.6
03E8A:  BCF    FA6.7
03E8C:  BSF    FA6.2
03E8E:  MOVLB  F
03E90:  MOVLW  55
03E92:  MOVWF  FA7
03E94:  MOVLW  AA
03E96:  MOVWF  FA7
03E98:  BSF    FA6.1
03E9A:  BTFSC  FA6.1
03E9C:  BRA    3E9A
03E9E:  BCF    FA6.2
03EA0:  MOVF   00,W
03EA2:  IORWF  FF2,F
....................                   break;
03EA4:  BRA    3F34
....................                }
03EA6:  BRA    3F1C
03EA8:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage4[j] = RxD_Buff[i];
03EAA:  MOVLW  12
03EAC:  ADDWF  x53,W
03EAE:  MOVWF  01
03EB0:  MOVLW  0A
03EB2:  ADDWFC x54,W
03EB4:  MOVWF  03
03EB6:  MOVLW  7A
03EB8:  ADDWF  x51,W
03EBA:  MOVWF  FE9
03EBC:  MOVLW  01
03EBE:  ADDWFC x52,W
03EC0:  MOVWF  FEA
03EC2:  MOVFF  FEF,B59
03EC6:  MOVFF  03,FEA
03ECA:  MOVFF  01,FE9
03ECE:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03ED2:  MOVLW  5D
03ED4:  ADDWF  x51,W
03ED6:  MOVWF  x57
03ED8:  MOVLW  00
03EDA:  ADDWFC x52,W
03EDC:  MOVWF  x58
03EDE:  MOVLW  7A
03EE0:  ADDWF  x51,W
03EE2:  MOVWF  FE9
03EE4:  MOVLW  01
03EE6:  ADDWFC x52,W
03EE8:  MOVWF  FEA
03EEA:  MOVFF  FEF,B59
03EEE:  MOVF   FF2,W
03EF0:  MOVWF  00
03EF2:  BCF    FF2.7
03EF4:  MOVFF  B58,FAA
03EF8:  MOVFF  B57,FA9
03EFC:  MOVFF  B59,FA8
03F00:  BCF    FA6.6
03F02:  BCF    FA6.7
03F04:  BSF    FA6.2
03F06:  MOVLB  F
03F08:  MOVLW  55
03F0A:  MOVWF  FA7
03F0C:  MOVLW  AA
03F0E:  MOVWF  FA7
03F10:  BSF    FA6.1
03F12:  BTFSC  FA6.1
03F14:  BRA    3F12
03F16:  BCF    FA6.2
03F18:  MOVF   00,W
03F1A:  IORWF  FF2,F
....................                }
03F1C:  MOVLB  B
03F1E:  MOVFF  B52,03
03F22:  MOVF   x51,W
03F24:  INCF   x51,F
03F26:  BTFSC  FD8.2
03F28:  INCF   x52,F
03F2A:  INCF   x53,F
03F2C:  BTFSC  FD8.2
03F2E:  INCF   x54,F
03F30:  BRA    3E3C
03F32:  MOVLB  F
....................             }
....................             SMS_Massage4[j] = '\0' ; // end string
03F34:  MOVLW  12
03F36:  MOVLB  B
03F38:  ADDWF  x53,W
03F3A:  MOVWF  FE9
03F3C:  MOVLW  0A
03F3E:  ADDWFC x54,W
03F40:  MOVWF  FEA
03F42:  CLRF   FEF
....................             
....................             j=0;
03F44:  CLRF   x54
03F46:  CLRF   x53
....................             i++;
03F48:  INCF   x51,F
03F4A:  BTFSC  FD8.2
03F4C:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03F4E:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03F50:  MOVLW  7A
03F52:  ADDWF  x51,W
03F54:  MOVWF  FE9
03F56:  MOVLW  01
03F58:  ADDWFC x52,W
03F5A:  MOVWF  FEA
03F5C:  MOVF   FEF,W
03F5E:  SUBLW  0D
03F60:  BZ    3F6C
03F62:  MOVF   x54,F
03F64:  BNZ   3F6C
03F66:  MOVF   x53,W
03F68:  SUBLW  29
03F6A:  BC    3FBC
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03F6C:  MOVLW  5D
03F6E:  ADDWF  x51,W
03F70:  MOVWF  x57
03F72:  MOVLW  00
03F74:  ADDWFC x52,W
03F76:  MOVWF  x58
03F78:  MOVLW  7A
03F7A:  ADDWF  x51,W
03F7C:  MOVWF  FE9
03F7E:  MOVLW  01
03F80:  ADDWFC x52,W
03F82:  MOVWF  FEA
03F84:  MOVFF  FEF,B59
03F88:  MOVF   FF2,W
03F8A:  MOVWF  00
03F8C:  BCF    FF2.7
03F8E:  MOVFF  B58,FAA
03F92:  MOVFF  B57,FA9
03F96:  MOVFF  B59,FA8
03F9A:  BCF    FA6.6
03F9C:  BCF    FA6.7
03F9E:  BSF    FA6.2
03FA0:  MOVLB  F
03FA2:  MOVLW  55
03FA4:  MOVWF  FA7
03FA6:  MOVLW  AA
03FA8:  MOVWF  FA7
03FAA:  BSF    FA6.1
03FAC:  BTFSC  FA6.1
03FAE:  BRA    3FAC
03FB0:  BCF    FA6.2
03FB2:  MOVF   00,W
03FB4:  IORWF  FF2,F
....................                   break;
03FB6:  BRA    4046
....................                }
03FB8:  BRA    402E
03FBA:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage5[j] = RxD_Buff[i];
03FBC:  MOVLW  3B
03FBE:  ADDWF  x53,W
03FC0:  MOVWF  01
03FC2:  MOVLW  0A
03FC4:  ADDWFC x54,W
03FC6:  MOVWF  03
03FC8:  MOVLW  7A
03FCA:  ADDWF  x51,W
03FCC:  MOVWF  FE9
03FCE:  MOVLW  01
03FD0:  ADDWFC x52,W
03FD2:  MOVWF  FEA
03FD4:  MOVFF  FEF,B59
03FD8:  MOVFF  03,FEA
03FDC:  MOVFF  01,FE9
03FE0:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03FE4:  MOVLW  5D
03FE6:  ADDWF  x51,W
03FE8:  MOVWF  x57
03FEA:  MOVLW  00
03FEC:  ADDWFC x52,W
03FEE:  MOVWF  x58
03FF0:  MOVLW  7A
03FF2:  ADDWF  x51,W
03FF4:  MOVWF  FE9
03FF6:  MOVLW  01
03FF8:  ADDWFC x52,W
03FFA:  MOVWF  FEA
03FFC:  MOVFF  FEF,B59
04000:  MOVF   FF2,W
04002:  MOVWF  00
04004:  BCF    FF2.7
04006:  MOVFF  B58,FAA
0400A:  MOVFF  B57,FA9
0400E:  MOVFF  B59,FA8
04012:  BCF    FA6.6
04014:  BCF    FA6.7
04016:  BSF    FA6.2
04018:  MOVLB  F
0401A:  MOVLW  55
0401C:  MOVWF  FA7
0401E:  MOVLW  AA
04020:  MOVWF  FA7
04022:  BSF    FA6.1
04024:  BTFSC  FA6.1
04026:  BRA    4024
04028:  BCF    FA6.2
0402A:  MOVF   00,W
0402C:  IORWF  FF2,F
....................                }
0402E:  MOVLB  B
04030:  MOVFF  B52,03
04034:  MOVF   x51,W
04036:  INCF   x51,F
04038:  BTFSC  FD8.2
0403A:  INCF   x52,F
0403C:  INCF   x53,F
0403E:  BTFSC  FD8.2
04040:  INCF   x54,F
04042:  BRA    3F4E
04044:  MOVLB  F
....................             }
....................             SMS_Massage5[j] = '\0' ; // end string
04046:  MOVLW  3B
04048:  MOVLB  B
0404A:  ADDWF  x53,W
0404C:  MOVWF  FE9
0404E:  MOVLW  0A
04050:  ADDWFC x54,W
04052:  MOVWF  FEA
04054:  CLRF   FEF
....................             
....................             j=0;
04056:  CLRF   x54
04058:  CLRF   x53
....................             i++;
0405A:  INCF   x51,F
0405C:  BTFSC  FD8.2
0405E:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04060:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
04062:  MOVLW  7A
04064:  ADDWF  x51,W
04066:  MOVWF  FE9
04068:  MOVLW  01
0406A:  ADDWFC x52,W
0406C:  MOVWF  FEA
0406E:  MOVF   FEF,W
04070:  SUBLW  0D
04072:  BZ    407E
04074:  MOVF   x54,F
04076:  BNZ   407E
04078:  MOVF   x53,W
0407A:  SUBLW  29
0407C:  BC    40CE
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0407E:  MOVLW  5D
04080:  ADDWF  x51,W
04082:  MOVWF  x57
04084:  MOVLW  00
04086:  ADDWFC x52,W
04088:  MOVWF  x58
0408A:  MOVLW  7A
0408C:  ADDWF  x51,W
0408E:  MOVWF  FE9
04090:  MOVLW  01
04092:  ADDWFC x52,W
04094:  MOVWF  FEA
04096:  MOVFF  FEF,B59
0409A:  MOVF   FF2,W
0409C:  MOVWF  00
0409E:  BCF    FF2.7
040A0:  MOVFF  B58,FAA
040A4:  MOVFF  B57,FA9
040A8:  MOVFF  B59,FA8
040AC:  BCF    FA6.6
040AE:  BCF    FA6.7
040B0:  BSF    FA6.2
040B2:  MOVLB  F
040B4:  MOVLW  55
040B6:  MOVWF  FA7
040B8:  MOVLW  AA
040BA:  MOVWF  FA7
040BC:  BSF    FA6.1
040BE:  BTFSC  FA6.1
040C0:  BRA    40BE
040C2:  BCF    FA6.2
040C4:  MOVF   00,W
040C6:  IORWF  FF2,F
....................                   break;
040C8:  BRA    415C
....................                }
040CA:  BRA    4144
040CC:  MOVLB  B
....................                else
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
040CE:  MOVLW  5D
040D0:  ADDWF  x51,W
040D2:  MOVWF  x57
040D4:  MOVLW  00
040D6:  ADDWFC x52,W
040D8:  MOVWF  x58
040DA:  MOVLW  7A
040DC:  ADDWF  x51,W
040DE:  MOVWF  FE9
040E0:  MOVLW  01
040E2:  ADDWFC x52,W
040E4:  MOVWF  FEA
040E6:  MOVFF  FEF,B59
040EA:  MOVF   FF2,W
040EC:  MOVWF  00
040EE:  BCF    FF2.7
040F0:  MOVFF  B58,FAA
040F4:  MOVFF  B57,FA9
040F8:  MOVFF  B59,FA8
040FC:  BCF    FA6.6
040FE:  BCF    FA6.7
04100:  BSF    FA6.2
04102:  MOVLB  F
04104:  MOVLW  55
04106:  MOVWF  FA7
04108:  MOVLW  AA
0410A:  MOVWF  FA7
0410C:  BSF    FA6.1
0410E:  BTFSC  FA6.1
04110:  BRA    410E
04112:  BCF    FA6.2
04114:  MOVF   00,W
04116:  IORWF  FF2,F
....................                   SMS_Massage6[j] = RxD_Buff[i];
04118:  MOVLW  64
0411A:  MOVLB  B
0411C:  ADDWF  x53,W
0411E:  MOVWF  01
04120:  MOVLW  0A
04122:  ADDWFC x54,W
04124:  MOVWF  03
04126:  MOVLW  7A
04128:  ADDWF  x51,W
0412A:  MOVWF  FE9
0412C:  MOVLW  01
0412E:  ADDWFC x52,W
04130:  MOVWF  FEA
04132:  MOVFF  FEF,B59
04136:  MOVFF  03,FEA
0413A:  MOVFF  01,FE9
0413E:  MOVFF  B59,FEF
04142:  MOVLB  F
....................                }
04144:  MOVLB  B
04146:  MOVFF  B52,03
0414A:  MOVF   x51,W
0414C:  INCF   x51,F
0414E:  BTFSC  FD8.2
04150:  INCF   x52,F
04152:  INCF   x53,F
04154:  BTFSC  FD8.2
04156:  INCF   x54,F
04158:  BRA    4060
0415A:  MOVLB  F
....................             }
....................             SMS_Massage6[j] = '\0' ; // end string
0415C:  MOVLW  64
0415E:  MOVLB  B
04160:  ADDWF  x53,W
04162:  MOVWF  FE9
04164:  MOVLW  0A
04166:  ADDWFC x54,W
04168:  MOVWF  FEA
0416A:  CLRF   FEF
....................             
....................             j=0;
0416C:  CLRF   x54
0416E:  CLRF   x53
....................             i++;
04170:  INCF   x51,F
04172:  BTFSC  FD8.2
04174:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04176:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
04178:  MOVLW  7A
0417A:  ADDWF  x51,W
0417C:  MOVWF  FE9
0417E:  MOVLW  01
04180:  ADDWFC x52,W
04182:  MOVWF  FEA
04184:  MOVF   FEF,W
04186:  SUBLW  0D
04188:  BZ    4194
0418A:  MOVF   x54,F
0418C:  BNZ   4194
0418E:  MOVF   x53,W
04190:  SUBLW  29
04192:  BC    41E4
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04194:  MOVLW  5D
04196:  ADDWF  x51,W
04198:  MOVWF  x57
0419A:  MOVLW  00
0419C:  ADDWFC x52,W
0419E:  MOVWF  x58
041A0:  MOVLW  7A
041A2:  ADDWF  x51,W
041A4:  MOVWF  FE9
041A6:  MOVLW  01
041A8:  ADDWFC x52,W
041AA:  MOVWF  FEA
041AC:  MOVFF  FEF,B59
041B0:  MOVF   FF2,W
041B2:  MOVWF  00
041B4:  BCF    FF2.7
041B6:  MOVFF  B58,FAA
041BA:  MOVFF  B57,FA9
041BE:  MOVFF  B59,FA8
041C2:  BCF    FA6.6
041C4:  BCF    FA6.7
041C6:  BSF    FA6.2
041C8:  MOVLB  F
041CA:  MOVLW  55
041CC:  MOVWF  FA7
041CE:  MOVLW  AA
041D0:  MOVWF  FA7
041D2:  BSF    FA6.1
041D4:  BTFSC  FA6.1
041D6:  BRA    41D4
041D8:  BCF    FA6.2
041DA:  MOVF   00,W
041DC:  IORWF  FF2,F
....................                   break;
041DE:  BRA    426E
....................                }
041E0:  BRA    4256
041E2:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage7[j] = RxD_Buff[i];
041E4:  MOVLW  8D
041E6:  ADDWF  x53,W
041E8:  MOVWF  01
041EA:  MOVLW  0A
041EC:  ADDWFC x54,W
041EE:  MOVWF  03
041F0:  MOVLW  7A
041F2:  ADDWF  x51,W
041F4:  MOVWF  FE9
041F6:  MOVLW  01
041F8:  ADDWFC x52,W
041FA:  MOVWF  FEA
041FC:  MOVFF  FEF,B59
04200:  MOVFF  03,FEA
04204:  MOVFF  01,FE9
04208:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0420C:  MOVLW  5D
0420E:  ADDWF  x51,W
04210:  MOVWF  x57
04212:  MOVLW  00
04214:  ADDWFC x52,W
04216:  MOVWF  x58
04218:  MOVLW  7A
0421A:  ADDWF  x51,W
0421C:  MOVWF  FE9
0421E:  MOVLW  01
04220:  ADDWFC x52,W
04222:  MOVWF  FEA
04224:  MOVFF  FEF,B59
04228:  MOVF   FF2,W
0422A:  MOVWF  00
0422C:  BCF    FF2.7
0422E:  MOVFF  B58,FAA
04232:  MOVFF  B57,FA9
04236:  MOVFF  B59,FA8
0423A:  BCF    FA6.6
0423C:  BCF    FA6.7
0423E:  BSF    FA6.2
04240:  MOVLB  F
04242:  MOVLW  55
04244:  MOVWF  FA7
04246:  MOVLW  AA
04248:  MOVWF  FA7
0424A:  BSF    FA6.1
0424C:  BTFSC  FA6.1
0424E:  BRA    424C
04250:  BCF    FA6.2
04252:  MOVF   00,W
04254:  IORWF  FF2,F
....................                }
04256:  MOVLB  B
04258:  MOVFF  B52,03
0425C:  MOVF   x51,W
0425E:  INCF   x51,F
04260:  BTFSC  FD8.2
04262:  INCF   x52,F
04264:  INCF   x53,F
04266:  BTFSC  FD8.2
04268:  INCF   x54,F
0426A:  BRA    4176
0426C:  MOVLB  F
....................             }
....................             SMS_Massage7[j] = '\0' ; // end string
0426E:  MOVLW  8D
04270:  MOVLB  B
04272:  ADDWF  x53,W
04274:  MOVWF  FE9
04276:  MOVLW  0A
04278:  ADDWFC x54,W
0427A:  MOVWF  FEA
0427C:  CLRF   FEF
....................             
....................             j=0;
0427E:  CLRF   x54
04280:  CLRF   x53
....................             i++;
04282:  INCF   x51,F
04284:  BTFSC  FD8.2
04286:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04288:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
0428A:  MOVLW  7A
0428C:  ADDWF  x51,W
0428E:  MOVWF  FE9
04290:  MOVLW  01
04292:  ADDWFC x52,W
04294:  MOVWF  FEA
04296:  MOVF   FEF,W
04298:  SUBLW  0D
0429A:  BZ    42A6
0429C:  MOVF   x54,F
0429E:  BNZ   42A6
042A0:  MOVF   x53,W
042A2:  SUBLW  29
042A4:  BC    42F6
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
042A6:  MOVLW  5D
042A8:  ADDWF  x51,W
042AA:  MOVWF  x57
042AC:  MOVLW  00
042AE:  ADDWFC x52,W
042B0:  MOVWF  x58
042B2:  MOVLW  7A
042B4:  ADDWF  x51,W
042B6:  MOVWF  FE9
042B8:  MOVLW  01
042BA:  ADDWFC x52,W
042BC:  MOVWF  FEA
042BE:  MOVFF  FEF,B59
042C2:  MOVF   FF2,W
042C4:  MOVWF  00
042C6:  BCF    FF2.7
042C8:  MOVFF  B58,FAA
042CC:  MOVFF  B57,FA9
042D0:  MOVFF  B59,FA8
042D4:  BCF    FA6.6
042D6:  BCF    FA6.7
042D8:  BSF    FA6.2
042DA:  MOVLB  F
042DC:  MOVLW  55
042DE:  MOVWF  FA7
042E0:  MOVLW  AA
042E2:  MOVWF  FA7
042E4:  BSF    FA6.1
042E6:  BTFSC  FA6.1
042E8:  BRA    42E6
042EA:  BCF    FA6.2
042EC:  MOVF   00,W
042EE:  IORWF  FF2,F
....................                   break;
042F0:  BRA    4380
....................                }
042F2:  BRA    4368
042F4:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage8[j] = RxD_Buff[i];
042F6:  MOVLW  B6
042F8:  ADDWF  x53,W
042FA:  MOVWF  01
042FC:  MOVLW  0A
042FE:  ADDWFC x54,W
04300:  MOVWF  03
04302:  MOVLW  7A
04304:  ADDWF  x51,W
04306:  MOVWF  FE9
04308:  MOVLW  01
0430A:  ADDWFC x52,W
0430C:  MOVWF  FEA
0430E:  MOVFF  FEF,B59
04312:  MOVFF  03,FEA
04316:  MOVFF  01,FE9
0431A:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0431E:  MOVLW  5D
04320:  ADDWF  x51,W
04322:  MOVWF  x57
04324:  MOVLW  00
04326:  ADDWFC x52,W
04328:  MOVWF  x58
0432A:  MOVLW  7A
0432C:  ADDWF  x51,W
0432E:  MOVWF  FE9
04330:  MOVLW  01
04332:  ADDWFC x52,W
04334:  MOVWF  FEA
04336:  MOVFF  FEF,B59
0433A:  MOVF   FF2,W
0433C:  MOVWF  00
0433E:  BCF    FF2.7
04340:  MOVFF  B58,FAA
04344:  MOVFF  B57,FA9
04348:  MOVFF  B59,FA8
0434C:  BCF    FA6.6
0434E:  BCF    FA6.7
04350:  BSF    FA6.2
04352:  MOVLB  F
04354:  MOVLW  55
04356:  MOVWF  FA7
04358:  MOVLW  AA
0435A:  MOVWF  FA7
0435C:  BSF    FA6.1
0435E:  BTFSC  FA6.1
04360:  BRA    435E
04362:  BCF    FA6.2
04364:  MOVF   00,W
04366:  IORWF  FF2,F
....................                }
04368:  MOVLB  B
0436A:  MOVFF  B52,03
0436E:  MOVF   x51,W
04370:  INCF   x51,F
04372:  BTFSC  FD8.2
04374:  INCF   x52,F
04376:  INCF   x53,F
04378:  BTFSC  FD8.2
0437A:  INCF   x54,F
0437C:  BRA    4288
0437E:  MOVLB  F
....................             }
....................             SMS_Massage8[j] = '\0' ; // end string
04380:  MOVLW  B6
04382:  MOVLB  B
04384:  ADDWF  x53,W
04386:  MOVWF  FE9
04388:  MOVLW  0A
0438A:  ADDWFC x54,W
0438C:  MOVWF  FEA
0438E:  CLRF   FEF
....................             
....................          
....................             TxD_Buff[0] = Address ;         //Address
04390:  MOVFF  79,7B
....................             TxD_Buff[1] = 0x21 ;            //return function code
04394:  MOVLW  21
04396:  MOVLB  0
04398:  MOVWF  x7C
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
0439A:  MOVLB  B
0439C:  CLRF   x59
0439E:  MOVLW  7B
043A0:  MOVWF  x58
043A2:  MOVLW  02
043A4:  MOVWF  x5A
043A6:  MOVLB  0
043A8:  CALL   1F64
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
043AC:  MOVFF  57B,7D
....................             TxD_Buff[3] = CRC_Lo ;
043B0:  MOVFF  57A,7E
.................... 
....................             output_bit(P485ctrl,1);
043B4:  BSF    F8A.3
043B6:  BCF    F93.3
....................             delay_ms(10);
043B8:  MOVLW  0A
043BA:  MOVLB  B
043BC:  MOVWF  x57
043BE:  MOVLB  0
043C0:  CALL   077C
.................... 
....................             putc(Txd_Buff[0]);
043C4:  MOVF   x7B,W
043C6:  CALL   1FBA
....................             putc(Txd_Buff[1]);
043CA:  MOVF   x7C,W
043CC:  CALL   1FBA
....................             putc(Txd_Buff[2]);
043D0:  MOVF   x7D,W
043D2:  CALL   1FBA
....................             putc(Txd_Buff[3]);
043D6:  MOVF   x7E,W
043D8:  CALL   1FBA
.................... 
....................             delay_ms(3);
043DC:  MOVLW  03
043DE:  MOVLB  B
043E0:  MOVWF  x57
043E2:  MOVLB  0
043E4:  CALL   077C
....................             output_bit(P485ctrl,0);
043E8:  BCF    F8A.3
043EA:  BCF    F93.3
043EC:  MOVLB  5
....................          }
.................... 
....................          if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
043EE:  MOVLB  1
043F0:  MOVF   x7B,W
043F2:  SUBLW  03
043F4:  BNZ   4482
....................          {
.................... 
....................             Data_Buff[0] = 0x00;// dummy data
043F6:  MOVLB  5
043F8:  CLRF   x83
....................             Data_Buff[1] = Input1_8;
043FA:  MOVFF  49,584
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
043FE:  MOVFF  79,7B
....................             TxD_Buff[1] = 0x03 ;           //Function Code
04402:  MOVLW  03
04404:  MOVLB  0
04406:  MOVWF  x7C
....................             TxD_Buff[2] = 0x02 ;          //Byte Count
04408:  MOVLW  02
0440A:  MOVWF  x7D
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
0440C:  MOVFF  583,7E
....................             TxD_Buff[4] = Data_Buff[1];   //first byte Data
04410:  MOVFF  584,7F
.................... 
....................             CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
04414:  MOVLB  B
04416:  CLRF   x59
04418:  MOVLW  7B
0441A:  MOVWF  x58
0441C:  MOVLW  05
0441E:  MOVWF  x5A
04420:  MOVLB  0
04422:  CALL   1F64
.................... 
....................             TxD_Buff[5] = CRC_Hi ;
04426:  MOVFF  57B,80
....................             TxD_Buff[6] = CRC_Lo ;
0442A:  MOVFF  57A,81
.................... 
.................... 
....................             output_bit(P485ctrl,1);
0442E:  BSF    F8A.3
04430:  BCF    F93.3
....................             restart_wdt();
04432:  CLRWDT
....................             delay_ms(4);
04434:  MOVLW  04
04436:  MOVLB  B
04438:  MOVWF  x57
0443A:  MOVLB  0
0443C:  CALL   077C
....................             restart_wdt();
04440:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
04442:  MOVF   x7B,W
04444:  CALL   1FBA
....................             putc(TxD_Buff[1]) ;               //Function Code
04448:  MOVF   x7C,W
0444A:  CALL   1FBA
....................             putc(TxD_Buff[2]) ;               //Byte Count
0444E:  MOVF   x7D,W
04450:  CALL   1FBA
....................             putc(TxD_Buff[3]) ;
04454:  MOVF   x7E,W
04456:  CALL   1FBA
....................             putc(TxD_Buff[4]) ;
0445A:  MOVF   x7F,W
0445C:  CALL   1FBA
....................             putc(TxD_Buff[5]) ;
04460:  MOVF   x80,W
04462:  CALL   1FBA
....................             putc(TxD_Buff[6]) ;
04466:  MOVF   x81,W
04468:  CALL   1FBA
.................... 
....................             restart_wdt();
0446C:  CLRWDT
....................             delay_ms(3);
0446E:  MOVLW  03
04470:  MOVLB  B
04472:  MOVWF  x57
04474:  MOVLB  0
04476:  CALL   077C
....................             restart_wdt();
0447A:  CLRWDT
....................             output_bit(P485ctrl,0);
0447C:  BCF    F8A.3
0447E:  BCF    F93.3
04480:  MOVLB  1
.................... 
....................          }
....................        
.................... 
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
04482:  MOVLW  01
04484:  MOVLB  5
04486:  MOVWF  x7D
04488:  MOVLW  F4
0448A:  MOVWF  x7C
....................    } // if crc
.................... 
....................    recieve_completed = 0 ;
0448C:  BCF    30.5
....................    sequence = end_sq ;
0448E:  MOVFF  6F,78
....................    T_timeout = 0x00;
04492:  MOVLB  9
04494:  CLRF   x85
....................    RxD_DataLen = 0x00 ;
04496:  MOVLB  0
04498:  CLRF   x7A
....................    output_bit(P485ctrl,0);
0449A:  BCF    F8A.3
0449C:  BCF    F93.3
0449E:  GOTO   6AD0 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
015F4:  MOVLW  02
015F6:  MOVLB  B
015F8:  MOVWF  x58
015FA:  MOVLB  0
015FC:  BRA    14BE
015FE:  MOVFF  01,983
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01602:  BTFSS  1A.4
01604:  BRA    160C
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01606:  MOVLB  9
01608:  COMF   x83,F
0160A:  MOVLB  0
....................          
....................       }
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
0160C:  BCF    FD8.0
0160E:  MOVLB  9
01610:  RRCF   x83,W
01612:  MOVLB  A
01614:  BCF    xF1.1
01616:  BTFSC  FE8.0
01618:  BSF    xF1.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
0161A:  MOVLB  9
0161C:  RRCF   x83,W
0161E:  MOVWF  00
01620:  RRCF   00,F
01622:  MOVLW  3F
01624:  ANDWF  00,F
01626:  MOVLB  A
01628:  BCF    xF1.2
0162A:  BTFSC  00.0
0162C:  BSF    xF1.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
0162E:  MOVLB  9
01630:  RRCF   x83,W
01632:  MOVWF  00
01634:  RRCF   00,F
01636:  RRCF   00,F
01638:  MOVLW  1F
0163A:  ANDWF  00,F
0163C:  MOVLB  A
0163E:  BCF    xF1.3
01640:  BTFSC  00.0
01642:  BSF    xF1.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
01644:  MOVLB  9
01646:  SWAPF  x83,W
01648:  MOVWF  00
0164A:  MOVLW  0F
0164C:  ANDWF  00,F
0164E:  MOVLB  A
01650:  BCF    xF1.4
01652:  BTFSC  00.0
01654:  BSF    xF1.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
01656:  MOVLB  9
01658:  SWAPF  x83,W
0165A:  MOVWF  00
0165C:  RRCF   00,F
0165E:  MOVLW  07
01660:  ANDWF  00,F
01662:  MOVLB  A
01664:  BCF    xF1.5
01666:  BTFSC  00.0
01668:  BSF    xF1.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
0166A:  MOVLB  9
0166C:  SWAPF  x83,W
0166E:  MOVWF  00
01670:  RRCF   00,F
01672:  RRCF   00,F
01674:  MOVLW  03
01676:  ANDWF  00,F
01678:  MOVLB  A
0167A:  BCF    xF1.6
0167C:  BTFSC  00.0
0167E:  BSF    xF1.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
01680:  CLRF   00
01682:  MOVLB  9
01684:  BTFSC  x83.7
01686:  BSF    00.0
01688:  MOVLB  A
0168A:  BCF    xF1.7
0168C:  BTFSC  00.0
0168E:  BSF    xF1.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
01690:  MOVLW  02
01692:  MOVLB  B
01694:  MOVWF  x58
01696:  MOVLB  0
01698:  BRA    14DC
0169A:  MOVFF  01,983
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0169E:  BTFSS  1A.4
016A0:  BRA    16A8
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
016A2:  MOVLB  9
016A4:  COMF   x83,F
016A6:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
016A8:  MOVLB  A
016AA:  BCF    xF2.0
016AC:  MOVLB  9
016AE:  BTFSS  x83.0
016B0:  BRA    16B8
016B2:  MOVLB  A
016B4:  BSF    xF2.0
016B6:  MOVLB  9
....................       
.................... 
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=8; i++)
016B8:  MOVLW  01
016BA:  MOVLB  B
016BC:  MOVWF  x57
016BE:  MOVF   x57,W
016C0:  SUBLW  08
016C2:  BTFSS  FD8.0
016C4:  BRA    1BAE
....................       {
....................          if(FaultNCNO[i] ==NO)
016C6:  MOVFF  B57,B5B
016CA:  MOVLW  0B
016CC:  MOVWF  x5D
016CE:  MOVLW  45
016D0:  MOVWF  x5C
016D2:  MOVLB  0
016D4:  RCALL  14FA
016D6:  MOVF   01,W
016D8:  ANDLW  01
016DA:  SUBLW  01
016DC:  BTFSS  FD8.2
016DE:  BRA    1936
....................          {
....................              if(FaultNow[i]==0)
016E0:  MOVFF  B57,B5B
016E4:  MOVLW  0A
016E6:  MOVLB  B
016E8:  MOVWF  x5D
016EA:  MOVLW  F1
016EC:  MOVWF  x5C
016EE:  MOVLB  0
016F0:  RCALL  14FA
016F2:  MOVF   01,W
016F4:  ANDLW  01
016F6:  BTFSS  FD8.2
016F8:  BRA    1818
....................              {   
....................                if(FaultAgo[i]==0)
016FA:  MOVFF  B57,B5B
016FE:  MOVLW  0A
01700:  MOVLB  B
01702:  MOVWF  x5D
01704:  MOVLW  EE
01706:  MOVWF  x5C
01708:  MOVLB  0
0170A:  RCALL  14FA
0170C:  MOVF   01,W
0170E:  ANDLW  01
01710:  BTFSS  FD8.2
01712:  BRA    17FC
....................                {
....................                    ReleaseTime[i]++;
01714:  BCF    FD8.0
01716:  MOVLB  B
01718:  RLCF   x57,W
0171A:  CLRF   03
0171C:  ADDLW  F4
0171E:  MOVWF  FE9
01720:  MOVLW  0A
01722:  ADDWFC 03,W
01724:  MOVWF  FEA
01726:  MOVLW  01
01728:  ADDWF  FEE,F
0172A:  BNC   172E
0172C:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0172E:  BCF    FD8.0
01730:  RLCF   x57,W
01732:  CLRF   03
01734:  ADDLW  F4
01736:  MOVWF  FE9
01738:  MOVLW  0A
0173A:  ADDWFC 03,W
0173C:  MOVWF  FEA
0173E:  MOVFF  FEC,B59
01742:  MOVF   FED,F
01744:  MOVFF  FEF,B58
01748:  BCF    FD8.0
0174A:  RLCF   x57,W
0174C:  CLRF   03
0174E:  ADDLW  1C
01750:  MOVWF  FE9
01752:  MOVLW  0B
01754:  ADDWFC 03,W
01756:  MOVWF  FEA
01758:  MOVFF  FEC,B5D
0175C:  MOVF   FED,F
0175E:  MOVFF  FEF,B5C
01762:  CLRF   x5F
01764:  MOVLW  4B
01766:  MOVWF  x5E
01768:  MOVLB  0
0176A:  RCALL  1530
0176C:  MOVFF  02,B5B
01770:  MOVFF  01,B5A
01774:  MOVLW  0F
01776:  MOVLB  B
01778:  ADDWF  01,W
0177A:  MOVWF  01
0177C:  MOVLW  00
0177E:  ADDWFC 02,W
01780:  MOVWF  03
01782:  MOVF   03,W
01784:  SUBWF  x59,W
01786:  BNC   17F8
01788:  BNZ   1790
0178A:  MOVF   01,W
0178C:  SUBWF  x58,W
0178E:  BNC   17F8
....................                    {   
....................                      ReleaseTime[i] = 0;
01790:  BCF    FD8.0
01792:  RLCF   x57,W
01794:  CLRF   03
01796:  ADDLW  F4
01798:  MOVWF  FE9
0179A:  MOVLW  0A
0179C:  ADDWFC 03,W
0179E:  MOVWF  FEA
017A0:  CLRF   FEC
017A2:  MOVF   FED,F
017A4:  CLRF   FEF
....................                      switch(i)
017A6:  MOVLW  01
017A8:  SUBWF  x57,W
017AA:  ADDLW  F8
017AC:  BC    17F8
017AE:  ADDLW  08
017B0:  MOVLB  0
017B2:  GOTO   1C50
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
017B6:  MOVLB  A
017B8:  BCF    xDF.0
....................                         break;
017BA:  MOVLB  B
017BC:  BRA    17F8
....................                         case 2:
....................                            Inputt.B2 = 0; 
017BE:  MOVLB  A
017C0:  BCF    xDF.1
....................                         break;
017C2:  MOVLB  B
017C4:  BRA    17F8
....................                         case 3:
....................                            Inputt.B3 = 0; 
017C6:  MOVLB  A
017C8:  BCF    xDF.2
....................                         break;
017CA:  MOVLB  B
017CC:  BRA    17F8
....................                         case 4:
....................                            Inputt.B4 = 0; 
017CE:  MOVLB  A
017D0:  BCF    xDF.3
....................                         break;
017D2:  MOVLB  B
017D4:  BRA    17F8
....................                         case 5:
....................                            Inputt.B5 = 0; 
017D6:  MOVLB  A
017D8:  BCF    xDF.4
....................                         break;
017DA:  MOVLB  B
017DC:  BRA    17F8
....................                         case 6:
....................                            Inputt.B6 = 0; 
017DE:  MOVLB  A
017E0:  BCF    xDF.5
....................                         break;
017E2:  MOVLB  B
017E4:  BRA    17F8
....................                         case 7:
....................                            Inputt.B7 = 0; 
017E6:  MOVLB  A
017E8:  BCF    xDF.6
....................                          break;
017EA:  MOVLB  B
017EC:  BRA    17F8
....................                          case 8:
....................                            Inputt.B8 = 0; 
017EE:  MOVLB  A
017F0:  BCF    xDF.7
....................                         break;
017F2:  MOVLB  B
017F4:  BRA    17F8
017F6:  MOVLB  B
....................            
....................                      }                 
....................                    }
....................                }
017F8:  BRA    1814
017FA:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
017FC:  BCF    FD8.0
017FE:  MOVLB  B
01800:  RLCF   x57,W
01802:  CLRF   03
01804:  ADDLW  F4
01806:  MOVWF  FE9
01808:  MOVLW  0A
0180A:  ADDWFC 03,W
0180C:  MOVWF  FEA
0180E:  CLRF   FEC
01810:  MOVF   FED,F
01812:  CLRF   FEF
....................                }
....................              }
01814:  BRA    1934
01816:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
01818:  MOVFF  B57,B5B
0181C:  MOVLW  0A
0181E:  MOVLB  B
01820:  MOVWF  x5D
01822:  MOVLW  EE
01824:  MOVWF  x5C
01826:  MOVLB  0
01828:  RCALL  14FA
0182A:  MOVF   01,W
0182C:  ANDLW  01
0182E:  SUBLW  01
01830:  BTFSS  FD8.2
01832:  BRA    191C
....................                {
....................                    ReleaseTime[i]++;
01834:  BCF    FD8.0
01836:  MOVLB  B
01838:  RLCF   x57,W
0183A:  CLRF   03
0183C:  ADDLW  F4
0183E:  MOVWF  FE9
01840:  MOVLW  0A
01842:  ADDWFC 03,W
01844:  MOVWF  FEA
01846:  MOVLW  01
01848:  ADDWF  FEE,F
0184A:  BNC   184E
0184C:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0184E:  BCF    FD8.0
01850:  RLCF   x57,W
01852:  CLRF   03
01854:  ADDLW  F4
01856:  MOVWF  FE9
01858:  MOVLW  0A
0185A:  ADDWFC 03,W
0185C:  MOVWF  FEA
0185E:  MOVFF  FEC,B59
01862:  MOVF   FED,F
01864:  MOVFF  FEF,B58
01868:  BCF    FD8.0
0186A:  RLCF   x57,W
0186C:  CLRF   03
0186E:  ADDLW  1C
01870:  MOVWF  FE9
01872:  MOVLW  0B
01874:  ADDWFC 03,W
01876:  MOVWF  FEA
01878:  MOVFF  FEC,B5D
0187C:  MOVF   FED,F
0187E:  MOVFF  FEF,B5C
01882:  CLRF   x5F
01884:  MOVLW  4B
01886:  MOVWF  x5E
01888:  MOVLB  0
0188A:  RCALL  1530
0188C:  MOVFF  02,B5B
01890:  MOVFF  01,B5A
01894:  MOVLW  0F
01896:  MOVLB  B
01898:  ADDWF  01,W
0189A:  MOVWF  01
0189C:  MOVLW  00
0189E:  ADDWFC 02,W
018A0:  MOVWF  03
018A2:  MOVF   03,W
018A4:  SUBWF  x59,W
018A6:  BNC   1918
018A8:  BNZ   18B0
018AA:  MOVF   01,W
018AC:  SUBWF  x58,W
018AE:  BNC   1918
....................                    {   
....................                      ReleaseTime[i] = 1;
018B0:  BCF    FD8.0
018B2:  RLCF   x57,W
018B4:  CLRF   03
018B6:  ADDLW  F4
018B8:  MOVWF  FE9
018BA:  MOVLW  0A
018BC:  ADDWFC 03,W
018BE:  MOVWF  FEA
018C0:  CLRF   FEC
018C2:  MOVF   FED,F
018C4:  MOVLW  01
018C6:  MOVWF  FEF
....................                      switch(i)
018C8:  SUBWF  x57,W
018CA:  ADDLW  F8
018CC:  BC    1918
018CE:  ADDLW  08
018D0:  MOVLB  0
018D2:  GOTO   1C7A
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
018D6:  MOVLB  A
018D8:  BSF    xDF.0
....................                         break;
018DA:  MOVLB  B
018DC:  BRA    1918
....................                         case 2:
....................                            Inputt.B2 = 1; 
018DE:  MOVLB  A
018E0:  BSF    xDF.1
....................                         break;
018E2:  MOVLB  B
018E4:  BRA    1918
....................                         case 3:
....................                            Inputt.B3 = 1; 
018E6:  MOVLB  A
018E8:  BSF    xDF.2
....................                         break;
018EA:  MOVLB  B
018EC:  BRA    1918
....................                         case 4:
....................                            Inputt.B4 = 1; 
018EE:  MOVLB  A
018F0:  BSF    xDF.3
....................                         break;
018F2:  MOVLB  B
018F4:  BRA    1918
....................                         case 5:
....................                            Inputt.B5 = 1; 
018F6:  MOVLB  A
018F8:  BSF    xDF.4
....................                         break;
018FA:  MOVLB  B
018FC:  BRA    1918
....................                         case 6:
....................                            Inputt.B6 = 1; 
018FE:  MOVLB  A
01900:  BSF    xDF.5
....................                         break;
01902:  MOVLB  B
01904:  BRA    1918
....................                         case 7:
....................                            Inputt.B7 = 1; 
01906:  MOVLB  A
01908:  BSF    xDF.6
....................                          break;
0190A:  MOVLB  B
0190C:  BRA    1918
....................                          case 8:
....................                            Inputt.B8 = 1; 
0190E:  MOVLB  A
01910:  BSF    xDF.7
....................                         break;
01912:  MOVLB  B
01914:  BRA    1918
01916:  MOVLB  B
....................          
....................                      }                 
....................                    }
....................                }
01918:  BRA    1934
0191A:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
0191C:  BCF    FD8.0
0191E:  MOVLB  B
01920:  RLCF   x57,W
01922:  CLRF   03
01924:  ADDLW  F4
01926:  MOVWF  FE9
01928:  MOVLW  0A
0192A:  ADDWFC 03,W
0192C:  MOVWF  FEA
0192E:  CLRF   FEC
01930:  MOVF   FED,F
01932:  CLRF   FEF
....................                }
....................              
.................... 
....................              }
....................           }
01934:  BRA    1BA6
....................           else if(FaultNCNO[i] ==NC)
01936:  MOVFF  B57,B5B
0193A:  MOVLW  0B
0193C:  MOVLB  B
0193E:  MOVWF  x5D
01940:  MOVLW  45
01942:  MOVWF  x5C
01944:  MOVLB  0
01946:  RCALL  14FA
01948:  MOVF   01,W
0194A:  ANDLW  01
0194C:  BTFSS  FD8.2
0194E:  BRA    1BA8
....................           {
....................              if(FaultNow[i]==1)
01950:  MOVFF  B57,B5B
01954:  MOVLW  0A
01956:  MOVLB  B
01958:  MOVWF  x5D
0195A:  MOVLW  F1
0195C:  MOVWF  x5C
0195E:  MOVLB  0
01960:  RCALL  14FA
01962:  MOVF   01,W
01964:  ANDLW  01
01966:  SUBLW  01
01968:  BTFSS  FD8.2
0196A:  BRA    1A8C
....................              {
....................                if(FaultAgo[i]==1)
0196C:  MOVFF  B57,B5B
01970:  MOVLW  0A
01972:  MOVLB  B
01974:  MOVWF  x5D
01976:  MOVLW  EE
01978:  MOVWF  x5C
0197A:  MOVLB  0
0197C:  RCALL  14FA
0197E:  MOVF   01,W
01980:  ANDLW  01
01982:  SUBLW  01
01984:  BTFSS  FD8.2
01986:  BRA    1A70
....................                {
....................                    ReleaseTime[i]++;
01988:  BCF    FD8.0
0198A:  MOVLB  B
0198C:  RLCF   x57,W
0198E:  CLRF   03
01990:  ADDLW  F4
01992:  MOVWF  FE9
01994:  MOVLW  0A
01996:  ADDWFC 03,W
01998:  MOVWF  FEA
0199A:  MOVLW  01
0199C:  ADDWF  FEE,F
0199E:  BNC   19A2
019A0:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
019A2:  BCF    FD8.0
019A4:  RLCF   x57,W
019A6:  CLRF   03
019A8:  ADDLW  F4
019AA:  MOVWF  FE9
019AC:  MOVLW  0A
019AE:  ADDWFC 03,W
019B0:  MOVWF  FEA
019B2:  MOVFF  FEC,B59
019B6:  MOVF   FED,F
019B8:  MOVFF  FEF,B58
019BC:  BCF    FD8.0
019BE:  RLCF   x57,W
019C0:  CLRF   03
019C2:  ADDLW  1C
019C4:  MOVWF  FE9
019C6:  MOVLW  0B
019C8:  ADDWFC 03,W
019CA:  MOVWF  FEA
019CC:  MOVFF  FEC,B5D
019D0:  MOVF   FED,F
019D2:  MOVFF  FEF,B5C
019D6:  CLRF   x5F
019D8:  MOVLW  4B
019DA:  MOVWF  x5E
019DC:  MOVLB  0
019DE:  RCALL  1530
019E0:  MOVFF  02,B5B
019E4:  MOVFF  01,B5A
019E8:  MOVLW  0F
019EA:  MOVLB  B
019EC:  ADDWF  01,W
019EE:  MOVWF  01
019F0:  MOVLW  00
019F2:  ADDWFC 02,W
019F4:  MOVWF  03
019F6:  MOVF   03,W
019F8:  SUBWF  x59,W
019FA:  BNC   1A6C
019FC:  BNZ   1A04
019FE:  MOVF   01,W
01A00:  SUBWF  x58,W
01A02:  BNC   1A6C
....................                    {   
....................                      ReleaseTime[i] = 0;
01A04:  BCF    FD8.0
01A06:  RLCF   x57,W
01A08:  CLRF   03
01A0A:  ADDLW  F4
01A0C:  MOVWF  FE9
01A0E:  MOVLW  0A
01A10:  ADDWFC 03,W
01A12:  MOVWF  FEA
01A14:  CLRF   FEC
01A16:  MOVF   FED,F
01A18:  CLRF   FEF
....................                      switch(i)
01A1A:  MOVLW  01
01A1C:  SUBWF  x57,W
01A1E:  ADDLW  F8
01A20:  BC    1A6C
01A22:  ADDLW  08
01A24:  MOVLB  0
01A26:  GOTO   1CA4
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
01A2A:  MOVLB  A
01A2C:  BSF    xDF.0
....................                         break;
01A2E:  MOVLB  B
01A30:  BRA    1A6C
....................                         case 2:
....................                            Inputt.B2 = 1; 
01A32:  MOVLB  A
01A34:  BSF    xDF.1
....................                         break;
01A36:  MOVLB  B
01A38:  BRA    1A6C
....................                         case 3:
....................                            Inputt.B3 = 1; 
01A3A:  MOVLB  A
01A3C:  BSF    xDF.2
....................                         break;
01A3E:  MOVLB  B
01A40:  BRA    1A6C
....................                         case 4:
....................                            Inputt.B4 = 1; 
01A42:  MOVLB  A
01A44:  BSF    xDF.3
....................                         break;
01A46:  MOVLB  B
01A48:  BRA    1A6C
....................                         case 5:
....................                            Inputt.B5 = 1; 
01A4A:  MOVLB  A
01A4C:  BSF    xDF.4
....................                         break;
01A4E:  MOVLB  B
01A50:  BRA    1A6C
....................                         case 6:
....................                            Inputt.B6 = 1; 
01A52:  MOVLB  A
01A54:  BSF    xDF.5
....................                         break;
01A56:  MOVLB  B
01A58:  BRA    1A6C
....................                         case 7:
....................                            Inputt.B7 = 1; 
01A5A:  MOVLB  A
01A5C:  BSF    xDF.6
....................                          break;
01A5E:  MOVLB  B
01A60:  BRA    1A6C
....................                          case 8:
....................                            Inputt.B8 = 1; 
01A62:  MOVLB  A
01A64:  BSF    xDF.7
....................                         break;
01A66:  MOVLB  B
01A68:  BRA    1A6C
01A6A:  MOVLB  B
....................                                            
....................                      }                 
....................                   }
....................                }
01A6C:  BRA    1A88
01A6E:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01A70:  BCF    FD8.0
01A72:  MOVLB  B
01A74:  RLCF   x57,W
01A76:  CLRF   03
01A78:  ADDLW  F4
01A7A:  MOVWF  FE9
01A7C:  MOVLW  0A
01A7E:  ADDWFC 03,W
01A80:  MOVWF  FEA
01A82:  CLRF   FEC
01A84:  MOVF   FED,F
01A86:  CLRF   FEF
....................                }
....................              }
01A88:  BRA    1BA6
01A8A:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
01A8C:  MOVFF  B57,B5B
01A90:  MOVLW  0A
01A92:  MOVLB  B
01A94:  MOVWF  x5D
01A96:  MOVLW  EE
01A98:  MOVWF  x5C
01A9A:  MOVLB  0
01A9C:  RCALL  14FA
01A9E:  MOVF   01,W
01AA0:  ANDLW  01
01AA2:  BTFSS  FD8.2
01AA4:  BRA    1B8E
....................                {
....................                    ReleaseTime[i]++;
01AA6:  BCF    FD8.0
01AA8:  MOVLB  B
01AAA:  RLCF   x57,W
01AAC:  CLRF   03
01AAE:  ADDLW  F4
01AB0:  MOVWF  FE9
01AB2:  MOVLW  0A
01AB4:  ADDWFC 03,W
01AB6:  MOVWF  FEA
01AB8:  MOVLW  01
01ABA:  ADDWF  FEE,F
01ABC:  BNC   1AC0
01ABE:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01AC0:  BCF    FD8.0
01AC2:  RLCF   x57,W
01AC4:  CLRF   03
01AC6:  ADDLW  F4
01AC8:  MOVWF  FE9
01ACA:  MOVLW  0A
01ACC:  ADDWFC 03,W
01ACE:  MOVWF  FEA
01AD0:  MOVFF  FEC,B59
01AD4:  MOVF   FED,F
01AD6:  MOVFF  FEF,B58
01ADA:  BCF    FD8.0
01ADC:  RLCF   x57,W
01ADE:  CLRF   03
01AE0:  ADDLW  1C
01AE2:  MOVWF  FE9
01AE4:  MOVLW  0B
01AE6:  ADDWFC 03,W
01AE8:  MOVWF  FEA
01AEA:  MOVFF  FEC,B5D
01AEE:  MOVF   FED,F
01AF0:  MOVFF  FEF,B5C
01AF4:  CLRF   x5F
01AF6:  MOVLW  4B
01AF8:  MOVWF  x5E
01AFA:  MOVLB  0
01AFC:  RCALL  1530
01AFE:  MOVFF  02,B5B
01B02:  MOVFF  01,B5A
01B06:  MOVLW  0F
01B08:  MOVLB  B
01B0A:  ADDWF  01,W
01B0C:  MOVWF  01
01B0E:  MOVLW  00
01B10:  ADDWFC 02,W
01B12:  MOVWF  03
01B14:  MOVF   03,W
01B16:  SUBWF  x59,W
01B18:  BNC   1B8A
01B1A:  BNZ   1B22
01B1C:  MOVF   01,W
01B1E:  SUBWF  x58,W
01B20:  BNC   1B8A
....................                    {   
....................                      ReleaseTime[i] = 0;
01B22:  BCF    FD8.0
01B24:  RLCF   x57,W
01B26:  CLRF   03
01B28:  ADDLW  F4
01B2A:  MOVWF  FE9
01B2C:  MOVLW  0A
01B2E:  ADDWFC 03,W
01B30:  MOVWF  FEA
01B32:  CLRF   FEC
01B34:  MOVF   FED,F
01B36:  CLRF   FEF
....................                      switch(i)
01B38:  MOVLW  01
01B3A:  SUBWF  x57,W
01B3C:  ADDLW  F8
01B3E:  BC    1B8A
01B40:  ADDLW  08
01B42:  MOVLB  0
01B44:  GOTO   1CCE
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01B48:  MOVLB  A
01B4A:  BCF    xDF.0
....................                         break;
01B4C:  MOVLB  B
01B4E:  BRA    1B8A
....................                         case 2:
....................                            Inputt.B2 = 0; 
01B50:  MOVLB  A
01B52:  BCF    xDF.1
....................                         break;
01B54:  MOVLB  B
01B56:  BRA    1B8A
....................                         case 3:
....................                            Inputt.B3 = 0; 
01B58:  MOVLB  A
01B5A:  BCF    xDF.2
....................                         break;
01B5C:  MOVLB  B
01B5E:  BRA    1B8A
....................                         case 4:
....................                            Inputt.B4 = 0; 
01B60:  MOVLB  A
01B62:  BCF    xDF.3
....................                         break;
01B64:  MOVLB  B
01B66:  BRA    1B8A
....................                         case 5:
....................                            Inputt.B5 = 0; 
01B68:  MOVLB  A
01B6A:  BCF    xDF.4
....................                         break;
01B6C:  MOVLB  B
01B6E:  BRA    1B8A
....................                         case 6:
....................                            Inputt.B6 = 0; 
01B70:  MOVLB  A
01B72:  BCF    xDF.5
....................                         break;
01B74:  MOVLB  B
01B76:  BRA    1B8A
....................                         case 7:
....................                            Inputt.B7 = 0; 
01B78:  MOVLB  A
01B7A:  BCF    xDF.6
....................                          break;
01B7C:  MOVLB  B
01B7E:  BRA    1B8A
....................                          case 8:
....................                            Inputt.B8 = 0; 
01B80:  MOVLB  A
01B82:  BCF    xDF.7
....................                         break;
01B84:  MOVLB  B
01B86:  BRA    1B8A
01B88:  MOVLB  B
....................               
....................                      }                 
....................                    }
....................                }
01B8A:  BRA    1BA6
01B8C:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01B8E:  BCF    FD8.0
01B90:  MOVLB  B
01B92:  RLCF   x57,W
01B94:  CLRF   03
01B96:  ADDLW  F4
01B98:  MOVWF  FE9
01B9A:  MOVLW  0A
01B9C:  ADDWFC 03,W
01B9E:  MOVWF  FEA
01BA0:  CLRF   FEC
01BA2:  MOVF   FED,F
01BA4:  CLRF   FEF
01BA6:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
01BA8:  MOVLB  B
01BAA:  INCF   x57,F
01BAC:  BRA    16BE
....................       }
....................       
....................       StoreReleaseFault();
01BAE:  MOVLB  0
01BB0:  BRA    1596
.................... 
....................    
....................       Input1_8 = 0x00;
01BB2:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
01BB4:  MOVLW  00
01BB6:  MOVLB  A
01BB8:  BTFSS  xDF.7
01BBA:  MOVLW  01
01BBC:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
01BBE:  BCF    FD8.0
01BC0:  RLCF   49,W
01BC2:  MOVLB  B
01BC4:  MOVWF  x58
01BC6:  MOVLW  00
01BC8:  MOVLB  A
01BCA:  BTFSS  xDF.6
01BCC:  MOVLW  01
01BCE:  MOVLB  B
01BD0:  IORWF  x58,W
01BD2:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
01BD4:  BCF    FD8.0
01BD6:  RLCF   49,W
01BD8:  MOVWF  x58
01BDA:  MOVLW  00
01BDC:  MOVLB  A
01BDE:  BTFSS  xDF.5
01BE0:  MOVLW  01
01BE2:  MOVLB  B
01BE4:  IORWF  x58,W
01BE6:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
01BE8:  BCF    FD8.0
01BEA:  RLCF   49,W
01BEC:  MOVWF  x58
01BEE:  MOVLW  00
01BF0:  MOVLB  A
01BF2:  BTFSS  xDF.4
01BF4:  MOVLW  01
01BF6:  MOVLB  B
01BF8:  IORWF  x58,W
01BFA:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
01BFC:  BCF    FD8.0
01BFE:  RLCF   49,W
01C00:  MOVWF  x58
01C02:  MOVLW  00
01C04:  MOVLB  A
01C06:  BTFSS  xDF.3
01C08:  MOVLW  01
01C0A:  MOVLB  B
01C0C:  IORWF  x58,W
01C0E:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
01C10:  BCF    FD8.0
01C12:  RLCF   49,W
01C14:  MOVWF  x58
01C16:  MOVLW  00
01C18:  MOVLB  A
01C1A:  BTFSS  xDF.2
01C1C:  MOVLW  01
01C1E:  MOVLB  B
01C20:  IORWF  x58,W
01C22:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
01C24:  BCF    FD8.0
01C26:  RLCF   49,W
01C28:  MOVWF  x58
01C2A:  MOVLW  00
01C2C:  MOVLB  A
01C2E:  BTFSS  xDF.1
01C30:  MOVLW  01
01C32:  MOVLB  B
01C34:  IORWF  x58,W
01C36:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
01C38:  BCF    FD8.0
01C3A:  RLCF   49,W
01C3C:  MOVWF  x58
01C3E:  MOVLW  00
01C40:  MOVLB  A
01C42:  BTFSS  xDF.0
01C44:  MOVLW  01
01C46:  MOVLB  B
01C48:  IORWF  x58,W
01C4A:  MOVWF  49
01C4C:  MOVLB  0
01C4E:  RETURN 0
....................     
.................... 
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Inputt type 1-8
*
0089A:  MOVFF  FF2,B58
0089E:  BCF    FF2.7
008A0:  CLRF   FAA
008A2:  MOVLW  01
008A4:  MOVWF  FA9
008A6:  BCF    FA6.6
008A8:  BCF    FA6.7
008AA:  BSF    FA6.0
008AC:  MOVF   FA8,W
008AE:  MOVLB  B
008B0:  BTFSC  x58.7
008B2:  BSF    FF2.7
008B4:  MOVWF  39
....................    InputType1_8 = EEpDat;
008B6:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
008BA:  MOVLB  A
008BC:  BCF    xE1.0
008BE:  BTFSC  39.0
008C0:  BSF    xE1.0
....................    InputType.B2 = EEpDat >> 1;
008C2:  BCF    FD8.0
008C4:  RRCF   39,W
008C6:  BCF    xE1.1
008C8:  BTFSC  FE8.0
008CA:  BSF    xE1.1
....................    InputType.B3 = EEpDat >> 2;
008CC:  RRCF   39,W
008CE:  MOVWF  00
008D0:  RRCF   00,F
008D2:  MOVLW  3F
008D4:  ANDWF  00,F
008D6:  BCF    xE1.2
008D8:  BTFSC  00.0
008DA:  BSF    xE1.2
....................    InputType.B4 = EEpDat >> 3;
008DC:  RRCF   39,W
008DE:  MOVWF  00
008E0:  RRCF   00,F
008E2:  RRCF   00,F
008E4:  MOVLW  1F
008E6:  ANDWF  00,F
008E8:  BCF    xE1.3
008EA:  BTFSC  00.0
008EC:  BSF    xE1.3
....................    InputType.B5 = EEpDat >> 4;
008EE:  SWAPF  39,W
008F0:  MOVWF  00
008F2:  MOVLW  0F
008F4:  ANDWF  00,F
008F6:  BCF    xE1.4
008F8:  BTFSC  00.0
008FA:  BSF    xE1.4
....................    InputType.B6 = EEpDat >> 5;
008FC:  SWAPF  39,W
008FE:  MOVWF  00
00900:  RRCF   00,F
00902:  MOVLW  07
00904:  ANDWF  00,F
00906:  BCF    xE1.5
00908:  BTFSC  00.0
0090A:  BSF    xE1.5
....................    InputType.B7 = EEpDat >> 6;
0090C:  SWAPF  39,W
0090E:  MOVWF  00
00910:  RRCF   00,F
00912:  RRCF   00,F
00914:  MOVLW  03
00916:  ANDWF  00,F
00918:  BCF    xE1.6
0091A:  BTFSC  00.0
0091C:  BSF    xE1.6
....................    InputType.B8 = EEpDat >> 7;
0091E:  CLRF   00
00920:  BTFSC  39.7
00922:  BSF    00.0
00924:  BCF    xE1.7
00926:  BTFSC  00.0
00928:  BSF    xE1.7
.................... 
....................    FaultNCNO[1] = InputType.B1;
0092A:  MOVLB  B
0092C:  BCF    x45.1
0092E:  MOVLB  A
00930:  BTFSS  xE1.0
00932:  BRA    093A
00934:  MOVLB  B
00936:  BSF    x45.1
00938:  MOVLB  A
....................    FaultNCNO[2] = InputType.B2;
0093A:  MOVLB  B
0093C:  BCF    x45.2
0093E:  MOVLB  A
00940:  BTFSS  xE1.1
00942:  BRA    094A
00944:  MOVLB  B
00946:  BSF    x45.2
00948:  MOVLB  A
....................    FaultNCNO[3] = InputType.B3;
0094A:  MOVLB  B
0094C:  BCF    x45.3
0094E:  MOVLB  A
00950:  BTFSS  xE1.2
00952:  BRA    095A
00954:  MOVLB  B
00956:  BSF    x45.3
00958:  MOVLB  A
....................    FaultNCNO[4] = InputType.B4;
0095A:  MOVLB  B
0095C:  BCF    x45.4
0095E:  MOVLB  A
00960:  BTFSS  xE1.3
00962:  BRA    096A
00964:  MOVLB  B
00966:  BSF    x45.4
00968:  MOVLB  A
....................    FaultNCNO[5] = InputType.B5;
0096A:  MOVLB  B
0096C:  BCF    x45.5
0096E:  MOVLB  A
00970:  BTFSS  xE1.4
00972:  BRA    097A
00974:  MOVLB  B
00976:  BSF    x45.5
00978:  MOVLB  A
....................    FaultNCNO[6] = InputType.B6;
0097A:  MOVLB  B
0097C:  BCF    x45.6
0097E:  MOVLB  A
00980:  BTFSS  xE1.5
00982:  BRA    098A
00984:  MOVLB  B
00986:  BSF    x45.6
00988:  MOVLB  A
....................    FaultNCNO[7] = InputType.B7;
0098A:  MOVLB  B
0098C:  BCF    x45.7
0098E:  MOVLB  A
00990:  BTFSS  xE1.6
00992:  BRA    099A
00994:  MOVLB  B
00996:  BSF    x45.7
00998:  MOVLB  A
....................    FaultNCNO[8] = InputType.B8;
0099A:  MOVLB  B
0099C:  BCF    x46.0
0099E:  MOVLB  A
009A0:  BTFSS  xE1.7
009A2:  BRA    09AA
009A4:  MOVLB  B
009A6:  BSF    x46.0
009A8:  MOVLB  A
....................   
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
009AA:  MOVFF  FF2,B58
009AE:  BCF    FF2.7
009B0:  CLRF   FAA
009B2:  MOVLW  04
009B4:  MOVWF  FA9
009B6:  BCF    FA6.6
009B8:  BCF    FA6.7
009BA:  BSF    FA6.0
009BC:  MOVF   FA8,W
009BE:  MOVLB  B
009C0:  BTFSC  x58.7
009C2:  BSF    FF2.7
009C4:  MOVWF  39
....................    FaultType1_8 = EEpDat;
009C6:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
009CA:  MOVLB  A
009CC:  BCF    xE2.0
009CE:  BTFSC  39.0
009D0:  BSF    xE2.0
....................    FaultType.B2 = EEpDat >> 1;
009D2:  BCF    FD8.0
009D4:  RRCF   39,W
009D6:  BCF    xE2.1
009D8:  BTFSC  FE8.0
009DA:  BSF    xE2.1
....................    FaultType.B3 = EEpDat >> 2;
009DC:  RRCF   39,W
009DE:  MOVWF  00
009E0:  RRCF   00,F
009E2:  MOVLW  3F
009E4:  ANDWF  00,F
009E6:  BCF    xE2.2
009E8:  BTFSC  00.0
009EA:  BSF    xE2.2
....................    FaultType.B4 = EEpDat >> 3;
009EC:  RRCF   39,W
009EE:  MOVWF  00
009F0:  RRCF   00,F
009F2:  RRCF   00,F
009F4:  MOVLW  1F
009F6:  ANDWF  00,F
009F8:  BCF    xE2.3
009FA:  BTFSC  00.0
009FC:  BSF    xE2.3
....................    FaultType.B5 = EEpDat >> 4;
009FE:  SWAPF  39,W
00A00:  MOVWF  00
00A02:  MOVLW  0F
00A04:  ANDWF  00,F
00A06:  BCF    xE2.4
00A08:  BTFSC  00.0
00A0A:  BSF    xE2.4
....................    FaultType.B6 = EEpDat >> 5;
00A0C:  SWAPF  39,W
00A0E:  MOVWF  00
00A10:  RRCF   00,F
00A12:  MOVLW  07
00A14:  ANDWF  00,F
00A16:  BCF    xE2.5
00A18:  BTFSC  00.0
00A1A:  BSF    xE2.5
....................    FaultType.B7 = EEpDat >> 6;
00A1C:  SWAPF  39,W
00A1E:  MOVWF  00
00A20:  RRCF   00,F
00A22:  RRCF   00,F
00A24:  MOVLW  03
00A26:  ANDWF  00,F
00A28:  BCF    xE2.6
00A2A:  BTFSC  00.0
00A2C:  BSF    xE2.6
....................    FaultType.B8 = EEpDat >> 7;
00A2E:  CLRF   00
00A30:  BTFSC  39.7
00A32:  BSF    00.0
00A34:  BCF    xE2.7
00A36:  BTFSC  00.0
00A38:  BSF    xE2.7
.................... 
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00A3A:  MOVFF  FF2,B58
00A3E:  BCF    FF2.7
00A40:  CLRF   FAA
00A42:  MOVLW  07
00A44:  MOVWF  FA9
00A46:  BCF    FA6.6
00A48:  BCF    FA6.7
00A4A:  BSF    FA6.0
00A4C:  MOVF   FA8,W
00A4E:  MOVLB  B
00A50:  BTFSC  x58.7
00A52:  BSF    FF2.7
00A54:  MOVWF  39
....................    OutputType1_8 = EEpDat;
00A56:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00A5A:  MOVLB  A
00A5C:  BCF    xE3.0
00A5E:  BTFSC  39.0
00A60:  BSF    xE3.0
....................    OutputType.B2 = EEpDat >> 1;
00A62:  BCF    FD8.0
00A64:  RRCF   39,W
00A66:  BCF    xE3.1
00A68:  BTFSC  FE8.0
00A6A:  BSF    xE3.1
....................    OutputType.B3 = EEpDat >> 2;
00A6C:  RRCF   39,W
00A6E:  MOVWF  00
00A70:  RRCF   00,F
00A72:  MOVLW  3F
00A74:  ANDWF  00,F
00A76:  BCF    xE3.2
00A78:  BTFSC  00.0
00A7A:  BSF    xE3.2
....................    OutputType.B4 = EEpDat >> 3;
00A7C:  RRCF   39,W
00A7E:  MOVWF  00
00A80:  RRCF   00,F
00A82:  RRCF   00,F
00A84:  MOVLW  1F
00A86:  ANDWF  00,F
00A88:  BCF    xE3.3
00A8A:  BTFSC  00.0
00A8C:  BSF    xE3.3
....................    OutputType.B5 = EEpDat >> 4;
00A8E:  SWAPF  39,W
00A90:  MOVWF  00
00A92:  MOVLW  0F
00A94:  ANDWF  00,F
00A96:  BCF    xE3.4
00A98:  BTFSC  00.0
00A9A:  BSF    xE3.4
....................    OutputType.B6 = EEpDat >> 5;
00A9C:  SWAPF  39,W
00A9E:  MOVWF  00
00AA0:  RRCF   00,F
00AA2:  MOVLW  07
00AA4:  ANDWF  00,F
00AA6:  BCF    xE3.5
00AA8:  BTFSC  00.0
00AAA:  BSF    xE3.5
....................    OutputType.B7 = EEpDat >> 6;
00AAC:  SWAPF  39,W
00AAE:  MOVWF  00
00AB0:  RRCF   00,F
00AB2:  RRCF   00,F
00AB4:  MOVLW  03
00AB6:  ANDWF  00,F
00AB8:  BCF    xE3.6
00ABA:  BTFSC  00.0
00ABC:  BSF    xE3.6
....................    OutputType.B8 = EEpDat >> 7;
00ABE:  CLRF   00
00AC0:  BTFSC  39.7
00AC2:  BSF    00.0
00AC4:  BCF    xE3.7
00AC6:  BTFSC  00.0
00AC8:  BSF    xE3.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00ACA:  MOVFF  FF2,B58
00ACE:  BCF    FF2.7
00AD0:  CLRF   FAA
00AD2:  MOVLW  0A
00AD4:  MOVWF  FA9
00AD6:  BCF    FA6.6
00AD8:  BCF    FA6.7
00ADA:  BSF    FA6.0
00ADC:  MOVF   FA8,W
00ADE:  MOVLB  B
00AE0:  BTFSC  x58.7
00AE2:  BSF    FF2.7
00AE4:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
00AE6:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
00AEA:  MOVLB  A
00AEC:  BCF    xE4.0
00AEE:  BTFSC  39.0
00AF0:  BSF    xE4.0
....................    OutputBoth.B2 = EEpDat >> 1;
00AF2:  BCF    FD8.0
00AF4:  RRCF   39,W
00AF6:  BCF    xE4.1
00AF8:  BTFSC  FE8.0
00AFA:  BSF    xE4.1
....................    OutputBoth.B3 = EEpDat >> 2;
00AFC:  RRCF   39,W
00AFE:  MOVWF  00
00B00:  RRCF   00,F
00B02:  MOVLW  3F
00B04:  ANDWF  00,F
00B06:  BCF    xE4.2
00B08:  BTFSC  00.0
00B0A:  BSF    xE4.2
....................    OutputBoth.B4 = EEpDat >> 3;
00B0C:  RRCF   39,W
00B0E:  MOVWF  00
00B10:  RRCF   00,F
00B12:  RRCF   00,F
00B14:  MOVLW  1F
00B16:  ANDWF  00,F
00B18:  BCF    xE4.3
00B1A:  BTFSC  00.0
00B1C:  BSF    xE4.3
....................    OutputBoth.B5 = EEpDat >> 4;
00B1E:  SWAPF  39,W
00B20:  MOVWF  00
00B22:  MOVLW  0F
00B24:  ANDWF  00,F
00B26:  BCF    xE4.4
00B28:  BTFSC  00.0
00B2A:  BSF    xE4.4
....................    OutputBoth.B6 = EEpDat >> 5;
00B2C:  SWAPF  39,W
00B2E:  MOVWF  00
00B30:  RRCF   00,F
00B32:  MOVLW  07
00B34:  ANDWF  00,F
00B36:  BCF    xE4.5
00B38:  BTFSC  00.0
00B3A:  BSF    xE4.5
....................    OutputBoth.B7 = EEpDat >> 6;
00B3C:  SWAPF  39,W
00B3E:  MOVWF  00
00B40:  RRCF   00,F
00B42:  RRCF   00,F
00B44:  MOVLW  03
00B46:  ANDWF  00,F
00B48:  BCF    xE4.6
00B4A:  BTFSC  00.0
00B4C:  BSF    xE4.6
....................    OutputBoth.B8 = EEpDat >> 7;
00B4E:  CLRF   00
00B50:  BTFSC  39.7
00B52:  BSF    00.0
00B54:  BCF    xE4.7
00B56:  BTFSC  00.0
00B58:  BSF    xE4.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00B5A:  MOVFF  FF2,B58
00B5E:  BCF    FF2.7
00B60:  CLRF   FAA
00B62:  MOVLW  0D
00B64:  MOVWF  FA9
00B66:  BCF    FA6.6
00B68:  BCF    FA6.7
00B6A:  BSF    FA6.0
00B6C:  MOVF   FA8,W
00B6E:  MOVLB  B
00B70:  BTFSC  x58.7
00B72:  BSF    FF2.7
00B74:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
00B76:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00B7A:  MOVLB  A
00B7C:  BCF    xE5.0
00B7E:  BTFSC  39.0
00B80:  BSF    xE5.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00B82:  BCF    FD8.0
00B84:  RRCF   39,W
00B86:  BCF    xE5.1
00B88:  BTFSC  FE8.0
00B8A:  BSF    xE5.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00B8C:  RRCF   39,W
00B8E:  MOVWF  00
00B90:  RRCF   00,F
00B92:  MOVLW  3F
00B94:  ANDWF  00,F
00B96:  BCF    xE5.2
00B98:  BTFSC  00.0
00B9A:  BSF    xE5.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00B9C:  RRCF   39,W
00B9E:  MOVWF  00
00BA0:  RRCF   00,F
00BA2:  RRCF   00,F
00BA4:  MOVLW  1F
00BA6:  ANDWF  00,F
00BA8:  BCF    xE5.3
00BAA:  BTFSC  00.0
00BAC:  BSF    xE5.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00BAE:  SWAPF  39,W
00BB0:  MOVWF  00
00BB2:  MOVLW  0F
00BB4:  ANDWF  00,F
00BB6:  BCF    xE5.4
00BB8:  BTFSC  00.0
00BBA:  BSF    xE5.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00BBC:  SWAPF  39,W
00BBE:  MOVWF  00
00BC0:  RRCF   00,F
00BC2:  MOVLW  07
00BC4:  ANDWF  00,F
00BC6:  BCF    xE5.5
00BC8:  BTFSC  00.0
00BCA:  BSF    xE5.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00BCC:  SWAPF  39,W
00BCE:  MOVWF  00
00BD0:  RRCF   00,F
00BD2:  RRCF   00,F
00BD4:  MOVLW  03
00BD6:  ANDWF  00,F
00BD8:  BCF    xE5.6
00BDA:  BTFSC  00.0
00BDC:  BSF    xE5.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00BDE:  CLRF   00
00BE0:  BTFSC  39.7
00BE2:  BSF    00.0
00BE4:  BCF    xE5.7
00BE6:  BTFSC  00.0
00BE8:  BSF    xE5.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00BEA:  MOVFF  FF2,B58
00BEE:  BCF    FF2.7
00BF0:  CLRF   FAA
00BF2:  MOVLW  10
00BF4:  MOVWF  FA9
00BF6:  BCF    FA6.6
00BF8:  BCF    FA6.7
00BFA:  BSF    FA6.0
00BFC:  MOVF   FA8,W
00BFE:  MOVLB  B
00C00:  BTFSC  x58.7
00C02:  BSF    FF2.7
00C04:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00C06:  MOVLB  A
00C08:  BCF    xEB.0
00C0A:  BTFSC  39.0
00C0C:  BSF    xEB.0
....................    RED_Colour.B2 = EEpDat >> 1;
00C0E:  BCF    FD8.0
00C10:  RRCF   39,W
00C12:  BCF    xEB.1
00C14:  BTFSC  FE8.0
00C16:  BSF    xEB.1
....................    RED_Colour.B3 = EEpDat >> 2;
00C18:  RRCF   39,W
00C1A:  MOVWF  00
00C1C:  RRCF   00,F
00C1E:  MOVLW  3F
00C20:  ANDWF  00,F
00C22:  BCF    xEB.2
00C24:  BTFSC  00.0
00C26:  BSF    xEB.2
....................    RED_Colour.B4 = EEpDat >> 3;
00C28:  RRCF   39,W
00C2A:  MOVWF  00
00C2C:  RRCF   00,F
00C2E:  RRCF   00,F
00C30:  MOVLW  1F
00C32:  ANDWF  00,F
00C34:  BCF    xEB.3
00C36:  BTFSC  00.0
00C38:  BSF    xEB.3
....................    RED_Colour.B5 = EEpDat >> 4;
00C3A:  SWAPF  39,W
00C3C:  MOVWF  00
00C3E:  MOVLW  0F
00C40:  ANDWF  00,F
00C42:  BCF    xEB.4
00C44:  BTFSC  00.0
00C46:  BSF    xEB.4
....................    RED_Colour.B6 = EEpDat >> 5;
00C48:  SWAPF  39,W
00C4A:  MOVWF  00
00C4C:  RRCF   00,F
00C4E:  MOVLW  07
00C50:  ANDWF  00,F
00C52:  BCF    xEB.5
00C54:  BTFSC  00.0
00C56:  BSF    xEB.5
....................    RED_Colour.B7 = EEpDat >> 6;
00C58:  SWAPF  39,W
00C5A:  MOVWF  00
00C5C:  RRCF   00,F
00C5E:  RRCF   00,F
00C60:  MOVLW  03
00C62:  ANDWF  00,F
00C64:  BCF    xEB.6
00C66:  BTFSC  00.0
00C68:  BSF    xEB.6
....................    RED_Colour.B8 = EEpDat >> 7;
00C6A:  CLRF   00
00C6C:  BTFSC  39.7
00C6E:  BSF    00.0
00C70:  BCF    xEB.7
00C72:  BTFSC  00.0
00C74:  BSF    xEB.7
....................     
....................    EEpDat = read_eeprom(0x14);
00C76:  MOVFF  FF2,B58
00C7A:  BCF    FF2.7
00C7C:  CLRF   FAA
00C7E:  MOVLW  14
00C80:  MOVWF  FA9
00C82:  BCF    FA6.6
00C84:  BCF    FA6.7
00C86:  BSF    FA6.0
00C88:  MOVF   FA8,W
00C8A:  MOVLB  B
00C8C:  BTFSC  x58.7
00C8E:  BSF    FF2.7
00C90:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00C92:  MOVLB  A
00C94:  BCF    xEC.0
00C96:  BTFSC  39.0
00C98:  BSF    xEC.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00C9A:  BCF    FD8.0
00C9C:  RRCF   39,W
00C9E:  BCF    xEC.1
00CA0:  BTFSC  FE8.0
00CA2:  BSF    xEC.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00CA4:  RRCF   39,W
00CA6:  MOVWF  00
00CA8:  RRCF   00,F
00CAA:  MOVLW  3F
00CAC:  ANDWF  00,F
00CAE:  BCF    xEC.2
00CB0:  BTFSC  00.0
00CB2:  BSF    xEC.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00CB4:  RRCF   39,W
00CB6:  MOVWF  00
00CB8:  RRCF   00,F
00CBA:  RRCF   00,F
00CBC:  MOVLW  1F
00CBE:  ANDWF  00,F
00CC0:  BCF    xEC.3
00CC2:  BTFSC  00.0
00CC4:  BSF    xEC.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00CC6:  SWAPF  39,W
00CC8:  MOVWF  00
00CCA:  MOVLW  0F
00CCC:  ANDWF  00,F
00CCE:  BCF    xEC.4
00CD0:  BTFSC  00.0
00CD2:  BSF    xEC.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00CD4:  SWAPF  39,W
00CD6:  MOVWF  00
00CD8:  RRCF   00,F
00CDA:  MOVLW  07
00CDC:  ANDWF  00,F
00CDE:  BCF    xEC.5
00CE0:  BTFSC  00.0
00CE2:  BSF    xEC.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00CE4:  SWAPF  39,W
00CE6:  MOVWF  00
00CE8:  RRCF   00,F
00CEA:  RRCF   00,F
00CEC:  MOVLW  03
00CEE:  ANDWF  00,F
00CF0:  BCF    xEC.6
00CF2:  BTFSC  00.0
00CF4:  BSF    xEC.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00CF6:  CLRF   00
00CF8:  BTFSC  39.7
00CFA:  BSF    00.0
00CFC:  BCF    xEC.7
00CFE:  BTFSC  00.0
00D00:  BSF    xEC.7
.................... 
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00D02:  MOVFF  FF2,B58
00D06:  BCF    FF2.7
00D08:  CLRF   FAA
00D0A:  MOVLW  18
00D0C:  MOVWF  FA9
00D0E:  BCF    FA6.6
00D10:  BCF    FA6.7
00D12:  BSF    FA6.0
00D14:  MOVF   FA8,W
00D16:  MOVLB  B
00D18:  BTFSC  x58.7
00D1A:  BSF    FF2.7
00D1C:  MOVLB  0
00D1E:  MOVWF  x6A
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00D20:  MOVFF  FF2,B58
00D24:  BCF    FF2.7
00D26:  CLRF   FAA
00D28:  MOVLW  19
00D2A:  MOVWF  FA9
00D2C:  BCF    FA6.6
00D2E:  BCF    FA6.7
00D30:  BSF    FA6.0
00D32:  MOVF   FA8,W
00D34:  MOVLB  B
00D36:  BTFSC  x58.7
00D38:  BSF    FF2.7
00D3A:  MOVLB  0
00D3C:  MOVWF  x6B
....................    FlashingRateTime = FlashingRate = read_eeprom(0x1A); // Flashing rate
00D3E:  MOVFF  FF2,B58
00D42:  BCF    FF2.7
00D44:  CLRF   FAA
00D46:  MOVLW  1A
00D48:  MOVWF  FA9
00D4A:  BCF    FA6.6
00D4C:  BCF    FA6.7
00D4E:  BSF    FA6.0
00D50:  MOVF   FA8,W
00D52:  MOVLB  B
00D54:  BTFSC  x58.7
00D56:  BSF    FF2.7
00D58:  MOVLB  0
00D5A:  MOVWF  x6C
00D5C:  MOVFF  6C,1B
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00D60:  MOVFF  FF2,B58
00D64:  BCF    FF2.7
00D66:  CLRF   FAA
00D68:  MOVLW  1B
00D6A:  MOVWF  FA9
00D6C:  BCF    FA6.6
00D6E:  BCF    FA6.7
00D70:  BSF    FA6.0
00D72:  MOVF   FA8,W
00D74:  MOVLB  B
00D76:  BTFSC  x58.7
00D78:  BSF    FF2.7
00D7A:  MOVLB  0
00D7C:  MOVWF  x6D
....................    AllFaultDelayTime = read_eeprom(0x1C);  // Master or slave sync(flashing)
00D7E:  MOVFF  FF2,B58
00D82:  BCF    FF2.7
00D84:  CLRF   FAA
00D86:  MOVLW  1C
00D88:  MOVWF  FA9
00D8A:  BCF    FA6.6
00D8C:  BCF    FA6.7
00D8E:  BSF    FA6.0
00D90:  MOVF   FA8,W
00D92:  MOVLB  B
00D94:  BTFSC  x58.7
00D96:  BSF    FF2.7
00D98:  MOVWF  x44
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
00D9A:  MOVFF  FF2,B58
00D9E:  BCF    FF2.7
00DA0:  CLRF   FAA
00DA2:  MOVLW  1D
00DA4:  MOVWF  FA9
00DA6:  BCF    FA6.6
00DA8:  BCF    FA6.7
00DAA:  BSF    FA6.0
00DAC:  MOVF   FA8,W
00DAE:  BTFSC  x58.7
00DB0:  BSF    FF2.7
00DB2:  MOVLB  0
00DB4:  MOVWF  x79
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
00DB6:  MOVFF  FF2,B58
00DBA:  BCF    FF2.7
00DBC:  CLRF   FAA
00DBE:  MOVLW  1E
00DC0:  MOVWF  FA9
00DC2:  BCF    FA6.6
00DC4:  BCF    FA6.7
00DC6:  BSF    FA6.0
00DC8:  MOVF   FA8,W
00DCA:  MOVLB  B
00DCC:  BTFSC  x58.7
00DCE:  BSF    FF2.7
00DD0:  CLRF   x1F
00DD2:  MOVWF  x1E
....................    FaultDelayTime[2] = read_eeprom(0x1F);
00DD4:  MOVFF  FF2,B58
00DD8:  BCF    FF2.7
00DDA:  CLRF   FAA
00DDC:  MOVLW  1F
00DDE:  MOVWF  FA9
00DE0:  BCF    FA6.6
00DE2:  BCF    FA6.7
00DE4:  BSF    FA6.0
00DE6:  MOVF   FA8,W
00DE8:  BTFSC  x58.7
00DEA:  BSF    FF2.7
00DEC:  CLRF   x21
00DEE:  MOVWF  x20
....................    FaultDelayTime[3] = read_eeprom(0x20);
00DF0:  MOVFF  FF2,B58
00DF4:  BCF    FF2.7
00DF6:  CLRF   FAA
00DF8:  MOVLW  20
00DFA:  MOVWF  FA9
00DFC:  BCF    FA6.6
00DFE:  BCF    FA6.7
00E00:  BSF    FA6.0
00E02:  MOVF   FA8,W
00E04:  BTFSC  x58.7
00E06:  BSF    FF2.7
00E08:  CLRF   x23
00E0A:  MOVWF  x22
....................    FaultDelayTime[4] = read_eeprom(0x21);
00E0C:  MOVFF  FF2,B58
00E10:  BCF    FF2.7
00E12:  CLRF   FAA
00E14:  MOVLW  21
00E16:  MOVWF  FA9
00E18:  BCF    FA6.6
00E1A:  BCF    FA6.7
00E1C:  BSF    FA6.0
00E1E:  MOVF   FA8,W
00E20:  BTFSC  x58.7
00E22:  BSF    FF2.7
00E24:  CLRF   x25
00E26:  MOVWF  x24
....................    FaultDelayTime[5] = read_eeprom(0x22);
00E28:  MOVFF  FF2,B58
00E2C:  BCF    FF2.7
00E2E:  CLRF   FAA
00E30:  MOVLW  22
00E32:  MOVWF  FA9
00E34:  BCF    FA6.6
00E36:  BCF    FA6.7
00E38:  BSF    FA6.0
00E3A:  MOVF   FA8,W
00E3C:  BTFSC  x58.7
00E3E:  BSF    FF2.7
00E40:  CLRF   x27
00E42:  MOVWF  x26
....................    FaultDelayTime[6] = read_eeprom(0x23);
00E44:  MOVFF  FF2,B58
00E48:  BCF    FF2.7
00E4A:  CLRF   FAA
00E4C:  MOVLW  23
00E4E:  MOVWF  FA9
00E50:  BCF    FA6.6
00E52:  BCF    FA6.7
00E54:  BSF    FA6.0
00E56:  MOVF   FA8,W
00E58:  BTFSC  x58.7
00E5A:  BSF    FF2.7
00E5C:  CLRF   x29
00E5E:  MOVWF  x28
....................    FaultDelayTime[7] = read_eeprom(0x24);
00E60:  MOVFF  FF2,B58
00E64:  BCF    FF2.7
00E66:  CLRF   FAA
00E68:  MOVLW  24
00E6A:  MOVWF  FA9
00E6C:  BCF    FA6.6
00E6E:  BCF    FA6.7
00E70:  BSF    FA6.0
00E72:  MOVF   FA8,W
00E74:  BTFSC  x58.7
00E76:  BSF    FF2.7
00E78:  CLRF   x2B
00E7A:  MOVWF  x2A
....................    FaultDelayTime[8] = read_eeprom(0x25);
00E7C:  MOVFF  FF2,B58
00E80:  BCF    FF2.7
00E82:  CLRF   FAA
00E84:  MOVLW  25
00E86:  MOVWF  FA9
00E88:  BCF    FA6.6
00E8A:  BCF    FA6.7
00E8C:  BSF    FA6.0
00E8E:  MOVF   FA8,W
00E90:  BTFSC  x58.7
00E92:  BSF    FF2.7
00E94:  CLRF   x2D
00E96:  MOVWF  x2C
....................    FaultDelayTime[9] = read_eeprom(0x26);
00E98:  MOVFF  FF2,B58
00E9C:  BCF    FF2.7
00E9E:  CLRF   FAA
00EA0:  MOVLW  26
00EA2:  MOVWF  FA9
00EA4:  BCF    FA6.6
00EA6:  BCF    FA6.7
00EA8:  BSF    FA6.0
00EAA:  MOVF   FA8,W
00EAC:  BTFSC  x58.7
00EAE:  BSF    FF2.7
00EB0:  CLRF   x2F
00EB2:  MOVWF  x2E
....................    FaultDelayTime[10] = read_eeprom(0x27);
00EB4:  MOVFF  FF2,B58
00EB8:  BCF    FF2.7
00EBA:  CLRF   FAA
00EBC:  MOVLW  27
00EBE:  MOVWF  FA9
00EC0:  BCF    FA6.6
00EC2:  BCF    FA6.7
00EC4:  BSF    FA6.0
00EC6:  MOVF   FA8,W
00EC8:  BTFSC  x58.7
00ECA:  BSF    FF2.7
00ECC:  CLRF   x31
00ECE:  MOVWF  x30
....................    FaultDelayTime[11] = read_eeprom(0x28);
00ED0:  MOVFF  FF2,B58
00ED4:  BCF    FF2.7
00ED6:  CLRF   FAA
00ED8:  MOVLW  28
00EDA:  MOVWF  FA9
00EDC:  BCF    FA6.6
00EDE:  BCF    FA6.7
00EE0:  BSF    FA6.0
00EE2:  MOVF   FA8,W
00EE4:  BTFSC  x58.7
00EE6:  BSF    FF2.7
00EE8:  CLRF   x33
00EEA:  MOVWF  x32
....................    FaultDelayTime[12] = read_eeprom(0x29);
00EEC:  MOVFF  FF2,B58
00EF0:  BCF    FF2.7
00EF2:  CLRF   FAA
00EF4:  MOVLW  29
00EF6:  MOVWF  FA9
00EF8:  BCF    FA6.6
00EFA:  BCF    FA6.7
00EFC:  BSF    FA6.0
00EFE:  MOVF   FA8,W
00F00:  BTFSC  x58.7
00F02:  BSF    FF2.7
00F04:  CLRF   x35
00F06:  MOVWF  x34
....................    FaultDelayTime[13] = read_eeprom(0x2A);
00F08:  MOVFF  FF2,B58
00F0C:  BCF    FF2.7
00F0E:  CLRF   FAA
00F10:  MOVLW  2A
00F12:  MOVWF  FA9
00F14:  BCF    FA6.6
00F16:  BCF    FA6.7
00F18:  BSF    FA6.0
00F1A:  MOVF   FA8,W
00F1C:  BTFSC  x58.7
00F1E:  BSF    FF2.7
00F20:  CLRF   x37
00F22:  MOVWF  x36
....................    FaultDelayTime[14] = read_eeprom(0x2B);
00F24:  MOVFF  FF2,B58
00F28:  BCF    FF2.7
00F2A:  CLRF   FAA
00F2C:  MOVLW  2B
00F2E:  MOVWF  FA9
00F30:  BCF    FA6.6
00F32:  BCF    FA6.7
00F34:  BSF    FA6.0
00F36:  MOVF   FA8,W
00F38:  BTFSC  x58.7
00F3A:  BSF    FF2.7
00F3C:  CLRF   x39
00F3E:  MOVWF  x38
....................    FaultDelayTime[15] = read_eeprom(0x2C);
00F40:  MOVFF  FF2,B58
00F44:  BCF    FF2.7
00F46:  CLRF   FAA
00F48:  MOVLW  2C
00F4A:  MOVWF  FA9
00F4C:  BCF    FA6.6
00F4E:  BCF    FA6.7
00F50:  BSF    FA6.0
00F52:  MOVF   FA8,W
00F54:  BTFSC  x58.7
00F56:  BSF    FF2.7
00F58:  CLRF   x3B
00F5A:  MOVWF  x3A
....................    FaultDelayTime[16] = read_eeprom(0x2D);
00F5C:  MOVFF  FF2,B58
00F60:  BCF    FF2.7
00F62:  CLRF   FAA
00F64:  MOVLW  2D
00F66:  MOVWF  FA9
00F68:  BCF    FA6.6
00F6A:  BCF    FA6.7
00F6C:  BSF    FA6.0
00F6E:  MOVF   FA8,W
00F70:  BTFSC  x58.7
00F72:  BSF    FF2.7
00F74:  CLRF   x3D
00F76:  MOVWF  x3C
....................    FaultDelayTime[17] = read_eeprom(0x2E);
00F78:  MOVFF  FF2,B58
00F7C:  BCF    FF2.7
00F7E:  CLRF   FAA
00F80:  MOVLW  2E
00F82:  MOVWF  FA9
00F84:  BCF    FA6.6
00F86:  BCF    FA6.7
00F88:  BSF    FA6.0
00F8A:  MOVF   FA8,W
00F8C:  BTFSC  x58.7
00F8E:  BSF    FF2.7
00F90:  CLRF   x3F
00F92:  MOVWF  x3E
....................    FaultDelayTime[18] = read_eeprom(0x2F);
00F94:  MOVFF  FF2,B58
00F98:  BCF    FF2.7
00F9A:  CLRF   FAA
00F9C:  MOVLW  2F
00F9E:  MOVWF  FA9
00FA0:  BCF    FA6.6
00FA2:  BCF    FA6.7
00FA4:  BSF    FA6.0
00FA6:  MOVF   FA8,W
00FA8:  BTFSC  x58.7
00FAA:  BSF    FF2.7
00FAC:  CLRF   x41
00FAE:  MOVWF  x40
....................    FaultDelayTime[19] = read_eeprom(0x30);
00FB0:  MOVFF  FF2,B58
00FB4:  BCF    FF2.7
00FB6:  CLRF   FAA
00FB8:  MOVLW  30
00FBA:  MOVWF  FA9
00FBC:  BCF    FA6.6
00FBE:  BCF    FA6.7
00FC0:  BSF    FA6.0
00FC2:  MOVF   FA8,W
00FC4:  BTFSC  x58.7
00FC6:  BSF    FF2.7
00FC8:  CLRF   x43
00FCA:  MOVWF  x42
....................    FaultDelayTime[20] = read_eeprom(0x31);
00FCC:  MOVFF  FF2,B58
00FD0:  BCF    FF2.7
00FD2:  CLRF   FAA
00FD4:  MOVLW  31
00FD6:  MOVWF  FA9
00FD8:  BCF    FA6.6
00FDA:  BCF    FA6.7
00FDC:  BSF    FA6.0
00FDE:  MOVF   FA8,W
00FE0:  BTFSC  x58.7
00FE2:  BSF    FF2.7
00FE4:  CLRF   x45
00FE6:  MOVWF  x44
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
00FE8:  CLRF   x4E
....................    for(; ; a++)
....................    {
....................       restart_wdt();
00FEA:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
00FEC:  MOVLW  32
00FEE:  ADDWF  x4E,W
00FF0:  MOVWF  x58
00FF2:  MOVFF  FF2,B59
00FF6:  BCF    FF2.7
00FF8:  CLRF   FAA
00FFA:  MOVFF  B58,FA9
00FFE:  BCF    FA6.6
01000:  BCF    FA6.7
01002:  BSF    FA6.0
01004:  MOVF   FA8,W
01006:  BTFSC  x59.7
01008:  BSF    FF2.7
0100A:  MOVWF  x4F
....................       if((phonenum == 0x0D) || (a > 15))
0100C:  MOVF   x4F,W
0100E:  SUBLW  0D
01010:  BZ    1018
01012:  MOVF   x4E,W
01014:  SUBLW  0F
01016:  BC    1060
....................       {
....................          sms_phonenumber[a] =  '\0';
01018:  CLRF   03
0101A:  MOVF   x4E,W
0101C:  ADDLW  88
0101E:  MOVWF  FE9
01020:  MOVLW  09
01022:  ADDWFC 03,W
01024:  MOVWF  FEA
01026:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
01028:  MOVLW  32
0102A:  ADDWF  x4E,W
0102C:  MOVWF  x58
0102E:  MOVF   FF2,W
01030:  MOVWF  00
01032:  BCF    FF2.7
01034:  CLRF   FAA
01036:  MOVFF  B58,FA9
0103A:  MOVFF  B4F,FA8
0103E:  BCF    FA6.6
01040:  BCF    FA6.7
01042:  BSF    FA6.2
01044:  MOVLB  F
01046:  MOVLW  55
01048:  MOVWF  FA7
0104A:  MOVLW  AA
0104C:  MOVWF  FA7
0104E:  BSF    FA6.1
01050:  BTFSC  FA6.1
01052:  BRA    1050
01054:  BCF    FA6.2
01056:  MOVF   00,W
01058:  IORWF  FF2,F
....................          break;
0105A:  BRA    107C
....................       }
0105C:  BRA    1074
0105E:  MOVLB  B
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
01060:  CLRF   03
01062:  MOVF   x4E,W
01064:  ADDLW  88
01066:  MOVWF  FE9
01068:  MOVLW  09
0106A:  ADDWFC 03,W
0106C:  MOVWF  FEA
0106E:  MOVFF  B4F,FEF
01072:  MOVLB  F
....................       }
01074:  MOVLB  B
01076:  INCF   x4E,F
01078:  BRA    0FEA
0107A:  MOVLB  F
....................    }
....................    
....................    int16  i =3,j=0,k=0 , buff;
0107C:  MOVLB  B
0107E:  CLRF   x51
01080:  MOVLW  03
01082:  MOVWF  x50
01084:  CLRF   x53
01086:  CLRF   x52
01088:  CLRF   x55
0108A:  CLRF   x54
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0108C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0108E:  MOVLW  5D
01090:  ADDWF  x50,W
01092:  MOVWF  x58
01094:  MOVLW  00
01096:  ADDWFC x51,W
01098:  MOVWF  x59
0109A:  MOVFF  FF2,B5A
0109E:  BCF    FF2.7
010A0:  MOVFF  B59,FAA
010A4:  MOVFF  B58,FA9
010A8:  BCF    FA6.6
010AA:  BCF    FA6.7
010AC:  BSF    FA6.0
010AE:  MOVF   FA8,W
010B0:  BTFSC  x5A.7
010B2:  BSF    FF2.7
010B4:  CLRF   x57
010B6:  MOVWF  x56
....................       
....................       if((buff == 0x0D)|| (j>41))
010B8:  MOVF   x56,W
010BA:  SUBLW  0D
010BC:  BNZ   10C2
010BE:  MOVF   x57,F
010C0:  BZ    10CC
010C2:  MOVF   x53,F
010C4:  BNZ   10CC
010C6:  MOVF   x52,W
010C8:  SUBLW  29
010CA:  BC    10DE
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
010CC:  MOVLW  97
010CE:  ADDWF  x52,W
010D0:  MOVWF  FE9
010D2:  MOVLW  09
010D4:  ADDWFC x53,W
010D6:  MOVWF  FEA
010D8:  CLRF   FEF
....................          break;
010DA:  BRA    1102
....................       }
010DC:  BRA    10EE
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
010DE:  MOVLW  97
010E0:  ADDWF  x52,W
010E2:  MOVWF  FE9
010E4:  MOVLW  09
010E6:  ADDWFC x53,W
010E8:  MOVWF  FEA
010EA:  MOVFF  B56,FEF
....................       }
010EE:  MOVFF  B51,03
010F2:  MOVF   x50,W
010F4:  INCF   x50,F
010F6:  BTFSC  FD8.2
010F8:  INCF   x51,F
010FA:  INCF   x52,F
010FC:  BTFSC  FD8.2
010FE:  INCF   x53,F
01100:  BRA    108C
....................    }
....................    
....................    i++;
01102:  INCF   x50,F
01104:  BTFSC  FD8.2
01106:  INCF   x51,F
....................    j=0;
01108:  CLRF   x53
0110A:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0110C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0110E:  MOVLW  5D
01110:  ADDWF  x50,W
01112:  MOVWF  x58
01114:  MOVLW  00
01116:  ADDWFC x51,W
01118:  MOVWF  x59
0111A:  MOVFF  FF2,B5A
0111E:  BCF    FF2.7
01120:  MOVFF  B59,FAA
01124:  MOVFF  B58,FA9
01128:  BCF    FA6.6
0112A:  BCF    FA6.7
0112C:  BSF    FA6.0
0112E:  MOVF   FA8,W
01130:  BTFSC  x5A.7
01132:  BSF    FF2.7
01134:  CLRF   x57
01136:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01138:  MOVF   x56,W
0113A:  SUBLW  0D
0113C:  BNZ   1142
0113E:  MOVF   x57,F
01140:  BZ    114C
01142:  MOVF   x53,F
01144:  BNZ   114C
01146:  MOVF   x52,W
01148:  SUBLW  29
0114A:  BC    115E
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
0114C:  MOVLW  C0
0114E:  ADDWF  x52,W
01150:  MOVWF  FE9
01152:  MOVLW  09
01154:  ADDWFC x53,W
01156:  MOVWF  FEA
01158:  CLRF   FEF
....................          break;
0115A:  BRA    1182
....................       }
0115C:  BRA    116E
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
0115E:  MOVLW  C0
01160:  ADDWF  x52,W
01162:  MOVWF  FE9
01164:  MOVLW  09
01166:  ADDWFC x53,W
01168:  MOVWF  FEA
0116A:  MOVFF  B56,FEF
....................          
....................       }
0116E:  MOVFF  B51,03
01172:  MOVF   x50,W
01174:  INCF   x50,F
01176:  BTFSC  FD8.2
01178:  INCF   x51,F
0117A:  INCF   x52,F
0117C:  BTFSC  FD8.2
0117E:  INCF   x53,F
01180:  BRA    110C
....................    }
....................    
....................    i++;
01182:  INCF   x50,F
01184:  BTFSC  FD8.2
01186:  INCF   x51,F
....................    j=0;
01188:  CLRF   x53
0118A:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0118C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0118E:  MOVLW  5D
01190:  ADDWF  x50,W
01192:  MOVWF  x58
01194:  MOVLW  00
01196:  ADDWFC x51,W
01198:  MOVWF  x59
0119A:  MOVFF  FF2,B5A
0119E:  BCF    FF2.7
011A0:  MOVFF  B59,FAA
011A4:  MOVFF  B58,FA9
011A8:  BCF    FA6.6
011AA:  BCF    FA6.7
011AC:  BSF    FA6.0
011AE:  MOVF   FA8,W
011B0:  BTFSC  x5A.7
011B2:  BSF    FF2.7
011B4:  CLRF   x57
011B6:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
011B8:  MOVF   x56,W
011BA:  SUBLW  0D
011BC:  BNZ   11C2
011BE:  MOVF   x57,F
011C0:  BZ    11CC
011C2:  MOVF   x53,F
011C4:  BNZ   11CC
011C6:  MOVF   x52,W
011C8:  SUBLW  29
011CA:  BC    11DE
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
011CC:  MOVLW  E9
011CE:  ADDWF  x52,W
011D0:  MOVWF  FE9
011D2:  MOVLW  09
011D4:  ADDWFC x53,W
011D6:  MOVWF  FEA
011D8:  CLRF   FEF
....................          break;
011DA:  BRA    1202
....................       }
011DC:  BRA    11EE
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
011DE:  MOVLW  E9
011E0:  ADDWF  x52,W
011E2:  MOVWF  FE9
011E4:  MOVLW  09
011E6:  ADDWFC x53,W
011E8:  MOVWF  FEA
011EA:  MOVFF  B56,FEF
....................          
....................       }
011EE:  MOVFF  B51,03
011F2:  MOVF   x50,W
011F4:  INCF   x50,F
011F6:  BTFSC  FD8.2
011F8:  INCF   x51,F
011FA:  INCF   x52,F
011FC:  BTFSC  FD8.2
011FE:  INCF   x53,F
01200:  BRA    118C
....................    }
....................    
....................    i++;
01202:  INCF   x50,F
01204:  BTFSC  FD8.2
01206:  INCF   x51,F
....................    j=0;
01208:  CLRF   x53
0120A:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0120C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0120E:  MOVLW  5D
01210:  ADDWF  x50,W
01212:  MOVWF  x58
01214:  MOVLW  00
01216:  ADDWFC x51,W
01218:  MOVWF  x59
0121A:  MOVFF  FF2,B5A
0121E:  BCF    FF2.7
01220:  MOVFF  B59,FAA
01224:  MOVFF  B58,FA9
01228:  BCF    FA6.6
0122A:  BCF    FA6.7
0122C:  BSF    FA6.0
0122E:  MOVF   FA8,W
01230:  BTFSC  x5A.7
01232:  BSF    FF2.7
01234:  CLRF   x57
01236:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01238:  MOVF   x56,W
0123A:  SUBLW  0D
0123C:  BNZ   1242
0123E:  MOVF   x57,F
01240:  BZ    124C
01242:  MOVF   x53,F
01244:  BNZ   124C
01246:  MOVF   x52,W
01248:  SUBLW  29
0124A:  BC    125E
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
0124C:  MOVLW  12
0124E:  ADDWF  x52,W
01250:  MOVWF  FE9
01252:  MOVLW  0A
01254:  ADDWFC x53,W
01256:  MOVWF  FEA
01258:  CLRF   FEF
....................          break;
0125A:  BRA    1282
....................       }
0125C:  BRA    126E
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
0125E:  MOVLW  12
01260:  ADDWF  x52,W
01262:  MOVWF  FE9
01264:  MOVLW  0A
01266:  ADDWFC x53,W
01268:  MOVWF  FEA
0126A:  MOVFF  B56,FEF
....................          
....................       }
0126E:  MOVFF  B51,03
01272:  MOVF   x50,W
01274:  INCF   x50,F
01276:  BTFSC  FD8.2
01278:  INCF   x51,F
0127A:  INCF   x52,F
0127C:  BTFSC  FD8.2
0127E:  INCF   x53,F
01280:  BRA    120C
....................    }
....................    
....................    i++;
01282:  INCF   x50,F
01284:  BTFSC  FD8.2
01286:  INCF   x51,F
....................    j=0;
01288:  CLRF   x53
0128A:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0128C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0128E:  MOVLW  5D
01290:  ADDWF  x50,W
01292:  MOVWF  x58
01294:  MOVLW  00
01296:  ADDWFC x51,W
01298:  MOVWF  x59
0129A:  MOVFF  FF2,B5A
0129E:  BCF    FF2.7
012A0:  MOVFF  B59,FAA
012A4:  MOVFF  B58,FA9
012A8:  BCF    FA6.6
012AA:  BCF    FA6.7
012AC:  BSF    FA6.0
012AE:  MOVF   FA8,W
012B0:  BTFSC  x5A.7
012B2:  BSF    FF2.7
012B4:  CLRF   x57
012B6:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
012B8:  MOVF   x56,W
012BA:  SUBLW  0D
012BC:  BNZ   12C2
012BE:  MOVF   x57,F
012C0:  BZ    12CC
012C2:  MOVF   x53,F
012C4:  BNZ   12CC
012C6:  MOVF   x52,W
012C8:  SUBLW  29
012CA:  BC    12DE
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
012CC:  MOVLW  3B
012CE:  ADDWF  x52,W
012D0:  MOVWF  FE9
012D2:  MOVLW  0A
012D4:  ADDWFC x53,W
012D6:  MOVWF  FEA
012D8:  CLRF   FEF
....................          break;
012DA:  BRA    1302
....................       }
012DC:  BRA    12EE
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
012DE:  MOVLW  3B
012E0:  ADDWF  x52,W
012E2:  MOVWF  FE9
012E4:  MOVLW  0A
012E6:  ADDWFC x53,W
012E8:  MOVWF  FEA
012EA:  MOVFF  B56,FEF
....................          
....................       }
012EE:  MOVFF  B51,03
012F2:  MOVF   x50,W
012F4:  INCF   x50,F
012F6:  BTFSC  FD8.2
012F8:  INCF   x51,F
012FA:  INCF   x52,F
012FC:  BTFSC  FD8.2
012FE:  INCF   x53,F
01300:  BRA    128C
....................    }
....................    
....................    i++;
01302:  INCF   x50,F
01304:  BTFSC  FD8.2
01306:  INCF   x51,F
....................    j=0;
01308:  CLRF   x53
0130A:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0130C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0130E:  MOVLW  5D
01310:  ADDWF  x50,W
01312:  MOVWF  x58
01314:  MOVLW  00
01316:  ADDWFC x51,W
01318:  MOVWF  x59
0131A:  MOVFF  FF2,B5A
0131E:  BCF    FF2.7
01320:  MOVFF  B59,FAA
01324:  MOVFF  B58,FA9
01328:  BCF    FA6.6
0132A:  BCF    FA6.7
0132C:  BSF    FA6.0
0132E:  MOVF   FA8,W
01330:  BTFSC  x5A.7
01332:  BSF    FF2.7
01334:  CLRF   x57
01336:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01338:  MOVF   x56,W
0133A:  SUBLW  0D
0133C:  BNZ   1342
0133E:  MOVF   x57,F
01340:  BZ    134C
01342:  MOVF   x53,F
01344:  BNZ   134C
01346:  MOVF   x52,W
01348:  SUBLW  29
0134A:  BC    135E
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
0134C:  MOVLW  64
0134E:  ADDWF  x52,W
01350:  MOVWF  FE9
01352:  MOVLW  0A
01354:  ADDWFC x53,W
01356:  MOVWF  FEA
01358:  CLRF   FEF
....................          break;
0135A:  BRA    1382
....................       }
0135C:  BRA    136E
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
0135E:  MOVLW  64
01360:  ADDWF  x52,W
01362:  MOVWF  FE9
01364:  MOVLW  0A
01366:  ADDWFC x53,W
01368:  MOVWF  FEA
0136A:  MOVFF  B56,FEF
....................          
....................       }
0136E:  MOVFF  B51,03
01372:  MOVF   x50,W
01374:  INCF   x50,F
01376:  BTFSC  FD8.2
01378:  INCF   x51,F
0137A:  INCF   x52,F
0137C:  BTFSC  FD8.2
0137E:  INCF   x53,F
01380:  BRA    130C
....................    }
....................    
....................    i++;
01382:  INCF   x50,F
01384:  BTFSC  FD8.2
01386:  INCF   x51,F
....................    j=0;
01388:  CLRF   x53
0138A:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0138C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0138E:  MOVLW  5D
01390:  ADDWF  x50,W
01392:  MOVWF  x58
01394:  MOVLW  00
01396:  ADDWFC x51,W
01398:  MOVWF  x59
0139A:  MOVFF  FF2,B5A
0139E:  BCF    FF2.7
013A0:  MOVFF  B59,FAA
013A4:  MOVFF  B58,FA9
013A8:  BCF    FA6.6
013AA:  BCF    FA6.7
013AC:  BSF    FA6.0
013AE:  MOVF   FA8,W
013B0:  BTFSC  x5A.7
013B2:  BSF    FF2.7
013B4:  CLRF   x57
013B6:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
013B8:  MOVF   x56,W
013BA:  SUBLW  0D
013BC:  BNZ   13C2
013BE:  MOVF   x57,F
013C0:  BZ    13CC
013C2:  MOVF   x53,F
013C4:  BNZ   13CC
013C6:  MOVF   x52,W
013C8:  SUBLW  29
013CA:  BC    13DE
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
013CC:  MOVLW  8D
013CE:  ADDWF  x52,W
013D0:  MOVWF  FE9
013D2:  MOVLW  0A
013D4:  ADDWFC x53,W
013D6:  MOVWF  FEA
013D8:  CLRF   FEF
....................          break;
013DA:  BRA    1402
....................       }
013DC:  BRA    13EE
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
013DE:  MOVLW  8D
013E0:  ADDWF  x52,W
013E2:  MOVWF  FE9
013E4:  MOVLW  0A
013E6:  ADDWFC x53,W
013E8:  MOVWF  FEA
013EA:  MOVFF  B56,FEF
....................          
....................       }
013EE:  MOVFF  B51,03
013F2:  MOVF   x50,W
013F4:  INCF   x50,F
013F6:  BTFSC  FD8.2
013F8:  INCF   x51,F
013FA:  INCF   x52,F
013FC:  BTFSC  FD8.2
013FE:  INCF   x53,F
01400:  BRA    138C
....................    }
....................    
....................    i++;
01402:  INCF   x50,F
01404:  BTFSC  FD8.2
01406:  INCF   x51,F
....................    j=0;
01408:  CLRF   x53
0140A:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
0140C:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0140E:  MOVLW  5D
01410:  ADDWF  x50,W
01412:  MOVWF  x58
01414:  MOVLW  00
01416:  ADDWFC x51,W
01418:  MOVWF  x59
0141A:  MOVFF  FF2,B5A
0141E:  BCF    FF2.7
01420:  MOVFF  B59,FAA
01424:  MOVFF  B58,FA9
01428:  BCF    FA6.6
0142A:  BCF    FA6.7
0142C:  BSF    FA6.0
0142E:  MOVF   FA8,W
01430:  BTFSC  x5A.7
01432:  BSF    FF2.7
01434:  CLRF   x57
01436:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01438:  MOVF   x56,W
0143A:  SUBLW  0D
0143C:  BNZ   1442
0143E:  MOVF   x57,F
01440:  BZ    144C
01442:  MOVF   x53,F
01444:  BNZ   144C
01446:  MOVF   x52,W
01448:  SUBLW  29
0144A:  BC    145E
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
0144C:  MOVLW  B6
0144E:  ADDWF  x52,W
01450:  MOVWF  FE9
01452:  MOVLW  0A
01454:  ADDWFC x53,W
01456:  MOVWF  FEA
01458:  CLRF   FEF
....................          break;
0145A:  BRA    1482
....................       }
0145C:  BRA    146E
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
0145E:  MOVLW  B6
01460:  ADDWF  x52,W
01462:  MOVWF  FE9
01464:  MOVLW  0A
01466:  ADDWFC x53,W
01468:  MOVWF  FEA
0146A:  MOVFF  B56,FEF
....................          
....................       }
0146E:  MOVFF  B51,03
01472:  MOVF   x50,W
01474:  INCF   x50,F
01476:  BTFSC  FD8.2
01478:  INCF   x51,F
0147A:  INCF   x52,F
0147C:  BTFSC  FD8.2
0147E:  INCF   x53,F
01480:  BRA    140C
....................    } 
01482:  MOVLB  0
01484:  RETURN 0
....................   
....................    
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
....................    SBUF = getc();
*
00542:  BTFSS  F9E.5
00544:  BRA    0542
00546:  MOVFF  FAE,2E
....................    checkCommand();
0054A:  BRA    02DA
.................... }
.................... 
0054C:  BCF    F9E.5
0054E:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
00552:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
00554:  MOVLB  9
00556:  MOVF   x85,F
00558:  BZ    0568
....................    {
....................       T_timeout--;
0055A:  DECF   x85,F
....................       if(T_timeout == 0)
0055C:  MOVF   x85,F
0055E:  BNZ   0568
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout   
00560:  MOVFF  6F,78
....................          output_bit(P485ctrl,0);
00564:  BCF    F8A.3
00566:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
00568:  MOVF   1C,F
0056A:  BZ    0584
....................    {
....................       TimeBase1s--;
0056C:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
0056E:  MOVF   1C,F
00570:  BNZ   0584
....................       {
....................          if(AutoAckDelayTime != 0x00)
00572:  MOVF   1D,F
00574:  BZ    057E
....................          {
....................             AutoAckDelayTime--;
00576:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
00578:  MOVF   1D,F
0057A:  BNZ   057E
....................             {
....................                AutoAckFlag = 1 ;
0057C:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
0057E:  BSF    30.4
....................          TimeBase1s = 100;
00580:  MOVLW  64
00582:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
00584:  MOVF   19,W
00586:  SUBLW  32
00588:  BNZ   05B4
....................    {
....................       StatusTime = 0;
0058A:  CLRF   19
....................       if(HearthbeatInd == 0)
0058C:  BTFSC  1A.0
0058E:  BRA    0598
....................       {
....................          HearthbeatInd = 1;
00590:  BSF    1A.0
....................          output_bit(Pled,1);
00592:  BSF    F8A.5
00594:  BCF    F93.5
....................       }
00596:  BRA    059E
....................       else
....................       {
....................          HearthbeatInd = 0;
00598:  BCF    1A.0
....................          output_bit(Pled,0);
0059A:  BCF    F8A.5
0059C:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
0059E:  BTFSS  1A.6
005A0:  BRA    05B2
....................       {
....................              if(T_test > 0x00) T_test --;
005A2:  MOVF   2F,F
005A4:  BZ    05A8
005A6:  DECF   2F,F
....................              if(T_test == 0x00)
005A8:  MOVF   2F,F
005AA:  BNZ   05B0
....................              {
....................                Test_fault = 1;
005AC:  BSF    1A.5
....................                functointest_f = 1;
005AE:  BSF    30.1
....................              }
....................        }
005B0:  BRA    05B4
....................        else
....................        {
....................           //Test = 0;
....................           T_test = 0x00;
005B2:  CLRF   2F
....................        }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
005B4:  MOVF   1B,F
005B6:  BZ    05DA
....................    {
....................       FlashingRateTime--;
005B8:  DECF   1B,F
....................       if(FlashingRateTime == 0)
005BA:  MOVF   1B,F
005BC:  BNZ   05CE
....................       {
....................          outmcp23 = 0xff;
005BE:  SETF   x87
....................          
....................          //if(SyncStatus == 0)
....................          //{
....................             if(FlashingFlag)
005C0:  BTFSS  1A.1
005C2:  BRA    05C8
....................             {
....................                FlashingFlag = 0;
005C4:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
005C6:  BRA    05CA
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
005C8:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          //}
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
005CA:  MOVFF  6C,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
005CE:  MOVF   31,F
005D0:  BZ    05DA
....................       {
....................          Synctimer--;
005D2:  DECF   31,F
....................          if(Synctimer == 0x00)
005D4:  MOVF   31,F
005D6:  BNZ   05DA
....................          {
....................             SyncStatus = 0;
005D8:  BCF    30.2
....................          }
....................       }
.................... 
....................    } 
005DA:  BCF    F9E.1
005DC:  MOVLB  0
005DE:  GOTO   006C
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
049E8:  MOVLB  A
049EA:  BTFSS  xE5.0
049EC:  BRA    4B00
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
049EE:  MOVLW  00
049F0:  BTFSC  xDF.0
049F2:  MOVLW  01
049F4:  MOVLB  B
049F6:  MOVWF  x57
049F8:  MOVLW  00
049FA:  MOVLB  A
049FC:  BTFSC  xE1.0
049FE:  MOVLW  01
04A00:  MOVLB  B
04A02:  XORWF  x57,W
04A04:  SUBLW  01
04A06:  BNZ   4A0E
04A08:  MOVLB  A
04A0A:  BTFSC  xE2.0
04A0C:  BRA    4A14
04A0E:  MOVLB  A
04A10:  BTFSS  xE7.0
04A12:  BRA    4AF8
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
04A14:  BTFSC  xE6.0
04A16:  BRA    4AF6
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04A18:  BTFSC  xE7.0
04A1A:  BRA    4A34
04A1C:  MOVLB  0
04A1E:  MOVF   x6A,W
04A20:  SUBLW  0F
04A22:  BTFSC  FD8.2
04A24:  BRA    4A2A
04A26:  MOVLB  A
04A28:  BRA    4A34
....................             {
....................                TimeBase1s = 100 ;            //reload again
04A2A:  MOVLW  64
04A2C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04A2E:  MOVFF  6B,1D
04A32:  MOVLB  A
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
04A34:  BSF    xE7.0
....................             if(FlashingFlag == 0)
04A36:  BTFSC  1A.1
04A38:  BRA    4A3E
....................             {
....................                Output.B1 = 0;           //Flash output1
04A3A:  BCF    xE0.0
....................             }
04A3C:  BRA    4A40
....................             else
....................             {
....................                Output.B1 = 1;
04A3E:  BSF    xE0.0
....................             }
....................             if (~AutoTestFlag)
04A40:  BTFSC  1A.4
04A42:  BRA    4A60
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
04A44:  BTFSC  xE4.0
04A46:  BRA    4A52
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04A48:  BCF    F89.4
04A4A:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04A4C:  BCF    F89.3
04A4E:  BCF    F92.3
....................                }
04A50:  BRA    4A60
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,0);     //Buzzer
04A52:  BTFSS  xE3.0
04A54:  BRA    4A5C
04A56:  BCF    F89.4
04A58:  BCF    F92.4
04A5A:  BRA    4A60
....................                   else output_bit(Pbell,0);                          //Bell
04A5C:  BCF    F89.3
04A5E:  BCF    F92.3
....................                }    
....................             }  
....................             // SMS Sending   
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04A60:  BTFSC  xED.0
04A62:  BRA    4AF6
04A64:  BTFSC  30.1
04A66:  BRA    4AF6
04A68:  BTFSC  xE6.0
04A6A:  BRA    4AF6
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04A6C:  MOVLW  E2
04A6E:  MOVWF  FF6
04A70:  MOVLW  05
04A72:  MOVWF  FF7
04A74:  MOVLB  0
04A76:  CALL   1F44
....................                putc('\n',CH2);
04A7A:  MOVLW  0A
04A7C:  MOVLB  B
04A7E:  MOVWF  x58
04A80:  MOVLB  0
04A82:  CALL   1EFE
....................                delay_ms(10);
04A86:  MOVLW  0A
04A88:  MOVLB  B
04A8A:  MOVWF  x57
04A8C:  MOVLB  0
04A8E:  CALL   077C
....................             
....................                SendSMS.B1 =1;
04A92:  MOVLB  A
04A94:  BSF    xED.0
....................                fprintf(CH2,"AT+CMGS=\"");
04A96:  MOVLW  EC
04A98:  MOVWF  FF6
04A9A:  MOVLW  05
04A9C:  MOVWF  FF7
04A9E:  MOVLB  0
04AA0:  CALL   1F44
....................                fprintf(CH2,sms_phonenumber);
04AA4:  MOVLW  09
04AA6:  MOVWF  FEA
04AA8:  MOVLW  88
04AAA:  MOVWF  FE9
04AAC:  RCALL  44BA
....................                
....................                fprintf(CH2,"\"");
04AAE:  MOVLW  22
04AB0:  MOVLB  B
04AB2:  MOVWF  x58
04AB4:  MOVLB  0
04AB6:  CALL   1EFE
....................                putc('\n',CH2);
04ABA:  MOVLW  0A
04ABC:  MOVLB  B
04ABE:  MOVWF  x58
04AC0:  MOVLB  0
04AC2:  CALL   1EFE
....................                delay_ms(50);
04AC6:  MOVLW  32
04AC8:  MOVLB  B
04ACA:  MOVWF  x57
04ACC:  MOVLB  0
04ACE:  CALL   077C
....................               
....................               fprintf(CH2,SMS_Massage1);
04AD2:  MOVLW  09
04AD4:  MOVWF  FEA
04AD6:  MOVLW  97
04AD8:  MOVWF  FE9
04ADA:  RCALL  44BA
....................               putc('\n',CH2);
04ADC:  MOVLW  0A
04ADE:  MOVLB  B
04AE0:  MOVWF  x58
04AE2:  MOVLB  0
04AE4:  CALL   1EFE
....................               putc(26,CH2);
04AE8:  MOVLW  1A
04AEA:  MOVLB  B
04AEC:  MOVWF  x58
04AEE:  MOVLB  0
04AF0:  CALL   1EFE
04AF4:  MOVLB  A
....................             }
....................             
....................         }
....................       }
04AF6:  BRA    4AFE
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
04AF8:  BTFSS  xE2.0
04AFA:  BRA    4AFE
04AFC:  BCF    xE6.0
....................    }
04AFE:  BRA    4BC0
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
04B00:  MOVLW  00
04B02:  BTFSC  xDF.0
04B04:  MOVLW  01
04B06:  MOVLB  B
04B08:  MOVWF  x57
04B0A:  MOVLW  00
04B0C:  MOVLB  A
04B0E:  BTFSC  xE1.0
04B10:  MOVLW  01
04B12:  MOVLB  B
04B14:  XORWF  x57,W
04B16:  SUBLW  01
04B18:  BNZ   4BB8
....................       {
....................          Output.B1 = 0;
04B1A:  MOVLB  A
04B1C:  BCF    xE0.0
....................          
....................          
....................          // SMS Sending   
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04B1E:  BTFSC  xED.0
04B20:  BRA    4BB4
04B22:  BTFSC  30.1
04B24:  BRA    4BB4
04B26:  BTFSC  xE6.0
04B28:  BRA    4BB4
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04B2A:  MOVLW  F6
04B2C:  MOVWF  FF6
04B2E:  MOVLW  05
04B30:  MOVWF  FF7
04B32:  MOVLB  0
04B34:  CALL   1F44
....................             putc('\n',CH2);
04B38:  MOVLW  0A
04B3A:  MOVLB  B
04B3C:  MOVWF  x58
04B3E:  MOVLB  0
04B40:  CALL   1EFE
....................             delay_ms(10);
04B44:  MOVLW  0A
04B46:  MOVLB  B
04B48:  MOVWF  x57
04B4A:  MOVLB  0
04B4C:  CALL   077C
....................             
....................             SendSMS.B1 =1;
04B50:  MOVLB  A
04B52:  BSF    xED.0
....................             fprintf(CH2,"AT+CMGS=\"");
04B54:  MOVLW  00
04B56:  MOVWF  FF6
04B58:  MOVLW  06
04B5A:  MOVWF  FF7
04B5C:  MOVLB  0
04B5E:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
04B62:  MOVLW  09
04B64:  MOVWF  FEA
04B66:  MOVLW  88
04B68:  MOVWF  FE9
04B6A:  RCALL  44BA
....................             
....................             fprintf(CH2,"\"");
04B6C:  MOVLW  22
04B6E:  MOVLB  B
04B70:  MOVWF  x58
04B72:  MOVLB  0
04B74:  CALL   1EFE
....................             putc('\n',CH2);
04B78:  MOVLW  0A
04B7A:  MOVLB  B
04B7C:  MOVWF  x58
04B7E:  MOVLB  0
04B80:  CALL   1EFE
....................             delay_ms(50);
04B84:  MOVLW  32
04B86:  MOVLB  B
04B88:  MOVWF  x57
04B8A:  MOVLB  0
04B8C:  CALL   077C
....................            
....................            fprintf(CH2,SMS_Massage1);
04B90:  MOVLW  09
04B92:  MOVWF  FEA
04B94:  MOVLW  97
04B96:  MOVWF  FE9
04B98:  RCALL  44BA
....................            putc('\n',CH2);
04B9A:  MOVLW  0A
04B9C:  MOVLB  B
04B9E:  MOVWF  x58
04BA0:  MOVLB  0
04BA2:  CALL   1EFE
....................           putc(26,CH2);
04BA6:  MOVLW  1A
04BA8:  MOVLB  B
04BAA:  MOVWF  x58
04BAC:  MOVLB  0
04BAE:  CALL   1EFE
04BB2:  MOVLB  A
....................          }
....................          
....................       }
04BB4:  BRA    4BC0
04BB6:  MOVLB  B
....................       else
....................       {
....................          Output.B1 = 1;
04BB8:  MOVLB  A
04BBA:  BSF    xE0.0
....................          
....................          SendSMS.B1 =0;
04BBC:  BCF    xED.0
....................          functointest_f =0;
04BBE:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
04BC0:  BTFSS  xE5.1
04BC2:  BRA    4CD6
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
04BC4:  MOVLW  00
04BC6:  BTFSC  xDF.1
04BC8:  MOVLW  01
04BCA:  MOVLB  B
04BCC:  MOVWF  x57
04BCE:  MOVLW  00
04BD0:  MOVLB  A
04BD2:  BTFSC  xE1.1
04BD4:  MOVLW  01
04BD6:  MOVLB  B
04BD8:  XORWF  x57,W
04BDA:  SUBLW  01
04BDC:  BNZ   4BE4
04BDE:  MOVLB  A
04BE0:  BTFSC  xE2.1
04BE2:  BRA    4BEA
04BE4:  MOVLB  A
04BE6:  BTFSS  xE7.1
04BE8:  BRA    4CCE
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
04BEA:  BTFSC  xE6.1
04BEC:  BRA    4C36
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04BEE:  BTFSC  xE7.1
04BF0:  BRA    4C0A
04BF2:  MOVLB  0
04BF4:  MOVF   x6A,W
04BF6:  SUBLW  0F
04BF8:  BTFSC  FD8.2
04BFA:  BRA    4C00
04BFC:  MOVLB  A
04BFE:  BRA    4C0A
....................             {
....................                TimeBase1s = 100 ;            //reload again
04C00:  MOVLW  64
04C02:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04C04:  MOVFF  6B,1D
04C08:  MOVLB  A
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
04C0A:  BSF    xE7.1
....................             if(FlashingFlag == 0)
04C0C:  BTFSC  1A.1
04C0E:  BRA    4C14
....................             {
....................                Output.B2 = 0;           //Flash output1
04C10:  BCF    xE0.1
....................             }
04C12:  BRA    4C16
....................             else
....................             {
....................                Output.B2 = 1;
04C14:  BSF    xE0.1
....................             }
.................... 
....................             if (~AutoTestFlag)
04C16:  BTFSC  1A.4
04C18:  BRA    4C36
....................             {
....................                
....................                if(OutputBoth.B2 == 0)                  //Both output
04C1A:  BTFSC  xE4.1
04C1C:  BRA    4C28
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04C1E:  BCF    F89.4
04C20:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04C22:  BCF    F89.3
04C24:  BCF    F92.3
....................                }
04C26:  BRA    4C36
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,0);     //Buzzer
04C28:  BTFSS  xE3.1
04C2A:  BRA    4C32
04C2C:  BCF    F89.4
04C2E:  BCF    F92.4
04C30:  BRA    4C36
....................                   else output_bit(Pbell,0);                          //Bell
04C32:  BCF    F89.3
04C34:  BCF    F92.3
....................                }
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04C36:  BTFSC  xED.1
04C38:  BRA    4CCC
04C3A:  BTFSC  30.1
04C3C:  BRA    4CCC
04C3E:  BTFSC  xE6.1
04C40:  BRA    4CCC
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04C42:  MOVLW  0A
04C44:  MOVWF  FF6
04C46:  MOVLW  06
04C48:  MOVWF  FF7
04C4A:  MOVLB  0
04C4C:  CALL   1F44
....................                putc('\n',CH2);
04C50:  MOVLW  0A
04C52:  MOVLB  B
04C54:  MOVWF  x58
04C56:  MOVLB  0
04C58:  CALL   1EFE
....................                delay_ms(10);
04C5C:  MOVLW  0A
04C5E:  MOVLB  B
04C60:  MOVWF  x57
04C62:  MOVLB  0
04C64:  CALL   077C
....................                 
....................                SendSMS.B2 =1;
04C68:  MOVLB  A
04C6A:  BSF    xED.1
....................                fprintf(CH2,"AT+CMGS=\"");
04C6C:  MOVLW  14
04C6E:  MOVWF  FF6
04C70:  MOVLW  06
04C72:  MOVWF  FF7
04C74:  MOVLB  0
04C76:  CALL   1F44
....................                fprintf(CH2,sms_phonenumber);
04C7A:  MOVLW  09
04C7C:  MOVWF  FEA
04C7E:  MOVLW  88
04C80:  MOVWF  FE9
04C82:  RCALL  44BA
....................                
....................                fprintf(CH2,"\"");
04C84:  MOVLW  22
04C86:  MOVLB  B
04C88:  MOVWF  x58
04C8A:  MOVLB  0
04C8C:  CALL   1EFE
....................                putc('\n',CH2);
04C90:  MOVLW  0A
04C92:  MOVLB  B
04C94:  MOVWF  x58
04C96:  MOVLB  0
04C98:  CALL   1EFE
....................                delay_ms(50);
04C9C:  MOVLW  32
04C9E:  MOVLB  B
04CA0:  MOVWF  x57
04CA2:  MOVLB  0
04CA4:  CALL   077C
....................                
....................               fprintf(CH2,SMS_Massage2);
04CA8:  MOVLW  09
04CAA:  MOVWF  FEA
04CAC:  MOVLW  C0
04CAE:  MOVWF  FE9
04CB0:  RCALL  44BA
....................               putc('\n',CH2);
04CB2:  MOVLW  0A
04CB4:  MOVLB  B
04CB6:  MOVWF  x58
04CB8:  MOVLB  0
04CBA:  CALL   1EFE
....................              putc(26,CH2);
04CBE:  MOVLW  1A
04CC0:  MOVLB  B
04CC2:  MOVWF  x58
04CC4:  MOVLB  0
04CC6:  CALL   1EFE
04CCA:  MOVLB  A
....................             }  
.................... 
....................       }
04CCC:  BRA    4CD4
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
04CCE:  BTFSS  xE2.1
04CD0:  BRA    4CD4
04CD2:  BCF    xE6.1
....................    }
04CD4:  BRA    4D9A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
04CD6:  MOVLW  00
04CD8:  BTFSC  xDF.1
04CDA:  MOVLW  01
04CDC:  MOVLB  B
04CDE:  MOVWF  x57
04CE0:  MOVLW  00
04CE2:  MOVLB  A
04CE4:  BTFSC  xE1.1
04CE6:  MOVLW  01
04CE8:  MOVLB  B
04CEA:  XORWF  x57,W
04CEC:  SUBLW  01
04CEE:  BNZ   4D92
....................       {
....................          Output.B2 = 0;
04CF0:  MOVLB  A
04CF2:  BCF    xE0.1
....................           // SMS Sending   
....................          if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04CF4:  BTFSC  xED.1
04CF6:  BRA    4D8E
04CF8:  BTFSC  30.1
04CFA:  BRA    4D8E
04CFC:  BTFSC  xE6.1
04CFE:  BRA    4D8E
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04D00:  MOVLW  1E
04D02:  MOVWF  FF6
04D04:  MOVLW  06
04D06:  MOVWF  FF7
04D08:  MOVLB  0
04D0A:  CALL   1F44
....................             putc('\n',CH2);
04D0E:  MOVLW  0A
04D10:  MOVLB  B
04D12:  MOVWF  x58
04D14:  MOVLB  0
04D16:  CALL   1EFE
....................             delay_ms(10);
04D1A:  MOVLW  0A
04D1C:  MOVLB  B
04D1E:  MOVWF  x57
04D20:  MOVLB  0
04D22:  CALL   077C
....................             
....................             SendSMS.B2 =1;
04D26:  MOVLB  A
04D28:  BSF    xED.1
....................             fprintf(CH2,"AT+CMGS=\"");
04D2A:  MOVLW  28
04D2C:  MOVWF  FF6
04D2E:  MOVLW  06
04D30:  MOVWF  FF7
04D32:  MOVLB  0
04D34:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
04D38:  MOVLW  09
04D3A:  MOVWF  FEA
04D3C:  MOVLW  88
04D3E:  MOVWF  FE9
04D40:  CALL   44BA
....................             
....................             printf("\"");
04D44:  MOVLW  22
04D46:  MOVLB  B
04D48:  MOVWF  x58
04D4A:  MOVLB  0
04D4C:  CALL   1EFE
....................             putc('\n',CH2);
04D50:  MOVLW  0A
04D52:  MOVLB  B
04D54:  MOVWF  x58
04D56:  MOVLB  0
04D58:  CALL   1EFE
....................             delay_ms(50);
04D5C:  MOVLW  32
04D5E:  MOVLB  B
04D60:  MOVWF  x57
04D62:  MOVLB  0
04D64:  CALL   077C
....................            
....................            fprintf(CH2,SMS_Massage1);
04D68:  MOVLW  09
04D6A:  MOVWF  FEA
04D6C:  MOVLW  97
04D6E:  MOVWF  FE9
04D70:  CALL   44BA
....................            putc('\n',CH2);
04D74:  MOVLW  0A
04D76:  MOVLB  B
04D78:  MOVWF  x58
04D7A:  MOVLB  0
04D7C:  CALL   1EFE
....................            putc(26,CH2);
04D80:  MOVLW  1A
04D82:  MOVLB  B
04D84:  MOVWF  x58
04D86:  MOVLB  0
04D88:  CALL   1EFE
04D8C:  MOVLB  A
....................          }  
....................       }
04D8E:  BRA    4D9A
04D90:  MOVLB  B
....................       else
....................       {
....................          Output.B2 = 1;
04D92:  MOVLB  A
04D94:  BSF    xE0.1
....................          SendSMS.B2 =0;
04D96:  BCF    xED.1
....................          functointest_f =0;
04D98:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
04D9A:  BTFSS  xE5.2
04D9C:  BRA    4EB4
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
04D9E:  MOVLW  00
04DA0:  BTFSC  xDF.2
04DA2:  MOVLW  01
04DA4:  MOVLB  B
04DA6:  MOVWF  x57
04DA8:  MOVLW  00
04DAA:  MOVLB  A
04DAC:  BTFSC  xE1.2
04DAE:  MOVLW  01
04DB0:  MOVLB  B
04DB2:  XORWF  x57,W
04DB4:  SUBLW  01
04DB6:  BNZ   4DBE
04DB8:  MOVLB  A
04DBA:  BTFSC  xE2.2
04DBC:  BRA    4DC4
04DBE:  MOVLB  A
04DC0:  BTFSS  xE7.2
04DC2:  BRA    4EAC
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
04DC4:  BTFSC  xE6.2
04DC6:  BRA    4E10
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04DC8:  BTFSC  xE7.2
04DCA:  BRA    4DE4
04DCC:  MOVLB  0
04DCE:  MOVF   x6A,W
04DD0:  SUBLW  0F
04DD2:  BTFSC  FD8.2
04DD4:  BRA    4DDA
04DD6:  MOVLB  A
04DD8:  BRA    4DE4
....................             {
....................                TimeBase1s = 100 ;            //reload again
04DDA:  MOVLW  64
04DDC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04DDE:  MOVFF  6B,1D
04DE2:  MOVLB  A
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
04DE4:  BSF    xE7.2
....................             if(FlashingFlag == 0)
04DE6:  BTFSC  1A.1
04DE8:  BRA    4DEE
....................             {
....................                Output.B3 = 0;           //Flash output1
04DEA:  BCF    xE0.2
....................             }
04DEC:  BRA    4DF0
....................             else
....................             {
....................                Output.B3 = 1;
04DEE:  BSF    xE0.2
....................             }
.................... 
....................             if (~AutoTestFlag)
04DF0:  BTFSC  1A.4
04DF2:  BRA    4E10
....................             {
....................                
....................                if(OutputBoth.B3 == 0)                  //Both output
04DF4:  BTFSC  xE4.2
04DF6:  BRA    4E02
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04DF8:  BCF    F89.4
04DFA:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04DFC:  BCF    F89.3
04DFE:  BCF    F92.3
....................                }
04E00:  BRA    4E10
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,0);     //Buzzer
04E02:  BTFSS  xE3.2
04E04:  BRA    4E0C
04E06:  BCF    F89.4
04E08:  BCF    F92.4
04E0A:  BRA    4E10
....................                   else output_bit(Pbell,0);                          //Bell
04E0C:  BCF    F89.3
04E0E:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
04E10:  BTFSC  xED.2
04E12:  BRA    4EAA
04E14:  BTFSC  30.1
04E16:  BRA    4EAA
04E18:  BTFSC  xE6.2
04E1A:  BRA    4EAA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04E1C:  MOVLW  32
04E1E:  MOVWF  FF6
04E20:  MOVLW  06
04E22:  MOVWF  FF7
04E24:  MOVLB  0
04E26:  CALL   1F44
....................                putc('\n',CH2);
04E2A:  MOVLW  0A
04E2C:  MOVLB  B
04E2E:  MOVWF  x58
04E30:  MOVLB  0
04E32:  CALL   1EFE
....................                delay_ms(10);
04E36:  MOVLW  0A
04E38:  MOVLB  B
04E3A:  MOVWF  x57
04E3C:  MOVLB  0
04E3E:  CALL   077C
....................                
....................                SendSMS.B3 =1;
04E42:  MOVLB  A
04E44:  BSF    xED.2
....................                fprintf(CH2,"AT+CMGS=\"");
04E46:  MOVLW  3C
04E48:  MOVWF  FF6
04E4A:  MOVLW  06
04E4C:  MOVWF  FF7
04E4E:  MOVLB  0
04E50:  CALL   1F44
....................                fprintf(CH2,sms_phonenumber);
04E54:  MOVLW  09
04E56:  MOVWF  FEA
04E58:  MOVLW  88
04E5A:  MOVWF  FE9
04E5C:  CALL   44BA
....................                
....................                fprintf(CH2,"\"");
04E60:  MOVLW  22
04E62:  MOVLB  B
04E64:  MOVWF  x58
04E66:  MOVLB  0
04E68:  CALL   1EFE
....................                putc('\n',CH2);
04E6C:  MOVLW  0A
04E6E:  MOVLB  B
04E70:  MOVWF  x58
04E72:  MOVLB  0
04E74:  CALL   1EFE
....................                delay_ms(50);
04E78:  MOVLW  32
04E7A:  MOVLB  B
04E7C:  MOVWF  x57
04E7E:  MOVLB  0
04E80:  CALL   077C
....................               
....................               fprintf(CH2,SMS_Massage3);
04E84:  MOVLW  09
04E86:  MOVWF  FEA
04E88:  MOVLW  E9
04E8A:  MOVWF  FE9
04E8C:  CALL   44BA
....................               putc('\n',CH2);
04E90:  MOVLW  0A
04E92:  MOVLB  B
04E94:  MOVWF  x58
04E96:  MOVLB  0
04E98:  CALL   1EFE
....................              putc(26,CH2);
04E9C:  MOVLW  1A
04E9E:  MOVLB  B
04EA0:  MOVWF  x58
04EA2:  MOVLB  0
04EA4:  CALL   1EFE
04EA8:  MOVLB  A
....................             }
.................... 
....................       }
04EAA:  BRA    4EB2
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
04EAC:  BTFSS  xE2.2
04EAE:  BRA    4EB2
04EB0:  BCF    xE6.2
....................    }
04EB2:  BRA    4F78
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
04EB4:  MOVLW  00
04EB6:  BTFSC  xDF.2
04EB8:  MOVLW  01
04EBA:  MOVLB  B
04EBC:  MOVWF  x57
04EBE:  MOVLW  00
04EC0:  MOVLB  A
04EC2:  BTFSC  xE1.2
04EC4:  MOVLW  01
04EC6:  MOVLB  B
04EC8:  XORWF  x57,W
04ECA:  SUBLW  01
04ECC:  BNZ   4F70
....................       {
....................          Output.B3 = 0;
04ECE:  MOVLB  A
04ED0:  BCF    xE0.2
....................          // SMS Sending   
....................          if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
04ED2:  BTFSC  xED.2
04ED4:  BRA    4F6C
04ED6:  BTFSC  30.1
04ED8:  BRA    4F6C
04EDA:  BTFSC  xE6.2
04EDC:  BRA    4F6C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04EDE:  MOVLW  46
04EE0:  MOVWF  FF6
04EE2:  MOVLW  06
04EE4:  MOVWF  FF7
04EE6:  MOVLB  0
04EE8:  CALL   1F44
....................             putc('\n',CH2);
04EEC:  MOVLW  0A
04EEE:  MOVLB  B
04EF0:  MOVWF  x58
04EF2:  MOVLB  0
04EF4:  CALL   1EFE
....................             delay_ms(10);
04EF8:  MOVLW  0A
04EFA:  MOVLB  B
04EFC:  MOVWF  x57
04EFE:  MOVLB  0
04F00:  CALL   077C
....................             
....................             SendSMS.B3 =1;
04F04:  MOVLB  A
04F06:  BSF    xED.2
....................             fprintf(CH2,"AT+CMGS=\"");
04F08:  MOVLW  50
04F0A:  MOVWF  FF6
04F0C:  MOVLW  06
04F0E:  MOVWF  FF7
04F10:  MOVLB  0
04F12:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
04F16:  MOVLW  09
04F18:  MOVWF  FEA
04F1A:  MOVLW  88
04F1C:  MOVWF  FE9
04F1E:  CALL   44BA
....................             
....................             fprintf(CH2,"\"");
04F22:  MOVLW  22
04F24:  MOVLB  B
04F26:  MOVWF  x58
04F28:  MOVLB  0
04F2A:  CALL   1EFE
....................             putc('\n',CH2);
04F2E:  MOVLW  0A
04F30:  MOVLB  B
04F32:  MOVWF  x58
04F34:  MOVLB  0
04F36:  CALL   1EFE
....................             delay_ms(50);
04F3A:  MOVLW  32
04F3C:  MOVLB  B
04F3E:  MOVWF  x57
04F40:  MOVLB  0
04F42:  CALL   077C
....................            
....................            fprintf(CH2,SMS_Massage3);
04F46:  MOVLW  09
04F48:  MOVWF  FEA
04F4A:  MOVLW  E9
04F4C:  MOVWF  FE9
04F4E:  CALL   44BA
....................            putc('\n',CH2);
04F52:  MOVLW  0A
04F54:  MOVLB  B
04F56:  MOVWF  x58
04F58:  MOVLB  0
04F5A:  CALL   1EFE
....................           putc(26,CH2);
04F5E:  MOVLW  1A
04F60:  MOVLB  B
04F62:  MOVWF  x58
04F64:  MOVLB  0
04F66:  CALL   1EFE
04F6A:  MOVLB  A
....................          }
....................       }
04F6C:  BRA    4F78
04F6E:  MOVLB  B
....................       else
....................       {
....................          Output.B3 = 1;
04F70:  MOVLB  A
04F72:  BSF    xE0.2
....................          SendSMS.B3 =0;
04F74:  BCF    xED.2
....................        functointest_f =0;
04F76:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
04F78:  BTFSS  xE5.3
04F7A:  BRA    5092
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
04F7C:  MOVLW  00
04F7E:  BTFSC  xDF.3
04F80:  MOVLW  01
04F82:  MOVLB  B
04F84:  MOVWF  x57
04F86:  MOVLW  00
04F88:  MOVLB  A
04F8A:  BTFSC  xE1.3
04F8C:  MOVLW  01
04F8E:  MOVLB  B
04F90:  XORWF  x57,W
04F92:  SUBLW  01
04F94:  BNZ   4F9C
04F96:  MOVLB  A
04F98:  BTFSC  xE2.3
04F9A:  BRA    4FA2
04F9C:  MOVLB  A
04F9E:  BTFSS  xE7.3
04FA0:  BRA    508A
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
04FA2:  BTFSC  xE6.3
04FA4:  BRA    4FEE
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04FA6:  BTFSC  xE7.3
04FA8:  BRA    4FC2
04FAA:  MOVLB  0
04FAC:  MOVF   x6A,W
04FAE:  SUBLW  0F
04FB0:  BTFSC  FD8.2
04FB2:  BRA    4FB8
04FB4:  MOVLB  A
04FB6:  BRA    4FC2
....................             {
....................                TimeBase1s = 100 ;            //reload again
04FB8:  MOVLW  64
04FBA:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04FBC:  MOVFF  6B,1D
04FC0:  MOVLB  A
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
04FC2:  BSF    xE7.3
....................             if(FlashingFlag == 0)
04FC4:  BTFSC  1A.1
04FC6:  BRA    4FCC
....................             {
....................                Output.B4 = 0;           //Flash output1
04FC8:  BCF    xE0.3
....................             }
04FCA:  BRA    4FCE
....................             else
....................             {
....................                Output.B4 = 1;
04FCC:  BSF    xE0.3
....................             }
.................... 
....................             if (~AutoTestFlag)
04FCE:  BTFSC  1A.4
04FD0:  BRA    4FEE
....................             {
....................                
....................                if(OutputBoth.B4 == 0)                  //Both output
04FD2:  BTFSC  xE4.3
04FD4:  BRA    4FE0
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04FD6:  BCF    F89.4
04FD8:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04FDA:  BCF    F89.3
04FDC:  BCF    F92.3
....................                }
04FDE:  BRA    4FEE
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,0);     //Buzzer
04FE0:  BTFSS  xE3.3
04FE2:  BRA    4FEA
04FE4:  BCF    F89.4
04FE6:  BCF    F92.4
04FE8:  BRA    4FEE
....................                   else output_bit(Pbell,0);                          //Bell
04FEA:  BCF    F89.3
04FEC:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
04FEE:  BTFSC  xED.3
04FF0:  BRA    5088
04FF2:  BTFSC  30.1
04FF4:  BRA    5088
04FF6:  BTFSC  xE6.3
04FF8:  BRA    5088
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04FFA:  MOVLW  5A
04FFC:  MOVWF  FF6
04FFE:  MOVLW  06
05000:  MOVWF  FF7
05002:  MOVLB  0
05004:  CALL   1F44
....................                putc('\n',CH2);
05008:  MOVLW  0A
0500A:  MOVLB  B
0500C:  MOVWF  x58
0500E:  MOVLB  0
05010:  CALL   1EFE
....................                delay_ms(10);
05014:  MOVLW  0A
05016:  MOVLB  B
05018:  MOVWF  x57
0501A:  MOVLB  0
0501C:  CALL   077C
....................                
....................                SendSMS.B4 =1;
05020:  MOVLB  A
05022:  BSF    xED.3
....................                fprintf(CH2,"AT+CMGS=\"");
05024:  MOVLW  64
05026:  MOVWF  FF6
05028:  MOVLW  06
0502A:  MOVWF  FF7
0502C:  MOVLB  0
0502E:  CALL   1F44
....................                fprintf(CH2,sms_phonenumber);
05032:  MOVLW  09
05034:  MOVWF  FEA
05036:  MOVLW  88
05038:  MOVWF  FE9
0503A:  CALL   44BA
....................             
....................                fprintf(CH2,"\"");
0503E:  MOVLW  22
05040:  MOVLB  B
05042:  MOVWF  x58
05044:  MOVLB  0
05046:  CALL   1EFE
....................                putc('\n',CH2);
0504A:  MOVLW  0A
0504C:  MOVLB  B
0504E:  MOVWF  x58
05050:  MOVLB  0
05052:  CALL   1EFE
....................                delay_ms(50);
05056:  MOVLW  32
05058:  MOVLB  B
0505A:  MOVWF  x57
0505C:  MOVLB  0
0505E:  CALL   077C
....................               
....................               fprintf(CH2,SMS_Massage4);
05062:  MOVLW  0A
05064:  MOVWF  FEA
05066:  MOVLW  12
05068:  MOVWF  FE9
0506A:  CALL   44BA
....................               putc('\n',CH2);
0506E:  MOVLW  0A
05070:  MOVLB  B
05072:  MOVWF  x58
05074:  MOVLB  0
05076:  CALL   1EFE
....................              putc(26,CH2);
0507A:  MOVLW  1A
0507C:  MOVLB  B
0507E:  MOVWF  x58
05080:  MOVLB  0
05082:  CALL   1EFE
05086:  MOVLB  A
....................             }
.................... 
....................       }
05088:  BRA    5090
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
0508A:  BTFSS  xE2.3
0508C:  BRA    5090
0508E:  BCF    xE6.3
....................    }
05090:  BRA    5156
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
05092:  MOVLW  00
05094:  BTFSC  xDF.3
05096:  MOVLW  01
05098:  MOVLB  B
0509A:  MOVWF  x57
0509C:  MOVLW  00
0509E:  MOVLB  A
050A0:  BTFSC  xE1.3
050A2:  MOVLW  01
050A4:  MOVLB  B
050A6:  XORWF  x57,W
050A8:  SUBLW  01
050AA:  BNZ   514E
....................       {
....................          Output.B4 = 0;
050AC:  MOVLB  A
050AE:  BCF    xE0.3
....................          
....................          // SMS Sending   
....................          if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
050B0:  BTFSC  xED.3
050B2:  BRA    514A
050B4:  BTFSC  30.1
050B6:  BRA    514A
050B8:  BTFSC  xE6.3
050BA:  BRA    514A
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
050BC:  MOVLW  6E
050BE:  MOVWF  FF6
050C0:  MOVLW  06
050C2:  MOVWF  FF7
050C4:  MOVLB  0
050C6:  CALL   1F44
....................             putc('\n',CH2);
050CA:  MOVLW  0A
050CC:  MOVLB  B
050CE:  MOVWF  x58
050D0:  MOVLB  0
050D2:  CALL   1EFE
....................             delay_ms(10);
050D6:  MOVLW  0A
050D8:  MOVLB  B
050DA:  MOVWF  x57
050DC:  MOVLB  0
050DE:  CALL   077C
....................             
....................             SendSMS.B4 =1;
050E2:  MOVLB  A
050E4:  BSF    xED.3
....................             fprintf(CH2,"AT+CMGS=\"");
050E6:  MOVLW  78
050E8:  MOVWF  FF6
050EA:  MOVLW  06
050EC:  MOVWF  FF7
050EE:  MOVLB  0
050F0:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
050F4:  MOVLW  09
050F6:  MOVWF  FEA
050F8:  MOVLW  88
050FA:  MOVWF  FE9
050FC:  CALL   44BA
....................          
....................             fprintf(CH2,"\"");
05100:  MOVLW  22
05102:  MOVLB  B
05104:  MOVWF  x58
05106:  MOVLB  0
05108:  CALL   1EFE
....................             putc('\n',CH2);
0510C:  MOVLW  0A
0510E:  MOVLB  B
05110:  MOVWF  x58
05112:  MOVLB  0
05114:  CALL   1EFE
....................             delay_ms(50);
05118:  MOVLW  32
0511A:  MOVLB  B
0511C:  MOVWF  x57
0511E:  MOVLB  0
05120:  CALL   077C
....................            
....................            fprintf(CH2,SMS_Massage4);
05124:  MOVLW  0A
05126:  MOVWF  FEA
05128:  MOVLW  12
0512A:  MOVWF  FE9
0512C:  CALL   44BA
....................            putc('\n',CH2);
05130:  MOVLW  0A
05132:  MOVLB  B
05134:  MOVWF  x58
05136:  MOVLB  0
05138:  CALL   1EFE
....................           putc(26,CH2);
0513C:  MOVLW  1A
0513E:  MOVLB  B
05140:  MOVWF  x58
05142:  MOVLB  0
05144:  CALL   1EFE
05148:  MOVLB  A
....................          }
....................       }
0514A:  BRA    5156
0514C:  MOVLB  B
....................       else
....................       {
....................          Output.B4 = 1;
0514E:  MOVLB  A
05150:  BSF    xE0.3
....................          SendSMS.B4 =0;
05152:  BCF    xED.3
....................        functointest_f =0;
05154:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
05156:  BTFSS  xE5.4
05158:  BRA    5270
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
0515A:  MOVLW  00
0515C:  BTFSC  xDF.4
0515E:  MOVLW  01
05160:  MOVLB  B
05162:  MOVWF  x57
05164:  MOVLW  00
05166:  MOVLB  A
05168:  BTFSC  xE1.4
0516A:  MOVLW  01
0516C:  MOVLB  B
0516E:  XORWF  x57,W
05170:  SUBLW  01
05172:  BNZ   517A
05174:  MOVLB  A
05176:  BTFSC  xE2.4
05178:  BRA    5180
0517A:  MOVLB  A
0517C:  BTFSS  xE7.4
0517E:  BRA    5268
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
05180:  BTFSC  xE6.4
05182:  BRA    51CC
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05184:  BTFSC  xE7.4
05186:  BRA    51A0
05188:  MOVLB  0
0518A:  MOVF   x6A,W
0518C:  SUBLW  0F
0518E:  BTFSC  FD8.2
05190:  BRA    5196
05192:  MOVLB  A
05194:  BRA    51A0
....................             {
....................                TimeBase1s = 100 ;            //reload again
05196:  MOVLW  64
05198:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0519A:  MOVFF  6B,1D
0519E:  MOVLB  A
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
051A0:  BSF    xE7.4
....................             if(FlashingFlag == 0)
051A2:  BTFSC  1A.1
051A4:  BRA    51AA
....................             {
....................                Output.B5 = 0;           //Flash output1
051A6:  BCF    xE0.4
....................             }
051A8:  BRA    51AC
....................             else
....................             {
....................                Output.B5 = 1;
051AA:  BSF    xE0.4
....................             }
.................... 
....................             if (~AutoTestFlag)
051AC:  BTFSC  1A.4
051AE:  BRA    51CC
....................             {
....................                
....................                if(OutputBoth.B5 == 0)                  //Both output
051B0:  BTFSC  xE4.4
051B2:  BRA    51BE
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
051B4:  BCF    F89.4
051B6:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
051B8:  BCF    F89.3
051BA:  BCF    F92.3
....................                }
051BC:  BRA    51CC
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,0);     //Buzzer
051BE:  BTFSS  xE3.4
051C0:  BRA    51C8
051C2:  BCF    F89.4
051C4:  BCF    F92.4
051C6:  BRA    51CC
....................                   else output_bit(Pbell,0);                          //Bell
051C8:  BCF    F89.3
051CA:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
051CC:  BTFSC  xED.4
051CE:  BRA    5266
051D0:  BTFSC  30.1
051D2:  BRA    5266
051D4:  BTFSC  xE6.4
051D6:  BRA    5266
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
051D8:  MOVLW  82
051DA:  MOVWF  FF6
051DC:  MOVLW  06
051DE:  MOVWF  FF7
051E0:  MOVLB  0
051E2:  CALL   1F44
....................                putc('\n',CH2);
051E6:  MOVLW  0A
051E8:  MOVLB  B
051EA:  MOVWF  x58
051EC:  MOVLB  0
051EE:  CALL   1EFE
....................                delay_ms(10);
051F2:  MOVLW  0A
051F4:  MOVLB  B
051F6:  MOVWF  x57
051F8:  MOVLB  0
051FA:  CALL   077C
....................                
....................                SendSMS.B5 =1;
051FE:  MOVLB  A
05200:  BSF    xED.4
....................                fprintf(CH2,"AT+CMGS=\"");
05202:  MOVLW  8C
05204:  MOVWF  FF6
05206:  MOVLW  06
05208:  MOVWF  FF7
0520A:  MOVLB  0
0520C:  CALL   1F44
....................                fprintf(CH2,sms_phonenumber);
05210:  MOVLW  09
05212:  MOVWF  FEA
05214:  MOVLW  88
05216:  MOVWF  FE9
05218:  CALL   44BA
....................                
....................                fprintf(CH2,"\"");
0521C:  MOVLW  22
0521E:  MOVLB  B
05220:  MOVWF  x58
05222:  MOVLB  0
05224:  CALL   1EFE
....................                putc('\n',CH2);
05228:  MOVLW  0A
0522A:  MOVLB  B
0522C:  MOVWF  x58
0522E:  MOVLB  0
05230:  CALL   1EFE
....................                delay_ms(50);
05234:  MOVLW  32
05236:  MOVLB  B
05238:  MOVWF  x57
0523A:  MOVLB  0
0523C:  CALL   077C
....................               
....................               fprintf(CH2,SMS_Massage5);
05240:  MOVLW  0A
05242:  MOVWF  FEA
05244:  MOVLW  3B
05246:  MOVWF  FE9
05248:  CALL   44BA
....................               putc('\n',CH2);
0524C:  MOVLW  0A
0524E:  MOVLB  B
05250:  MOVWF  x58
05252:  MOVLB  0
05254:  CALL   1EFE
....................              putc(26,CH2);
05258:  MOVLW  1A
0525A:  MOVLB  B
0525C:  MOVWF  x58
0525E:  MOVLB  0
05260:  CALL   1EFE
05264:  MOVLB  A
....................             }
.................... 
....................       }
05266:  BRA    526E
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
05268:  BTFSS  xE2.4
0526A:  BRA    526E
0526C:  BCF    xE6.4
....................    }
0526E:  BRA    5334
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
05270:  MOVLW  00
05272:  BTFSC  xDF.4
05274:  MOVLW  01
05276:  MOVLB  B
05278:  MOVWF  x57
0527A:  MOVLW  00
0527C:  MOVLB  A
0527E:  BTFSC  xE1.4
05280:  MOVLW  01
05282:  MOVLB  B
05284:  XORWF  x57,W
05286:  SUBLW  01
05288:  BNZ   532C
....................       {
....................          Output.B5 = 0;
0528A:  MOVLB  A
0528C:  BCF    xE0.4
....................          // SMS Sending   
....................          if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
0528E:  BTFSC  xED.4
05290:  BRA    5328
05292:  BTFSC  30.1
05294:  BRA    5328
05296:  BTFSC  xE6.4
05298:  BRA    5328
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0529A:  MOVLW  96
0529C:  MOVWF  FF6
0529E:  MOVLW  06
052A0:  MOVWF  FF7
052A2:  MOVLB  0
052A4:  CALL   1F44
....................             putc('\n',CH2);
052A8:  MOVLW  0A
052AA:  MOVLB  B
052AC:  MOVWF  x58
052AE:  MOVLB  0
052B0:  CALL   1EFE
....................             delay_ms(10);
052B4:  MOVLW  0A
052B6:  MOVLB  B
052B8:  MOVWF  x57
052BA:  MOVLB  0
052BC:  CALL   077C
....................             
....................             SendSMS.B5 =1;
052C0:  MOVLB  A
052C2:  BSF    xED.4
....................             fprintf(CH2,"AT+CMGS=\"");
052C4:  MOVLW  A0
052C6:  MOVWF  FF6
052C8:  MOVLW  06
052CA:  MOVWF  FF7
052CC:  MOVLB  0
052CE:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
052D2:  MOVLW  09
052D4:  MOVWF  FEA
052D6:  MOVLW  88
052D8:  MOVWF  FE9
052DA:  CALL   44BA
....................             
....................             fprintf(CH2,"\"");
052DE:  MOVLW  22
052E0:  MOVLB  B
052E2:  MOVWF  x58
052E4:  MOVLB  0
052E6:  CALL   1EFE
....................             putc('\n',CH2);
052EA:  MOVLW  0A
052EC:  MOVLB  B
052EE:  MOVWF  x58
052F0:  MOVLB  0
052F2:  CALL   1EFE
....................             delay_ms(50);
052F6:  MOVLW  32
052F8:  MOVLB  B
052FA:  MOVWF  x57
052FC:  MOVLB  0
052FE:  CALL   077C
....................            
....................            fprintf(CH2,SMS_Massage5);  
05302:  MOVLW  0A
05304:  MOVWF  FEA
05306:  MOVLW  3B
05308:  MOVWF  FE9
0530A:  CALL   44BA
....................            putc('\n',CH2);
0530E:  MOVLW  0A
05310:  MOVLB  B
05312:  MOVWF  x58
05314:  MOVLB  0
05316:  CALL   1EFE
....................           putc(26,CH2);
0531A:  MOVLW  1A
0531C:  MOVLB  B
0531E:  MOVWF  x58
05320:  MOVLB  0
05322:  CALL   1EFE
05326:  MOVLB  A
....................          }
....................       }
05328:  BRA    5334
0532A:  MOVLB  B
....................       else
....................       {
....................          Output.B5 = 1;
0532C:  MOVLB  A
0532E:  BSF    xE0.4
....................          SendSMS.B5 =0;
05330:  BCF    xED.4
....................        functointest_f =0;
05332:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
05334:  BTFSS  xE5.5
05336:  BRA    544E
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
05338:  MOVLW  00
0533A:  BTFSC  xDF.5
0533C:  MOVLW  01
0533E:  MOVLB  B
05340:  MOVWF  x57
05342:  MOVLW  00
05344:  MOVLB  A
05346:  BTFSC  xE1.5
05348:  MOVLW  01
0534A:  MOVLB  B
0534C:  XORWF  x57,W
0534E:  SUBLW  01
05350:  BNZ   5358
05352:  MOVLB  A
05354:  BTFSC  xE2.5
05356:  BRA    535E
05358:  MOVLB  A
0535A:  BTFSS  xE7.5
0535C:  BRA    5446
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
0535E:  BTFSC  xE6.5
05360:  BRA    53AA
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05362:  BTFSC  xE7.5
05364:  BRA    537E
05366:  MOVLB  0
05368:  MOVF   x6A,W
0536A:  SUBLW  0F
0536C:  BTFSC  FD8.2
0536E:  BRA    5374
05370:  MOVLB  A
05372:  BRA    537E
....................             {
....................                TimeBase1s = 100 ;            //reload again
05374:  MOVLW  64
05376:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05378:  MOVFF  6B,1D
0537C:  MOVLB  A
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
0537E:  BSF    xE7.5
....................             if(FlashingFlag == 0)
05380:  BTFSC  1A.1
05382:  BRA    5388
....................             {
....................                Output.B6 = 0;           //Flash output1
05384:  BCF    xE0.5
....................             }
05386:  BRA    538A
....................             else
....................             {
....................                Output.B6 = 1;
05388:  BSF    xE0.5
....................             }
.................... 
....................             if (~AutoTestFlag)
0538A:  BTFSC  1A.4
0538C:  BRA    53AA
....................             {
....................                
....................                if(OutputBoth.B6 == 0)                  //Both output
0538E:  BTFSC  xE4.5
05390:  BRA    539C
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05392:  BCF    F89.4
05394:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05396:  BCF    F89.3
05398:  BCF    F92.3
....................                }
0539A:  BRA    53AA
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,0);     //Buzzer
0539C:  BTFSS  xE3.5
0539E:  BRA    53A6
053A0:  BCF    F89.4
053A2:  BCF    F92.4
053A4:  BRA    53AA
....................                   else output_bit(Pbell,0);                          //Bell
053A6:  BCF    F89.3
053A8:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
053AA:  BTFSC  xED.5
053AC:  BRA    5444
053AE:  BTFSC  30.1
053B0:  BRA    5444
053B2:  BTFSC  xE6.5
053B4:  BRA    5444
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
053B6:  MOVLW  AA
053B8:  MOVWF  FF6
053BA:  MOVLW  06
053BC:  MOVWF  FF7
053BE:  MOVLB  0
053C0:  CALL   1F44
....................                putc('\n',CH2);
053C4:  MOVLW  0A
053C6:  MOVLB  B
053C8:  MOVWF  x58
053CA:  MOVLB  0
053CC:  CALL   1EFE
....................                delay_ms(10);
053D0:  MOVLW  0A
053D2:  MOVLB  B
053D4:  MOVWF  x57
053D6:  MOVLB  0
053D8:  CALL   077C
....................                
....................                SendSMS.B6 =1;
053DC:  MOVLB  A
053DE:  BSF    xED.5
....................                fprintf(CH2,"AT+CMGS=\"");
053E0:  MOVLW  B4
053E2:  MOVWF  FF6
053E4:  MOVLW  06
053E6:  MOVWF  FF7
053E8:  MOVLB  0
053EA:  CALL   1F44
....................                fprintf(CH2,sms_phonenumber);
053EE:  MOVLW  09
053F0:  MOVWF  FEA
053F2:  MOVLW  88
053F4:  MOVWF  FE9
053F6:  CALL   44BA
....................                
....................                fprintf(CH2,"\"");
053FA:  MOVLW  22
053FC:  MOVLB  B
053FE:  MOVWF  x58
05400:  MOVLB  0
05402:  CALL   1EFE
....................                putc('\n',CH2);
05406:  MOVLW  0A
05408:  MOVLB  B
0540A:  MOVWF  x58
0540C:  MOVLB  0
0540E:  CALL   1EFE
....................                delay_ms(50);
05412:  MOVLW  32
05414:  MOVLB  B
05416:  MOVWF  x57
05418:  MOVLB  0
0541A:  CALL   077C
....................               
....................               fprintf(CH2,SMS_Massage6);
0541E:  MOVLW  0A
05420:  MOVWF  FEA
05422:  MOVLW  64
05424:  MOVWF  FE9
05426:  CALL   44BA
....................               putc('\n',CH2);
0542A:  MOVLW  0A
0542C:  MOVLB  B
0542E:  MOVWF  x58
05430:  MOVLB  0
05432:  CALL   1EFE
....................              putc(26,CH2);
05436:  MOVLW  1A
05438:  MOVLB  B
0543A:  MOVWF  x58
0543C:  MOVLB  0
0543E:  CALL   1EFE
05442:  MOVLB  A
....................             }
.................... 
....................       }
05444:  BRA    544C
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
05446:  BTFSS  xE2.5
05448:  BRA    544C
0544A:  BCF    xE6.5
....................    }
0544C:  BRA    5512
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
0544E:  MOVLW  00
05450:  BTFSC  xDF.5
05452:  MOVLW  01
05454:  MOVLB  B
05456:  MOVWF  x57
05458:  MOVLW  00
0545A:  MOVLB  A
0545C:  BTFSC  xE1.5
0545E:  MOVLW  01
05460:  MOVLB  B
05462:  XORWF  x57,W
05464:  SUBLW  01
05466:  BNZ   550A
....................       {
....................          Output.B6 = 0;
05468:  MOVLB  A
0546A:  BCF    xE0.5
....................          // SMS Sending   
....................          if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0546C:  BTFSC  xED.5
0546E:  BRA    5506
05470:  BTFSC  30.1
05472:  BRA    5506
05474:  BTFSC  xE6.5
05476:  BRA    5506
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05478:  MOVLW  BE
0547A:  MOVWF  FF6
0547C:  MOVLW  06
0547E:  MOVWF  FF7
05480:  MOVLB  0
05482:  CALL   1F44
....................             putc('\n',CH2);
05486:  MOVLW  0A
05488:  MOVLB  B
0548A:  MOVWF  x58
0548C:  MOVLB  0
0548E:  CALL   1EFE
....................             delay_ms(10);
05492:  MOVLW  0A
05494:  MOVLB  B
05496:  MOVWF  x57
05498:  MOVLB  0
0549A:  CALL   077C
....................             
....................             SendSMS.B6 =1;
0549E:  MOVLB  A
054A0:  BSF    xED.5
....................             fprintf(CH2,"AT+CMGS=\"");
054A2:  MOVLW  C8
054A4:  MOVWF  FF6
054A6:  MOVLW  06
054A8:  MOVWF  FF7
054AA:  MOVLB  0
054AC:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
054B0:  MOVLW  09
054B2:  MOVWF  FEA
054B4:  MOVLW  88
054B6:  MOVWF  FE9
054B8:  CALL   44BA
....................             
....................             fprintf(CH2,"\"");
054BC:  MOVLW  22
054BE:  MOVLB  B
054C0:  MOVWF  x58
054C2:  MOVLB  0
054C4:  CALL   1EFE
....................             putc('\n',CH2);
054C8:  MOVLW  0A
054CA:  MOVLB  B
054CC:  MOVWF  x58
054CE:  MOVLB  0
054D0:  CALL   1EFE
....................             delay_ms(50);
054D4:  MOVLW  32
054D6:  MOVLB  B
054D8:  MOVWF  x57
054DA:  MOVLB  0
054DC:  CALL   077C
....................            
....................            fprintf(CH2,SMS_Massage6);  
054E0:  MOVLW  0A
054E2:  MOVWF  FEA
054E4:  MOVLW  64
054E6:  MOVWF  FE9
054E8:  CALL   44BA
....................            putc('\n',CH2);
054EC:  MOVLW  0A
054EE:  MOVLB  B
054F0:  MOVWF  x58
054F2:  MOVLB  0
054F4:  CALL   1EFE
....................           putc(26,CH2);
054F8:  MOVLW  1A
054FA:  MOVLB  B
054FC:  MOVWF  x58
054FE:  MOVLB  0
05500:  CALL   1EFE
05504:  MOVLB  A
....................          }
....................       }
05506:  BRA    5512
05508:  MOVLB  B
....................       else
....................       {
....................          Output.B6 = 1;
0550A:  MOVLB  A
0550C:  BSF    xE0.5
....................          SendSMS.B6 =0;
0550E:  BCF    xED.5
....................        functointest_f =0;
05510:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
05512:  BTFSS  xE5.6
05514:  BRA    562C
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
05516:  MOVLW  00
05518:  BTFSC  xDF.6
0551A:  MOVLW  01
0551C:  MOVLB  B
0551E:  MOVWF  x57
05520:  MOVLW  00
05522:  MOVLB  A
05524:  BTFSC  xE1.6
05526:  MOVLW  01
05528:  MOVLB  B
0552A:  XORWF  x57,W
0552C:  SUBLW  01
0552E:  BNZ   5536
05530:  MOVLB  A
05532:  BTFSC  xE2.6
05534:  BRA    553C
05536:  MOVLB  A
05538:  BTFSS  xE7.6
0553A:  BRA    5624
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
0553C:  BTFSC  xE6.6
0553E:  BRA    5588
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05540:  BTFSC  xE7.6
05542:  BRA    555C
05544:  MOVLB  0
05546:  MOVF   x6A,W
05548:  SUBLW  0F
0554A:  BTFSC  FD8.2
0554C:  BRA    5552
0554E:  MOVLB  A
05550:  BRA    555C
....................             {
....................                TimeBase1s = 100 ;            //reload again
05552:  MOVLW  64
05554:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05556:  MOVFF  6B,1D
0555A:  MOVLB  A
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
0555C:  BSF    xE7.6
....................             if(FlashingFlag == 0)
0555E:  BTFSC  1A.1
05560:  BRA    5566
....................             {
....................                Output.B7 = 0;           //Flash output1
05562:  BCF    xE0.6
....................             }
05564:  BRA    5568
....................             else
....................             {
....................                Output.B7 = 1;
05566:  BSF    xE0.6
....................             }
.................... 
....................             if (~AutoTestFlag)
05568:  BTFSC  1A.4
0556A:  BRA    5588
....................             {
....................                
....................                if(OutputBoth.B7 == 0)                  //Both output
0556C:  BTFSC  xE4.6
0556E:  BRA    557A
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05570:  BCF    F89.4
05572:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05574:  BCF    F89.3
05576:  BCF    F92.3
....................                }
05578:  BRA    5588
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,0);     //Buzzer
0557A:  BTFSS  xE3.6
0557C:  BRA    5584
0557E:  BCF    F89.4
05580:  BCF    F92.4
05582:  BRA    5588
....................                   else output_bit(Pbell,0);                          //Bell
05584:  BCF    F89.3
05586:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
05588:  BTFSC  xED.6
0558A:  BRA    5622
0558C:  BTFSC  30.1
0558E:  BRA    5622
05590:  BTFSC  xE6.6
05592:  BRA    5622
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05594:  MOVLW  D2
05596:  MOVWF  FF6
05598:  MOVLW  06
0559A:  MOVWF  FF7
0559C:  MOVLB  0
0559E:  CALL   1F44
....................                putc('\n',CH2);
055A2:  MOVLW  0A
055A4:  MOVLB  B
055A6:  MOVWF  x58
055A8:  MOVLB  0
055AA:  CALL   1EFE
....................                delay_ms(10);
055AE:  MOVLW  0A
055B0:  MOVLB  B
055B2:  MOVWF  x57
055B4:  MOVLB  0
055B6:  CALL   077C
....................                
....................                SendSMS.B7 =1;
055BA:  MOVLB  A
055BC:  BSF    xED.6
....................                fprintf(CH2,"AT+CMGS=\"");
055BE:  MOVLW  DC
055C0:  MOVWF  FF6
055C2:  MOVLW  06
055C4:  MOVWF  FF7
055C6:  MOVLB  0
055C8:  CALL   1F44
....................                fprintf(CH2,sms_phonenumber);
055CC:  MOVLW  09
055CE:  MOVWF  FEA
055D0:  MOVLW  88
055D2:  MOVWF  FE9
055D4:  CALL   44BA
....................                
....................                fprintf(CH2,"\"");
055D8:  MOVLW  22
055DA:  MOVLB  B
055DC:  MOVWF  x58
055DE:  MOVLB  0
055E0:  CALL   1EFE
....................                putc('\n',CH2);
055E4:  MOVLW  0A
055E6:  MOVLB  B
055E8:  MOVWF  x58
055EA:  MOVLB  0
055EC:  CALL   1EFE
....................                delay_ms(50);
055F0:  MOVLW  32
055F2:  MOVLB  B
055F4:  MOVWF  x57
055F6:  MOVLB  0
055F8:  CALL   077C
....................               
....................               fprintf(CH2,SMS_Massage7);  
055FC:  MOVLW  0A
055FE:  MOVWF  FEA
05600:  MOVLW  8D
05602:  MOVWF  FE9
05604:  CALL   44BA
....................               putc('\n',CH2);
05608:  MOVLW  0A
0560A:  MOVLB  B
0560C:  MOVWF  x58
0560E:  MOVLB  0
05610:  CALL   1EFE
....................              putc(26,CH2);
05614:  MOVLW  1A
05616:  MOVLB  B
05618:  MOVWF  x58
0561A:  MOVLB  0
0561C:  CALL   1EFE
05620:  MOVLB  A
....................             }
.................... 
....................       }
05622:  BRA    562A
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
05624:  BTFSS  xE2.6
05626:  BRA    562A
05628:  BCF    xE6.6
....................    }
0562A:  BRA    56F0
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
0562C:  MOVLW  00
0562E:  BTFSC  xDF.6
05630:  MOVLW  01
05632:  MOVLB  B
05634:  MOVWF  x57
05636:  MOVLW  00
05638:  MOVLB  A
0563A:  BTFSC  xE1.6
0563C:  MOVLW  01
0563E:  MOVLB  B
05640:  XORWF  x57,W
05642:  SUBLW  01
05644:  BNZ   56E8
....................       {
....................          Output.B7 = 0;
05646:  MOVLB  A
05648:  BCF    xE0.6
....................          // SMS Sending   
....................          if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0564A:  BTFSC  xED.6
0564C:  BRA    56E4
0564E:  BTFSC  30.1
05650:  BRA    56E4
05652:  BTFSC  xE6.6
05654:  BRA    56E4
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05656:  MOVLW  E6
05658:  MOVWF  FF6
0565A:  MOVLW  06
0565C:  MOVWF  FF7
0565E:  MOVLB  0
05660:  CALL   1F44
....................             putc('\n',CH2);
05664:  MOVLW  0A
05666:  MOVLB  B
05668:  MOVWF  x58
0566A:  MOVLB  0
0566C:  CALL   1EFE
....................             delay_ms(10);
05670:  MOVLW  0A
05672:  MOVLB  B
05674:  MOVWF  x57
05676:  MOVLB  0
05678:  CALL   077C
....................             
....................             SendSMS.B7 =1;
0567C:  MOVLB  A
0567E:  BSF    xED.6
....................             fprintf(CH2,"AT+CMGS=\"");
05680:  MOVLW  F0
05682:  MOVWF  FF6
05684:  MOVLW  06
05686:  MOVWF  FF7
05688:  MOVLB  0
0568A:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
0568E:  MOVLW  09
05690:  MOVWF  FEA
05692:  MOVLW  88
05694:  MOVWF  FE9
05696:  CALL   44BA
....................             
....................             fprintf(CH2,"\"");
0569A:  MOVLW  22
0569C:  MOVLB  B
0569E:  MOVWF  x58
056A0:  MOVLB  0
056A2:  CALL   1EFE
....................             putc('\n',CH2);
056A6:  MOVLW  0A
056A8:  MOVLB  B
056AA:  MOVWF  x58
056AC:  MOVLB  0
056AE:  CALL   1EFE
....................             delay_ms(50);
056B2:  MOVLW  32
056B4:  MOVLB  B
056B6:  MOVWF  x57
056B8:  MOVLB  0
056BA:  CALL   077C
....................            
....................            fprintf(CH2,SMS_Massage7); 
056BE:  MOVLW  0A
056C0:  MOVWF  FEA
056C2:  MOVLW  8D
056C4:  MOVWF  FE9
056C6:  CALL   44BA
....................            putc('\n',CH2);
056CA:  MOVLW  0A
056CC:  MOVLB  B
056CE:  MOVWF  x58
056D0:  MOVLB  0
056D2:  CALL   1EFE
....................           putc(26,CH2);
056D6:  MOVLW  1A
056D8:  MOVLB  B
056DA:  MOVWF  x58
056DC:  MOVLB  0
056DE:  CALL   1EFE
056E2:  MOVLB  A
....................          }
....................       }
056E4:  BRA    56F0
056E6:  MOVLB  B
....................       else
....................       {
....................          Output.B7 = 1;
056E8:  MOVLB  A
056EA:  BSF    xE0.6
....................          SendSMS.B7 =0;
056EC:  BCF    xED.6
....................        functointest_f =0;
056EE:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
056F0:  BTFSS  xE5.7
056F2:  BRA    580A
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
056F4:  MOVLW  00
056F6:  BTFSC  xDF.7
056F8:  MOVLW  01
056FA:  MOVLB  B
056FC:  MOVWF  x57
056FE:  MOVLW  00
05700:  MOVLB  A
05702:  BTFSC  xE1.7
05704:  MOVLW  01
05706:  MOVLB  B
05708:  XORWF  x57,W
0570A:  SUBLW  01
0570C:  BNZ   5714
0570E:  MOVLB  A
05710:  BTFSC  xE2.7
05712:  BRA    571A
05714:  MOVLB  A
05716:  BTFSS  xE7.7
05718:  BRA    5802
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
0571A:  BTFSC  xE6.7
0571C:  BRA    5766
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0571E:  BTFSC  xE7.7
05720:  BRA    573A
05722:  MOVLB  0
05724:  MOVF   x6A,W
05726:  SUBLW  0F
05728:  BTFSC  FD8.2
0572A:  BRA    5730
0572C:  MOVLB  A
0572E:  BRA    573A
....................             {
....................                TimeBase1s = 100 ;            //reload again
05730:  MOVLW  64
05732:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05734:  MOVFF  6B,1D
05738:  MOVLB  A
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
0573A:  BSF    xE7.7
....................             if(FlashingFlag == 0)
0573C:  BTFSC  1A.1
0573E:  BRA    5744
....................             {
....................                Output.B8 = 0;           //Flash output1
05740:  BCF    xE0.7
....................             }
05742:  BRA    5746
....................             else
....................             {
....................                Output.B8 = 1;
05744:  BSF    xE0.7
....................             }
.................... 
....................             if (~AutoTestFlag)
05746:  BTFSC  1A.4
05748:  BRA    5766
....................             {
....................                
....................                if(OutputBoth.B8 == 0)                  //Both output
0574A:  BTFSC  xE4.7
0574C:  BRA    5758
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
0574E:  BCF    F89.4
05750:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05752:  BCF    F89.3
05754:  BCF    F92.3
....................                }
05756:  BRA    5766
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,0);     //Buzzer
05758:  BTFSS  xE3.7
0575A:  BRA    5762
0575C:  BCF    F89.4
0575E:  BCF    F92.4
05760:  BRA    5766
....................                   else output_bit(Pbell,0);                          //Bell
05762:  BCF    F89.3
05764:  BCF    F92.3
....................                }
....................                
....................             }
....................        }
....................      
....................        // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05766:  BTFSC  xED.7
05768:  BRA    5800
0576A:  BTFSC  30.1
0576C:  BRA    5800
0576E:  BTFSC  xE6.7
05770:  BRA    5800
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05772:  MOVLW  FA
05774:  MOVWF  FF6
05776:  MOVLW  06
05778:  MOVWF  FF7
0577A:  MOVLB  0
0577C:  CALL   1F44
....................             putc('\n',CH2);
05780:  MOVLW  0A
05782:  MOVLB  B
05784:  MOVWF  x58
05786:  MOVLB  0
05788:  CALL   1EFE
....................             delay_ms(10);
0578C:  MOVLW  0A
0578E:  MOVLB  B
05790:  MOVWF  x57
05792:  MOVLB  0
05794:  CALL   077C
....................             
....................             SendSMS.B8 =1;
05798:  MOVLB  A
0579A:  BSF    xED.7
....................             fprintf(CH2,"AT+CMGS=\"");
0579C:  MOVLW  04
0579E:  MOVWF  FF6
057A0:  MOVLW  07
057A2:  MOVWF  FF7
057A4:  MOVLB  0
057A6:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
057AA:  MOVLW  09
057AC:  MOVWF  FEA
057AE:  MOVLW  88
057B0:  MOVWF  FE9
057B2:  CALL   44BA
....................             
....................             fprintf(CH2,"\"");
057B6:  MOVLW  22
057B8:  MOVLB  B
057BA:  MOVWF  x58
057BC:  MOVLB  0
057BE:  CALL   1EFE
....................             putc('\n',CH2);
057C2:  MOVLW  0A
057C4:  MOVLB  B
057C6:  MOVWF  x58
057C8:  MOVLB  0
057CA:  CALL   1EFE
....................             delay_ms(50);
057CE:  MOVLW  32
057D0:  MOVLB  B
057D2:  MOVWF  x57
057D4:  MOVLB  0
057D6:  CALL   077C
....................            
....................            printf(SMS_Massage8);  
057DA:  MOVLW  0A
057DC:  MOVWF  FEA
057DE:  MOVLW  B6
057E0:  MOVWF  FE9
057E2:  CALL   44BA
....................            putc('\n',CH2);
057E6:  MOVLW  0A
057E8:  MOVLB  B
057EA:  MOVWF  x58
057EC:  MOVLB  0
057EE:  CALL   1EFE
....................           putc(26,CH2);
057F2:  MOVLW  1A
057F4:  MOVLB  B
057F6:  MOVWF  x58
057F8:  MOVLB  0
057FA:  CALL   1EFE
057FE:  MOVLB  A
....................          }
.................... 
....................       }
05800:  BRA    5808
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
05802:  BTFSS  xE2.7
05804:  BRA    5808
05806:  BCF    xE6.7
....................    }
05808:  BRA    58CE
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
0580A:  MOVLW  00
0580C:  BTFSC  xDF.7
0580E:  MOVLW  01
05810:  MOVLB  B
05812:  MOVWF  x57
05814:  MOVLW  00
05816:  MOVLB  A
05818:  BTFSC  xE1.7
0581A:  MOVLW  01
0581C:  MOVLB  B
0581E:  XORWF  x57,W
05820:  SUBLW  01
05822:  BNZ   58C6
....................       {
....................          Output.B8 = 0;
05824:  MOVLB  A
05826:  BCF    xE0.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05828:  BTFSC  xED.7
0582A:  BRA    58C2
0582C:  BTFSC  30.1
0582E:  BRA    58C2
05830:  BTFSC  xE6.7
05832:  BRA    58C2
....................          {
....................             printf("AT+CMGF=1"); 
05834:  MOVLW  0E
05836:  MOVWF  FF6
05838:  MOVLW  07
0583A:  MOVWF  FF7
0583C:  MOVLB  0
0583E:  CALL   1F44
....................             putc('\n',CH2);
05842:  MOVLW  0A
05844:  MOVLB  B
05846:  MOVWF  x58
05848:  MOVLB  0
0584A:  CALL   1EFE
....................             delay_ms(10);
0584E:  MOVLW  0A
05850:  MOVLB  B
05852:  MOVWF  x57
05854:  MOVLB  0
05856:  CALL   077C
....................             
....................             SendSMS.B8 =1;
0585A:  MOVLB  A
0585C:  BSF    xED.7
....................             fprintf(CH2,"AT+CMGS=\"");
0585E:  MOVLW  18
05860:  MOVWF  FF6
05862:  MOVLW  07
05864:  MOVWF  FF7
05866:  MOVLB  0
05868:  CALL   1F44
....................             fprintf(CH2,sms_phonenumber);
0586C:  MOVLW  09
0586E:  MOVWF  FEA
05870:  MOVLW  88
05872:  MOVWF  FE9
05874:  CALL   44BA
....................             
....................             fprintf(CH2,"\"");
05878:  MOVLW  22
0587A:  MOVLB  B
0587C:  MOVWF  x58
0587E:  MOVLB  0
05880:  CALL   1EFE
....................             putc('\n',CH2);
05884:  MOVLW  0A
05886:  MOVLB  B
05888:  MOVWF  x58
0588A:  MOVLB  0
0588C:  CALL   1EFE
....................             delay_ms(50);
05890:  MOVLW  32
05892:  MOVLB  B
05894:  MOVWF  x57
05896:  MOVLB  0
05898:  CALL   077C
....................            
....................            fprintf(CH2,SMS_Massage8);  
0589C:  MOVLW  0A
0589E:  MOVWF  FEA
058A0:  MOVLW  B6
058A2:  MOVWF  FE9
058A4:  CALL   44BA
....................            putc('\n',CH2);
058A8:  MOVLW  0A
058AA:  MOVLB  B
058AC:  MOVWF  x58
058AE:  MOVLB  0
058B0:  CALL   1EFE
....................           putc(26,CH2);
058B4:  MOVLW  1A
058B6:  MOVLB  B
058B8:  MOVWF  x58
058BA:  MOVLB  0
058BC:  CALL   1EFE
058C0:  MOVLB  A
....................          }
....................       }
058C2:  BRA    58CE
058C4:  MOVLB  B
....................       else
....................       {
....................          Output.B8 = 1;
058C6:  MOVLB  A
058C8:  BSF    xE0.7
....................          SendSMS.B8 =0;
058CA:  BCF    xED.7
....................        functointest_f =0;
058CC:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
058CE:  MOVLW  00
058D0:  BTFSC  xDF.0
058D2:  MOVLW  01
058D4:  MOVLB  B
058D6:  MOVWF  x57
058D8:  MOVLW  00
058DA:  MOVLB  A
058DC:  BTFSC  xE1.0
058DE:  MOVLW  01
058E0:  MOVLB  B
058E2:  XORWF  x57,W
058E4:  SUBLW  01
058E6:  BNZ   58F0
058E8:  MOVLB  A
058EA:  BTFSS  xE2.0
058EC:  BRA    58F6
058EE:  MOVLB  B
058F0:  BTFSS  1A.5
058F2:  BRA    59C6
058F4:  MOVLB  A
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
058F6:  BTFSC  xE8.0
058F8:  BRA    5916
058FA:  MOVLB  0
058FC:  MOVF   x6A,W
058FE:  SUBLW  0F
05900:  BTFSC  FD8.2
05902:  BRA    5908
05904:  MOVLB  A
05906:  BRA    5916
05908:  MOVLB  A
0590A:  BTFSC  xE6.0
0590C:  BRA    5916
....................       {
....................             TimeBase1s = 100 ;            //reload again
0590E:  MOVLW  64
05910:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05912:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B1 = 1;
05916:  BSF    xE8.0
....................       if(Ack.B1 == 0)
05918:  BTFSC  xE6.0
0591A:  BRA    594A
....................       {
....................          if(FlashingFlag == 0)
0591C:  BTFSC  1A.1
0591E:  BRA    5924
....................             {
....................                Output.B1 = 0;           //Flash output1
05920:  BCF    xE0.0
....................             }
05922:  BRA    5926
....................             else
....................             {
....................                Output.B1 = 1;
05924:  BSF    xE0.0
....................             }
....................          if(~AutoTestFlag)
05926:  BTFSC  1A.4
05928:  BRA    594A
....................          {
....................             if(AlarmIndicator.B1 == 1){
0592A:  BTFSS  xE5.0
0592C:  BRA    594A
....................                 if(OutputBoth.B1 == 0)        //Both output
0592E:  BTFSC  xE4.0
05930:  BRA    593C
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05932:  BCF    F89.4
05934:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05936:  BCF    F89.3
05938:  BCF    F92.3
....................                 }
0593A:  BRA    594A
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,0);     //Buzzer
0593C:  BTFSS  xE3.0
0593E:  BRA    5946
05940:  BCF    F89.4
05942:  BCF    F92.4
05944:  BRA    594A
....................                   else output_bit(Pbell,0);                          //Bell
05946:  BCF    F89.3
05948:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0594A:  MOVLW  01
0594C:  MOVLB  B
0594E:  MOVWF  x4B
....................       
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
05950:  MOVLB  A
05952:  BTFSC  xED.0
05954:  BRA    59C4
05956:  BTFSC  30.1
05958:  BRA    59C4
0595A:  BTFSC  xE6.0
0595C:  BRA    59C4
....................       {
....................          SendSMS.B1 =1;
0595E:  BSF    xED.0
....................          fprintf(CH2,"AT+CMGS=\"");
05960:  MOVLW  22
05962:  MOVWF  FF6
05964:  MOVLW  07
05966:  MOVWF  FF7
05968:  MOVLB  0
0596A:  CALL   1F44
....................          fprintf(CH2,sms_phonenumber);
0596E:  MOVLW  09
05970:  MOVWF  FEA
05972:  MOVLW  88
05974:  MOVWF  FE9
05976:  CALL   44BA
....................          
....................          fprintf(CH2,"\"");
0597A:  MOVLW  22
0597C:  MOVLB  B
0597E:  MOVWF  x58
05980:  MOVLB  0
05982:  CALL   1EFE
....................          putc('\n',CH2);
05986:  MOVLW  0A
05988:  MOVLB  B
0598A:  MOVWF  x58
0598C:  MOVLB  0
0598E:  CALL   1EFE
....................          delay_ms(50);
05992:  MOVLW  32
05994:  MOVLB  B
05996:  MOVWF  x57
05998:  MOVLB  0
0599A:  CALL   077C
....................         
....................         fprintf(CH2,SMS_Massage1);   
0599E:  MOVLW  09
059A0:  MOVWF  FEA
059A2:  MOVLW  97
059A4:  MOVWF  FE9
059A6:  CALL   44BA
....................         putc('\n',CH2);
059AA:  MOVLW  0A
059AC:  MOVLB  B
059AE:  MOVWF  x58
059B0:  MOVLB  0
059B2:  CALL   1EFE
....................        putc(26,CH2);
059B6:  MOVLW  1A
059B8:  MOVLB  B
059BA:  MOVWF  x58
059BC:  MOVLB  0
059BE:  CALL   1EFE
059C2:  MOVLB  A
....................       }
....................    }
059C4:  BRA    5A50
....................    else if(FaultType.B1 == 0)
059C6:  MOVLB  A
059C8:  BTFSC  xE2.0
059CA:  BRA    5A50
....................    {
....................       In2.B1 = 0;
059CC:  BCF    xE8.0
....................       Ack.B1 = 0;
059CE:  BCF    xE6.0
....................       Output.B1 = 1;      //Off LED
059D0:  BSF    xE0.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
059D2:  BCF    xED.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
059D4:  BTFSC  xE3.0
059D6:  BRA    59DC
059D8:  BTFSC  xE4.0
059DA:  BRA    59FE
059DC:  MOVLB  B
059DE:  MOVF   x4B,F
059E0:  BTFSC  FD8.2
059E2:  BRA    59E8
059E4:  MOVLB  A
059E6:  BRA    59FE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
059E8:  MOVLW  01
059EA:  MOVWF  x56
059EC:  MOVLB  0
059EE:  CALL   44E0
059F2:  DECFSZ 01,W
059F4:  BRA    59F8
059F6:  BRA    59FC
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
059F8:  BSF    F89.4
059FA:  BCF    F92.4
059FC:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
059FE:  BTFSS  xE3.0
05A00:  BRA    5A06
05A02:  BTFSC  xE4.0
05A04:  BRA    5A28
05A06:  MOVLB  B
05A08:  MOVF   x4B,F
05A0A:  BTFSC  FD8.2
05A0C:  BRA    5A12
05A0E:  MOVLB  A
05A10:  BRA    5A28
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05A12:  MOVLW  02
05A14:  MOVWF  x56
05A16:  MOVLB  0
05A18:  CALL   44E0
05A1C:  DECFSZ 01,W
05A1E:  BRA    5A22
05A20:  BRA    5A26
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05A22:  BSF    F89.3
05A24:  BCF    F92.3
05A26:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05A28:  BTFSC  xE8.0
05A2A:  BRA    5A50
05A2C:  BTFSC  xE8.1
05A2E:  BRA    5A50
05A30:  BTFSC  xE8.2
05A32:  BRA    5A50
05A34:  BTFSC  xE8.3
05A36:  BRA    5A50
05A38:  BTFSC  xE8.4
05A3A:  BRA    5A50
05A3C:  BTFSC  xE8.5
05A3E:  BRA    5A50
05A40:  BTFSC  xE8.6
05A42:  BRA    5A50
05A44:  BTFSC  xE8.7
05A46:  BRA    5A50
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05A48:  BSF    F89.3
05A4A:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05A4C:  BSF    F89.4
05A4E:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05A50:  MOVLW  00
05A52:  BTFSC  xDF.1
05A54:  MOVLW  01
05A56:  MOVLB  B
05A58:  MOVWF  x57
05A5A:  MOVLW  00
05A5C:  MOVLB  A
05A5E:  BTFSC  xE1.1
05A60:  MOVLW  01
05A62:  MOVLB  B
05A64:  XORWF  x57,W
05A66:  SUBLW  01
05A68:  BNZ   5A72
05A6A:  MOVLB  A
05A6C:  BTFSS  xE2.1
05A6E:  BRA    5A78
05A70:  MOVLB  B
05A72:  BTFSS  1A.5
05A74:  BRA    5B48
05A76:  MOVLB  A
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
05A78:  BTFSC  xE8.1
05A7A:  BRA    5A98
05A7C:  MOVLB  0
05A7E:  MOVF   x6A,W
05A80:  SUBLW  0F
05A82:  BTFSC  FD8.2
05A84:  BRA    5A8A
05A86:  MOVLB  A
05A88:  BRA    5A98
05A8A:  MOVLB  A
05A8C:  BTFSC  xE6.1
05A8E:  BRA    5A98
....................       {
....................             TimeBase1s = 100 ;            //reload again
05A90:  MOVLW  64
05A92:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05A94:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B2 = 1;
05A98:  BSF    xE8.1
....................       if(Ack.B2 == 0)
05A9A:  BTFSC  xE6.1
05A9C:  BRA    5ACC
....................       {
....................          if(FlashingFlag == 0)
05A9E:  BTFSC  1A.1
05AA0:  BRA    5AA6
....................             {
....................                Output.B2 = 0;           //Flash output1
05AA2:  BCF    xE0.1
....................             }
05AA4:  BRA    5AA8
....................             else
....................             {
....................                Output.B2 = 1;
05AA6:  BSF    xE0.1
....................             }
....................          if (~AutoTestFlag)
05AA8:  BTFSC  1A.4
05AAA:  BRA    5ACC
....................          {
....................            if(AlarmIndicator.B2 == 1){
05AAC:  BTFSS  xE5.1
05AAE:  BRA    5ACC
....................              if(OutputBoth.B2 == 0)        //Both output
05AB0:  BTFSC  xE4.1
05AB2:  BRA    5ABE
....................              {
....................                output_bit(Pbuzzer,0);   //Buzzer
05AB4:  BCF    F89.4
05AB6:  BCF    F92.4
....................                output_bit(Pbell,0);     //Bell
05AB8:  BCF    F89.3
05ABA:  BCF    F92.3
....................              }
05ABC:  BRA    5ACC
....................              else
....................              {
....................                if(OutputType.B2 == 1) output_bit(Pbuzzer,0);     //Buzzer
05ABE:  BTFSS  xE3.1
05AC0:  BRA    5AC8
05AC2:  BCF    F89.4
05AC4:  BCF    F92.4
05AC6:  BRA    5ACC
....................                else output_bit(Pbell,0);                          //Bell
05AC8:  BCF    F89.3
05ACA:  BCF    F92.3
....................              }
....................            }
....................          }
....................        }
....................       inputflag =1;
05ACC:  MOVLW  01
05ACE:  MOVLB  B
05AD0:  MOVWF  x4B
....................       
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
05AD2:  MOVLB  A
05AD4:  BTFSC  xED.1
05AD6:  BRA    5B46
05AD8:  BTFSC  30.1
05ADA:  BRA    5B46
05ADC:  BTFSC  xE6.1
05ADE:  BRA    5B46
....................       {
....................          SendSMS.B2 =1;
05AE0:  BSF    xED.1
....................          fprintf(CH2,"AT+CMGS=\"");
05AE2:  MOVLW  2C
05AE4:  MOVWF  FF6
05AE6:  MOVLW  07
05AE8:  MOVWF  FF7
05AEA:  MOVLB  0
05AEC:  CALL   1F44
....................          fprintf(CH2,sms_phonenumber);
05AF0:  MOVLW  09
05AF2:  MOVWF  FEA
05AF4:  MOVLW  88
05AF6:  MOVWF  FE9
05AF8:  CALL   44BA
....................          
....................          fprintf(CH2,"\"");
05AFC:  MOVLW  22
05AFE:  MOVLB  B
05B00:  MOVWF  x58
05B02:  MOVLB  0
05B04:  CALL   1EFE
....................          putc('\n',CH2);
05B08:  MOVLW  0A
05B0A:  MOVLB  B
05B0C:  MOVWF  x58
05B0E:  MOVLB  0
05B10:  CALL   1EFE
....................          delay_ms(50);
05B14:  MOVLW  32
05B16:  MOVLB  B
05B18:  MOVWF  x57
05B1A:  MOVLB  0
05B1C:  CALL   077C
....................         
....................         fprintf(CH2,SMS_Massage2); 
05B20:  MOVLW  09
05B22:  MOVWF  FEA
05B24:  MOVLW  C0
05B26:  MOVWF  FE9
05B28:  CALL   44BA
....................         putc('\n',CH2);
05B2C:  MOVLW  0A
05B2E:  MOVLB  B
05B30:  MOVWF  x58
05B32:  MOVLB  0
05B34:  CALL   1EFE
....................        putc(26,CH2);
05B38:  MOVLW  1A
05B3A:  MOVLB  B
05B3C:  MOVWF  x58
05B3E:  MOVLB  0
05B40:  CALL   1EFE
05B44:  MOVLB  A
....................       }
....................    }
05B46:  BRA    5BD2
....................    else if(FaultType.B2 == 0)
05B48:  MOVLB  A
05B4A:  BTFSC  xE2.1
05B4C:  BRA    5BD2
....................    {
....................       In2.B2 = 0x00;
05B4E:  BCF    xE8.1
....................       Ack.B2 = 0;
05B50:  BCF    xE6.1
....................       Output.B2 = 1;      //Off LED
05B52:  BSF    xE0.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
05B54:  BCF    xED.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
05B56:  BTFSC  xE3.1
05B58:  BRA    5B5E
05B5A:  BTFSC  xE4.1
05B5C:  BRA    5B80
05B5E:  MOVLB  B
05B60:  MOVF   x4B,F
05B62:  BTFSC  FD8.2
05B64:  BRA    5B6A
05B66:  MOVLB  A
05B68:  BRA    5B80
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05B6A:  MOVLW  01
05B6C:  MOVWF  x56
05B6E:  MOVLB  0
05B70:  CALL   44E0
05B74:  DECFSZ 01,W
05B76:  BRA    5B7A
05B78:  BRA    5B7E
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05B7A:  BSF    F89.4
05B7C:  BCF    F92.4
05B7E:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
05B80:  BTFSS  xE3.1
05B82:  BRA    5B88
05B84:  BTFSC  xE4.1
05B86:  BRA    5BAA
05B88:  MOVLB  B
05B8A:  MOVF   x4B,F
05B8C:  BTFSC  FD8.2
05B8E:  BRA    5B94
05B90:  MOVLB  A
05B92:  BRA    5BAA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05B94:  MOVLW  02
05B96:  MOVWF  x56
05B98:  MOVLB  0
05B9A:  CALL   44E0
05B9E:  DECFSZ 01,W
05BA0:  BRA    5BA4
05BA2:  BRA    5BA8
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05BA4:  BSF    F89.3
05BA6:  BCF    F92.3
05BA8:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05BAA:  BTFSC  xE8.0
05BAC:  BRA    5BD2
05BAE:  BTFSC  xE8.1
05BB0:  BRA    5BD2
05BB2:  BTFSC  xE8.2
05BB4:  BRA    5BD2
05BB6:  BTFSC  xE8.3
05BB8:  BRA    5BD2
05BBA:  BTFSC  xE8.4
05BBC:  BRA    5BD2
05BBE:  BTFSC  xE8.5
05BC0:  BRA    5BD2
05BC2:  BTFSC  xE8.6
05BC4:  BRA    5BD2
05BC6:  BTFSC  xE8.7
05BC8:  BRA    5BD2
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05BCA:  BSF    F89.3
05BCC:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05BCE:  BSF    F89.4
05BD0:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
05BD2:  MOVLW  00
05BD4:  BTFSC  xDF.2
05BD6:  MOVLW  01
05BD8:  MOVLB  B
05BDA:  MOVWF  x57
05BDC:  MOVLW  00
05BDE:  MOVLB  A
05BE0:  BTFSC  xE1.2
05BE2:  MOVLW  01
05BE4:  MOVLB  B
05BE6:  XORWF  x57,W
05BE8:  SUBLW  01
05BEA:  BNZ   5BF4
05BEC:  MOVLB  A
05BEE:  BTFSS  xE2.2
05BF0:  BRA    5BFA
05BF2:  MOVLB  B
05BF4:  BTFSS  1A.5
05BF6:  BRA    5CCA
05BF8:  MOVLB  A
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
05BFA:  BTFSC  xE8.2
05BFC:  BRA    5C1A
05BFE:  MOVLB  0
05C00:  MOVF   x6A,W
05C02:  SUBLW  0F
05C04:  BTFSC  FD8.2
05C06:  BRA    5C0C
05C08:  MOVLB  A
05C0A:  BRA    5C1A
05C0C:  MOVLB  A
05C0E:  BTFSC  xE6.2
05C10:  BRA    5C1A
....................       {
....................             TimeBase1s = 100 ;            //reload again
05C12:  MOVLW  64
05C14:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05C16:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B3 = 1;
05C1A:  BSF    xE8.2
....................       if(Ack.B3 == 0)
05C1C:  BTFSC  xE6.2
05C1E:  BRA    5C4E
....................       {
....................          if(FlashingFlag == 0)
05C20:  BTFSC  1A.1
05C22:  BRA    5C28
....................             {
....................                Output.B3 = 0;           //Flash output1
05C24:  BCF    xE0.2
....................             }
05C26:  BRA    5C2A
....................             else
....................             {
....................                Output.B3 = 1;
05C28:  BSF    xE0.2
....................             }
....................          if (~AutoTestFlag)
05C2A:  BTFSC  1A.4
05C2C:  BRA    5C4E
....................          {
....................             if(AlarmIndicator.B3 == 1){
05C2E:  BTFSS  xE5.2
05C30:  BRA    5C4E
....................                 if(OutputBoth.B3 == 0)        //Both output
05C32:  BTFSC  xE4.2
05C34:  BRA    5C40
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05C36:  BCF    F89.4
05C38:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05C3A:  BCF    F89.3
05C3C:  BCF    F92.3
....................                 }
05C3E:  BRA    5C4E
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,0);     //Buzzer
05C40:  BTFSS  xE3.2
05C42:  BRA    5C4A
05C44:  BCF    F89.4
05C46:  BCF    F92.4
05C48:  BRA    5C4E
....................                   else output_bit(Pbell,0);                          //Bell
05C4A:  BCF    F89.3
05C4C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05C4E:  MOVLW  01
05C50:  MOVLB  B
05C52:  MOVWF  x4B
....................       
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
05C54:  MOVLB  A
05C56:  BTFSC  xED.2
05C58:  BRA    5CC8
05C5A:  BTFSC  30.1
05C5C:  BRA    5CC8
05C5E:  BTFSC  xE6.2
05C60:  BRA    5CC8
....................       {
....................          SendSMS.B3 =1;
05C62:  BSF    xED.2
....................          fprintf(CH2,"AT+CMGS=\"");
05C64:  MOVLW  36
05C66:  MOVWF  FF6
05C68:  MOVLW  07
05C6A:  MOVWF  FF7
05C6C:  MOVLB  0
05C6E:  CALL   1F44
....................          fprintf(CH2,sms_phonenumber);
05C72:  MOVLW  09
05C74:  MOVWF  FEA
05C76:  MOVLW  88
05C78:  MOVWF  FE9
05C7A:  CALL   44BA
....................          
....................          fprintf(CH2,"\"");
05C7E:  MOVLW  22
05C80:  MOVLB  B
05C82:  MOVWF  x58
05C84:  MOVLB  0
05C86:  CALL   1EFE
....................          putc('\n',CH2);
05C8A:  MOVLW  0A
05C8C:  MOVLB  B
05C8E:  MOVWF  x58
05C90:  MOVLB  0
05C92:  CALL   1EFE
....................          delay_ms(50);
05C96:  MOVLW  32
05C98:  MOVLB  B
05C9A:  MOVWF  x57
05C9C:  MOVLB  0
05C9E:  CALL   077C
....................         
....................         fprintf(CH2,SMS_Massage3); 
05CA2:  MOVLW  09
05CA4:  MOVWF  FEA
05CA6:  MOVLW  E9
05CA8:  MOVWF  FE9
05CAA:  CALL   44BA
....................         putc('\n',CH2);
05CAE:  MOVLW  0A
05CB0:  MOVLB  B
05CB2:  MOVWF  x58
05CB4:  MOVLB  0
05CB6:  CALL   1EFE
....................        putc(26,CH2);
05CBA:  MOVLW  1A
05CBC:  MOVLB  B
05CBE:  MOVWF  x58
05CC0:  MOVLB  0
05CC2:  CALL   1EFE
05CC6:  MOVLB  A
....................       }
....................    }
05CC8:  BRA    5D54
....................    else if(FaultType.B3 == 0)
05CCA:  MOVLB  A
05CCC:  BTFSC  xE2.2
05CCE:  BRA    5D54
....................    {
....................       In2.B3 = 0x00;
05CD0:  BCF    xE8.2
....................       Ack.B3 = 0;
05CD2:  BCF    xE6.2
....................       Output.B3 = 1;      //Off LED
05CD4:  BSF    xE0.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
05CD6:  BCF    xED.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
05CD8:  BTFSC  xE3.2
05CDA:  BRA    5CE0
05CDC:  BTFSC  xE4.2
05CDE:  BRA    5D02
05CE0:  MOVLB  B
05CE2:  MOVF   x4B,F
05CE4:  BTFSC  FD8.2
05CE6:  BRA    5CEC
05CE8:  MOVLB  A
05CEA:  BRA    5D02
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05CEC:  MOVLW  01
05CEE:  MOVWF  x56
05CF0:  MOVLB  0
05CF2:  CALL   44E0
05CF6:  DECFSZ 01,W
05CF8:  BRA    5CFC
05CFA:  BRA    5D00
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05CFC:  BSF    F89.4
05CFE:  BCF    F92.4
05D00:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
05D02:  BTFSS  xE3.2
05D04:  BRA    5D0A
05D06:  BTFSC  xE4.2
05D08:  BRA    5D2C
05D0A:  MOVLB  B
05D0C:  MOVF   x4B,F
05D0E:  BTFSC  FD8.2
05D10:  BRA    5D16
05D12:  MOVLB  A
05D14:  BRA    5D2C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05D16:  MOVLW  02
05D18:  MOVWF  x56
05D1A:  MOVLB  0
05D1C:  CALL   44E0
05D20:  DECFSZ 01,W
05D22:  BRA    5D26
05D24:  BRA    5D2A
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05D26:  BSF    F89.3
05D28:  BCF    F92.3
05D2A:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05D2C:  BTFSC  xE8.0
05D2E:  BRA    5D54
05D30:  BTFSC  xE8.1
05D32:  BRA    5D54
05D34:  BTFSC  xE8.2
05D36:  BRA    5D54
05D38:  BTFSC  xE8.3
05D3A:  BRA    5D54
05D3C:  BTFSC  xE8.4
05D3E:  BRA    5D54
05D40:  BTFSC  xE8.5
05D42:  BRA    5D54
05D44:  BTFSC  xE8.6
05D46:  BRA    5D54
05D48:  BTFSC  xE8.7
05D4A:  BRA    5D54
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05D4C:  BSF    F89.3
05D4E:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05D50:  BSF    F89.4
05D52:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05D54:  MOVLW  00
05D56:  BTFSC  xDF.3
05D58:  MOVLW  01
05D5A:  MOVLB  B
05D5C:  MOVWF  x57
05D5E:  MOVLW  00
05D60:  MOVLB  A
05D62:  BTFSC  xE1.3
05D64:  MOVLW  01
05D66:  MOVLB  B
05D68:  XORWF  x57,W
05D6A:  SUBLW  01
05D6C:  BNZ   5D76
05D6E:  MOVLB  A
05D70:  BTFSS  xE2.3
05D72:  BRA    5D7C
05D74:  MOVLB  B
05D76:  BTFSS  1A.5
05D78:  BRA    5E4C
05D7A:  MOVLB  A
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
05D7C:  BTFSC  xE8.3
05D7E:  BRA    5D9C
05D80:  MOVLB  0
05D82:  MOVF   x6A,W
05D84:  SUBLW  0F
05D86:  BTFSC  FD8.2
05D88:  BRA    5D8E
05D8A:  MOVLB  A
05D8C:  BRA    5D9C
05D8E:  MOVLB  A
05D90:  BTFSC  xE6.3
05D92:  BRA    5D9C
....................       {
....................             TimeBase1s = 100 ;            //reload again
05D94:  MOVLW  64
05D96:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05D98:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B4 = 1;
05D9C:  BSF    xE8.3
....................       if(Ack.B4 == 0)
05D9E:  BTFSC  xE6.3
05DA0:  BRA    5DD0
....................       {
....................          if(FlashingFlag == 0)
05DA2:  BTFSC  1A.1
05DA4:  BRA    5DAA
....................             {
....................                Output.B4 = 0;           //Flash output1
05DA6:  BCF    xE0.3
....................             }
05DA8:  BRA    5DAC
....................             else
....................             {
....................                Output.B4 = 1;
05DAA:  BSF    xE0.3
....................             }
....................          if (~AutoTestFlag)
05DAC:  BTFSC  1A.4
05DAE:  BRA    5DD0
....................          {
....................             if(AlarmIndicator.B4 == 1){
05DB0:  BTFSS  xE5.3
05DB2:  BRA    5DD0
....................                 if(OutputBoth.B4 == 0)        //Both output
05DB4:  BTFSC  xE4.3
05DB6:  BRA    5DC2
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05DB8:  BCF    F89.4
05DBA:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05DBC:  BCF    F89.3
05DBE:  BCF    F92.3
....................                 }
05DC0:  BRA    5DD0
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,0);     //Buzzer
05DC2:  BTFSS  xE3.3
05DC4:  BRA    5DCC
05DC6:  BCF    F89.4
05DC8:  BCF    F92.4
05DCA:  BRA    5DD0
....................                   else output_bit(Pbell,0);                          //Bell
05DCC:  BCF    F89.3
05DCE:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05DD0:  MOVLW  01
05DD2:  MOVLB  B
05DD4:  MOVWF  x4B
....................       
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
05DD6:  MOVLB  A
05DD8:  BTFSC  xED.3
05DDA:  BRA    5E4A
05DDC:  BTFSC  30.1
05DDE:  BRA    5E4A
05DE0:  BTFSC  xE6.3
05DE2:  BRA    5E4A
....................       {
....................          SendSMS.B4 =1;
05DE4:  BSF    xED.3
....................          fprintf(CH2,"AT+CMGS=\"");
05DE6:  MOVLW  40
05DE8:  MOVWF  FF6
05DEA:  MOVLW  07
05DEC:  MOVWF  FF7
05DEE:  MOVLB  0
05DF0:  CALL   1F44
....................          fprintf(CH2,sms_phonenumber);
05DF4:  MOVLW  09
05DF6:  MOVWF  FEA
05DF8:  MOVLW  88
05DFA:  MOVWF  FE9
05DFC:  CALL   44BA
....................          
....................          fprintf(CH2,"\"");
05E00:  MOVLW  22
05E02:  MOVLB  B
05E04:  MOVWF  x58
05E06:  MOVLB  0
05E08:  CALL   1EFE
....................          putc('\n',CH2);
05E0C:  MOVLW  0A
05E0E:  MOVLB  B
05E10:  MOVWF  x58
05E12:  MOVLB  0
05E14:  CALL   1EFE
....................          delay_ms(50);
05E18:  MOVLW  32
05E1A:  MOVLB  B
05E1C:  MOVWF  x57
05E1E:  MOVLB  0
05E20:  CALL   077C
....................         
....................         fprintf(CH2,SMS_Massage4); 
05E24:  MOVLW  0A
05E26:  MOVWF  FEA
05E28:  MOVLW  12
05E2A:  MOVWF  FE9
05E2C:  CALL   44BA
....................         putc('\n',CH2);
05E30:  MOVLW  0A
05E32:  MOVLB  B
05E34:  MOVWF  x58
05E36:  MOVLB  0
05E38:  CALL   1EFE
....................        putc(26,CH2);
05E3C:  MOVLW  1A
05E3E:  MOVLB  B
05E40:  MOVWF  x58
05E42:  MOVLB  0
05E44:  CALL   1EFE
05E48:  MOVLB  A
....................       }
....................    }
05E4A:  BRA    5ED6
....................    else if(FaultType.B4 == 0)
05E4C:  MOVLB  A
05E4E:  BTFSC  xE2.3
05E50:  BRA    5ED6
....................    {
....................       In2.B4 = 0x00;
05E52:  BCF    xE8.3
....................       Ack.B4 = 0;
05E54:  BCF    xE6.3
....................       Output.B4 = 1;      //Off LED
05E56:  BSF    xE0.3
....................       
....................       SendSMS.B4 =0;// Clear SMS
05E58:  BCF    xED.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
05E5A:  BTFSC  xE3.3
05E5C:  BRA    5E62
05E5E:  BTFSC  xE4.3
05E60:  BRA    5E84
05E62:  MOVLB  B
05E64:  MOVF   x4B,F
05E66:  BTFSC  FD8.2
05E68:  BRA    5E6E
05E6A:  MOVLB  A
05E6C:  BRA    5E84
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05E6E:  MOVLW  01
05E70:  MOVWF  x56
05E72:  MOVLB  0
05E74:  CALL   44E0
05E78:  DECFSZ 01,W
05E7A:  BRA    5E7E
05E7C:  BRA    5E82
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05E7E:  BSF    F89.4
05E80:  BCF    F92.4
05E82:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
05E84:  BTFSS  xE3.3
05E86:  BRA    5E8C
05E88:  BTFSC  xE4.3
05E8A:  BRA    5EAE
05E8C:  MOVLB  B
05E8E:  MOVF   x4B,F
05E90:  BTFSC  FD8.2
05E92:  BRA    5E98
05E94:  MOVLB  A
05E96:  BRA    5EAE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05E98:  MOVLW  02
05E9A:  MOVWF  x56
05E9C:  MOVLB  0
05E9E:  CALL   44E0
05EA2:  DECFSZ 01,W
05EA4:  BRA    5EA8
05EA6:  BRA    5EAC
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05EA8:  BSF    F89.3
05EAA:  BCF    F92.3
05EAC:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
05EAE:  BTFSC  xE8.0
05EB0:  BRA    5ED6
05EB2:  BTFSC  xE8.1
05EB4:  BRA    5ED6
05EB6:  BTFSC  xE8.2
05EB8:  BRA    5ED6
05EBA:  BTFSC  xE8.3
05EBC:  BRA    5ED6
05EBE:  BTFSC  xE8.4
05EC0:  BRA    5ED6
05EC2:  BTFSC  xE8.5
05EC4:  BRA    5ED6
05EC6:  BTFSC  xE8.6
05EC8:  BRA    5ED6
05ECA:  BTFSC  xE8.7
05ECC:  BRA    5ED6
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05ECE:  BSF    F89.3
05ED0:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05ED2:  BSF    F89.4
05ED4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05ED6:  MOVLW  00
05ED8:  BTFSC  xDF.4
05EDA:  MOVLW  01
05EDC:  MOVLB  B
05EDE:  MOVWF  x57
05EE0:  MOVLW  00
05EE2:  MOVLB  A
05EE4:  BTFSC  xE1.4
05EE6:  MOVLW  01
05EE8:  MOVLB  B
05EEA:  XORWF  x57,W
05EEC:  SUBLW  01
05EEE:  BNZ   5EF8
05EF0:  MOVLB  A
05EF2:  BTFSS  xE2.4
05EF4:  BRA    5EFE
05EF6:  MOVLB  B
05EF8:  BTFSS  1A.5
05EFA:  BRA    5FCE
05EFC:  MOVLB  A
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
05EFE:  BTFSC  xE8.4
05F00:  BRA    5F1E
05F02:  MOVLB  0
05F04:  MOVF   x6A,W
05F06:  SUBLW  0F
05F08:  BTFSC  FD8.2
05F0A:  BRA    5F10
05F0C:  MOVLB  A
05F0E:  BRA    5F1E
05F10:  MOVLB  A
05F12:  BTFSC  xE6.4
05F14:  BRA    5F1E
....................       {
....................             TimeBase1s = 100 ;            //reload again
05F16:  MOVLW  64
05F18:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05F1A:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B5 = 1;
05F1E:  BSF    xE8.4
....................       if(Ack.B5 == 0)
05F20:  BTFSC  xE6.4
05F22:  BRA    5F52
....................       {
....................          if(FlashingFlag == 0)
05F24:  BTFSC  1A.1
05F26:  BRA    5F2C
....................             {
....................                Output.B5 = 0;           //Flash output1
05F28:  BCF    xE0.4
....................             }
05F2A:  BRA    5F2E
....................             else
....................             {
....................                Output.B5 = 1;
05F2C:  BSF    xE0.4
....................             }
....................          if (~AutoTestFlag)
05F2E:  BTFSC  1A.4
05F30:  BRA    5F52
....................          {
....................             if(AlarmIndicator.B5 == 1){
05F32:  BTFSS  xE5.4
05F34:  BRA    5F52
....................                 if(OutputBoth.B5 == 0)        //Both output
05F36:  BTFSC  xE4.4
05F38:  BRA    5F44
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05F3A:  BCF    F89.4
05F3C:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05F3E:  BCF    F89.3
05F40:  BCF    F92.3
....................                 }
05F42:  BRA    5F52
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,0);     //Buzzer
05F44:  BTFSS  xE3.4
05F46:  BRA    5F4E
05F48:  BCF    F89.4
05F4A:  BCF    F92.4
05F4C:  BRA    5F52
....................                   else output_bit(Pbell,0);                          //Bell
05F4E:  BCF    F89.3
05F50:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05F52:  MOVLW  01
05F54:  MOVLB  B
05F56:  MOVWF  x4B
....................       
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05F58:  MOVLB  A
05F5A:  BTFSC  xED.4
05F5C:  BRA    5FCC
05F5E:  BTFSC  30.1
05F60:  BRA    5FCC
05F62:  BTFSC  xE6.4
05F64:  BRA    5FCC
....................       {
....................          SendSMS.B5 =1;
05F66:  BSF    xED.4
....................          fprintf(CH2,"AT+CMGS=\"");
05F68:  MOVLW  4A
05F6A:  MOVWF  FF6
05F6C:  MOVLW  07
05F6E:  MOVWF  FF7
05F70:  MOVLB  0
05F72:  CALL   1F44
....................          fprintf(CH2,sms_phonenumber);
05F76:  MOVLW  09
05F78:  MOVWF  FEA
05F7A:  MOVLW  88
05F7C:  MOVWF  FE9
05F7E:  CALL   44BA
....................          
....................          fprintf(CH2,"\"");
05F82:  MOVLW  22
05F84:  MOVLB  B
05F86:  MOVWF  x58
05F88:  MOVLB  0
05F8A:  CALL   1EFE
....................          putc('\n',CH2);
05F8E:  MOVLW  0A
05F90:  MOVLB  B
05F92:  MOVWF  x58
05F94:  MOVLB  0
05F96:  CALL   1EFE
....................          delay_ms(50);
05F9A:  MOVLW  32
05F9C:  MOVLB  B
05F9E:  MOVWF  x57
05FA0:  MOVLB  0
05FA2:  CALL   077C
....................         
....................         fprintf(CH2,SMS_Massage5); 
05FA6:  MOVLW  0A
05FA8:  MOVWF  FEA
05FAA:  MOVLW  3B
05FAC:  MOVWF  FE9
05FAE:  CALL   44BA
....................         putc('\n',CH2);
05FB2:  MOVLW  0A
05FB4:  MOVLB  B
05FB6:  MOVWF  x58
05FB8:  MOVLB  0
05FBA:  CALL   1EFE
....................        putc(26,CH2);
05FBE:  MOVLW  1A
05FC0:  MOVLB  B
05FC2:  MOVWF  x58
05FC4:  MOVLB  0
05FC6:  CALL   1EFE
05FCA:  MOVLB  A
....................       }
....................    }
05FCC:  BRA    6058
....................    else if(FaultType.B5 == 0)
05FCE:  MOVLB  A
05FD0:  BTFSC  xE2.4
05FD2:  BRA    6058
....................    {
....................       In2.B5 = 0x00;
05FD4:  BCF    xE8.4
....................       Ack.B5 = 0;
05FD6:  BCF    xE6.4
....................       Output.B5 = 1;      //Off LED
05FD8:  BSF    xE0.4
....................       
....................       SendSMS.B5 =0;// Clear SMS
05FDA:  BCF    xED.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
05FDC:  BTFSC  xE3.4
05FDE:  BRA    5FE4
05FE0:  BTFSC  xE4.4
05FE2:  BRA    6006
05FE4:  MOVLB  B
05FE6:  MOVF   x4B,F
05FE8:  BTFSC  FD8.2
05FEA:  BRA    5FF0
05FEC:  MOVLB  A
05FEE:  BRA    6006
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05FF0:  MOVLW  01
05FF2:  MOVWF  x56
05FF4:  MOVLB  0
05FF6:  CALL   44E0
05FFA:  DECFSZ 01,W
05FFC:  BRA    6000
05FFE:  BRA    6004
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06000:  BSF    F89.4
06002:  BCF    F92.4
06004:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
06006:  BTFSS  xE3.4
06008:  BRA    600E
0600A:  BTFSC  xE4.4
0600C:  BRA    6030
0600E:  MOVLB  B
06010:  MOVF   x4B,F
06012:  BTFSC  FD8.2
06014:  BRA    601A
06016:  MOVLB  A
06018:  BRA    6030
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0601A:  MOVLW  02
0601C:  MOVWF  x56
0601E:  MOVLB  0
06020:  CALL   44E0
06024:  DECFSZ 01,W
06026:  BRA    602A
06028:  BRA    602E
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
0602A:  BSF    F89.3
0602C:  BCF    F92.3
0602E:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06030:  BTFSC  xE8.0
06032:  BRA    6058
06034:  BTFSC  xE8.1
06036:  BRA    6058
06038:  BTFSC  xE8.2
0603A:  BRA    6058
0603C:  BTFSC  xE8.3
0603E:  BRA    6058
06040:  BTFSC  xE8.4
06042:  BRA    6058
06044:  BTFSC  xE8.5
06046:  BRA    6058
06048:  BTFSC  xE8.6
0604A:  BRA    6058
0604C:  BTFSC  xE8.7
0604E:  BRA    6058
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
06050:  BSF    F89.3
06052:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
06054:  BSF    F89.4
06056:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06058:  MOVLW  00
0605A:  BTFSC  xDF.5
0605C:  MOVLW  01
0605E:  MOVLB  B
06060:  MOVWF  x57
06062:  MOVLW  00
06064:  MOVLB  A
06066:  BTFSC  xE1.5
06068:  MOVLW  01
0606A:  MOVLB  B
0606C:  XORWF  x57,W
0606E:  SUBLW  01
06070:  BNZ   607A
06072:  MOVLB  A
06074:  BTFSS  xE2.5
06076:  BRA    6080
06078:  MOVLB  B
0607A:  BTFSS  1A.5
0607C:  BRA    6150
0607E:  MOVLB  A
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
06080:  BTFSC  xE8.5
06082:  BRA    60A0
06084:  MOVLB  0
06086:  MOVF   x6A,W
06088:  SUBLW  0F
0608A:  BTFSC  FD8.2
0608C:  BRA    6092
0608E:  MOVLB  A
06090:  BRA    60A0
06092:  MOVLB  A
06094:  BTFSC  xE6.5
06096:  BRA    60A0
....................       {
....................             TimeBase1s = 100 ;            //reload again
06098:  MOVLW  64
0609A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0609C:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B6 = 1;
060A0:  BSF    xE8.5
....................       if(Ack.B6 == 0)
060A2:  BTFSC  xE6.5
060A4:  BRA    60D4
....................       {
....................          if(FlashingFlag == 0)
060A6:  BTFSC  1A.1
060A8:  BRA    60AE
....................             {
....................                Output.B6 = 0;           //Flash output1
060AA:  BCF    xE0.5
....................             }
060AC:  BRA    60B0
....................             else
....................             {
....................                Output.B6 = 1;
060AE:  BSF    xE0.5
....................             }
....................          if (~AutoTestFlag)
060B0:  BTFSC  1A.4
060B2:  BRA    60D4
....................          {
....................             if(AlarmIndicator.B6 == 1){
060B4:  BTFSS  xE5.5
060B6:  BRA    60D4
....................                 if(OutputBoth.B6 == 0)        //Both output
060B8:  BTFSC  xE4.5
060BA:  BRA    60C6
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
060BC:  BCF    F89.4
060BE:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
060C0:  BCF    F89.3
060C2:  BCF    F92.3
....................                 }
060C4:  BRA    60D4
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,0);     //Buzzer
060C6:  BTFSS  xE3.5
060C8:  BRA    60D0
060CA:  BCF    F89.4
060CC:  BCF    F92.4
060CE:  BRA    60D4
....................                   else output_bit(Pbell,0);                          //Bell
060D0:  BCF    F89.3
060D2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
060D4:  MOVLW  01
060D6:  MOVLB  B
060D8:  MOVWF  x4B
....................       
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
060DA:  MOVLB  A
060DC:  BTFSC  xED.5
060DE:  BRA    614E
060E0:  BTFSC  30.1
060E2:  BRA    614E
060E4:  BTFSC  xE6.5
060E6:  BRA    614E
....................       {
....................          SendSMS.B6 =1;
060E8:  BSF    xED.5
....................          fprintf(CH2,"AT+CMGS=\"");
060EA:  MOVLW  54
060EC:  MOVWF  FF6
060EE:  MOVLW  07
060F0:  MOVWF  FF7
060F2:  MOVLB  0
060F4:  CALL   1F44
....................          fprintf(CH2,sms_phonenumber);
060F8:  MOVLW  09
060FA:  MOVWF  FEA
060FC:  MOVLW  88
060FE:  MOVWF  FE9
06100:  CALL   44BA
....................          
....................          fprintf(CH2,"\"");
06104:  MOVLW  22
06106:  MOVLB  B
06108:  MOVWF  x58
0610A:  MOVLB  0
0610C:  CALL   1EFE
....................          putc('\n',CH2);
06110:  MOVLW  0A
06112:  MOVLB  B
06114:  MOVWF  x58
06116:  MOVLB  0
06118:  CALL   1EFE
....................          delay_ms(50);
0611C:  MOVLW  32
0611E:  MOVLB  B
06120:  MOVWF  x57
06122:  MOVLB  0
06124:  CALL   077C
....................         
....................         fprintf(CH2,SMS_Massage6);  
06128:  MOVLW  0A
0612A:  MOVWF  FEA
0612C:  MOVLW  64
0612E:  MOVWF  FE9
06130:  CALL   44BA
....................         putc('\n',CH2);
06134:  MOVLW  0A
06136:  MOVLB  B
06138:  MOVWF  x58
0613A:  MOVLB  0
0613C:  CALL   1EFE
....................        putc(26,CH2);
06140:  MOVLW  1A
06142:  MOVLB  B
06144:  MOVWF  x58
06146:  MOVLB  0
06148:  CALL   1EFE
0614C:  MOVLB  A
....................       }
....................    }
0614E:  BRA    61DA
....................    else if(FaultType.B6 == 0)
06150:  MOVLB  A
06152:  BTFSC  xE2.5
06154:  BRA    61DA
....................    {
....................       In2.B6 = 0x00;
06156:  BCF    xE8.5
....................       Ack.B6 = 0;
06158:  BCF    xE6.5
....................       Output.B6 = 1;      //Off LED
0615A:  BSF    xE0.5
....................       
....................       SendSMS.B6 =0;// Clear SMS
0615C:  BCF    xED.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
0615E:  BTFSC  xE3.5
06160:  BRA    6166
06162:  BTFSC  xE4.5
06164:  BRA    6188
06166:  MOVLB  B
06168:  MOVF   x4B,F
0616A:  BTFSC  FD8.2
0616C:  BRA    6172
0616E:  MOVLB  A
06170:  BRA    6188
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
06172:  MOVLW  01
06174:  MOVWF  x56
06176:  MOVLB  0
06178:  CALL   44E0
0617C:  DECFSZ 01,W
0617E:  BRA    6182
06180:  BRA    6186
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06182:  BSF    F89.4
06184:  BCF    F92.4
06186:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
06188:  BTFSS  xE3.5
0618A:  BRA    6190
0618C:  BTFSC  xE4.5
0618E:  BRA    61B2
06190:  MOVLB  B
06192:  MOVF   x4B,F
06194:  BTFSC  FD8.2
06196:  BRA    619C
06198:  MOVLB  A
0619A:  BRA    61B2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0619C:  MOVLW  02
0619E:  MOVWF  x56
061A0:  MOVLB  0
061A2:  CALL   44E0
061A6:  DECFSZ 01,W
061A8:  BRA    61AC
061AA:  BRA    61B0
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
061AC:  BSF    F89.3
061AE:  BCF    F92.3
061B0:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
061B2:  BTFSC  xE8.0
061B4:  BRA    61DA
061B6:  BTFSC  xE8.1
061B8:  BRA    61DA
061BA:  BTFSC  xE8.2
061BC:  BRA    61DA
061BE:  BTFSC  xE8.3
061C0:  BRA    61DA
061C2:  BTFSC  xE8.4
061C4:  BRA    61DA
061C6:  BTFSC  xE8.5
061C8:  BRA    61DA
061CA:  BTFSC  xE8.6
061CC:  BRA    61DA
061CE:  BTFSC  xE8.7
061D0:  BRA    61DA
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
061D2:  BSF    F89.3
061D4:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
061D6:  BSF    F89.4
061D8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
061DA:  MOVLW  00
061DC:  BTFSC  xDF.6
061DE:  MOVLW  01
061E0:  MOVLB  B
061E2:  MOVWF  x57
061E4:  MOVLW  00
061E6:  MOVLB  A
061E8:  BTFSC  xE1.6
061EA:  MOVLW  01
061EC:  MOVLB  B
061EE:  XORWF  x57,W
061F0:  SUBLW  01
061F2:  BNZ   61FC
061F4:  MOVLB  A
061F6:  BTFSS  xE2.6
061F8:  BRA    6202
061FA:  MOVLB  B
061FC:  BTFSS  1A.5
061FE:  BRA    62D2
06200:  MOVLB  A
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
06202:  BTFSC  xE8.6
06204:  BRA    6222
06206:  MOVLB  0
06208:  MOVF   x6A,W
0620A:  SUBLW  0F
0620C:  BTFSC  FD8.2
0620E:  BRA    6214
06210:  MOVLB  A
06212:  BRA    6222
06214:  MOVLB  A
06216:  BTFSC  xE6.6
06218:  BRA    6222
....................       {
....................             TimeBase1s = 100 ;            //reload again
0621A:  MOVLW  64
0621C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0621E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B7 = 1;
06222:  BSF    xE8.6
....................       if(Ack.B7 == 0)
06224:  BTFSC  xE6.6
06226:  BRA    6256
....................       {
....................          if(FlashingFlag == 0)
06228:  BTFSC  1A.1
0622A:  BRA    6230
....................             {
....................                Output.B7 = 0;           //Flash output1
0622C:  BCF    xE0.6
....................             }
0622E:  BRA    6232
....................             else
....................             {
....................                Output.B7 = 1;
06230:  BSF    xE0.6
....................             }
....................          if (~AutoTestFlag)
06232:  BTFSC  1A.4
06234:  BRA    6256
....................          {
....................             if(AlarmIndicator.B7 == 1){
06236:  BTFSS  xE5.6
06238:  BRA    6256
....................                 if(OutputBoth.B7 == 0)        //Both output
0623A:  BTFSC  xE4.6
0623C:  BRA    6248
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
0623E:  BCF    F89.4
06240:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
06242:  BCF    F89.3
06244:  BCF    F92.3
....................                 }
06246:  BRA    6256
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,0);     //Buzzer
06248:  BTFSS  xE3.6
0624A:  BRA    6252
0624C:  BCF    F89.4
0624E:  BCF    F92.4
06250:  BRA    6256
....................                   else output_bit(Pbell,0);                          //Bell
06252:  BCF    F89.3
06254:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
06256:  MOVLW  01
06258:  MOVLB  B
0625A:  MOVWF  x4B
....................       
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0625C:  MOVLB  A
0625E:  BTFSC  xED.6
06260:  BRA    62D0
06262:  BTFSC  30.1
06264:  BRA    62D0
06266:  BTFSC  xE6.6
06268:  BRA    62D0
....................       {
....................          SendSMS.B7 =1;
0626A:  BSF    xED.6
....................          fprintf(CH2,"AT+CMGS=\"");
0626C:  MOVLW  5E
0626E:  MOVWF  FF6
06270:  MOVLW  07
06272:  MOVWF  FF7
06274:  MOVLB  0
06276:  CALL   1F44
....................          fprintf(CH2,sms_phonenumber);
0627A:  MOVLW  09
0627C:  MOVWF  FEA
0627E:  MOVLW  88
06280:  MOVWF  FE9
06282:  CALL   44BA
....................          
....................          fprintf(CH2,"\"");
06286:  MOVLW  22
06288:  MOVLB  B
0628A:  MOVWF  x58
0628C:  MOVLB  0
0628E:  CALL   1EFE
....................          putc('\n',CH2);
06292:  MOVLW  0A
06294:  MOVLB  B
06296:  MOVWF  x58
06298:  MOVLB  0
0629A:  CALL   1EFE
....................          delay_ms(50);
0629E:  MOVLW  32
062A0:  MOVLB  B
062A2:  MOVWF  x57
062A4:  MOVLB  0
062A6:  CALL   077C
....................         
....................         fprintf(CH2,SMS_Massage7);  
062AA:  MOVLW  0A
062AC:  MOVWF  FEA
062AE:  MOVLW  8D
062B0:  MOVWF  FE9
062B2:  CALL   44BA
....................         putc('\n',CH2);
062B6:  MOVLW  0A
062B8:  MOVLB  B
062BA:  MOVWF  x58
062BC:  MOVLB  0
062BE:  CALL   1EFE
....................        putc(26,CH2);
062C2:  MOVLW  1A
062C4:  MOVLB  B
062C6:  MOVWF  x58
062C8:  MOVLB  0
062CA:  CALL   1EFE
062CE:  MOVLB  A
....................       }
....................    }
062D0:  BRA    635C
....................    else if(FaultType.B7 == 0)
062D2:  MOVLB  A
062D4:  BTFSC  xE2.6
062D6:  BRA    635C
....................    {
....................       In2.B7 = 0x00;
062D8:  BCF    xE8.6
....................       Ack.B7 = 0;
062DA:  BCF    xE6.6
....................       Output.B7 = 1;      //Off LED
062DC:  BSF    xE0.6
....................       
....................       SendSMS.B7 =0;// Clear SMS
062DE:  BCF    xED.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
062E0:  BTFSC  xE3.6
062E2:  BRA    62E8
062E4:  BTFSC  xE4.6
062E6:  BRA    630A
062E8:  MOVLB  B
062EA:  MOVF   x4B,F
062EC:  BTFSC  FD8.2
062EE:  BRA    62F4
062F0:  MOVLB  A
062F2:  BRA    630A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
062F4:  MOVLW  01
062F6:  MOVWF  x56
062F8:  MOVLB  0
062FA:  CALL   44E0
062FE:  DECFSZ 01,W
06300:  BRA    6304
06302:  BRA    6308
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06304:  BSF    F89.4
06306:  BCF    F92.4
06308:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
0630A:  BTFSS  xE3.6
0630C:  BRA    6312
0630E:  BTFSC  xE4.6
06310:  BRA    6334
06312:  MOVLB  B
06314:  MOVF   x4B,F
06316:  BTFSC  FD8.2
06318:  BRA    631E
0631A:  MOVLB  A
0631C:  BRA    6334
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0631E:  MOVLW  02
06320:  MOVWF  x56
06322:  MOVLB  0
06324:  CALL   44E0
06328:  DECFSZ 01,W
0632A:  BRA    632E
0632C:  BRA    6332
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
0632E:  BSF    F89.3
06330:  BCF    F92.3
06332:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06334:  BTFSC  xE8.0
06336:  BRA    635C
06338:  BTFSC  xE8.1
0633A:  BRA    635C
0633C:  BTFSC  xE8.2
0633E:  BRA    635C
06340:  BTFSC  xE8.3
06342:  BRA    635C
06344:  BTFSC  xE8.4
06346:  BRA    635C
06348:  BTFSC  xE8.5
0634A:  BRA    635C
0634C:  BTFSC  xE8.6
0634E:  BRA    635C
06350:  BTFSC  xE8.7
06352:  BRA    635C
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
06354:  BSF    F89.3
06356:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
06358:  BSF    F89.4
0635A:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
0635C:  MOVLW  00
0635E:  BTFSC  xDF.7
06360:  MOVLW  01
06362:  MOVLB  B
06364:  MOVWF  x57
06366:  MOVLW  00
06368:  MOVLB  A
0636A:  BTFSC  xE1.7
0636C:  MOVLW  01
0636E:  MOVLB  B
06370:  XORWF  x57,W
06372:  SUBLW  01
06374:  BNZ   637E
06376:  MOVLB  A
06378:  BTFSS  xE2.7
0637A:  BRA    6384
0637C:  MOVLB  B
0637E:  BTFSS  1A.5
06380:  BRA    6454
06382:  MOVLB  A
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
06384:  BTFSC  xE8.7
06386:  BRA    63A4
06388:  MOVLB  0
0638A:  MOVF   x6A,W
0638C:  SUBLW  0F
0638E:  BTFSC  FD8.2
06390:  BRA    6396
06392:  MOVLB  A
06394:  BRA    63A4
06396:  MOVLB  A
06398:  BTFSC  xE6.7
0639A:  BRA    63A4
....................       {
....................             TimeBase1s = 100 ;            //reload again
0639C:  MOVLW  64
0639E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
063A0:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B8 = 1;
063A4:  BSF    xE8.7
....................       if(Ack.B8 == 0)
063A6:  BTFSC  xE6.7
063A8:  BRA    63D8
....................       {
....................          if(FlashingFlag == 0)
063AA:  BTFSC  1A.1
063AC:  BRA    63B2
....................             {
....................                Output.B8 = 0;           //Flash output1
063AE:  BCF    xE0.7
....................             }
063B0:  BRA    63B4
....................             else
....................             {
....................                Output.B8 = 1;
063B2:  BSF    xE0.7
....................             }
....................          if (~AutoTestFlag)
063B4:  BTFSC  1A.4
063B6:  BRA    63D8
....................          {
....................             if(AlarmIndicator.B8 == 1){
063B8:  BTFSS  xE5.7
063BA:  BRA    63D8
....................                 if(OutputBoth.B8 == 0)        //Both output
063BC:  BTFSC  xE4.7
063BE:  BRA    63CA
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
063C0:  BCF    F89.4
063C2:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
063C4:  BCF    F89.3
063C6:  BCF    F92.3
....................                 }
063C8:  BRA    63D8
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,0);     //Buzzer
063CA:  BTFSS  xE3.7
063CC:  BRA    63D4
063CE:  BCF    F89.4
063D0:  BCF    F92.4
063D2:  BRA    63D8
....................                   else output_bit(Pbell,0);                          //Bell
063D4:  BCF    F89.3
063D6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
063D8:  MOVLW  01
063DA:  MOVLB  B
063DC:  MOVWF  x4B
....................       
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
063DE:  MOVLB  A
063E0:  BTFSC  xED.7
063E2:  BRA    6452
063E4:  BTFSC  30.1
063E6:  BRA    6452
063E8:  BTFSC  xE6.7
063EA:  BRA    6452
....................       {
....................          SendSMS.B8 =1;
063EC:  BSF    xED.7
....................          fprintf(CH2,"AT+CMGS=\"");
063EE:  MOVLW  68
063F0:  MOVWF  FF6
063F2:  MOVLW  07
063F4:  MOVWF  FF7
063F6:  MOVLB  0
063F8:  CALL   1F44
....................          fprintf(CH2,sms_phonenumber);
063FC:  MOVLW  09
063FE:  MOVWF  FEA
06400:  MOVLW  88
06402:  MOVWF  FE9
06404:  CALL   44BA
....................          
....................          fprintf(CH2,"\"");
06408:  MOVLW  22
0640A:  MOVLB  B
0640C:  MOVWF  x58
0640E:  MOVLB  0
06410:  CALL   1EFE
....................          putc('\n',CH2);
06414:  MOVLW  0A
06416:  MOVLB  B
06418:  MOVWF  x58
0641A:  MOVLB  0
0641C:  CALL   1EFE
....................          delay_ms(50);
06420:  MOVLW  32
06422:  MOVLB  B
06424:  MOVWF  x57
06426:  MOVLB  0
06428:  CALL   077C
....................         
....................         fprintf(CH2,SMS_Massage8);   
0642C:  MOVLW  0A
0642E:  MOVWF  FEA
06430:  MOVLW  B6
06432:  MOVWF  FE9
06434:  CALL   44BA
....................         putc('\n',CH2);
06438:  MOVLW  0A
0643A:  MOVLB  B
0643C:  MOVWF  x58
0643E:  MOVLB  0
06440:  CALL   1EFE
....................         putc(26,CH2);
06444:  MOVLW  1A
06446:  MOVLB  B
06448:  MOVWF  x58
0644A:  MOVLB  0
0644C:  CALL   1EFE
06450:  MOVLB  A
....................       }
....................    }
06452:  BRA    64DE
....................    else if(FaultType.B8 == 0)
06454:  MOVLB  A
06456:  BTFSC  xE2.7
06458:  BRA    64DE
....................    {
....................       In2.B8 = 0x00;
0645A:  BCF    xE8.7
....................       Ack.B8 = 0;
0645C:  BCF    xE6.7
....................       Output.B8 = 1;      //Off LED
0645E:  BSF    xE0.7
....................       
....................       SendSMS.B8 =0;// Clear SMS
06460:  BCF    xED.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
06462:  BTFSC  xE3.7
06464:  BRA    646A
06466:  BTFSC  xE4.7
06468:  BRA    648C
0646A:  MOVLB  B
0646C:  MOVF   x4B,F
0646E:  BTFSC  FD8.2
06470:  BRA    6476
06472:  MOVLB  A
06474:  BRA    648C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
06476:  MOVLW  01
06478:  MOVWF  x56
0647A:  MOVLB  0
0647C:  CALL   44E0
06480:  DECFSZ 01,W
06482:  BRA    6486
06484:  BRA    648A
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06486:  BSF    F89.4
06488:  BCF    F92.4
0648A:  MOVLB  A
....................          }
....................       }
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
0648C:  BTFSS  xE3.7
0648E:  BRA    6494
06490:  BTFSC  xE4.7
06492:  BRA    64B6
06494:  MOVLB  B
06496:  MOVF   x4B,F
06498:  BTFSC  FD8.2
0649A:  BRA    64A0
0649C:  MOVLB  A
0649E:  BRA    64B6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
064A0:  MOVLW  02
064A2:  MOVWF  x56
064A4:  MOVLB  0
064A6:  CALL   44E0
064AA:  DECFSZ 01,W
064AC:  BRA    64B0
064AE:  BRA    64B4
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
064B0:  BSF    F89.3
064B2:  BCF    F92.3
064B4:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
064B6:  BTFSC  xE8.0
064B8:  BRA    64DE
064BA:  BTFSC  xE8.1
064BC:  BRA    64DE
064BE:  BTFSC  xE8.2
064C0:  BRA    64DE
064C2:  BTFSC  xE8.3
064C4:  BRA    64DE
064C6:  BTFSC  xE8.4
064C8:  BRA    64DE
064CA:  BTFSC  xE8.5
064CC:  BRA    64DE
064CE:  BTFSC  xE8.6
064D0:  BRA    64DE
064D2:  BTFSC  xE8.7
064D4:  BRA    64DE
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
064D6:  BSF    F89.3
064D8:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
064DA:  BSF    F89.4
064DC:  BCF    F92.4
....................       }
....................    }
064DE:  MOVLB  0
064E0:  RETURN 0
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////   
....................    
.................... 
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
01D24:  CLRF   4E
....................     Red8_8 = 0;
01D26:  CLRF   4F
....................     //Red9_15 = 0;
....................     //Red16_16 = 0;
.................... 
....................     Green1_7 = 0;
01D28:  CLRF   52
....................     Green8_8 = 0;
01D2A:  CLRF   53
....................     //Green9_15 = 0;
....................     //Green16_16 = 0;
.................... 
....................    if(T_test == 0x00)
01D2C:  MOVF   2F,F
01D2E:  BTFSS  FD8.2
01D30:  BRA    1EFC
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
01D32:  MOVLB  A
01D34:  BTFSS  xE0.0
01D36:  BRA    1D3E
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
01D38:  BCF    4E.1
01D3A:  BCF    52.1
....................            }
01D3C:  BRA    1D66
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
01D3E:  BTFSS  xEB.0
01D40:  BRA    1D4C
01D42:  BTFSC  xEC.0
01D44:  BRA    1D4C
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
01D46:  BSF    4E.1
01D48:  BCF    52.1
....................              }
01D4A:  BRA    1D66
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
01D4C:  BTFSC  xEB.0
01D4E:  BRA    1D5A
01D50:  BTFSS  xEC.0
01D52:  BRA    1D5A
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
01D54:  BCF    4E.1
01D56:  BSF    52.1
....................              }
01D58:  BRA    1D66
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
01D5A:  BTFSS  xEB.0
01D5C:  BRA    1D66
01D5E:  BTFSS  xEC.0
01D60:  BRA    1D66
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
01D62:  BSF    4E.1
01D64:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
01D66:  BTFSS  xE0.1
01D68:  BRA    1D70
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
01D6A:  BCF    4E.2
01D6C:  BCF    52.2
....................            }
01D6E:  BRA    1D98
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
01D70:  BTFSS  xEB.1
01D72:  BRA    1D7E
01D74:  BTFSC  xEC.1
01D76:  BRA    1D7E
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
01D78:  BSF    4E.2
01D7A:  BCF    52.2
....................              }
01D7C:  BRA    1D98
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
01D7E:  BTFSC  xEB.1
01D80:  BRA    1D8C
01D82:  BTFSS  xEC.1
01D84:  BRA    1D8C
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
01D86:  BCF    4E.2
01D88:  BSF    52.2
....................              }
01D8A:  BRA    1D98
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
01D8C:  BTFSS  xEB.1
01D8E:  BRA    1D98
01D90:  BTFSS  xEC.1
01D92:  BRA    1D98
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
01D94:  BSF    4E.2
01D96:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
01D98:  BTFSS  xE0.2
01D9A:  BRA    1DA2
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
01D9C:  BCF    4E.3
01D9E:  BCF    52.3
....................            }
01DA0:  BRA    1DCA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
01DA2:  BTFSS  xEB.2
01DA4:  BRA    1DB0
01DA6:  BTFSC  xEC.2
01DA8:  BRA    1DB0
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
01DAA:  BSF    4E.3
01DAC:  BCF    52.3
....................              }
01DAE:  BRA    1DCA
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
01DB0:  BTFSC  xEB.2
01DB2:  BRA    1DBE
01DB4:  BTFSS  xEC.2
01DB6:  BRA    1DBE
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
01DB8:  BCF    4E.3
01DBA:  BSF    52.3
....................              }
01DBC:  BRA    1DCA
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
01DBE:  BTFSS  xEB.2
01DC0:  BRA    1DCA
01DC2:  BTFSS  xEC.2
01DC4:  BRA    1DCA
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
01DC6:  BSF    4E.3
01DC8:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
01DCA:  BTFSS  xE0.3
01DCC:  BRA    1DD4
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
01DCE:  BCF    4E.4
01DD0:  BCF    52.4
....................            }
01DD2:  BRA    1DFC
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
01DD4:  BTFSS  xEB.3
01DD6:  BRA    1DE2
01DD8:  BTFSC  xEC.3
01DDA:  BRA    1DE2
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
01DDC:  BSF    4E.4
01DDE:  BCF    52.4
....................              }
01DE0:  BRA    1DFC
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
01DE2:  BTFSC  xEB.3
01DE4:  BRA    1DF0
01DE6:  BTFSS  xEC.3
01DE8:  BRA    1DF0
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
01DEA:  BCF    4E.4
01DEC:  BSF    52.4
....................              }
01DEE:  BRA    1DFC
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
01DF0:  BTFSS  xEB.3
01DF2:  BRA    1DFC
01DF4:  BTFSS  xEC.3
01DF6:  BRA    1DFC
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
01DF8:  BSF    4E.4
01DFA:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
01DFC:  BTFSS  xE0.4
01DFE:  BRA    1E06
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
01E00:  BCF    4E.5
01E02:  BCF    52.5
....................            }
01E04:  BRA    1E2E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
01E06:  BTFSS  xEB.4
01E08:  BRA    1E14
01E0A:  BTFSC  xEC.4
01E0C:  BRA    1E14
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
01E0E:  BSF    4E.5
01E10:  BCF    52.5
....................              }
01E12:  BRA    1E2E
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
01E14:  BTFSC  xEB.4
01E16:  BRA    1E22
01E18:  BTFSS  xEC.4
01E1A:  BRA    1E22
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
01E1C:  BCF    4E.5
01E1E:  BSF    52.5
....................              }
01E20:  BRA    1E2E
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
01E22:  BTFSS  xEB.4
01E24:  BRA    1E2E
01E26:  BTFSS  xEC.4
01E28:  BRA    1E2E
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
01E2A:  BSF    4E.5
01E2C:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
01E2E:  BTFSS  xE0.5
01E30:  BRA    1E38
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
01E32:  BCF    4E.6
01E34:  BCF    52.6
....................            }
01E36:  BRA    1E60
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
01E38:  BTFSS  xEB.5
01E3A:  BRA    1E46
01E3C:  BTFSC  xEC.5
01E3E:  BRA    1E46
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
01E40:  BSF    4E.6
01E42:  BCF    52.6
....................              }
01E44:  BRA    1E60
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
01E46:  BTFSC  xEB.5
01E48:  BRA    1E54
01E4A:  BTFSS  xEC.5
01E4C:  BRA    1E54
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
01E4E:  BCF    4E.6
01E50:  BSF    52.6
....................              }
01E52:  BRA    1E60
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
01E54:  BTFSS  xEB.5
01E56:  BRA    1E60
01E58:  BTFSS  xEC.5
01E5A:  BRA    1E60
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
01E5C:  BSF    4E.6
01E5E:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
01E60:  BTFSS  xE0.6
01E62:  BRA    1E6A
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
01E64:  BCF    4E.7
01E66:  BCF    52.7
....................            }
01E68:  BRA    1E92
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
01E6A:  BTFSS  xEB.6
01E6C:  BRA    1E78
01E6E:  BTFSC  xEC.6
01E70:  BRA    1E78
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
01E72:  BSF    4E.7
01E74:  BCF    52.7
....................              }
01E76:  BRA    1E92
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
01E78:  BTFSC  xEB.6
01E7A:  BRA    1E86
01E7C:  BTFSS  xEC.6
01E7E:  BRA    1E86
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
01E80:  BCF    4E.7
01E82:  BSF    52.7
....................              }
01E84:  BRA    1E92
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
01E86:  BTFSS  xEB.6
01E88:  BRA    1E92
01E8A:  BTFSS  xEC.6
01E8C:  BRA    1E92
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
01E8E:  BSF    4E.7
01E90:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
01E92:  BTFSS  xE0.7
01E94:  BRA    1E9C
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
01E96:  BCF    4F.0
01E98:  BCF    53.0
....................            }
01E9A:  BRA    1EC4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
01E9C:  BTFSS  xEB.7
01E9E:  BRA    1EAA
01EA0:  BTFSC  xEC.7
01EA2:  BRA    1EAA
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
01EA4:  BSF    4F.0
01EA6:  BCF    53.0
....................              }
01EA8:  BRA    1EC4
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
01EAA:  BTFSC  xEB.7
01EAC:  BRA    1EB8
01EAE:  BTFSS  xEC.7
01EB0:  BRA    1EB8
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
01EB2:  BCF    4F.0
01EB4:  BSF    53.0
....................              }
01EB6:  BRA    1EC4
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
01EB8:  BTFSS  xEB.7
01EBA:  BRA    1EC4
01EBC:  BTFSS  xEC.7
01EBE:  BRA    1EC4
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
01EC0:  BSF    4F.0
01EC2:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
.................... 
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
01EC4:  MOVLW  04
01EC6:  MOVLB  B
01EC8:  MOVWF  x56
01ECA:  MOVFF  4E,B57
01ECE:  MOVLB  0
01ED0:  RCALL  1CF8
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
01ED2:  MOVLW  04
01ED4:  MOVLB  B
01ED6:  MOVWF  x56
01ED8:  MOVFF  4F,B57
01EDC:  MOVLB  0
01EDE:  RCALL  1D0E
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
01EE0:  MOVLW  06
01EE2:  MOVLB  B
01EE4:  MOVWF  x56
01EE6:  MOVFF  52,B57
01EEA:  MOVLB  0
01EEC:  RCALL  1CF8
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
01EEE:  MOVLW  06
01EF0:  MOVLB  B
01EF2:  MOVWF  x56
01EF4:  MOVFF  53,B57
01EF8:  MOVLB  0
01EFA:  RCALL  1D0E
....................            
.................... 
....................                                            
....................            
....................    }
01EFC:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    In.B1 = 1;
*
044A2:  MOVLB  A
044A4:  BSF    xE7.0
....................    In.B2 = 1;
044A6:  BSF    xE7.1
....................    In.B3 = 1;
044A8:  BSF    xE7.2
....................    In.B4 = 1;
044AA:  BSF    xE7.3
....................    In.B5 = 1;
044AC:  BSF    xE7.4
....................    In.B6 = 1;
044AE:  BSF    xE7.5
....................    In.B7 = 1;
044B0:  BSF    xE7.6
....................    In.B8 = 1;
044B2:  BSF    xE7.7
044B4:  MOVLB  0
044B6:  GOTO   6580 (RETURN)
....................       /*
....................       Inputt.B1 = ~InputType.B1;
....................       Inputt.B2 = ~InputType.B2;
....................       Inputt.B3 = ~InputType.B3;
....................       Inputt.B4 = ~InputType.B4;
....................       Inputt.B5 = ~InputType.B5;
....................       Inputt.B6 = ~InputType.B6;
....................       Inputt.B7 = ~InputType.B7;
....................       Inputt.B8 = ~InputType.B8;
....................       Ack.B1 = 0;
....................       Ack.B2 = 0;
....................       Ack.B3 = 0;
....................       Ack.B4 = 0;
....................       Ack.B5 = 0;
....................       Ack.B6 = 0;
....................       Ack.B7 = 0;
....................       Ack.B8 = 0;
....................       */
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
064E2:  MOVFF  32,B4E
....................    output_temp[1] = output9_16;
064E6:  MOVFF  33,B4F
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
064EA:  BSF    F94.2
064EC:  BTFSC  F82.2
064EE:  BRA    64F4
064F0:  BTFSS  1A.6
064F2:  BRA    64F8
064F4:  BTFSS  1A.4
064F6:  BRA    6504
064F8:  MOVLW  32
064FA:  MOVLB  B
064FC:  MOVWF  x57
064FE:  MOVLB  0
06500:  CALL   077C
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
06504:  BSF    F94.2
06506:  BTFSC  F82.2
06508:  BRA    650E
0650A:  BTFSS  1A.6
0650C:  BRA    6512
0650E:  BTFSS  1A.4
06510:  BRA    6566
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
06512:  BSF    F94.2
06514:  BTFSC  F82.2
06516:  BRA    651C
06518:  BTFSS  1A.6
0651A:  BRA    6520
0651C:  BTFSS  1A.4
0651E:  BRA    6564
....................            {
....................              restart_wdt();
06520:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
06522:  MOVF   2F,F
06524:  BNZ   652A
06526:  MOVLW  06
06528:  MOVWF  2F
....................               Test = 1;
0652A:  BSF    1A.6
....................         
....................           IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
0652C:  MOVLW  04
0652E:  MOVLB  B
06530:  MOVWF  x56
06532:  SETF   x57
06534:  MOVLB  0
06536:  CALL   1CF8
....................           IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
0653A:  MOVLW  04
0653C:  MOVLB  B
0653E:  MOVWF  x56
06540:  SETF   x57
06542:  MOVLB  0
06544:  CALL   1D0E
....................                   
....................           IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
06548:  MOVLW  06
0654A:  MOVLB  B
0654C:  MOVWF  x56
0654E:  SETF   x57
06550:  MOVLB  0
06552:  CALL   1CF8
....................           IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
06556:  MOVLW  06
06558:  MOVLB  B
0655A:  MOVWF  x56
0655C:  SETF   x57
0655E:  MOVLB  0
06560:  CALL   1D0E
....................              
....................            }
....................          
....................        }
06564:  BRA    6576
....................        else if(input(Ptest) == 1 && Test == 1)
06566:  BSF    F94.2
06568:  BTFSS  F82.2
0656A:  BRA    6576
0656C:  BTFSS  1A.6
0656E:  BRA    6576
....................        {
....................            T_test = 0x00;
06570:  CLRF   2F
....................            Test = 0;
06572:  BCF    1A.6
....................            Test_fault = 0;
06574:  BCF    1A.5
....................        }
....................        if(Test_fault == 1)
06576:  BTFSS  1A.5
06578:  BRA    658E
....................        {
....................           functointest_f = 1;
0657A:  BSF    30.1
....................           ForceAllAlarm();
0657C:  GOTO   44A2
....................           Anal_Function();
06580:  CALL   49E8
....................           if(Input(Ptest) == 1)
06584:  BSF    F94.2
06586:  BTFSS  F82.2
06588:  BRA    658C
....................           {
....................             Test_fault = 0;
0658A:  BCF    1A.5
....................           }
....................        }
0658C:  BRA    65A4
....................        else if(input(Ptest) == 1 && Test == 1)
0658E:  BSF    F94.2
06590:  BTFSS  F82.2
06592:  BRA    65A4
06594:  BTFSS  1A.6
06596:  BRA    65A4
....................        {
....................           if(NoOfPoint >= 16)
06598:  MOVF   x6D,W
0659A:  SUBLW  0F
0659C:  BC    659E
....................           {
.................... 
....................           }
....................           
.................... 
....................           T_test = 0x00;
0659E:  CLRF   2F
....................           Test = 0;
065A0:  BCF    1A.6
....................           Test_fault = 0;
065A2:  BCF    1A.5
....................        }
065A4:  GOTO   6ADC (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
0216C:  BSF    F94.0
0216E:  BTFSC  F82.0
02170:  BRA    2176
02172:  BTFSS  1A.7
02174:  BRA    217A
02176:  BTFSS  1A.2
02178:  BRA    2186
0217A:  MOVLW  32
0217C:  MOVLB  B
0217E:  MOVWF  x57
02180:  MOVLB  0
02182:  CALL   077C
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
02186:  BSF    F94.0
02188:  BTFSC  F82.0
0218A:  BRA    2190
0218C:  BTFSS  1A.7
0218E:  BRA    2194
02190:  BTFSS  1A.2
02192:  BRA    223E
....................    {
....................             AutoAckFlag = 0;
02194:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
02196:  CLRF   1D
.................... 
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
02198:  MOVLB  A
0219A:  BTFSC  xE7.0
0219C:  BRA    21A2
0219E:  BTFSS  xE8.0
021A0:  BRA    21AC
....................            {
....................              Ack.B1 = 1;
021A2:  BSF    xE6.0
....................              In.B1 = 0;
021A4:  BCF    xE7.0
....................              In2.B1 = 0;      //for auto reset
021A6:  BCF    xE8.0
....................              Output.B1 = 0;
021A8:  BCF    xE0.0
....................              SendSMS.B1 =0;
021AA:  BCF    xED.0
....................            }
.................... 
....................            if((In.B2 == 1)||(In2.B2 == 1))
021AC:  BTFSC  xE7.1
021AE:  BRA    21B4
021B0:  BTFSS  xE8.1
021B2:  BRA    21BE
....................            {
....................              Ack.B2 = 1;
021B4:  BSF    xE6.1
....................              In.B2 = 0;
021B6:  BCF    xE7.1
....................              In2.B2 = 0;      //for auto reset
021B8:  BCF    xE8.1
....................              Output.B2 = 0;
021BA:  BCF    xE0.1
....................              SendSMS.B2 =0;
021BC:  BCF    xED.1
....................            }
.................... 
....................            if((In.B3 == 1)||(In2.B3 == 1))
021BE:  BTFSC  xE7.2
021C0:  BRA    21C6
021C2:  BTFSS  xE8.2
021C4:  BRA    21D0
....................            {
....................              Ack.B3 = 1;
021C6:  BSF    xE6.2
....................              In.B3 = 0;
021C8:  BCF    xE7.2
....................              In2.B3 = 0;      //for auto reset
021CA:  BCF    xE8.2
....................              Output.B3 = 0;
021CC:  BCF    xE0.2
....................              SendSMS.B3 =0;
021CE:  BCF    xED.2
....................            }
.................... 
....................            if((In.B4 == 1)||(In2.B4 == 1))
021D0:  BTFSC  xE7.3
021D2:  BRA    21D8
021D4:  BTFSS  xE8.3
021D6:  BRA    21E2
....................            {
....................              Ack.B4 = 1;
021D8:  BSF    xE6.3
....................              In.B4 = 0;
021DA:  BCF    xE7.3
....................              In2.B4 = 0;      //for auto reset
021DC:  BCF    xE8.3
....................              Output.B4 = 0;
021DE:  BCF    xE0.3
....................              SendSMS.B4 =0;
021E0:  BCF    xED.3
....................            }
.................... 
....................            if((In.B5 == 1)||(In2.B5 == 1))
021E2:  BTFSC  xE7.4
021E4:  BRA    21EA
021E6:  BTFSS  xE8.4
021E8:  BRA    21F4
....................            {
....................              Ack.B5 = 1;
021EA:  BSF    xE6.4
....................              In.B5 = 0;
021EC:  BCF    xE7.4
....................              In2.B5 = 0;      //for auto reset
021EE:  BCF    xE8.4
....................              Output.B5 = 0;
021F0:  BCF    xE0.4
....................              SendSMS.B5 =0;
021F2:  BCF    xED.4
....................            }
.................... 
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
021F4:  BTFSC  xE7.5
021F6:  BRA    21FC
021F8:  BTFSS  xE8.5
021FA:  BRA    2206
....................            {
....................              Ack.B6 = 1;
021FC:  BSF    xE6.5
....................              In.B6 = 0;
021FE:  BCF    xE7.5
....................              In2.B6 = 0;      //for auto reset
02200:  BCF    xE8.5
....................              Output.B6 = 0;
02202:  BCF    xE0.5
....................              SendSMS.B6 =0;
02204:  BCF    xED.5
....................            }
.................... 
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
02206:  BTFSC  xE7.6
02208:  BRA    220E
0220A:  BTFSS  xE8.6
0220C:  BRA    2218
....................            {
....................              Ack.B7 = 1;
0220E:  BSF    xE6.6
....................              In.B7 = 0;
02210:  BCF    xE7.6
....................              In2.B7 = 0;      //for auto reset
02212:  BCF    xE8.6
....................              Output.B7 = 0;
02214:  BCF    xE0.6
....................              SendSMS.B7 =0;
02216:  BCF    xED.6
....................            }
.................... 
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
02218:  BTFSC  xE7.7
0221A:  BRA    2220
0221C:  BTFSS  xE8.7
0221E:  BRA    222A
....................            {
....................              Ack.B8 = 1;
02220:  BSF    xE6.7
....................              In.B8 = 0;
02222:  BCF    xE7.7
....................              In2.B8 = 0;      //for auto reset
02224:  BCF    xE8.7
....................              Output.B8 = 0;
02226:  BCF    xE0.7
....................              SendSMS.B8 =0;
02228:  BCF    xED.7
....................            }
....................       
....................             if(functointest_f){
0222A:  BTFSS  30.1
0222C:  BRA    2230
....................                functointest_f = 0;
0222E:  BCF    30.1
....................             }
....................             Ack_F = 1;
02230:  BSF    1A.7
....................             output_bit(Pbuzzer,1);   //Buzzer
02232:  BSF    F89.4
02234:  BCF    F92.4
....................             output_bit(Pbell,1);     //Bell
02236:  BSF    F89.3
02238:  BCF    F92.3
....................    }
0223A:  BRA    224C
0223C:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
0223E:  BSF    F94.0
02240:  BTFSS  F82.0
02242:  BRA    224A
02244:  BTFSS  1A.7
02246:  BRA    224A
....................    {
....................       Ack_F = 0;
02248:  BCF    1A.7
0224A:  MOVLB  A
....................    }
0224C:  MOVLB  0
0224E:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
02250:  BSF    F94.1
02252:  BTFSC  F82.1
02254:  BRA    225A
02256:  BTFSS  30.0
02258:  BRA    225E
0225A:  BTFSS  1A.3
0225C:  BRA    226A
0225E:  MOVLW  32
02260:  MOVLB  B
02262:  MOVWF  x57
02264:  MOVLB  0
02266:  CALL   077C
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
0226A:  BSF    F94.1
0226C:  BTFSC  F82.1
0226E:  BRA    2274
02270:  BTFSS  30.0
02272:  BRA    2278
02274:  BTFSS  1A.3
02276:  BRA    23C0
....................     {
....................        AutoResetFlag = 0;
02278:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
0227A:  MOVLW  00
0227C:  MOVLB  A
0227E:  BTFSC  xDF.0
02280:  MOVLW  01
02282:  MOVLB  B
02284:  MOVWF  x58
02286:  MOVLW  00
02288:  MOVLB  A
0228A:  BTFSC  xE1.0
0228C:  MOVLW  01
0228E:  MOVLB  B
02290:  XORWF  x58,W
02292:  BNZ   22A2
02294:  MOVLB  A
02296:  BTFSS  xE7.0
02298:  BRA    229E
0229A:  MOVLB  B
0229C:  BRA    22A2
0229E:  BSF    xE0.0
022A0:  MOVLB  B
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
022A2:  MOVLW  00
022A4:  MOVLB  A
022A6:  BTFSC  xDF.1
022A8:  MOVLW  01
022AA:  MOVLB  B
022AC:  MOVWF  x58
022AE:  MOVLW  00
022B0:  MOVLB  A
022B2:  BTFSC  xE1.1
022B4:  MOVLW  01
022B6:  MOVLB  B
022B8:  XORWF  x58,W
022BA:  BNZ   22CA
022BC:  MOVLB  A
022BE:  BTFSS  xE7.1
022C0:  BRA    22C6
022C2:  MOVLB  B
022C4:  BRA    22CA
022C6:  BSF    xE0.1
022C8:  MOVLB  B
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
022CA:  MOVLW  00
022CC:  MOVLB  A
022CE:  BTFSC  xDF.2
022D0:  MOVLW  01
022D2:  MOVLB  B
022D4:  MOVWF  x58
022D6:  MOVLW  00
022D8:  MOVLB  A
022DA:  BTFSC  xE1.2
022DC:  MOVLW  01
022DE:  MOVLB  B
022E0:  XORWF  x58,W
022E2:  BNZ   22F2
022E4:  MOVLB  A
022E6:  BTFSS  xE7.2
022E8:  BRA    22EE
022EA:  MOVLB  B
022EC:  BRA    22F2
022EE:  BSF    xE0.2
022F0:  MOVLB  B
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
022F2:  MOVLW  00
022F4:  MOVLB  A
022F6:  BTFSC  xDF.3
022F8:  MOVLW  01
022FA:  MOVLB  B
022FC:  MOVWF  x58
022FE:  MOVLW  00
02300:  MOVLB  A
02302:  BTFSC  xE1.3
02304:  MOVLW  01
02306:  MOVLB  B
02308:  XORWF  x58,W
0230A:  BNZ   231A
0230C:  MOVLB  A
0230E:  BTFSS  xE7.3
02310:  BRA    2316
02312:  MOVLB  B
02314:  BRA    231A
02316:  BSF    xE0.3
02318:  MOVLB  B
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
0231A:  MOVLW  00
0231C:  MOVLB  A
0231E:  BTFSC  xDF.4
02320:  MOVLW  01
02322:  MOVLB  B
02324:  MOVWF  x58
02326:  MOVLW  00
02328:  MOVLB  A
0232A:  BTFSC  xE1.4
0232C:  MOVLW  01
0232E:  MOVLB  B
02330:  XORWF  x58,W
02332:  BNZ   2342
02334:  MOVLB  A
02336:  BTFSS  xE7.4
02338:  BRA    233E
0233A:  MOVLB  B
0233C:  BRA    2342
0233E:  BSF    xE0.4
02340:  MOVLB  B
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
02342:  MOVLW  00
02344:  MOVLB  A
02346:  BTFSC  xDF.5
02348:  MOVLW  01
0234A:  MOVLB  B
0234C:  MOVWF  x58
0234E:  MOVLW  00
02350:  MOVLB  A
02352:  BTFSC  xE1.5
02354:  MOVLW  01
02356:  MOVLB  B
02358:  XORWF  x58,W
0235A:  BNZ   236A
0235C:  MOVLB  A
0235E:  BTFSS  xE7.5
02360:  BRA    2366
02362:  MOVLB  B
02364:  BRA    236A
02366:  BSF    xE0.5
02368:  MOVLB  B
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
0236A:  MOVLW  00
0236C:  MOVLB  A
0236E:  BTFSC  xDF.6
02370:  MOVLW  01
02372:  MOVLB  B
02374:  MOVWF  x58
02376:  MOVLW  00
02378:  MOVLB  A
0237A:  BTFSC  xE1.6
0237C:  MOVLW  01
0237E:  MOVLB  B
02380:  XORWF  x58,W
02382:  BNZ   2392
02384:  MOVLB  A
02386:  BTFSS  xE7.6
02388:  BRA    238E
0238A:  MOVLB  B
0238C:  BRA    2392
0238E:  BSF    xE0.6
02390:  MOVLB  B
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
02392:  MOVLW  00
02394:  MOVLB  A
02396:  BTFSC  xDF.7
02398:  MOVLW  01
0239A:  MOVLB  B
0239C:  MOVWF  x58
0239E:  MOVLW  00
023A0:  MOVLB  A
023A2:  BTFSC  xE1.7
023A4:  MOVLW  01
023A6:  MOVLB  B
023A8:  XORWF  x58,W
023AA:  BNZ   23BA
023AC:  MOVLB  A
023AE:  BTFSS  xE7.7
023B0:  BRA    23B6
023B2:  MOVLB  B
023B4:  BRA    23BA
023B6:  BSF    xE0.7
023B8:  MOVLB  B
.................... 
.................... 
....................        Reset_F = 1;
023BA:  BSF    30.0
....................        
....................        
.................... 
....................        
....................     }
023BC:  BRA    23CE
023BE:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
023C0:  BSF    F94.1
023C2:  BTFSS  F82.1
023C4:  BRA    23CC
023C6:  BTFSS  30.0
023C8:  BRA    23CC
....................     {
....................        Reset_F = 0;
023CA:  BCF    30.0
023CC:  MOVLB  B
....................     }
023CE:  MOVLB  0
023D0:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
044E0:  MOVLB  B
044E2:  DECFSZ x56,W
044E4:  BRA    475E
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
044E6:  MOVLW  00
044E8:  MOVLB  A
044EA:  BTFSC  xE7.0
044EC:  MOVLW  01
044EE:  MOVLB  B
044F0:  MOVWF  x59
044F2:  MOVLW  00
044F4:  MOVLB  A
044F6:  BTFSC  xE8.0
044F8:  MOVLW  01
044FA:  MOVLB  B
044FC:  IORWF  x59,W
044FE:  MOVWF  x58
04500:  MOVLW  00
04502:  MOVLB  A
04504:  BTFSS  xE6.0
04506:  MOVLW  01
04508:  MOVLB  B
0450A:  ANDWF  x58,F
0450C:  MOVLW  00
0450E:  MOVLB  A
04510:  BTFSC  xE3.0
04512:  MOVLW  01
04514:  MOVLB  B
04516:  MOVWF  x5B
04518:  MOVLW  00
0451A:  MOVLB  A
0451C:  BTFSC  xE4.0
0451E:  MOVLW  01
04520:  MOVLB  B
04522:  IORWF  x5B,W
04524:  ANDWF  x58,W
04526:  BCF    x57.0
04528:  BTFSC  FE8.0
0452A:  BSF    x57.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
0452C:  MOVLW  00
0452E:  BTFSC  x57.0
04530:  MOVLW  01
04532:  MOVWF  x58
04534:  MOVLW  00
04536:  MOVLB  A
04538:  BTFSC  xE7.1
0453A:  MOVLW  01
0453C:  MOVLB  B
0453E:  MOVWF  x5A
04540:  MOVLW  00
04542:  MOVLB  A
04544:  BTFSC  xE8.1
04546:  MOVLW  01
04548:  MOVLB  B
0454A:  IORWF  x5A,W
0454C:  MOVWF  x59
0454E:  MOVLW  00
04550:  MOVLB  A
04552:  BTFSS  xE6.1
04554:  MOVLW  01
04556:  MOVLB  B
04558:  ANDWF  x59,F
0455A:  MOVLW  00
0455C:  MOVLB  A
0455E:  BTFSC  xE3.1
04560:  MOVLW  01
04562:  MOVLB  B
04564:  MOVWF  x5C
04566:  MOVLW  00
04568:  MOVLB  A
0456A:  BTFSC  xE4.1
0456C:  MOVLW  01
0456E:  MOVLB  B
04570:  IORWF  x5C,W
04572:  ANDWF  x59,W
04574:  IORWF  x58,W
04576:  BCF    x57.0
04578:  BTFSC  FE8.0
0457A:  BSF    x57.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
0457C:  MOVLW  00
0457E:  BTFSC  x57.0
04580:  MOVLW  01
04582:  MOVWF  x58
04584:  MOVLW  00
04586:  MOVLB  A
04588:  BTFSC  xE7.2
0458A:  MOVLW  01
0458C:  MOVLB  B
0458E:  MOVWF  x5A
04590:  MOVLW  00
04592:  MOVLB  A
04594:  BTFSC  xE8.2
04596:  MOVLW  01
04598:  MOVLB  B
0459A:  IORWF  x5A,W
0459C:  MOVWF  x59
0459E:  MOVLW  00
045A0:  MOVLB  A
045A2:  BTFSS  xE6.2
045A4:  MOVLW  01
045A6:  MOVLB  B
045A8:  ANDWF  x59,F
045AA:  MOVLW  00
045AC:  MOVLB  A
045AE:  BTFSC  xE3.2
045B0:  MOVLW  01
045B2:  MOVLB  B
045B4:  MOVWF  x5C
045B6:  MOVLW  00
045B8:  MOVLB  A
045BA:  BTFSC  xE4.2
045BC:  MOVLW  01
045BE:  MOVLB  B
045C0:  IORWF  x5C,W
045C2:  ANDWF  x59,W
045C4:  IORWF  x58,W
045C6:  BCF    x57.0
045C8:  BTFSC  FE8.0
045CA:  BSF    x57.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
045CC:  MOVLW  00
045CE:  BTFSC  x57.0
045D0:  MOVLW  01
045D2:  MOVWF  x58
045D4:  MOVLW  00
045D6:  MOVLB  A
045D8:  BTFSC  xE7.3
045DA:  MOVLW  01
045DC:  MOVLB  B
045DE:  MOVWF  x5A
045E0:  MOVLW  00
045E2:  MOVLB  A
045E4:  BTFSC  xE8.3
045E6:  MOVLW  01
045E8:  MOVLB  B
045EA:  IORWF  x5A,W
045EC:  MOVWF  x59
045EE:  MOVLW  00
045F0:  MOVLB  A
045F2:  BTFSS  xE6.3
045F4:  MOVLW  01
045F6:  MOVLB  B
045F8:  ANDWF  x59,F
045FA:  MOVLW  00
045FC:  MOVLB  A
045FE:  BTFSC  xE3.3
04600:  MOVLW  01
04602:  MOVLB  B
04604:  MOVWF  x5C
04606:  MOVLW  00
04608:  MOVLB  A
0460A:  BTFSC  xE4.3
0460C:  MOVLW  01
0460E:  MOVLB  B
04610:  IORWF  x5C,W
04612:  ANDWF  x59,W
04614:  IORWF  x58,W
04616:  BCF    x57.0
04618:  BTFSC  FE8.0
0461A:  BSF    x57.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
0461C:  MOVLW  00
0461E:  BTFSC  x57.0
04620:  MOVLW  01
04622:  MOVWF  x58
04624:  MOVLW  00
04626:  MOVLB  A
04628:  BTFSC  xE7.4
0462A:  MOVLW  01
0462C:  MOVLB  B
0462E:  MOVWF  x5A
04630:  MOVLW  00
04632:  MOVLB  A
04634:  BTFSC  xE8.4
04636:  MOVLW  01
04638:  MOVLB  B
0463A:  IORWF  x5A,W
0463C:  MOVWF  x59
0463E:  MOVLW  00
04640:  MOVLB  A
04642:  BTFSS  xE6.4
04644:  MOVLW  01
04646:  MOVLB  B
04648:  ANDWF  x59,F
0464A:  MOVLW  00
0464C:  MOVLB  A
0464E:  BTFSC  xE3.4
04650:  MOVLW  01
04652:  MOVLB  B
04654:  MOVWF  x5C
04656:  MOVLW  00
04658:  MOVLB  A
0465A:  BTFSC  xE4.4
0465C:  MOVLW  01
0465E:  MOVLB  B
04660:  IORWF  x5C,W
04662:  ANDWF  x59,W
04664:  IORWF  x58,W
04666:  BCF    x57.0
04668:  BTFSC  FE8.0
0466A:  BSF    x57.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
0466C:  MOVLW  00
0466E:  BTFSC  x57.0
04670:  MOVLW  01
04672:  MOVWF  x58
04674:  MOVLW  00
04676:  MOVLB  A
04678:  BTFSC  xE7.5
0467A:  MOVLW  01
0467C:  MOVLB  B
0467E:  MOVWF  x5A
04680:  MOVLW  00
04682:  MOVLB  A
04684:  BTFSC  xE8.5
04686:  MOVLW  01
04688:  MOVLB  B
0468A:  IORWF  x5A,W
0468C:  MOVWF  x59
0468E:  MOVLW  00
04690:  MOVLB  A
04692:  BTFSS  xE6.5
04694:  MOVLW  01
04696:  MOVLB  B
04698:  ANDWF  x59,F
0469A:  MOVLW  00
0469C:  MOVLB  A
0469E:  BTFSC  xE3.5
046A0:  MOVLW  01
046A2:  MOVLB  B
046A4:  MOVWF  x5C
046A6:  MOVLW  00
046A8:  MOVLB  A
046AA:  BTFSC  xE4.5
046AC:  MOVLW  01
046AE:  MOVLB  B
046B0:  IORWF  x5C,W
046B2:  ANDWF  x59,W
046B4:  IORWF  x58,W
046B6:  BCF    x57.0
046B8:  BTFSC  FE8.0
046BA:  BSF    x57.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
046BC:  MOVLW  00
046BE:  BTFSC  x57.0
046C0:  MOVLW  01
046C2:  MOVWF  x58
046C4:  MOVLW  00
046C6:  MOVLB  A
046C8:  BTFSC  xE7.6
046CA:  MOVLW  01
046CC:  MOVLB  B
046CE:  MOVWF  x5A
046D0:  MOVLW  00
046D2:  MOVLB  A
046D4:  BTFSC  xE8.6
046D6:  MOVLW  01
046D8:  MOVLB  B
046DA:  IORWF  x5A,W
046DC:  MOVWF  x59
046DE:  MOVLW  00
046E0:  MOVLB  A
046E2:  BTFSS  xE6.6
046E4:  MOVLW  01
046E6:  MOVLB  B
046E8:  ANDWF  x59,F
046EA:  MOVLW  00
046EC:  MOVLB  A
046EE:  BTFSC  xE3.6
046F0:  MOVLW  01
046F2:  MOVLB  B
046F4:  MOVWF  x5C
046F6:  MOVLW  00
046F8:  MOVLB  A
046FA:  BTFSC  xE4.6
046FC:  MOVLW  01
046FE:  MOVLB  B
04700:  IORWF  x5C,W
04702:  ANDWF  x59,W
04704:  IORWF  x58,W
04706:  BCF    x57.0
04708:  BTFSC  FE8.0
0470A:  BSF    x57.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
0470C:  MOVLW  00
0470E:  BTFSC  x57.0
04710:  MOVLW  01
04712:  MOVWF  x58
04714:  MOVLW  00
04716:  MOVLB  A
04718:  BTFSC  xE7.7
0471A:  MOVLW  01
0471C:  MOVLB  B
0471E:  MOVWF  x5A
04720:  MOVLW  00
04722:  MOVLB  A
04724:  BTFSC  xE8.7
04726:  MOVLW  01
04728:  MOVLB  B
0472A:  IORWF  x5A,W
0472C:  MOVWF  x59
0472E:  MOVLW  00
04730:  MOVLB  A
04732:  BTFSS  xE6.7
04734:  MOVLW  01
04736:  MOVLB  B
04738:  ANDWF  x59,F
0473A:  MOVLW  00
0473C:  MOVLB  A
0473E:  BTFSC  xE3.7
04740:  MOVLW  01
04742:  MOVLB  B
04744:  MOVWF  x5C
04746:  MOVLW  00
04748:  MOVLB  A
0474A:  BTFSC  xE4.7
0474C:  MOVLW  01
0474E:  MOVLB  B
04750:  IORWF  x5C,W
04752:  ANDWF  x59,W
04754:  IORWF  x58,W
04756:  BCF    x57.0
04758:  BTFSC  FE8.0
0475A:  BSF    x57.0
.................... 
....................      
....................    }
0475C:  BRA    49DC
....................    else if(DatType == 0x02)             //Bell
0475E:  MOVF   x56,W
04760:  SUBLW  02
04762:  BTFSS  FD8.2
04764:  BRA    49DC
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
04766:  MOVLW  00
04768:  MOVLB  A
0476A:  BTFSC  xE7.0
0476C:  MOVLW  01
0476E:  MOVLB  B
04770:  MOVWF  x59
04772:  MOVLW  00
04774:  MOVLB  A
04776:  BTFSC  xE8.0
04778:  MOVLW  01
0477A:  MOVLB  B
0477C:  IORWF  x59,W
0477E:  MOVWF  x58
04780:  MOVLW  00
04782:  MOVLB  A
04784:  BTFSS  xE6.0
04786:  MOVLW  01
04788:  MOVLB  B
0478A:  ANDWF  x58,F
0478C:  MOVLW  00
0478E:  MOVLB  A
04790:  BTFSS  xE3.0
04792:  MOVLW  01
04794:  MOVLB  B
04796:  MOVWF  x5B
04798:  MOVLW  00
0479A:  MOVLB  A
0479C:  BTFSC  xE4.0
0479E:  MOVLW  01
047A0:  MOVLB  B
047A2:  IORWF  x5B,W
047A4:  ANDWF  x58,W
047A6:  BCF    x57.0
047A8:  BTFSC  FE8.0
047AA:  BSF    x57.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
047AC:  MOVLW  00
047AE:  BTFSC  x57.0
047B0:  MOVLW  01
047B2:  MOVWF  x58
047B4:  MOVLW  00
047B6:  MOVLB  A
047B8:  BTFSC  xE7.1
047BA:  MOVLW  01
047BC:  MOVLB  B
047BE:  MOVWF  x5A
047C0:  MOVLW  00
047C2:  MOVLB  A
047C4:  BTFSC  xE8.1
047C6:  MOVLW  01
047C8:  MOVLB  B
047CA:  IORWF  x5A,W
047CC:  MOVWF  x59
047CE:  MOVLW  00
047D0:  MOVLB  A
047D2:  BTFSS  xE6.1
047D4:  MOVLW  01
047D6:  MOVLB  B
047D8:  ANDWF  x59,F
047DA:  MOVLW  00
047DC:  MOVLB  A
047DE:  BTFSS  xE3.1
047E0:  MOVLW  01
047E2:  MOVLB  B
047E4:  MOVWF  x5C
047E6:  MOVLW  00
047E8:  MOVLB  A
047EA:  BTFSC  xE4.1
047EC:  MOVLW  01
047EE:  MOVLB  B
047F0:  IORWF  x5C,W
047F2:  ANDWF  x59,W
047F4:  IORWF  x58,W
047F6:  BCF    x57.0
047F8:  BTFSC  FE8.0
047FA:  BSF    x57.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
047FC:  MOVLW  00
047FE:  BTFSC  x57.0
04800:  MOVLW  01
04802:  MOVWF  x58
04804:  MOVLW  00
04806:  MOVLB  A
04808:  BTFSC  xE7.2
0480A:  MOVLW  01
0480C:  MOVLB  B
0480E:  MOVWF  x5A
04810:  MOVLW  00
04812:  MOVLB  A
04814:  BTFSC  xE8.2
04816:  MOVLW  01
04818:  MOVLB  B
0481A:  IORWF  x5A,W
0481C:  MOVWF  x59
0481E:  MOVLW  00
04820:  MOVLB  A
04822:  BTFSS  xE6.2
04824:  MOVLW  01
04826:  MOVLB  B
04828:  ANDWF  x59,F
0482A:  MOVLW  00
0482C:  MOVLB  A
0482E:  BTFSS  xE3.2
04830:  MOVLW  01
04832:  MOVLB  B
04834:  MOVWF  x5C
04836:  MOVLW  00
04838:  MOVLB  A
0483A:  BTFSC  xE4.2
0483C:  MOVLW  01
0483E:  MOVLB  B
04840:  IORWF  x5C,W
04842:  ANDWF  x59,W
04844:  IORWF  x58,W
04846:  BCF    x57.0
04848:  BTFSC  FE8.0
0484A:  BSF    x57.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
0484C:  MOVLW  00
0484E:  BTFSC  x57.0
04850:  MOVLW  01
04852:  MOVWF  x58
04854:  MOVLW  00
04856:  MOVLB  A
04858:  BTFSC  xE7.3
0485A:  MOVLW  01
0485C:  MOVLB  B
0485E:  MOVWF  x5A
04860:  MOVLW  00
04862:  MOVLB  A
04864:  BTFSC  xE8.3
04866:  MOVLW  01
04868:  MOVLB  B
0486A:  IORWF  x5A,W
0486C:  MOVWF  x59
0486E:  MOVLW  00
04870:  MOVLB  A
04872:  BTFSS  xE6.3
04874:  MOVLW  01
04876:  MOVLB  B
04878:  ANDWF  x59,F
0487A:  MOVLW  00
0487C:  MOVLB  A
0487E:  BTFSS  xE3.3
04880:  MOVLW  01
04882:  MOVLB  B
04884:  MOVWF  x5C
04886:  MOVLW  00
04888:  MOVLB  A
0488A:  BTFSC  xE4.3
0488C:  MOVLW  01
0488E:  MOVLB  B
04890:  IORWF  x5C,W
04892:  ANDWF  x59,W
04894:  IORWF  x58,W
04896:  BCF    x57.0
04898:  BTFSC  FE8.0
0489A:  BSF    x57.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
0489C:  MOVLW  00
0489E:  BTFSC  x57.0
048A0:  MOVLW  01
048A2:  MOVWF  x58
048A4:  MOVLW  00
048A6:  MOVLB  A
048A8:  BTFSC  xE7.4
048AA:  MOVLW  01
048AC:  MOVLB  B
048AE:  MOVWF  x5A
048B0:  MOVLW  00
048B2:  MOVLB  A
048B4:  BTFSC  xE8.4
048B6:  MOVLW  01
048B8:  MOVLB  B
048BA:  IORWF  x5A,W
048BC:  MOVWF  x59
048BE:  MOVLW  00
048C0:  MOVLB  A
048C2:  BTFSS  xE6.4
048C4:  MOVLW  01
048C6:  MOVLB  B
048C8:  ANDWF  x59,F
048CA:  MOVLW  00
048CC:  MOVLB  A
048CE:  BTFSS  xE3.4
048D0:  MOVLW  01
048D2:  MOVLB  B
048D4:  MOVWF  x5C
048D6:  MOVLW  00
048D8:  MOVLB  A
048DA:  BTFSC  xE4.4
048DC:  MOVLW  01
048DE:  MOVLB  B
048E0:  IORWF  x5C,W
048E2:  ANDWF  x59,W
048E4:  IORWF  x58,W
048E6:  BCF    x57.0
048E8:  BTFSC  FE8.0
048EA:  BSF    x57.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
048EC:  MOVLW  00
048EE:  BTFSC  x57.0
048F0:  MOVLW  01
048F2:  MOVWF  x58
048F4:  MOVLW  00
048F6:  MOVLB  A
048F8:  BTFSC  xE7.5
048FA:  MOVLW  01
048FC:  MOVLB  B
048FE:  MOVWF  x5A
04900:  MOVLW  00
04902:  MOVLB  A
04904:  BTFSC  xE8.5
04906:  MOVLW  01
04908:  MOVLB  B
0490A:  IORWF  x5A,W
0490C:  MOVWF  x59
0490E:  MOVLW  00
04910:  MOVLB  A
04912:  BTFSS  xE6.5
04914:  MOVLW  01
04916:  MOVLB  B
04918:  ANDWF  x59,F
0491A:  MOVLW  00
0491C:  MOVLB  A
0491E:  BTFSS  xE3.5
04920:  MOVLW  01
04922:  MOVLB  B
04924:  MOVWF  x5C
04926:  MOVLW  00
04928:  MOVLB  A
0492A:  BTFSC  xE4.5
0492C:  MOVLW  01
0492E:  MOVLB  B
04930:  IORWF  x5C,W
04932:  ANDWF  x59,W
04934:  IORWF  x58,W
04936:  BCF    x57.0
04938:  BTFSC  FE8.0
0493A:  BSF    x57.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
0493C:  MOVLW  00
0493E:  BTFSC  x57.0
04940:  MOVLW  01
04942:  MOVWF  x58
04944:  MOVLW  00
04946:  MOVLB  A
04948:  BTFSC  xE7.6
0494A:  MOVLW  01
0494C:  MOVLB  B
0494E:  MOVWF  x5A
04950:  MOVLW  00
04952:  MOVLB  A
04954:  BTFSC  xE8.6
04956:  MOVLW  01
04958:  MOVLB  B
0495A:  IORWF  x5A,W
0495C:  MOVWF  x59
0495E:  MOVLW  00
04960:  MOVLB  A
04962:  BTFSS  xE6.6
04964:  MOVLW  01
04966:  MOVLB  B
04968:  ANDWF  x59,F
0496A:  MOVLW  00
0496C:  MOVLB  A
0496E:  BTFSS  xE3.6
04970:  MOVLW  01
04972:  MOVLB  B
04974:  MOVWF  x5C
04976:  MOVLW  00
04978:  MOVLB  A
0497A:  BTFSC  xE4.6
0497C:  MOVLW  01
0497E:  MOVLB  B
04980:  IORWF  x5C,W
04982:  ANDWF  x59,W
04984:  IORWF  x58,W
04986:  BCF    x57.0
04988:  BTFSC  FE8.0
0498A:  BSF    x57.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
0498C:  MOVLW  00
0498E:  BTFSC  x57.0
04990:  MOVLW  01
04992:  MOVWF  x58
04994:  MOVLW  00
04996:  MOVLB  A
04998:  BTFSC  xE7.7
0499A:  MOVLW  01
0499C:  MOVLB  B
0499E:  MOVWF  x5A
049A0:  MOVLW  00
049A2:  MOVLB  A
049A4:  BTFSC  xE8.7
049A6:  MOVLW  01
049A8:  MOVLB  B
049AA:  IORWF  x5A,W
049AC:  MOVWF  x59
049AE:  MOVLW  00
049B0:  MOVLB  A
049B2:  BTFSS  xE6.7
049B4:  MOVLW  01
049B6:  MOVLB  B
049B8:  ANDWF  x59,F
049BA:  MOVLW  00
049BC:  MOVLB  A
049BE:  BTFSS  xE3.7
049C0:  MOVLW  01
049C2:  MOVLB  B
049C4:  MOVWF  x5C
049C6:  MOVLW  00
049C8:  MOVLB  A
049CA:  BTFSC  xE4.7
049CC:  MOVLW  01
049CE:  MOVLB  B
049D0:  IORWF  x5C,W
049D2:  ANDWF  x59,W
049D4:  IORWF  x58,W
049D6:  BCF    x57.0
049D8:  BTFSC  FE8.0
049DA:  BSF    x57.0
.................... 
.................... 
....................    }
....................    return(check);
049DC:  MOVLW  00
049DE:  BTFSC  x57.0
049E0:  MOVLW  01
049E2:  MOVWF  01
049E4:  MOVLB  0
049E6:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
065A8:  CLRF   FF8
065AA:  BCF    FD0.7
065AC:  BSF    07.7
065AE:  MOVLW  70
065B0:  MOVWF  FD3
065B2:  BCF    F9B.6
065B4:  BCF    F9B.7
065B6:  BSF    FB8.3
065B8:  MOVLW  A0
065BA:  MOVWF  FAF
065BC:  MOVLW  01
065BE:  MOVWF  FB0
065C0:  MOVLW  A6
065C2:  MOVWF  FAC
065C4:  MOVLW  90
065C6:  MOVWF  FAB
065C8:  BCF    F93.0
065CA:  BSF    F8A.0
065CC:  CLRF   19
065CE:  BCF    1A.0
065D0:  MOVLW  19
065D2:  MOVWF  1B
065D4:  BCF    1A.1
065D6:  MOVLW  64
065D8:  MOVWF  1C
065DA:  CLRF   1D
065DC:  BCF    1A.2
065DE:  BCF    1A.3
065E0:  BCF    1A.4
065E2:  CLRF   2E
065E4:  BCF    1A.5
065E6:  CLRF   2F
065E8:  BCF    1A.6
065EA:  BCF    1A.7
065EC:  BCF    30.0
065EE:  BCF    30.1
065F0:  BCF    30.2
065F2:  BCF    30.3
065F4:  CLRF   31
065F6:  BCF    30.4
065F8:  MOVLW  11
065FA:  MOVWF  x6F
065FC:  MOVLW  12
065FE:  MOVWF  x70
06600:  MOVLW  13
06602:  MOVWF  x71
06604:  MOVLW  14
06606:  MOVWF  x72
06608:  MOVLW  16
0660A:  MOVWF  x73
0660C:  MOVLW  17
0660E:  MOVWF  x74
06610:  MOVLW  18
06612:  MOVWF  x75
06614:  MOVLW  19
06616:  MOVWF  x76
06618:  MOVLW  20
0661A:  MOVWF  x77
0661C:  BCF    30.5
0661E:  CLRF   x7A
06620:  MOVLW  01
06622:  MOVLB  5
06624:  MOVWF  x7D
06626:  MOVLW  F4
06628:  MOVWF  x7C
0662A:  CLRF   x7F
0662C:  CLRF   x7E
0662E:  CLRF   x81
06630:  CLRF   x80
06632:  CLRF   x82
06634:  MOVLB  9
06636:  CLRF   x86
06638:  CLRF   x87
0663A:  MOVLB  B
0663C:  CLRF   x48
0663E:  CLRF   x4A
06640:  CLRF   x49
06642:  MOVLB  F
06644:  CLRF   x38
06646:  CLRF   x39
06648:  CLRF   x3A
0664A:  CLRF   F77
0664C:  CLRF   F78
0664E:  CLRF   F79
06650:  MOVLB  B
06652:  CLRF   x4B
.................... {
....................    
....................    
....................    delay_ms(50);
06654:  MOVLW  32
06656:  MOVWF  x57
06658:  MOVLB  0
0665A:  CALL   077C
....................    output_bit(Pled,0);   //power on watchdog signal
0665E:  BCF    F8A.5
06660:  BCF    F93.5
.................... 
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD);
06662:  MOVF   FC1,W
06664:  ANDLW  F0
06666:  MOVWF  FC1
06668:  MOVLW  00
0666A:  MOVLB  F
0666C:  MOVWF  x38
0666E:  MOVWF  x39
06670:  MOVWF  x3A
....................    setup_adc(ADC_OFF|ADC_TAD_MUL_0);
06672:  BCF    FC2.0
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
06674:  MOVLW  80
06676:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
06678:  MOVLW  78
0667A:  IORLW  06
0667C:  MOVWF  FBA
0667E:  MOVLW  C4
06680:  MOVWF  FBB
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................    enable_interrupts(INT_TIMER2);
06682:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
06684:  BSF    F9D.5
....................      
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1
06686:  BCF    FC6.5
06688:  BCF    F94.5
0668A:  BSF    F94.4
0668C:  BCF    F94.3
0668E:  MOVLW  20
06690:  MOVWF  FC6
06692:  MOVLW  40
06694:  MOVWF  FC7
.................... 
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
06696:  MOVLB  0
06698:  GOTO   07DE
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
0669C:  MOVLB  B
0669E:  CLRF   x4E
066A0:  SETF   x4F
066A2:  MOVLB  0
066A4:  CALL   0874
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
066A8:  MOVLB  B
066AA:  CLRF   x4E
066AC:  SETF   x4F
066AE:  MOVLB  0
066B0:  CALL   0886
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
066B4:  MOVLW  02
066B6:  MOVLB  B
066B8:  MOVWF  x4E
066BA:  SETF   x4F
066BC:  MOVLB  0
066BE:  CALL   0874
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt 
066C2:  MOVLW  02
066C4:  MOVLB  B
066C6:  MOVWF  x4E
066C8:  SETF   x4F
066CA:  MOVLB  0
066CC:  CALL   0886
....................    
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
066D0:  MOVLB  B
066D2:  CLRF   x58
066D4:  MOVLW  06
066D6:  MOVWF  x59
066D8:  SETF   x5A
066DA:  MOVLB  0
066DC:  CALL   07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
066E0:  MOVLB  B
066E2:  CLRF   x58
066E4:  MOVLW  16
066E6:  MOVWF  x59
066E8:  SETF   x5A
066EA:  MOVLB  0
066EC:  CALL   07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
066F0:  MOVLW  02
066F2:  MOVLB  B
066F4:  MOVWF  x58
066F6:  MOVLW  06
066F8:  MOVWF  x59
066FA:  SETF   x5A
066FC:  MOVLB  0
066FE:  CALL   07AC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
06702:  MOVLW  02
06704:  MOVLB  B
06706:  MOVWF  x58
06708:  MOVLW  16
0670A:  MOVWF  x59
0670C:  SETF   x5A
0670E:  MOVLB  0
06710:  CALL   07AC
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
06714:  MOVLW  04
06716:  MOVLB  B
06718:  MOVWF  x4E
0671A:  CLRF   x4F
0671C:  MOVLB  0
0671E:  CALL   0874
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
06722:  MOVLW  04
06724:  MOVLB  B
06726:  MOVWF  x4E
06728:  CLRF   x4F
0672A:  MOVLB  0
0672C:  CALL   0886
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
06730:  MOVLW  06
06732:  MOVLB  B
06734:  MOVWF  x4E
06736:  CLRF   x4F
06738:  MOVLB  0
0673A:  CALL   0874
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0673E:  MOVLW  06
06740:  MOVLB  B
06742:  MOVWF  x4E
06744:  CLRF   x4F
06746:  MOVLB  0
06748:  CALL   0886
.................... 
....................    
....................    //FlashingFlag = 1;
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
0674C:  MOVFF  6F,78
....................    //Address = 1;
....................    
....................    Output.B1 = 1;
06750:  MOVLB  A
06752:  BSF    xE0.0
....................    Output.B2 = 1;
06754:  BSF    xE0.1
....................    Output.B3 = 1;
06756:  BSF    xE0.2
....................    Output.B4 = 1;
06758:  BSF    xE0.3
....................    Output.B5 = 1;
0675A:  BSF    xE0.4
....................    Output.B6 = 1;
0675C:  BSF    xE0.5
....................    Output.B7 = 1;
0675E:  BSF    xE0.6
....................    Output.B8 = 1;
06760:  BSF    xE0.7
....................    ////////////////////
....................    In.B1 = 0;
06762:  BCF    xE7.0
....................    In.B2 = 0;
06764:  BCF    xE7.1
....................    In.B3 = 0;
06766:  BCF    xE7.2
....................    In.B4 = 0;
06768:  BCF    xE7.3
....................    In.B5 = 0;
0676A:  BCF    xE7.4
....................    In.B6 = 0;
0676C:  BCF    xE7.5
....................    In.B7 = 0;
0676E:  BCF    xE7.6
....................    In.B8 = 0;  
06770:  BCF    xE7.7
....................    ////////////////////
....................    In2.B1 = 0;
06772:  BCF    xE8.0
....................    In2.B2 = 0;
06774:  BCF    xE8.1
....................    In2.B3 = 0;
06776:  BCF    xE8.2
....................    In2.B4 = 0;
06778:  BCF    xE8.3
....................    In2.B5 = 0;
0677A:  BCF    xE8.4
....................    In2.B6 = 0;
0677C:  BCF    xE8.5
....................    In2.B7 = 0;
0677E:  BCF    xE8.6
....................    In2.B8 = 0;  
06780:  BCF    xE8.7
....................    ////////////////////////
....................    Ack.B1 = 0;
06782:  BCF    xE6.0
....................    Ack.B2 = 0;
06784:  BCF    xE6.1
....................    Ack.B3 = 0;
06786:  BCF    xE6.2
....................    Ack.B4 = 0;
06788:  BCF    xE6.3
....................    Ack.B5 = 0;
0678A:  BCF    xE6.4
....................    Ack.B6 = 0;
0678C:  BCF    xE6.5
....................    Ack.B7 = 0;
0678E:  BCF    xE6.6
....................    Ack.B8 = 0;
06790:  BCF    xE6.7
....................    
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0xF0)
06792:  MOVFF  FF2,B4E
06796:  BCF    FF2.7
06798:  CLRF   FAA
0679A:  CLRF   FA9
0679C:  BCF    FA6.6
0679E:  BCF    FA6.7
067A0:  BSF    FA6.0
067A2:  MOVF   FA8,W
067A4:  MOVLB  B
067A6:  BTFSC  x4E.7
067A8:  BSF    FF2.7
067AA:  SUBLW  F0
067AC:  BNZ   67B8
....................    {
....................       Read_Config();
067AE:  MOVLB  0
067B0:  CALL   089A
....................    }
067B4:  BRA    697A
067B6:  MOVLB  B
....................    else
....................    {
....................       FlashingRateTime = 25;
067B8:  MOVLW  19
067BA:  MOVWF  1B
....................       FlashingRate = 25;
067BC:  MOVLB  0
067BE:  MOVWF  x6C
....................       AutoAck = 0xF0; //not use auto ack
067C0:  MOVLW  F0
067C2:  MOVWF  x6A
....................       Address = 0x01;
067C4:  MOVLW  01
067C6:  MOVWF  x79
.................... 
....................       AutoAckTime = 5;
067C8:  MOVLW  05
067CA:  MOVWF  x6B
....................       
....................       NoOfPoint = 8;
067CC:  MOVLW  08
067CE:  MOVWF  x6D
....................       //FlashingRateTime = 0x00;
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
067D0:  MOVLB  B
067D2:  CLRF   x4C
067D4:  MOVF   x4C,W
067D6:  MOVLB  0
067D8:  SUBWF  x6D,W
067DA:  BNC   67FA
....................       {
....................          FaultDelayTime[i] = 0;
067DC:  BCF    FD8.0
067DE:  MOVLB  B
067E0:  RLCF   x4C,W
067E2:  CLRF   03
067E4:  ADDLW  1C
067E6:  MOVWF  FE9
067E8:  MOVLW  0B
067EA:  ADDWFC 03,W
067EC:  MOVWF  FEA
067EE:  CLRF   FEC
067F0:  MOVF   FED,F
067F2:  CLRF   FEF
067F4:  INCF   x4C,F
067F6:  BRA    67D4
067F8:  MOVLB  0
....................       }
.................... 
....................       InputType.B1 = 1;
067FA:  MOVLB  A
067FC:  BSF    xE1.0
....................       InputType.B2 = 1;
067FE:  BSF    xE1.1
....................       InputType.B3 = 1;
06800:  BSF    xE1.2
....................       InputType.B4 = 1;
06802:  BSF    xE1.3
....................       InputType.B5 = 1;
06804:  BSF    xE1.4
....................       InputType.B6 = 1;
06806:  BSF    xE1.5
....................       InputType.B7 = 1;
06808:  BSF    xE1.6
....................       InputType.B8 = 1;
0680A:  BSF    xE1.7
....................       
....................       FaultNCNO[1] = 1;
0680C:  MOVLB  B
0680E:  BSF    x45.1
....................       FaultNCNO[2] = 1;
06810:  BSF    x45.2
....................       FaultNCNO[3] = 1;
06812:  BSF    x45.3
....................       FaultNCNO[4] = 1;
06814:  BSF    x45.4
....................       FaultNCNO[5] = 1;
06816:  BSF    x45.5
....................       FaultNCNO[6] = 1;
06818:  BSF    x45.6
....................       FaultNCNO[7] = 1;
0681A:  BSF    x45.7
....................       FaultNCNO[8] = 1;
0681C:  BSF    x46.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0681E:  MOVLB  A
06820:  BSF    xE2.0
....................       FaultType.B2= 1;
06822:  BSF    xE2.1
....................       FaultType.B3 = 1;
06824:  BSF    xE2.2
....................       FaultType.B4 = 1;
06826:  BSF    xE2.3
....................       FaultType.B5 = 1;
06828:  BSF    xE2.4
....................       FaultType.B6 = 1;
0682A:  BSF    xE2.5
....................       FaultType.B7 = 1;
0682C:  BSF    xE2.6
....................       FaultType.B8 = 1;
0682E:  BSF    xE2.7
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
06830:  BSF    xE3.0
....................       OutputType.B2 = 1;
06832:  BSF    xE3.1
....................       OutputType.B3 = 1;
06834:  BSF    xE3.2
....................       OutputType.B4 = 1;
06836:  BSF    xE3.3
....................       OutputType.B5 = 1;
06838:  BSF    xE3.4
....................       OutputType.B6 = 1;
0683A:  BSF    xE3.5
....................       OutputType.B7 = 1;
0683C:  BSF    xE3.6
....................       OutputType.B8 = 1;
0683E:  BSF    xE3.7
.................... 
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
06840:  BSF    xE4.0
....................       OutputBoth.B2 = 1;
06842:  BSF    xE4.1
....................       OutputBoth.B3 = 1;
06844:  BSF    xE4.2
....................       OutputBoth.B4 = 1;
06846:  BSF    xE4.3
....................       OutputBoth.B5 = 1;
06848:  BSF    xE4.4
....................       OutputBoth.B6 = 1;
0684A:  BSF    xE4.5
....................       OutputBoth.B7 = 1;
0684C:  BSF    xE4.6
....................       OutputBoth.B8 = 1;
0684E:  BSF    xE4.7
.................... 
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
06850:  BSF    xE5.0
....................       AlarmIndicator.B2 = 1;
06852:  BSF    xE5.1
....................       AlarmIndicator.B3 = 1;
06854:  BSF    xE5.2
....................       AlarmIndicator.B4 = 1;
06856:  BSF    xE5.3
....................       AlarmIndicator.B5 = 1;
06858:  BSF    xE5.4
....................       AlarmIndicator.B6 = 1;
0685A:  BSF    xE5.5
....................       AlarmIndicator.B7 = 1;
0685C:  BSF    xE5.6
....................       AlarmIndicator.B8 = 1;
0685E:  BSF    xE5.7
.................... 
....................       ///////////// JACK///////////////////
....................       EEpDat = read_eeprom(0x10);
06860:  MOVFF  FF2,B4E
06864:  BCF    FF2.7
06866:  CLRF   FAA
06868:  MOVLW  10
0686A:  MOVWF  FA9
0686C:  BCF    FA6.6
0686E:  BCF    FA6.7
06870:  BSF    FA6.0
06872:  MOVF   FA8,W
06874:  MOVLB  B
06876:  BTFSC  x4E.7
06878:  BSF    FF2.7
0687A:  MOVWF  39
....................       //Red1_8 = EEpDat;
....................       RED_Colour.B1 = EEpDat;
0687C:  MOVLB  A
0687E:  BCF    xEB.0
06880:  BTFSC  39.0
06882:  BSF    xEB.0
....................       RED_Colour.B2 = EEpDat >> 1;
06884:  BCF    FD8.0
06886:  RRCF   39,W
06888:  BCF    xEB.1
0688A:  BTFSC  FE8.0
0688C:  BSF    xEB.1
....................       RED_Colour.B3 = EEpDat >> 2;
0688E:  RRCF   39,W
06890:  MOVWF  00
06892:  RRCF   00,F
06894:  MOVLW  3F
06896:  ANDWF  00,F
06898:  BCF    xEB.2
0689A:  BTFSC  00.0
0689C:  BSF    xEB.2
....................       RED_Colour.B4 = EEpDat >> 3;
0689E:  RRCF   39,W
068A0:  MOVWF  00
068A2:  RRCF   00,F
068A4:  RRCF   00,F
068A6:  MOVLW  1F
068A8:  ANDWF  00,F
068AA:  BCF    xEB.3
068AC:  BTFSC  00.0
068AE:  BSF    xEB.3
....................       RED_Colour.B5 = EEpDat >> 4;
068B0:  SWAPF  39,W
068B2:  MOVWF  00
068B4:  MOVLW  0F
068B6:  ANDWF  00,F
068B8:  BCF    xEB.4
068BA:  BTFSC  00.0
068BC:  BSF    xEB.4
....................       RED_Colour.B6 = EEpDat >> 5;
068BE:  SWAPF  39,W
068C0:  MOVWF  00
068C2:  RRCF   00,F
068C4:  MOVLW  07
068C6:  ANDWF  00,F
068C8:  BCF    xEB.5
068CA:  BTFSC  00.0
068CC:  BSF    xEB.5
....................       RED_Colour.B7 = EEpDat >> 6;
068CE:  SWAPF  39,W
068D0:  MOVWF  00
068D2:  RRCF   00,F
068D4:  RRCF   00,F
068D6:  MOVLW  03
068D8:  ANDWF  00,F
068DA:  BCF    xEB.6
068DC:  BTFSC  00.0
068DE:  BSF    xEB.6
....................       RED_Colour.B8 = EEpDat >> 7;
068E0:  CLRF   00
068E2:  BTFSC  39.7
068E4:  BSF    00.0
068E6:  BCF    xEB.7
068E8:  BTFSC  00.0
068EA:  BSF    xEB.7
....................         
....................       EEpDat = read_eeprom(0x14);
068EC:  MOVFF  FF2,B4E
068F0:  BCF    FF2.7
068F2:  CLRF   FAA
068F4:  MOVLW  14
068F6:  MOVWF  FA9
068F8:  BCF    FA6.6
068FA:  BCF    FA6.7
068FC:  BSF    FA6.0
068FE:  MOVF   FA8,W
06900:  MOVLB  B
06902:  BTFSC  x4E.7
06904:  BSF    FF2.7
06906:  MOVWF  39
....................       //Green1_8 = EEpDat;
....................       GREEN_Colour.B1 = EEpDat;
06908:  MOVLB  A
0690A:  BCF    xEC.0
0690C:  BTFSC  39.0
0690E:  BSF    xEC.0
....................       GREEN_Colour.B2 = EEpDat >> 1;
06910:  BCF    FD8.0
06912:  RRCF   39,W
06914:  BCF    xEC.1
06916:  BTFSC  FE8.0
06918:  BSF    xEC.1
....................       GREEN_Colour.B3 = EEpDat >> 2;
0691A:  RRCF   39,W
0691C:  MOVWF  00
0691E:  RRCF   00,F
06920:  MOVLW  3F
06922:  ANDWF  00,F
06924:  BCF    xEC.2
06926:  BTFSC  00.0
06928:  BSF    xEC.2
....................       GREEN_Colour.B4 = EEpDat >> 3;
0692A:  RRCF   39,W
0692C:  MOVWF  00
0692E:  RRCF   00,F
06930:  RRCF   00,F
06932:  MOVLW  1F
06934:  ANDWF  00,F
06936:  BCF    xEC.3
06938:  BTFSC  00.0
0693A:  BSF    xEC.3
....................       GREEN_Colour.B5 = EEpDat >> 4;
0693C:  SWAPF  39,W
0693E:  MOVWF  00
06940:  MOVLW  0F
06942:  ANDWF  00,F
06944:  BCF    xEC.4
06946:  BTFSC  00.0
06948:  BSF    xEC.4
....................       GREEN_Colour.B6 = EEpDat >> 5;
0694A:  SWAPF  39,W
0694C:  MOVWF  00
0694E:  RRCF   00,F
06950:  MOVLW  07
06952:  ANDWF  00,F
06954:  BCF    xEC.5
06956:  BTFSC  00.0
06958:  BSF    xEC.5
....................       GREEN_Colour.B7 = EEpDat >> 6;
0695A:  SWAPF  39,W
0695C:  MOVWF  00
0695E:  RRCF   00,F
06960:  RRCF   00,F
06962:  MOVLW  03
06964:  ANDWF  00,F
06966:  BCF    xEC.6
06968:  BTFSC  00.0
0696A:  BSF    xEC.6
....................       GREEN_Colour.B8 = EEpDat >> 7;
0696C:  CLRF   00
0696E:  BTFSC  39.7
06970:  BSF    00.0
06972:  BCF    xEC.7
06974:  BTFSC  00.0
06976:  BSF    xEC.7
06978:  MOVLB  0
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
0697A:  MOVLW  00
0697C:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
0697E:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
06980:  MOVLW  C0
06982:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
06984:  BSF    FD1.0
....................    Read_input(); restart_wdt();
06986:  CALL   15F4
0698A:  CLRWDT
....................    output_bit(Pbuzzer,1);  //Clear Buzzer
0698C:  BSF    F89.4
0698E:  BCF    F92.4
....................    output_bit(Pbell,1);   //Clear Bell
06990:  BSF    F89.3
06992:  BCF    F92.3
....................    output_bit(P485ctrl,0);
06994:  BCF    F8A.3
06996:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,0); //jj
06998:  BCF    F8A.4
0699A:  BCF    F93.4
....................    Send_Ouput();
0699C:  CALL   1D24
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
069A0:  MOVLW  04
069A2:  MOVLB  B
069A4:  MOVWF  x56
069A6:  SETF   x57
069A8:  MOVLB  0
069AA:  CALL   1CF8
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
069AE:  MOVLW  04
069B0:  MOVLB  B
069B2:  MOVWF  x56
069B4:  SETF   x57
069B6:  MOVLB  0
069B8:  CALL   1D0E
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
069BC:  MOVLW  06
069BE:  MOVLB  B
069C0:  MOVWF  x56
069C2:  SETF   x57
069C4:  MOVLB  0
069C6:  CALL   1CF8
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
069CA:  MOVLW  06
069CC:  MOVLB  B
069CE:  MOVWF  x56
069D0:  SETF   x57
069D2:  MOVLB  0
069D4:  CALL   1D0E
....................    restart_wdt();
069D8:  CLRWDT
....................    delay_ms(100);
069DA:  MOVLW  64
069DC:  MOVLB  B
069DE:  MOVWF  x57
069E0:  MOVLB  0
069E2:  CALL   077C
.................... 
....................    
....................    //GSM SIM900 Init
....................    delay_ms(1000);
069E6:  MOVLW  04
069E8:  MOVLB  B
069EA:  MOVWF  x4E
069EC:  MOVLW  FA
069EE:  MOVWF  x57
069F0:  MOVLB  0
069F2:  CALL   077C
069F6:  MOVLB  B
069F8:  DECFSZ x4E,F
069FA:  BRA    69EC
....................    fprintf(CH2,"AT+CMGF=1"); 
069FC:  MOVLW  72
069FE:  MOVWF  FF6
06A00:  MOVLW  07
06A02:  MOVWF  FF7
06A04:  MOVLB  0
06A06:  CALL   1F44
....................    putc('\n',CH2);
06A0A:  MOVLW  0A
06A0C:  MOVLB  B
06A0E:  MOVWF  x58
06A10:  MOVLB  0
06A12:  CALL   1EFE
....................    delay_ms(50);
06A16:  MOVLW  32
06A18:  MOVLB  B
06A1A:  MOVWF  x57
06A1C:  MOVLB  0
06A1E:  CALL   077C
....................    
....................    SendSMS.B1 =0;
06A22:  MOVLB  A
06A24:  BCF    xED.0
....................    SendSMS.B2 =0;
06A26:  BCF    xED.1
....................    SendSMS.B3 =0;
06A28:  BCF    xED.2
....................    SendSMS.B4 =0;
06A2A:  BCF    xED.3
....................    SendSMS.B5 =0;
06A2C:  BCF    xED.4
....................    SendSMS.B6 =0;
06A2E:  BCF    xED.5
....................    SendSMS.B7 =0;
06A30:  BCF    xED.6
....................    SendSMS.B8 =0;
06A32:  BCF    xED.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
06A34:  MOVLB  B
06A36:  CLRF   x4D
06A38:  MOVF   x4D,W
06A3A:  SUBLW  09
06A3C:  BNC   6A70
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
06A3E:  CLRF   03
06A40:  MOVF   x4D,W
06A42:  ADDLW  88
06A44:  MOVWF  FE9
06A46:  MOVLW  09
06A48:  ADDWFC 03,W
06A4A:  MOVWF  FEA
06A4C:  MOVLW  32
06A4E:  ADDWF  x4D,W
06A50:  MOVWF  x50
06A52:  MOVFF  FF2,B51
06A56:  BCF    FF2.7
06A58:  CLRF   FAA
06A5A:  MOVFF  B50,FA9
06A5E:  BCF    FA6.6
06A60:  BCF    FA6.7
06A62:  BSF    FA6.0
06A64:  MOVF   FA8,W
06A66:  BTFSC  x51.7
06A68:  BSF    FF2.7
06A6A:  MOVWF  FEF
06A6C:  INCF   x4D,F
06A6E:  BRA    6A38
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
06A70:  CLRF   03
06A72:  MOVF   x4D,W
06A74:  ADDLW  88
06A76:  MOVWF  FE9
06A78:  MOVLW  09
06A7A:  ADDWFC 03,W
06A7C:  MOVWF  FEA
06A7E:  CLRF   FEF
.................... 
....................    delay_ms(500);
06A80:  MOVLW  02
06A82:  MOVWF  x4E
06A84:  MOVLW  FA
06A86:  MOVWF  x57
06A88:  MOVLB  0
06A8A:  CALL   077C
06A8E:  MOVLB  B
06A90:  DECFSZ x4E,F
06A92:  BRA    6A84
....................    while(TRUE)
....................    {
.................... 
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
06A94:  CLRF   x56
06A96:  SETF   x57
06A98:  MOVLB  0
06A9A:  CALL   1CF8
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
06A9E:  MOVLB  B
06AA0:  CLRF   x56
06AA2:  SETF   x57
06AA4:  MOVLB  0
06AA6:  CALL   1D0E
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
06AAA:  MOVLW  02
06AAC:  MOVLB  B
06AAE:  MOVWF  x56
06AB0:  SETF   x57
06AB2:  MOVLB  0
06AB4:  CALL   1CF8
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
06AB8:  MOVLW  02
06ABA:  MOVLB  B
06ABC:  MOVWF  x56
06ABE:  SETF   x57
06AC0:  MOVLB  0
06AC2:  CALL   1D0E
....................       
....................       restart_wdt();
06AC6:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
06AC8:  BTFSS  30.5
06ACA:  BRA    6AD2
....................       {
....................          Modbus_Function();
06ACC:  GOTO   23D2
....................          recieve_completed = 0 ;
06AD0:  BCF    30.5
....................       }
....................   
....................       check_ack();
06AD2:  CALL   216C
....................       check_reset();
06AD6:  CALL   2250
....................       check_test();
06ADA:  BRA    64E2
....................       
....................       restart_wdt();
06ADC:  CLRWDT
.................... 
....................       Read_input(); restart_wdt(); //must be first
06ADE:  CALL   15F4
06AE2:  CLRWDT
....................       Anal_Function(); restart_wdt();
06AE4:  CALL   49E8
06AE8:  CLRWDT
....................       Send_Ouput(); restart_wdt();
06AEA:  CALL   1D24
06AEE:  CLRWDT
....................       //Driver595(); restart_wdt();
....................       
....................       output_toggle(PIN_A0);
06AF0:  BCF    F92.0
06AF2:  BTG    F89.0
....................       
....................       if(RefreshConfigData)
06AF4:  BTFSS  30.4
06AF6:  BRA    6BAE
....................       {
....................          RefreshConfigData =0;
06AF8:  BCF    30.4
....................          Read_Config();
06AFA:  CALL   089A
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
06AFE:  MOVLB  B
06B00:  CLRF   x4E
06B02:  SETF   x4F
06B04:  MOVLB  0
06B06:  CALL   0874
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
06B0A:  MOVLB  B
06B0C:  CLRF   x4E
06B0E:  SETF   x4F
06B10:  MOVLB  0
06B12:  CALL   0886
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
06B16:  MOVLW  02
06B18:  MOVLB  B
06B1A:  MOVWF  x4E
06B1C:  SETF   x4F
06B1E:  MOVLB  0
06B20:  CALL   0874
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt 
06B24:  MOVLW  02
06B26:  MOVLB  B
06B28:  MOVWF  x4E
06B2A:  SETF   x4F
06B2C:  MOVLB  0
06B2E:  CALL   0886
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
06B32:  MOVLB  B
06B34:  CLRF   x58
06B36:  MOVLW  06
06B38:  MOVWF  x59
06B3A:  SETF   x5A
06B3C:  MOVLB  0
06B3E:  CALL   07AC
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
06B42:  MOVLB  B
06B44:  CLRF   x58
06B46:  MOVLW  16
06B48:  MOVWF  x59
06B4A:  SETF   x5A
06B4C:  MOVLB  0
06B4E:  CALL   07AC
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
06B52:  MOVLW  02
06B54:  MOVLB  B
06B56:  MOVWF  x58
06B58:  MOVLW  06
06B5A:  MOVWF  x59
06B5C:  SETF   x5A
06B5E:  MOVLB  0
06B60:  CALL   07AC
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
06B64:  MOVLW  02
06B66:  MOVLB  B
06B68:  MOVWF  x58
06B6A:  MOVLW  16
06B6C:  MOVWF  x59
06B6E:  SETF   x5A
06B70:  MOVLB  0
06B72:  CALL   07AC
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
06B76:  MOVLW  04
06B78:  MOVLB  B
06B7A:  MOVWF  x4E
06B7C:  CLRF   x4F
06B7E:  MOVLB  0
06B80:  CALL   0874
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
06B84:  MOVLW  04
06B86:  MOVLB  B
06B88:  MOVWF  x4E
06B8A:  CLRF   x4F
06B8C:  MOVLB  0
06B8E:  CALL   0886
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
06B92:  MOVLW  06
06B94:  MOVLB  B
06B96:  MOVWF  x4E
06B98:  CLRF   x4F
06B9A:  MOVLB  0
06B9C:  CALL   0874
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
06BA0:  MOVLW  06
06BA2:  MOVLB  B
06BA4:  MOVWF  x4E
06BA6:  CLRF   x4F
06BA8:  MOVLB  0
06BAA:  CALL   0886
.................... 
....................       }
06BAE:  MOVLB  B
06BB0:  BRA    6A94
....................    }
....................    
.................... }
06BB2:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
