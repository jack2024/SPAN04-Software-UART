CCS PCH C Compiler, Version 5.091, 5967               08-¡.Â.-21 17:00

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_8 - Delay - SP - SMS\ESPAN-04.lst

               ROM used:   27522 bytes (42%)
                           Largest free fragment is 38010
               RAM used:   1845 (47%) at main() level
                           1862 (48%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   6586
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   0526
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   0516
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... //#include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16\ESPAN-04.h"
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
005B6:  DATA 41,54
005B8:  DATA 2B,43
005BA:  DATA 4D,47
005BC:  DATA 46,3D
005BE:  DATA 31,00
005C0:  DATA 41,54
005C2:  DATA 2B,43
005C4:  DATA 4D,47
005C6:  DATA 53,3D
005C8:  DATA 22,00
005CA:  DATA 41,54
005CC:  DATA 2B,43
005CE:  DATA 4D,47
005D0:  DATA 46,3D
005D2:  DATA 31,00
005D4:  DATA 41,54
005D6:  DATA 2B,43
005D8:  DATA 4D,47
005DA:  DATA 53,3D
005DC:  DATA 22,00
005DE:  DATA 41,54
005E0:  DATA 2B,43
005E2:  DATA 4D,47
005E4:  DATA 46,3D
005E6:  DATA 31,00
005E8:  DATA 41,54
005EA:  DATA 2B,43
005EC:  DATA 4D,47
005EE:  DATA 53,3D
005F0:  DATA 22,00
005F2:  DATA 41,54
005F4:  DATA 2B,43
005F6:  DATA 4D,47
005F8:  DATA 46,3D
005FA:  DATA 31,00
005FC:  DATA 41,54
005FE:  DATA 2B,43
00600:  DATA 4D,47
00602:  DATA 53,3D
00604:  DATA 22,00
00606:  DATA 41,54
00608:  DATA 2B,43
0060A:  DATA 4D,47
0060C:  DATA 46,3D
0060E:  DATA 31,00
00610:  DATA 41,54
00612:  DATA 2B,43
00614:  DATA 4D,47
00616:  DATA 53,3D
00618:  DATA 22,00
0061A:  DATA 41,54
0061C:  DATA 2B,43
0061E:  DATA 4D,47
00620:  DATA 46,3D
00622:  DATA 31,00
00624:  DATA 41,54
00626:  DATA 2B,43
00628:  DATA 4D,47
0062A:  DATA 53,3D
0062C:  DATA 22,00
0062E:  DATA 41,54
00630:  DATA 2B,43
00632:  DATA 4D,47
00634:  DATA 46,3D
00636:  DATA 31,00
00638:  DATA 41,54
0063A:  DATA 2B,43
0063C:  DATA 4D,47
0063E:  DATA 53,3D
00640:  DATA 22,00
00642:  DATA 41,54
00644:  DATA 2B,43
00646:  DATA 4D,47
00648:  DATA 46,3D
0064A:  DATA 31,00
0064C:  DATA 41,54
0064E:  DATA 2B,43
00650:  DATA 4D,47
00652:  DATA 53,3D
00654:  DATA 22,00
00656:  DATA 41,54
00658:  DATA 2B,43
0065A:  DATA 4D,47
0065C:  DATA 46,3D
0065E:  DATA 31,00
00660:  DATA 41,54
00662:  DATA 2B,43
00664:  DATA 4D,47
00666:  DATA 53,3D
00668:  DATA 22,00
0066A:  DATA 41,54
0066C:  DATA 2B,43
0066E:  DATA 4D,47
00670:  DATA 46,3D
00672:  DATA 31,00
00674:  DATA 41,54
00676:  DATA 2B,43
00678:  DATA 4D,47
0067A:  DATA 53,3D
0067C:  DATA 22,00
0067E:  DATA 41,54
00680:  DATA 2B,43
00682:  DATA 4D,47
00684:  DATA 46,3D
00686:  DATA 31,00
00688:  DATA 41,54
0068A:  DATA 2B,43
0068C:  DATA 4D,47
0068E:  DATA 53,3D
00690:  DATA 22,00
00692:  DATA 41,54
00694:  DATA 2B,43
00696:  DATA 4D,47
00698:  DATA 46,3D
0069A:  DATA 31,00
0069C:  DATA 41,54
0069E:  DATA 2B,43
006A0:  DATA 4D,47
006A2:  DATA 53,3D
006A4:  DATA 22,00
006A6:  DATA 41,54
006A8:  DATA 2B,43
006AA:  DATA 4D,47
006AC:  DATA 46,3D
006AE:  DATA 31,00
006B0:  DATA 41,54
006B2:  DATA 2B,43
006B4:  DATA 4D,47
006B6:  DATA 53,3D
006B8:  DATA 22,00
006BA:  DATA 41,54
006BC:  DATA 2B,43
006BE:  DATA 4D,47
006C0:  DATA 46,3D
006C2:  DATA 31,00
006C4:  DATA 41,54
006C6:  DATA 2B,43
006C8:  DATA 4D,47
006CA:  DATA 53,3D
006CC:  DATA 22,00
006CE:  DATA 41,54
006D0:  DATA 2B,43
006D2:  DATA 4D,47
006D4:  DATA 46,3D
006D6:  DATA 31,00
006D8:  DATA 41,54
006DA:  DATA 2B,43
006DC:  DATA 4D,47
006DE:  DATA 53,3D
006E0:  DATA 22,00
006E2:  DATA 41,54
006E4:  DATA 2B,43
006E6:  DATA 4D,47
006E8:  DATA 46,3D
006EA:  DATA 31,00
006EC:  DATA 41,54
006EE:  DATA 2B,43
006F0:  DATA 4D,47
006F2:  DATA 53,3D
006F4:  DATA 22,00
006F6:  DATA 41,54
006F8:  DATA 2B,43
006FA:  DATA 4D,47
006FC:  DATA 53,3D
006FE:  DATA 22,00
00700:  DATA 41,54
00702:  DATA 2B,43
00704:  DATA 4D,47
00706:  DATA 53,3D
00708:  DATA 22,00
0070A:  DATA 41,54
0070C:  DATA 2B,43
0070E:  DATA 4D,47
00710:  DATA 53,3D
00712:  DATA 22,00
00714:  DATA 41,54
00716:  DATA 2B,43
00718:  DATA 4D,47
0071A:  DATA 53,3D
0071C:  DATA 22,00
0071E:  DATA 41,54
00720:  DATA 2B,43
00722:  DATA 4D,47
00724:  DATA 53,3D
00726:  DATA 22,00
00728:  DATA 41,54
0072A:  DATA 2B,43
0072C:  DATA 4D,47
0072E:  DATA 53,3D
00730:  DATA 22,00
00732:  DATA 41,54
00734:  DATA 2B,43
00736:  DATA 4D,47
00738:  DATA 53,3D
0073A:  DATA 22,00
0073C:  DATA 41,54
0073E:  DATA 2B,43
00740:  DATA 4D,47
00742:  DATA 53,3D
00744:  DATA 22,00
00746:  DATA 41,54
00748:  DATA 2B,43
0074A:  DATA 4D,47
0074C:  DATA 46,3D
0074E:  DATA 31,00
*
014CE:  MOVLB  7
014D0:  MOVF   x3E,W
014D2:  ANDLW  07
014D4:  MOVWF  00
014D6:  RRCF   x3E,W
014D8:  MOVWF  01
014DA:  RRCF   01,F
014DC:  RRCF   01,F
014DE:  MOVLW  1F
014E0:  ANDWF  01,F
014E2:  MOVF   01,W
014E4:  ADDWF  x3F,W
014E6:  MOVWF  FE9
014E8:  MOVLW  00
014EA:  ADDWFC x40,W
014EC:  MOVWF  FEA
014EE:  MOVFF  FEF,01
014F2:  INCF   00,F
014F4:  BRA    14F8
014F6:  RRCF   01,F
014F8:  DECFSZ 00,F
014FA:  BRA    14F6
014FC:  MOVLW  01
014FE:  ANDWF  01,F
01500:  MOVLB  0
01502:  RETURN 0
01504:  MOVLB  7
01506:  MOVF   x3F,W
01508:  MULWF  x41
0150A:  MOVFF  FF3,01
0150E:  MOVFF  FF4,00
01512:  MULWF  x42
01514:  MOVF   FF3,W
01516:  ADDWF  00,F
01518:  MOVF   x40,W
0151A:  MULWF  x41
0151C:  MOVF   FF3,W
0151E:  ADDWFC 00,W
01520:  MOVWF  02
01522:  MOVLB  0
01524:  RETURN 0
01526:  MOVLB  7
01528:  MOVF   x3E,W
0152A:  ANDLW  07
0152C:  MOVWF  00
0152E:  RRCF   x3E,W
01530:  MOVWF  01
01532:  RRCF   01,F
01534:  RRCF   01,F
01536:  MOVLW  1F
01538:  ANDWF  01,F
0153A:  MOVF   01,W
0153C:  ADDWF  x40,W
0153E:  MOVWF  FE9
01540:  MOVLW  00
01542:  ADDWFC x41,W
01544:  MOVWF  FEA
01546:  CLRF   01
01548:  INCF   01,F
0154A:  INCF   00,F
0154C:  BRA    1550
0154E:  RLCF   01,F
01550:  DECFSZ 00,F
01552:  BRA    154E
01554:  MOVF   x3F,F
01556:  BZ    155E
01558:  MOVF   01,W
0155A:  IORWF  FEF,F
0155C:  BRA    1564
0155E:  COMF   01,F
01560:  MOVF   01,W
01562:  ANDWF  FEF,F
01564:  MOVLB  0
01566:  GOTO   15BC (RETURN)
*
01C0C:  ADDWF  FE8,W
01C0E:  CLRF   FF7
01C10:  RLCF   FF7,F
01C12:  ADDLW  27
01C14:  MOVWF  FF6
01C16:  MOVLW  1C
01C18:  ADDWFC FF7,F
01C1A:  TBLRD*-
01C1C:  MOVF   FF5,W
01C1E:  MOVWF  FFA
01C20:  TBLRD*
01C22:  MOVF   FF5,W
01C24:  MOVWF  FF9
01C26:  DATA 84,17
01C28:  DATA 8C,17
01C2A:  DATA 94,17
01C2C:  DATA 9C,17
01C2E:  DATA A4,17
01C30:  DATA AC,17
01C32:  DATA B4,17
01C34:  DATA BC,17
01C36:  ADDWF  FE8,W
01C38:  CLRF   FF7
01C3A:  RLCF   FF7,F
01C3C:  ADDLW  51
01C3E:  MOVWF  FF6
01C40:  MOVLW  1C
01C42:  ADDWFC FF7,F
01C44:  TBLRD*-
01C46:  MOVF   FF5,W
01C48:  MOVWF  FFA
01C4A:  TBLRD*
01C4C:  MOVF   FF5,W
01C4E:  MOVWF  FF9
01C50:  DATA 9E,18
01C52:  DATA A6,18
01C54:  DATA AE,18
01C56:  DATA B6,18
01C58:  DATA BE,18
01C5A:  DATA C6,18
01C5C:  DATA CE,18
01C5E:  DATA D6,18
01C60:  ADDWF  FE8,W
01C62:  CLRF   FF7
01C64:  RLCF   FF7,F
01C66:  ADDLW  7B
01C68:  MOVWF  FF6
01C6A:  MOVLW  1C
01C6C:  ADDWFC FF7,F
01C6E:  TBLRD*-
01C70:  MOVF   FF5,W
01C72:  MOVWF  FFA
01C74:  TBLRD*
01C76:  MOVF   FF5,W
01C78:  MOVWF  FF9
01C7A:  DATA EC,19
01C7C:  DATA F4,19
01C7E:  DATA FC,19
01C80:  DATA 04,1A
01C82:  DATA 0C,1A
01C84:  DATA 14,1A
01C86:  DATA 1C,1A
01C88:  DATA 24,1A
01C8A:  ADDWF  FE8,W
01C8C:  CLRF   FF7
01C8E:  RLCF   FF7,F
01C90:  ADDLW  A5
01C92:  MOVWF  FF6
01C94:  MOVLW  1C
01C96:  ADDWFC FF7,F
01C98:  TBLRD*-
01C9A:  MOVF   FF5,W
01C9C:  MOVWF  FFA
01C9E:  TBLRD*
01CA0:  MOVF   FF5,W
01CA2:  MOVWF  FF9
01CA4:  DATA 04,1B
01CA6:  DATA 0C,1B
01CA8:  DATA 14,1B
01CAA:  DATA 1C,1B
01CAC:  DATA 24,1B
01CAE:  DATA 2C,1B
01CB0:  DATA 34,1B
01CB2:  DATA 3C,1B
*
01F00:  TBLRD*+
01F02:  MOVF   FF5,F
01F04:  BZ    1F1E
01F06:  MOVFF  FF6,739
01F0A:  MOVFF  FF7,73A
01F0E:  MOVFF  FF5,73B
01F12:  RCALL  1EBA
01F14:  MOVFF  739,FF6
01F18:  MOVFF  73A,FF7
01F1C:  BRA    1F00
01F1E:  RETURN 0
*
044A4:  MOVF   FEF,F
044A6:  BZ    44C8
044A8:  MOVFF  FEA,73A
044AC:  MOVFF  FE9,739
044B0:  MOVFF  FEF,73B
044B4:  CALL   1EBA
044B8:  MOVFF  73A,FEA
044BC:  MOVFF  739,FE9
044C0:  INCF   FE9,F
044C2:  BTFSC  FD8.2
044C4:  INCF   FEA,F
044C6:  BRA    44A4
044C8:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
00750:  MOVLW  07
00752:  MOVWF  FEA
00754:  MOVLW  3A
00756:  MOVWF  FE9
00758:  MOVF   FEF,W
0075A:  BZ    077E
0075C:  MOVLW  05
0075E:  MOVWF  01
00760:  MOVLW  BF
00762:  MOVWF  00
00764:  CLRWDT
00766:  DECFSZ 00,F
00768:  BRA    0764
0076A:  DECFSZ 01,F
0076C:  BRA    0760
0076E:  MOVLW  2E
00770:  MOVWF  00
00772:  DECFSZ 00,F
00774:  BRA    0772
00776:  NOP   
00778:  CLRWDT
0077A:  DECFSZ FEF,F
0077C:  BRA    075C
0077E:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
007B2:  BCF    F92.5
007B4:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
007B6:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
007B8:  MOVLB  7
007BA:  CLRF   x3B
007BC:  MOVLW  0A
007BE:  MOVWF  x3C
007C0:  MOVLW  AA
007C2:  MOVWF  x3D
007C4:  MOVLB  0
007C6:  RCALL  0780
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
007C8:  MOVLW  02
007CA:  MOVLB  7
007CC:  MOVWF  x3B
007CE:  MOVLW  0A
007D0:  MOVWF  x3C
007D2:  MOVLW  AA
007D4:  MOVWF  x3D
007D6:  MOVLB  0
007D8:  RCALL  0780
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
007DA:  MOVLW  04
007DC:  MOVLB  7
007DE:  MOVWF  x3B
007E0:  MOVLW  0A
007E2:  MOVWF  x3C
007E4:  MOVLW  AA
007E6:  MOVWF  x3D
007E8:  MOVLB  0
007EA:  RCALL  0780
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
007EC:  MOVLW  06
007EE:  MOVLB  7
007F0:  MOVWF  x3B
007F2:  MOVLW  0A
007F4:  MOVWF  x3C
007F6:  MOVLW  AA
007F8:  MOVWF  x3D
007FA:  MOVLB  0
007FC:  RCALL  0780
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
007FE:  MOVLW  08
00800:  MOVLB  7
00802:  MOVWF  x3B
00804:  MOVLW  0A
00806:  MOVWF  x3C
00808:  MOVLW  AA
0080A:  MOVWF  x3D
0080C:  MOVLB  0
0080E:  RCALL  0780
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
00810:  MOVLW  0A
00812:  MOVLB  7
00814:  MOVWF  x3B
00816:  MOVWF  x3C
00818:  MOVLW  AA
0081A:  MOVWF  x3D
0081C:  MOVLB  0
0081E:  RCALL  0780
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00820:  MOVLW  0C
00822:  MOVLB  7
00824:  MOVWF  x3B
00826:  MOVLW  0A
00828:  MOVWF  x3C
0082A:  MOVLW  AA
0082C:  MOVWF  x3D
0082E:  MOVLB  0
00830:  RCALL  0780
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
00832:  MOVLW  0E
00834:  MOVLB  7
00836:  MOVWF  x3B
00838:  MOVLW  0A
0083A:  MOVWF  x3C
0083C:  MOVLW  AA
0083E:  MOVWF  x3D
00840:  MOVLB  0
00842:  RCALL  0780
....................    #endif
00844:  GOTO   6674 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
00780:  BCF    F92.5
00782:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
00784:  MOVLB  7
00786:  MOVF   x3B,W
00788:  IORLW  40
0078A:  MOVWF  x3E
0078C:  MOVF   FC9,W
0078E:  MOVFF  73E,FC9
00792:  RRCF   FC7,W
00794:  BNC   0792
....................    #endif
....................    
....................    spi_write(reg);
00796:  MOVF   FC9,W
00798:  MOVFF  73C,FC9
0079C:  RRCF   FC7,W
0079E:  BNC   079C
....................    spi_write(data);
007A0:  MOVF   FC9,W
007A2:  MOVFF  73D,FC9
007A6:  RRCF   FC7,W
007A8:  BNC   07A6
....................    
....................    output_high(IO_CS_PIN);
007AA:  BCF    F92.5
007AC:  BSF    F89.5
007AE:  MOVLB  0
007B0:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
0145A:  BCF    F92.5
0145C:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
0145E:  MOVLB  7
01460:  MOVF   x3D,W
01462:  IORLW  41
01464:  MOVWF  x40
01466:  MOVF   FC9,W
01468:  MOVFF  740,FC9
0146C:  RRCF   FC7,W
0146E:  BNC   146C
....................    #endif
....................    
....................    spi_write(reg);
01470:  MOVF   FC9,W
01472:  MOVFF  73E,FC9
01476:  RRCF   FC7,W
01478:  BNC   1476
....................    retVal = spi_read(0);
0147A:  MOVF   FC9,W
0147C:  CLRF   FC9
0147E:  RRCF   FC7,W
01480:  BNC   147E
01482:  MOVFF  FC9,73F
....................    
....................    output_high(IO_CS_PIN);
01486:  BCF    F92.5
01488:  BSF    F89.5
....................    
....................    return retVal;
0148A:  MOVFF  73F,01
0148E:  MOVLB  0
01490:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
01CB4:  MOVFF  739,73B
01CB8:  MOVLW  0A
01CBA:  MOVLB  7
01CBC:  MOVWF  x3C
01CBE:  MOVFF  73A,73D
01CC2:  MOVLB  0
01CC4:  CALL   0780
....................    #endif
01CC8:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
01CCA:  MOVFF  739,73B
01CCE:  MOVLW  1A
01CD0:  MOVLB  7
01CD2:  MOVWF  x3C
01CD4:  MOVFF  73A,73D
01CD8:  MOVLB  0
01CDA:  CALL   0780
....................    #endif
01CDE:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
01492:  MOVFF  73B,73D
01496:  MOVLW  09
01498:  MOVLB  7
0149A:  MOVWF  x3E
0149C:  MOVLB  0
0149E:  RCALL  145A
014A0:  MOVFF  01,73C
....................    #endif
....................    
....................    return retVal;
014A4:  MOVLB  7
014A6:  MOVFF  73C,01
014AA:  MOVLB  0
014AC:  GOTO   15D2 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
014B0:  MOVFF  73B,73D
014B4:  MOVLW  19
014B6:  MOVLB  7
014B8:  MOVWF  x3E
014BA:  MOVLB  0
014BC:  RCALL  145A
014BE:  MOVFF  01,73C
....................    #endif
....................    
....................    return retVal;
014C2:  MOVLB  7
014C4:  MOVFF  73C,01
014C8:  MOVLB  0
014CA:  GOTO   166E (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00848:  MOVFF  731,73B
0084C:  MOVLB  7
0084E:  CLRF   x3C
00850:  MOVFF  732,73D
00854:  MOVLB  0
00856:  RCALL  0780
....................    #endif
00858:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
0085A:  MOVFF  731,73B
0085E:  MOVLW  10
00860:  MOVLB  7
00862:  MOVWF  x3C
00864:  MOVFF  732,73D
00868:  MOVLB  0
0086A:  RCALL  0780
....................    #endif
0086C:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... /*
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... */
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
01F76:  BTFSS  F9E.4
01F78:  BRA    1F76
01F7A:  MOVWF  FAD
01F7C:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
01EBA:  BCF    F93.0
01EBC:  BCF    F8A.0
01EBE:  MOVLW  08
01EC0:  MOVWF  01
01EC2:  BRA    1EC4
01EC4:  NOP   
01EC6:  BSF    01.7
01EC8:  BRA    1EEA
01ECA:  BCF    01.7
01ECC:  MOVLB  7
01ECE:  RRCF   x3B,F
01ED0:  MOVLB  0
01ED2:  BTFSC  FD8.0
01ED4:  BSF    F8A.0
01ED6:  BTFSS  FD8.0
01ED8:  BCF    F8A.0
01EDA:  BSF    01.6
01EDC:  BRA    1EEA
01EDE:  BCF    01.6
01EE0:  DECFSZ 01,F
01EE2:  BRA    1ECC
01EE4:  BRA    1EE6
01EE6:  NOP   
01EE8:  BSF    F8A.0
01EEA:  MOVLW  84
01EEC:  MOVWF  FE9
01EEE:  DECFSZ FE9,F
01EF0:  BRA    1EEE
01EF2:  BRA    1EF4
01EF4:  NOP   
01EF6:  BTFSC  01.7
01EF8:  BRA    1ECA
01EFA:  BTFSC  01.6
01EFC:  BRA    1EDE
01EFE:  RETURN 0
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[128];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[100];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... unsigned char index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[41];
.................... unsigned char SMS_Massage2[41];
.................... unsigned char SMS_Massage3[41];
.................... unsigned char SMS_Massage4[41];
.................... unsigned char SMS_Massage5[41];
.................... unsigned char SMS_Massage6[41];
.................... unsigned char SMS_Massage7[41];
.................... unsigned char SMS_Massage8[41];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Inputt
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8;
.................... 
.................... };
.................... 
.................... 
.................... struct Bit64 Inputt,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[20];
.................... int1 FaultNow[20];
.................... int16 ReleaseTime[20];
.................... int16 FaultDelayTime[20];
.................... int8  AllFaultDelayTime;
.................... int1 FaultNCNO[20];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
0156A:  MOVLB  7
0156C:  CLRF   x3B
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
0156E:  MOVLW  01
01570:  MOVWF  x3B
01572:  BTFSC  x3B.7
01574:  BRA    157C
01576:  MOVF   x3B,W
01578:  SUBLW  10
0157A:  BNC   15C2
....................    {
....................       FaultAgo[i] = FaultNow[i];
0157C:  CLRF   03
0157E:  MOVF   x3B,W
01580:  MOVWF  00
01582:  BTFSC  FE8.7
01584:  DECF   03,F
01586:  MOVWF  x3C
01588:  MOVFF  03,73D
0158C:  CLRF   03
0158E:  MOVF   x3B,W
01590:  MOVWF  00
01592:  BTFSC  FE8.7
01594:  DECF   03,F
01596:  MOVWF  x3E
01598:  MOVLW  06
0159A:  MOVWF  x40
0159C:  MOVLW  D5
0159E:  MOVWF  x3F
015A0:  MOVLB  0
015A2:  RCALL  14CE
015A4:  MOVFF  73C,73E
015A8:  MOVLB  7
015AA:  CLRF   x3F
015AC:  BTFSC  01.0
015AE:  INCF   x3F,F
015B0:  MOVLW  06
015B2:  MOVWF  x41
015B4:  MOVLW  D2
015B6:  MOVWF  x40
015B8:  MOVLB  0
015BA:  BRA    1526
015BC:  MOVLB  7
015BE:  INCF   x3B,F
015C0:  BRA    1572
....................    }
015C2:  MOVLB  0
015C4:  GOTO   1B6E (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
01F20:  MOVLB  4
01F22:  SETF   xFB
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
01F24:  SETF   xFA
.................... 
....................    for(i = 0;i < usDataLen;i++)
01F26:  MOVLB  7
01F28:  CLRF   x3F
01F2A:  MOVF   x3D,W
01F2C:  SUBWF  x3F,W
01F2E:  BC    1F72
....................    {
....................       restart_wdt();
01F30:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
01F32:  MOVF   x3F,W
01F34:  ADDWF  x3B,W
01F36:  MOVWF  FE9
01F38:  MOVLW  00
01F3A:  ADDWFC x3C,W
01F3C:  MOVWF  FEA
01F3E:  MOVF   FEF,W
01F40:  MOVLB  4
01F42:  XORWF  xFB,W
01F44:  MOVLB  7
01F46:  MOVWF  x3E
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
01F48:  CLRF   03
01F4A:  MOVF   x3E,W
01F4C:  MOVLB  0
01F4E:  CALL   00BA
01F52:  MOVWF  01
01F54:  MOVLB  4
01F56:  MOVF   xFA,W
01F58:  XORWF  01,W
01F5A:  MOVWF  xFB
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
01F5C:  CLRF   03
01F5E:  MOVLB  7
01F60:  MOVF   x3E,W
01F62:  MOVLB  0
01F64:  CALL   01CA
01F68:  MOVFF  FE8,4FA
01F6C:  MOVLB  7
01F6E:  INCF   x3F,F
01F70:  BRA    1F2A
....................    }
01F72:  MOVLB  0
01F74:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................     
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
01F7E:  CLRF   1E
....................    
....................    Ack1_8_Send = 0x00;
01F80:  CLRF   26
....................   
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
01F82:  MOVLB  6
01F84:  BTFSC  xCB.0
01F86:  BRA    1F90
01F88:  BTFSC  xC4.0
01F8A:  BRA    1F90
....................       AckSend.B1 = 1;
01F8C:  BSF    xCE.0
01F8E:  BRA    1F92
....................    else
....................       AckSend.B1 = 0;
01F90:  BCF    xCE.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
01F92:  BTFSC  xCB.1
01F94:  BRA    1F9E
01F96:  BTFSC  xC4.1
01F98:  BRA    1F9E
....................       AckSend.B2 = 1;
01F9A:  BSF    xCE.1
01F9C:  BRA    1FA0
....................    else
....................       AckSend.B2 = 0;
01F9E:  BCF    xCE.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
01FA0:  BTFSC  xCB.2
01FA2:  BRA    1FAC
01FA4:  BTFSC  xC4.2
01FA6:  BRA    1FAC
....................       AckSend.B3 = 1;
01FA8:  BSF    xCE.2
01FAA:  BRA    1FAE
....................    else
....................       AckSend.B3 = 0;
01FAC:  BCF    xCE.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
01FAE:  BTFSC  xCB.3
01FB0:  BRA    1FBA
01FB2:  BTFSC  xC4.3
01FB4:  BRA    1FBA
....................       AckSend.B4 = 1;
01FB6:  BSF    xCE.3
01FB8:  BRA    1FBC
....................    else
....................       AckSend.B4 = 0;
01FBA:  BCF    xCE.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
01FBC:  BTFSC  xCB.4
01FBE:  BRA    1FC8
01FC0:  BTFSC  xC4.4
01FC2:  BRA    1FC8
....................       AckSend.B5 = 1;
01FC4:  BSF    xCE.4
01FC6:  BRA    1FCA
....................    else
....................       AckSend.B5 = 0;
01FC8:  BCF    xCE.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
01FCA:  BTFSC  xCB.5
01FCC:  BRA    1FD6
01FCE:  BTFSC  xC4.5
01FD0:  BRA    1FD6
....................       AckSend.B6 = 1;
01FD2:  BSF    xCE.5
01FD4:  BRA    1FD8
....................    else
....................       AckSend.B6 = 0;
01FD6:  BCF    xCE.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
01FD8:  BTFSC  xCB.6
01FDA:  BRA    1FE4
01FDC:  BTFSC  xC4.6
01FDE:  BRA    1FE4
....................       AckSend.B7 = 1;
01FE0:  BSF    xCE.6
01FE2:  BRA    1FE6
....................    else
....................       AckSend.B7 = 0;
01FE4:  BCF    xCE.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
01FE6:  BTFSC  xCB.7
01FE8:  BRA    1FF2
01FEA:  BTFSC  xC4.7
01FEC:  BRA    1FF2
....................       AckSend.B8 = 1;
01FEE:  BSF    xCE.7
01FF0:  BRA    1FF4
....................    else
....................       AckSend.B8 = 0;
01FF2:  BCF    xCE.7
.................... 
....................    
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
01FF4:  MOVLW  00
01FF6:  BTFSC  xCE.7
01FF8:  MOVLW  01
01FFA:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
01FFC:  BCF    FD8.0
01FFE:  RLCF   26,W
02000:  MOVLB  7
02002:  MOVWF  x3B
02004:  MOVLW  00
02006:  MOVLB  6
02008:  BTFSC  xCE.6
0200A:  MOVLW  01
0200C:  MOVLB  7
0200E:  IORWF  x3B,W
02010:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
02012:  BCF    FD8.0
02014:  RLCF   26,W
02016:  MOVWF  x3B
02018:  MOVLW  00
0201A:  MOVLB  6
0201C:  BTFSC  xCE.5
0201E:  MOVLW  01
02020:  MOVLB  7
02022:  IORWF  x3B,W
02024:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
02026:  BCF    FD8.0
02028:  RLCF   26,W
0202A:  MOVWF  x3B
0202C:  MOVLW  00
0202E:  MOVLB  6
02030:  BTFSC  xCE.4
02032:  MOVLW  01
02034:  MOVLB  7
02036:  IORWF  x3B,W
02038:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
0203A:  BCF    FD8.0
0203C:  RLCF   26,W
0203E:  MOVWF  x3B
02040:  MOVLW  00
02042:  MOVLB  6
02044:  BTFSC  xCE.3
02046:  MOVLW  01
02048:  MOVLB  7
0204A:  IORWF  x3B,W
0204C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
0204E:  BCF    FD8.0
02050:  RLCF   26,W
02052:  MOVWF  x3B
02054:  MOVLW  00
02056:  MOVLB  6
02058:  BTFSC  xCE.2
0205A:  MOVLW  01
0205C:  MOVLB  7
0205E:  IORWF  x3B,W
02060:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
02062:  BCF    FD8.0
02064:  RLCF   26,W
02066:  MOVWF  x3B
02068:  MOVLW  00
0206A:  MOVLB  6
0206C:  BTFSC  xCE.1
0206E:  MOVLW  01
02070:  MOVLB  7
02072:  IORWF  x3B,W
02074:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
02076:  BCF    FD8.0
02078:  RLCF   26,W
0207A:  MOVWF  x3B
0207C:  MOVLW  00
0207E:  MOVLB  6
02080:  BTFSC  xCE.0
02082:  MOVLW  01
02084:  MOVLB  7
02086:  IORWF  x3B,W
02088:  MOVWF  26
....................    
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
0208A:  MOVLW  00
0208C:  MOVLB  6
0208E:  BTFSC  xCB.7
02090:  MOVLW  01
02092:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
02094:  BCF    FD8.0
02096:  RLCF   1E,W
02098:  MOVLB  7
0209A:  MOVWF  x3B
0209C:  MOVLW  00
0209E:  MOVLB  6
020A0:  BTFSC  xCB.6
020A2:  MOVLW  01
020A4:  MOVLB  7
020A6:  IORWF  x3B,W
020A8:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
020AA:  BCF    FD8.0
020AC:  RLCF   1E,W
020AE:  MOVWF  x3B
020B0:  MOVLW  00
020B2:  MOVLB  6
020B4:  BTFSC  xCB.5
020B6:  MOVLW  01
020B8:  MOVLB  7
020BA:  IORWF  x3B,W
020BC:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
020BE:  BCF    FD8.0
020C0:  RLCF   1E,W
020C2:  MOVWF  x3B
020C4:  MOVLW  00
020C6:  MOVLB  6
020C8:  BTFSC  xCB.4
020CA:  MOVLW  01
020CC:  MOVLB  7
020CE:  IORWF  x3B,W
020D0:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
020D2:  BCF    FD8.0
020D4:  RLCF   1E,W
020D6:  MOVWF  x3B
020D8:  MOVLW  00
020DA:  MOVLB  6
020DC:  BTFSC  xCB.3
020DE:  MOVLW  01
020E0:  MOVLB  7
020E2:  IORWF  x3B,W
020E4:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
020E6:  BCF    FD8.0
020E8:  RLCF   1E,W
020EA:  MOVWF  x3B
020EC:  MOVLW  00
020EE:  MOVLB  6
020F0:  BTFSC  xCB.2
020F2:  MOVLW  01
020F4:  MOVLB  7
020F6:  IORWF  x3B,W
020F8:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
020FA:  BCF    FD8.0
020FC:  RLCF   1E,W
020FE:  MOVWF  x3B
02100:  MOVLW  00
02102:  MOVLB  6
02104:  BTFSC  xCB.1
02106:  MOVLW  01
02108:  MOVLB  7
0210A:  IORWF  x3B,W
0210C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
0210E:  BCF    FD8.0
02110:  RLCF   1E,W
02112:  MOVWF  x3B
02114:  MOVLW  00
02116:  MOVLB  6
02118:  BTFSC  xCB.0
0211A:  MOVLW  01
0211C:  MOVLB  7
0211E:  IORWF  x3B,W
02120:  MOVWF  1E
02122:  MOVLB  0
02124:  GOTO   2B0A (RETURN)
....................      
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x6F,W
002DE:  SUBWF  x77,W
002E0:  BNZ   0306
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x79
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  FA
002E6:  ADDWF  x79,W
002E8:  MOVWF  FE9
002EA:  CLRF   FEA
002EC:  BTFSC  FD8.0
002EE:  INCF   FEA,F
002F0:  MOVFF  2E,FEF
....................      restart_wdt();
002F4:  CLRWDT
....................      RxD_DataLen ++ ;
002F6:  INCF   x79,F
....................      sequence = addr_sq;
002F8:  MOVLW  10
002FA:  MOVWF  x77
....................      T_timeout = 0x14; //200ms
002FC:  MOVLW  14
002FE:  MOVLB  5
00300:  MOVWF  x69
....................    }
00302:  BRA    0510
00304:  MOVLB  0
....................    else if(sequence == addr_sq)
00306:  MOVF   x77,W
00308:  SUBLW  10
0030A:  BNZ   03BA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0030C:  MOVLW  FA
0030E:  ADDWF  x79,W
00310:  MOVWF  FE9
00312:  CLRF   FEA
00314:  BTFSC  FD8.0
00316:  INCF   FEA,F
00318:  MOVFF  2E,FEF
....................       restart_wdt();
0031C:  CLRWDT
....................       RxD_DataLen ++ ;
0031E:  INCF   x79,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00320:  MOVLW  01
00322:  SUBWF  x79,W
00324:  ADDLW  FA
00326:  MOVWF  FE9
00328:  CLRF   FEA
0032A:  BTFSC  FD8.0
0032C:  INCF   FEA,F
0032E:  MOVF   FEF,W
00330:  SUBLW  16
00332:  BNC   0342
....................        {
....................            sequence = code_sq;
00334:  MOVFF  70,77
....................            T_timeout = 0x14; //200ms
00338:  MOVLW  14
0033A:  MOVLB  5
0033C:  MOVWF  x69
....................        }
0033E:  BRA    03B6
00340:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00342:  MOVLW  01
00344:  SUBWF  x79,W
00346:  ADDLW  FA
00348:  MOVWF  FE9
0034A:  CLRF   FEA
0034C:  BTFSC  FD8.0
0034E:  INCF   FEA,F
00350:  MOVF   FEF,W
00352:  SUBLW  20
00354:  BNZ   0364
....................        {
....................           sequence = ubyte_lo_sq;
00356:  MOVFF  73,77
....................           T_timeout = 0x14; //200ms
0035A:  MOVLW  14
0035C:  MOVLB  5
0035E:  MOVWF  x69
....................        }
00360:  BRA    03B6
00362:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
00364:  MOVLW  01
00366:  SUBWF  x79,W
00368:  ADDLW  FA
0036A:  MOVWF  FE9
0036C:  CLRF   FEA
0036E:  BTFSC  FD8.0
00370:  INCF   FEA,F
00372:  MOVF   FEF,W
00374:  SUBLW  21
00376:  BNZ   0386
....................        {
....................           sequence = byte_count_sq ;
00378:  MOVFF  75,77
....................           T_timeout = 0x14; //200ms
0037C:  MOVLW  14
0037E:  MOVLB  5
00380:  MOVWF  x69
....................        }
00382:  BRA    03B6
00384:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////Write setting/////
00386:  MOVLW  01
00388:  SUBWF  x79,W
0038A:  ADDLW  FA
0038C:  MOVWF  FE9
0038E:  CLRF   FEA
00390:  BTFSC  FD8.0
00392:  INCF   FEA,F
00394:  MOVF   FEF,W
00396:  SUBLW  22
00398:  BNZ   03A8
....................        {
....................           sequence = byte_count_sq ;
0039A:  MOVFF  75,77
....................           T_timeout = 0x14; //200ms
0039E:  MOVLW  14
003A0:  MOVLB  5
003A2:  MOVWF  x69
....................        }
003A4:  BRA    03B6
003A6:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003A8:  CLRF   x79
....................           sequence = end_sq;
003AA:  MOVFF  6F,77
....................           T_timeout = 0x00; 
003AE:  MOVLB  5
003B0:  CLRF   x69
....................           output_bit(P485ctrl,0);
003B2:  BCF    F8A.3
003B4:  BCF    F93.3
....................        }
....................    }
003B6:  BRA    0510
003B8:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003BA:  MOVF   x75,W
003BC:  SUBWF  x77,W
003BE:  BNZ   03F4
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003C0:  MOVLW  FA
003C2:  ADDWF  x79,W
003C4:  MOVWF  FE9
003C6:  CLRF   FEA
003C8:  BTFSC  FD8.0
003CA:  INCF   FEA,F
003CC:  MOVFF  2E,FEF
....................       restart_wdt();
003D0:  CLRWDT
....................       RxD_DataLen ++ ;
003D2:  INCF   x79,F
....................       index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
003D4:  MOVLW  01
003D6:  SUBWF  x79,W
003D8:  ADDLW  FA
003DA:  MOVWF  FE9
003DC:  CLRF   FEA
003DE:  BTFSC  FD8.0
003E0:  INCF   FEA,F
003E2:  MOVFF  FEF,56A
....................       T_timeout = 0x14; //200ms
003E6:  MOVLW  14
003E8:  MOVLB  5
003EA:  MOVWF  x69
....................       sequence = data_sq ;
003EC:  MOVFF  76,77
....................    }
003F0:  BRA    0510
003F2:  MOVLB  0
....................    else if(sequence == data_sq)
003F4:  MOVF   x76,W
003F6:  SUBWF  x77,W
003F8:  BNZ   0422
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
003FA:  MOVLW  FA
003FC:  ADDWF  x79,W
003FE:  MOVWF  FE9
00400:  CLRF   FEA
00402:  BTFSC  FD8.0
00404:  INCF   FEA,F
00406:  MOVFF  2E,FEF
....................       restart_wdt();
0040A:  CLRWDT
....................       RxD_DataLen ++ ;
0040C:  INCF   x79,F
....................       index -- ;                     //Data Byte Count
0040E:  MOVLB  5
00410:  DECF   x6A,F
....................       if(index == 0x00)
00412:  MOVF   x6A,F
00414:  BNZ   041A
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
00416:  MOVFF  73,77
....................       }
....................       T_timeout = 0x14; //200ms
0041A:  MOVLW  14
0041C:  MOVWF  x69
....................    }
0041E:  BRA    0510
00420:  MOVLB  0
....................    else if(sequence == code_sq)
00422:  MOVF   x70,W
00424:  SUBWF  x77,W
00426:  BNZ   044A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
00428:  MOVLW  FA
0042A:  ADDWF  x79,W
0042C:  MOVWF  FE9
0042E:  CLRF   FEA
00430:  BTFSC  FD8.0
00432:  INCF   FEA,F
00434:  MOVFF  2E,FEF
....................       restart_wdt();
00438:  CLRWDT
....................       RxD_DataLen ++ ;
0043A:  INCF   x79,F
....................       sequence = start_addr_hi_sq;
0043C:  MOVFF  71,77
....................       T_timeout = 0x14; //200ms
00440:  MOVLW  14
00442:  MOVLB  5
00444:  MOVWF  x69
.................... 
....................    }
00446:  BRA    0510
00448:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
0044A:  MOVF   x71,W
0044C:  SUBWF  x77,W
0044E:  BNZ   0472
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
00450:  MOVLW  FA
00452:  ADDWF  x79,W
00454:  MOVWF  FE9
00456:  CLRF   FEA
00458:  BTFSC  FD8.0
0045A:  INCF   FEA,F
0045C:  MOVFF  2E,FEF
....................       restart_wdt();
00460:  CLRWDT
....................       RxD_DataLen ++ ;
00462:  INCF   x79,F
....................       sequence = start_addr_lo_sq;
00464:  MOVFF  72,77
....................       T_timeout = 0x14; //200ms
00468:  MOVLW  14
0046A:  MOVLB  5
0046C:  MOVWF  x69
....................    }
0046E:  BRA    0510
00470:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
00472:  MOVF   x72,W
00474:  SUBWF  x77,W
00476:  BNZ   049A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
00478:  MOVLW  FA
0047A:  ADDWF  x79,W
0047C:  MOVWF  FE9
0047E:  CLRF   FEA
00480:  BTFSC  FD8.0
00482:  INCF   FEA,F
00484:  MOVFF  2E,FEF
....................       restart_wdt();
00488:  CLRWDT
....................       RxD_DataLen ++ ;
0048A:  INCF   x79,F
....................       sequence = ubyte_hi_sq;
0048C:  MOVLW  15
0048E:  MOVWF  x77
....................       T_timeout = 0x14; //200ms
00490:  MOVLW  14
00492:  MOVLB  5
00494:  MOVWF  x69
....................    }
00496:  BRA    0510
00498:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
0049A:  MOVF   x77,W
0049C:  SUBLW  15
0049E:  BNZ   04C2
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
004A0:  MOVLW  FA
004A2:  ADDWF  x79,W
004A4:  MOVWF  FE9
004A6:  CLRF   FEA
004A8:  BTFSC  FD8.0
004AA:  INCF   FEA,F
004AC:  MOVFF  2E,FEF
....................       restart_wdt();
004B0:  CLRWDT
....................       RxD_DataLen ++ ;
004B2:  INCF   x79,F
....................       sequence = ubyte_lo_sq;
004B4:  MOVFF  73,77
....................       T_timeout = 0x14; //200ms
004B8:  MOVLW  14
004BA:  MOVLB  5
004BC:  MOVWF  x69
....................    }
004BE:  BRA    0510
004C0:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
004C2:  MOVF   x73,W
004C4:  SUBWF  x77,W
004C6:  BNZ   04EA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
004C8:  MOVLW  FA
004CA:  ADDWF  x79,W
004CC:  MOVWF  FE9
004CE:  CLRF   FEA
004D0:  BTFSC  FD8.0
004D2:  INCF   FEA,F
004D4:  MOVFF  2E,FEF
....................       restart_wdt();
004D8:  CLRWDT
....................       RxD_DataLen ++ ;
004DA:  INCF   x79,F
....................       sequence = crc_hi_sq;
004DC:  MOVFF  74,77
....................       T_timeout = 0x14; //200ms
004E0:  MOVLW  14
004E2:  MOVLB  5
004E4:  MOVWF  x69
....................    }
004E6:  BRA    0510
004E8:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
004EA:  MOVF   x74,W
004EC:  SUBWF  x77,W
004EE:  BNZ   0510
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
004F0:  MOVLW  FA
004F2:  ADDWF  x79,W
004F4:  MOVWF  FE9
004F6:  CLRF   FEA
004F8:  BTFSC  FD8.0
004FA:  INCF   FEA,F
004FC:  MOVFF  2E,FEF
....................       restart_wdt();
00500:  CLRWDT
....................       sequence = end_sq;
00502:  MOVFF  6F,77
....................       T_timeout = 0x00;
00506:  MOVLB  5
00508:  CLRF   x69
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
0050A:  BSF    30.5
....................       output_bit(P485ctrl,0);
0050C:  BCF    F8A.3
0050E:  BCF    F93.3
00510:  MOVLB  0
....................    }
00512:  GOTO   0520 (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
0238E:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
02390:  MOVLW  01
02392:  SUBWF  x79,W
02394:  MOVLB  7
02396:  MOVWF  x3A
02398:  CLRF   x3C
0239A:  MOVLW  FA
0239C:  MOVWF  x3B
0239E:  MOVFF  73A,73D
023A2:  MOVLB  0
023A4:  RCALL  1F20
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
023A6:  MOVLW  01
023A8:  SUBWF  x79,W
023AA:  ADDLW  FA
023AC:  MOVWF  FE9
023AE:  CLRF   FEA
023B0:  BTFSC  FD8.0
023B2:  INCF   FEA,F
023B4:  MOVF   FEF,W
023B6:  MOVLB  4
023B8:  SUBWF  xFB,W
023BA:  BTFSS  FD8.2
023BC:  GOTO   4476
023C0:  MOVLW  FA
023C2:  MOVLB  0
023C4:  ADDWF  x79,W
023C6:  MOVWF  FE9
023C8:  CLRF   FEA
023CA:  BTFSC  FD8.0
023CC:  INCF   FEA,F
023CE:  MOVF   FEF,W
023D0:  MOVLB  4
023D2:  SUBWF  xFA,W
023D4:  BTFSS  FD8.2
023D6:  GOTO   4476
....................    {
....................     
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
023DA:  MOVLB  0
023DC:  MOVF   xFA,W
023DE:  SUBLW  AA
023E0:  BTFSS  FD8.2
023E2:  BRA    269A
023E4:  MOVF   xFB,W
023E6:  SUBLW  20
023E8:  BTFSS  FD8.2
023EA:  BRA    269A
....................       {
....................          TxD_Buff[0] = Address ;         //Address
023EC:  MOVFF  78,7A
....................          TxD_Buff[1] = 0x20 ;            //function code
023F0:  MOVLW  20
023F2:  MOVWF  x7B
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
023F4:  MOVLW  1C
023F6:  MOVWF  x7C
....................          TxD_Buff[3] = InputType1_8 ;    //1
023F8:  MOVFF  3A,7D
....................          TxD_Buff[4] = InputType9_16 ;  //2
023FC:  MOVFF  3B,7E
....................          TxD_Buff[5] = InputType17_24 ;//3
02400:  MOVFF  3C,7F
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
02404:  MOVFF  3D,80
....................          TxD_Buff[7] = FaultType9_16 ; //5
02408:  MOVFF  3E,81
....................          TxD_Buff[8] = FaultType17_24 ;   //6
0240C:  MOVFF  3F,82
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
02410:  MOVFF  40,83
....................          TxD_Buff[10] = OutputType9_16 ;  //8
02414:  MOVFF  41,84
....................          TxD_Buff[11] = OutputType17_24 ; //9
02418:  MOVFF  42,85
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
0241C:  MOVFF  43,86
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
02420:  MOVFF  44,87
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
02424:  MOVFF  45,88
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
02428:  MOVFF  46,89
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
0242C:  MOVFF  47,8A
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
02430:  MOVFF  48,8B
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
02434:  MOVFF  FF2,73A
02438:  BCF    FF2.7
0243A:  CLRF   FAA
0243C:  MOVLW  10
0243E:  MOVWF  FA9
02440:  BCF    FA6.6
02442:  BCF    FA6.7
02444:  BSF    FA6.0
02446:  MOVF   FA8,W
02448:  MOVLB  7
0244A:  BTFSC  x3A.7
0244C:  BSF    FF2.7
0244E:  MOVLB  0
02450:  MOVWF  x8C
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
02452:  MOVFF  FF2,73A
02456:  BCF    FF2.7
02458:  CLRF   FAA
0245A:  MOVLW  11
0245C:  MOVWF  FA9
0245E:  BCF    FA6.6
02460:  BCF    FA6.7
02462:  BSF    FA6.0
02464:  MOVF   FA8,W
02466:  MOVLB  7
02468:  BTFSC  x3A.7
0246A:  BSF    FF2.7
0246C:  MOVLB  0
0246E:  MOVWF  x8D
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
02470:  MOVFF  FF2,73A
02474:  BCF    FF2.7
02476:  CLRF   FAA
02478:  MOVLW  12
0247A:  MOVWF  FA9
0247C:  BCF    FA6.6
0247E:  BCF    FA6.7
02480:  BSF    FA6.0
02482:  MOVF   FA8,W
02484:  MOVLB  7
02486:  BTFSC  x3A.7
02488:  BSF    FF2.7
0248A:  MOVLB  0
0248C:  MOVWF  x8E
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
0248E:  MOVFF  FF2,73A
02492:  BCF    FF2.7
02494:  CLRF   FAA
02496:  MOVLW  13
02498:  MOVWF  FA9
0249A:  BCF    FA6.6
0249C:  BCF    FA6.7
0249E:  BSF    FA6.0
024A0:  MOVF   FA8,W
024A2:  MOVLB  7
024A4:  BTFSC  x3A.7
024A6:  BSF    FF2.7
024A8:  MOVLB  0
024AA:  MOVWF  x8F
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
024AC:  MOVFF  FF2,73A
024B0:  BCF    FF2.7
024B2:  CLRF   FAA
024B4:  MOVLW  14
024B6:  MOVWF  FA9
024B8:  BCF    FA6.6
024BA:  BCF    FA6.7
024BC:  BSF    FA6.0
024BE:  MOVF   FA8,W
024C0:  MOVLB  7
024C2:  BTFSC  x3A.7
024C4:  BSF    FF2.7
024C6:  MOVLB  0
024C8:  MOVWF  x90
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
024CA:  MOVFF  FF2,73A
024CE:  BCF    FF2.7
024D0:  CLRF   FAA
024D2:  MOVLW  15
024D4:  MOVWF  FA9
024D6:  BCF    FA6.6
024D8:  BCF    FA6.7
024DA:  BSF    FA6.0
024DC:  MOVF   FA8,W
024DE:  MOVLB  7
024E0:  BTFSC  x3A.7
024E2:  BSF    FF2.7
024E4:  MOVLB  0
024E6:  MOVWF  x91
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
024E8:  MOVFF  FF2,73A
024EC:  BCF    FF2.7
024EE:  CLRF   FAA
024F0:  MOVLW  16
024F2:  MOVWF  FA9
024F4:  BCF    FA6.6
024F6:  BCF    FA6.7
024F8:  BSF    FA6.0
024FA:  MOVF   FA8,W
024FC:  MOVLB  7
024FE:  BTFSC  x3A.7
02500:  BSF    FF2.7
02502:  MOVLB  0
02504:  MOVWF  x92
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
02506:  MOVFF  FF2,73A
0250A:  BCF    FF2.7
0250C:  CLRF   FAA
0250E:  MOVLW  17
02510:  MOVWF  FA9
02512:  BCF    FA6.6
02514:  BCF    FA6.7
02516:  BSF    FA6.0
02518:  MOVF   FA8,W
0251A:  MOVLB  7
0251C:  BTFSC  x3A.7
0251E:  BSF    FF2.7
02520:  MOVLB  0
02522:  MOVWF  x93
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
02524:  MOVFF  6A,94
....................          TxD_Buff[27] = AutoAckTime ;        //25
02528:  MOVFF  6B,95
....................          TxD_Buff[28] = FlashingRate ;       //26
0252C:  MOVFF  6C,96
....................          TxD_Buff[29] = NoOfPoint ;          //27
02530:  MOVFF  6D,97
....................          TxD_Buff[30] = FaultDelayTime ;    //28
02534:  CLRF   x98
....................          TxD_Buff[31] = Address ;            //29
02536:  MOVFF  78,99
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
0253A:  MOVFF  702,9A
....................          TxD_Buff[33] = FaultDelayTime[2] ;
0253E:  MOVFF  704,9B
....................          TxD_Buff[34] = FaultDelayTime[3] ;
02542:  MOVFF  706,9C
....................          TxD_Buff[35] = FaultDelayTime[4] ;
02546:  MOVFF  708,9D
....................          TxD_Buff[36] = FaultDelayTime[5] ;
0254A:  MOVFF  70A,9E
....................          TxD_Buff[37] = FaultDelayTime[6] ;
0254E:  MOVFF  70C,9F
....................          TxD_Buff[38] = FaultDelayTime[7] ;
02552:  MOVFF  70E,A0
....................          TxD_Buff[39] = FaultDelayTime[8] ;
02556:  MOVFF  710,A1
....................          TxD_Buff[40] = FaultDelayTime[9] ;
0255A:  MOVFF  712,A2
....................          TxD_Buff[41] = FaultDelayTime[10] ;
0255E:  MOVFF  714,A3
....................          TxD_Buff[42] = FaultDelayTime[11] ;
02562:  MOVFF  716,A4
....................          TxD_Buff[43] = FaultDelayTime[12] ;
02566:  MOVFF  718,A5
....................          TxD_Buff[44] = FaultDelayTime[13] ;
0256A:  MOVFF  71A,A6
....................          TxD_Buff[45] = FaultDelayTime[14] ;
0256E:  MOVFF  71C,A7
....................          TxD_Buff[46] = FaultDelayTime[15] ;
02572:  MOVFF  71E,A8
....................          TxD_Buff[47] = FaultDelayTime[16] ;
02576:  MOVFF  720,A9
....................          TxD_Buff[48] = FaultDelayTime[17] ;
0257A:  MOVFF  722,AA
....................          TxD_Buff[49] = FaultDelayTime[18] ;
0257E:  MOVFF  724,AB
....................          TxD_Buff[50] = FaultDelayTime[19] ;
02582:  MOVFF  726,AC
....................          TxD_Buff[51] = FaultDelayTime[20] ;
02586:  MOVFF  728,AD
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
0258A:  MOVLB  7
0258C:  CLRF   x3C
0258E:  MOVLW  7A
02590:  MOVWF  x3B
02592:  MOVLW  34
02594:  MOVWF  x3D
02596:  MOVLB  0
02598:  RCALL  1F20
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
0259A:  MOVFF  4FB,AE
....................          TxD_Buff[53] = CRC_Lo ;
0259E:  MOVFF  4FA,AF
.................... 
....................          output_bit(P485ctrl,1);
025A2:  BSF    F8A.3
025A4:  BCF    F93.3
....................          delay_ms(10);
025A6:  MOVLW  0A
025A8:  MOVLB  7
025AA:  MOVWF  x3A
025AC:  MOVLB  0
025AE:  CALL   0750
.................... 
....................          putc(Txd_Buff[0]);
025B2:  MOVF   x7A,W
025B4:  RCALL  1F76
....................          putc(Txd_Buff[1]);
025B6:  MOVF   x7B,W
025B8:  RCALL  1F76
....................          putc(Txd_Buff[2]);
025BA:  MOVF   x7C,W
025BC:  RCALL  1F76
....................          putc(Txd_Buff[3]);
025BE:  MOVF   x7D,W
025C0:  RCALL  1F76
....................          putc(Txd_Buff[4]);
025C2:  MOVF   x7E,W
025C4:  RCALL  1F76
....................          putc(Txd_Buff[5]);
025C6:  MOVF   x7F,W
025C8:  RCALL  1F76
....................          putc(Txd_Buff[6]);
025CA:  MOVF   x80,W
025CC:  RCALL  1F76
....................          putc(Txd_Buff[7]);
025CE:  MOVF   x81,W
025D0:  RCALL  1F76
....................          putc(Txd_Buff[8]);
025D2:  MOVF   x82,W
025D4:  RCALL  1F76
....................          putc(Txd_Buff[9]);
025D6:  MOVF   x83,W
025D8:  RCALL  1F76
....................          putc(Txd_Buff[10]);
025DA:  MOVF   x84,W
025DC:  RCALL  1F76
....................          putc(Txd_Buff[11]);
025DE:  MOVF   x85,W
025E0:  RCALL  1F76
....................          putc(Txd_Buff[12]);
025E2:  MOVF   x86,W
025E4:  RCALL  1F76
....................          putc(Txd_Buff[13]);
025E6:  MOVF   x87,W
025E8:  RCALL  1F76
....................          putc(Txd_Buff[14]);
025EA:  MOVF   x88,W
025EC:  RCALL  1F76
....................          putc(Txd_Buff[15]);
025EE:  MOVF   x89,W
025F0:  RCALL  1F76
....................          putc(Txd_Buff[16]);
025F2:  MOVF   x8A,W
025F4:  RCALL  1F76
....................          putc(Txd_Buff[17]);
025F6:  MOVF   x8B,W
025F8:  RCALL  1F76
....................          putc(Txd_Buff[18]);
025FA:  MOVF   x8C,W
025FC:  RCALL  1F76
....................          putc(Txd_Buff[19]);
025FE:  MOVF   x8D,W
02600:  RCALL  1F76
....................          putc(Txd_Buff[20]);
02602:  MOVF   x8E,W
02604:  RCALL  1F76
....................          putc(Txd_Buff[21]);
02606:  MOVF   x8F,W
02608:  RCALL  1F76
....................          putc(Txd_Buff[22]);
0260A:  MOVF   x90,W
0260C:  RCALL  1F76
....................          putc(Txd_Buff[23]);
0260E:  MOVF   x91,W
02610:  RCALL  1F76
....................          putc(Txd_Buff[24]);
02612:  MOVF   x92,W
02614:  RCALL  1F76
....................          putc(Txd_Buff[25]);
02616:  MOVF   x93,W
02618:  RCALL  1F76
....................          putc(Txd_Buff[26]);
0261A:  MOVF   x94,W
0261C:  RCALL  1F76
....................          putc(Txd_Buff[27]);
0261E:  MOVF   x95,W
02620:  RCALL  1F76
....................          putc(Txd_Buff[28]);
02622:  MOVF   x96,W
02624:  RCALL  1F76
....................          putc(Txd_Buff[29]);
02626:  MOVF   x97,W
02628:  RCALL  1F76
....................          putc(Txd_Buff[30]);
0262A:  MOVF   x98,W
0262C:  RCALL  1F76
....................          putc(Txd_Buff[31]);
0262E:  MOVF   x99,W
02630:  RCALL  1F76
....................          
....................          putc(Txd_Buff[32]);
02632:  MOVF   x9A,W
02634:  RCALL  1F76
....................          putc(Txd_Buff[33]);
02636:  MOVF   x9B,W
02638:  RCALL  1F76
....................          putc(Txd_Buff[34]);
0263A:  MOVF   x9C,W
0263C:  RCALL  1F76
....................          putc(Txd_Buff[35]);
0263E:  MOVF   x9D,W
02640:  RCALL  1F76
....................          putc(Txd_Buff[36]);
02642:  MOVF   x9E,W
02644:  RCALL  1F76
....................          putc(Txd_Buff[37]);
02646:  MOVF   x9F,W
02648:  RCALL  1F76
....................          putc(Txd_Buff[38]);
0264A:  MOVF   xA0,W
0264C:  RCALL  1F76
....................          putc(Txd_Buff[39]);
0264E:  MOVF   xA1,W
02650:  RCALL  1F76
....................          putc(Txd_Buff[40]);
02652:  MOVF   xA2,W
02654:  RCALL  1F76
....................          putc(Txd_Buff[41]);
02656:  MOVF   xA3,W
02658:  RCALL  1F76
....................          
....................          putc(Txd_Buff[42]);
0265A:  MOVF   xA4,W
0265C:  RCALL  1F76
....................          putc(Txd_Buff[43]);
0265E:  MOVF   xA5,W
02660:  RCALL  1F76
....................          putc(Txd_Buff[44]);
02662:  MOVF   xA6,W
02664:  RCALL  1F76
....................          putc(Txd_Buff[45]);
02666:  MOVF   xA7,W
02668:  RCALL  1F76
....................          putc(Txd_Buff[46]);
0266A:  MOVF   xA8,W
0266C:  RCALL  1F76
....................          putc(Txd_Buff[47]);
0266E:  MOVF   xA9,W
02670:  RCALL  1F76
....................          putc(Txd_Buff[48]);
02672:  MOVF   xAA,W
02674:  RCALL  1F76
....................          putc(Txd_Buff[49]);
02676:  MOVF   xAB,W
02678:  RCALL  1F76
....................          putc(Txd_Buff[50]);
0267A:  MOVF   xAC,W
0267C:  RCALL  1F76
....................          putc(Txd_Buff[51]);
0267E:  MOVF   xAD,W
02680:  RCALL  1F76
....................          
....................          putc(Txd_Buff[52]);
02682:  MOVF   xAE,W
02684:  RCALL  1F76
....................          putc(Txd_Buff[53]);
02686:  MOVF   xAF,W
02688:  RCALL  1F76
....................        
....................          delay_ms(3);
0268A:  MOVLW  03
0268C:  MOVLB  7
0268E:  MOVWF  x3A
02690:  MOVLB  0
02692:  CALL   0750
....................          output_bit(P485ctrl,0);
02696:  BCF    F8A.3
02698:  BCF    F93.3
....................           
....................       }
....................    
.................... 
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
0269A:  MOVF   x78,W
0269C:  SUBWF  xFA,W
0269E:  BTFSS  FD8.2
026A0:  GOTO   446C
....................       {
....................       
....................       if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
026A4:  DECFSZ xFB,W
026A6:  BRA    2AFA
....................       {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
026A8:  MOVLB  4
026AA:  CLRF   xFF
026AC:  MOVFF  FC,4FE
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
026B0:  MOVFF  4FE,4FF
026B4:  MOVLB  7
026B6:  CLRF   x3A
026B8:  MOVF   x3A,W
026BA:  MOVLB  0
026BC:  IORWF  xFD,W
026BE:  MOVLB  4
026C0:  MOVWF  xFE
026C2:  MOVLB  4
....................             No_PointCount = RxD_Buff[4] ;
026C4:  MOVLB  5
026C6:  CLRF   x01
026C8:  MOVFF  FE,500
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
026CC:  MOVFF  500,501
026D0:  MOVLB  7
026D2:  CLRF   x3A
026D4:  MOVF   x3A,W
026D6:  MOVLB  0
026D8:  IORWF  xFF,W
026DA:  MOVLB  5
026DC:  MOVWF  x00
026DE:  MOVLB  5
.................... 
....................             if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
026E0:  MOVLB  4
026E2:  MOVF   xFF,F
026E4:  BTFSS  FD8.2
026E6:  BRA    2A8C
026E8:  MOVF   xFE,W
026EA:  SUBLW  0F
026EC:  BTFSS  FD8.0
026EE:  BRA    2A8C
026F0:  MOVLB  5
026F2:  MOVF   x00,W
026F4:  MOVLB  4
026F6:  ADDWF  xFE,W
026F8:  MOVLB  7
026FA:  MOVWF  x3A
026FC:  MOVLB  5
026FE:  MOVF   x01,W
02700:  MOVLB  4
02702:  ADDWFC xFF,W
02704:  MOVLB  7
02706:  MOVWF  x3B
02708:  MOVF   x3B,F
0270A:  BTFSC  FD8.2
0270C:  BRA    2712
0270E:  MOVLB  4
02710:  BRA    2A8C
02712:  MOVF   x3A,W
02714:  SUBLW  10
02716:  BTFSC  FD8.0
02718:  BRA    271E
0271A:  MOVLB  4
0271C:  BRA    2A8C
....................             {
....................                if(No_PointCount < 9) Data_ByteCount = 0x01 ;
0271E:  MOVLB  5
02720:  MOVF   x01,F
02722:  BNZ   2730
02724:  MOVF   x00,W
02726:  SUBLW  08
02728:  BNC   2730
0272A:  MOVLW  01
0272C:  MOVWF  x02
0272E:  BRA    2754
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
02730:  MOVF   x01,F
02732:  BNZ   2740
02734:  MOVF   x00,W
02736:  SUBLW  10
02738:  BNC   2740
0273A:  MOVLW  02
0273C:  MOVWF  x02
0273E:  BRA    2754
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
02740:  MOVF   x01,F
02742:  BNZ   2750
02744:  MOVF   x00,W
02746:  SUBLW  18
02748:  BNC   2750
0274A:  MOVLW  03
0274C:  MOVWF  x02
0274E:  BRA    2754
....................                else   Data_ByteCount = 0x01 ; //----Jack
02750:  MOVLW  01
02752:  MOVWF  x02
.................... 
....................                if(Data_ByteCount == 0x01)
02754:  DECFSZ x02,W
02756:  BRA    28B4
....................                {
.................... 
....................                   if(Start_Address < 0x09)
02758:  MOVLB  4
0275A:  MOVF   xFF,F
0275C:  BNZ   2782
0275E:  MOVF   xFE,W
02760:  SUBLW  08
02762:  BNC   2782
....................                   {
....................                      //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                       Data_Buff[0] = Input1_8 >> Start_Address ;
02764:  MOVFF  49,503
02768:  MOVF   xFE,W
0276A:  MOVWF  01
0276C:  BZ    2780
0276E:  BCF    FD8.0
02770:  MOVLB  5
02772:  RRCF   x03,F
02774:  DECFSZ 01,F
02776:  BRA    277A
02778:  BRA    277E
0277A:  MOVLB  4
0277C:  BRA    276E
0277E:  MOVLB  4
....................                       //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                       //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                   }
02780:  BRA    27C0
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
02782:  MOVF   xFF,F
02784:  BNZ   278C
02786:  MOVF   xFE,W
02788:  SUBLW  08
0278A:  BC    27C0
0278C:  MOVF   xFF,F
0278E:  BNZ   27C0
02790:  MOVF   xFE,W
02792:  SUBLW  0F
02794:  BNC   27C0
....................                   {
....................                      //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
02796:  MOVLW  08
02798:  SUBWF  xFE,W
0279A:  MOVWF  00
0279C:  MOVLW  00
0279E:  SUBWFB xFF,W
027A0:  MOVWF  03
027A2:  MOVFF  00,01
027A6:  MOVFF  4A,503
027AA:  MOVF   01,F
027AC:  BZ    27C0
027AE:  BCF    FD8.0
027B0:  MOVLB  5
027B2:  RRCF   x03,F
027B4:  DECFSZ 01,F
027B6:  BRA    27BA
027B8:  BRA    27BE
027BA:  MOVLB  4
027BC:  BRA    27AE
027BE:  MOVLB  4
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
027C0:  MOVLB  5
027C2:  MOVF   x00,W
027C4:  SUBLW  08
027C6:  BNZ   27CE
027C8:  MOVF   x01,F
027CA:  BNZ   27CE
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
027CC:  BRA    2838
....................                   else if(No_PointCount == 0x07)
027CE:  MOVF   x00,W
027D0:  SUBLW  07
027D2:  BNZ   27DC
027D4:  MOVF   x01,F
027D6:  BNZ   27DC
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
027D8:  BCF    x03.7
....................                   }
027DA:  BRA    2838
....................                   else if(No_PointCount == 0x06)
027DC:  MOVF   x00,W
027DE:  SUBLW  06
027E0:  BNZ   27EC
027E2:  MOVF   x01,F
027E4:  BNZ   27EC
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
027E6:  MOVLW  3F
027E8:  ANDWF  x03,F
....................                   }
027EA:  BRA    2838
....................                   else if(No_PointCount == 0x05)
027EC:  MOVF   x00,W
027EE:  SUBLW  05
027F0:  BNZ   27FC
027F2:  MOVF   x01,F
027F4:  BNZ   27FC
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
027F6:  MOVLW  1F
027F8:  ANDWF  x03,F
....................                   }
027FA:  BRA    2838
....................                   else if(No_PointCount == 0x04)
027FC:  MOVF   x00,W
027FE:  SUBLW  04
02800:  BNZ   280C
02802:  MOVF   x01,F
02804:  BNZ   280C
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
02806:  MOVLW  0F
02808:  ANDWF  x03,F
....................                   }
0280A:  BRA    2838
....................                   else if(No_PointCount == 0x03)
0280C:  MOVF   x00,W
0280E:  SUBLW  03
02810:  BNZ   281C
02812:  MOVF   x01,F
02814:  BNZ   281C
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
02816:  MOVLW  07
02818:  ANDWF  x03,F
....................                   }
0281A:  BRA    2838
....................                   else if(No_PointCount == 0x02)
0281C:  MOVF   x00,W
0281E:  SUBLW  02
02820:  BNZ   282C
02822:  MOVF   x01,F
02824:  BNZ   282C
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
02826:  MOVLW  03
02828:  ANDWF  x03,F
....................                   }
0282A:  BRA    2838
....................                   else if(No_PointCount == 0x01)
0282C:  DECFSZ x00,W
0282E:  BRA    2838
02830:  MOVF   x01,F
02832:  BNZ   2838
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
02834:  MOVLW  01
02836:  ANDWF  x03,F
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02838:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
0283C:  MOVLW  01
0283E:  MOVLB  0
02840:  MOVWF  x7B
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02842:  MOVFF  502,7C
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
02846:  MOVFF  503,7D
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
0284A:  MOVLB  7
0284C:  CLRF   x3C
0284E:  MOVLW  7A
02850:  MOVWF  x3B
02852:  MOVLW  04
02854:  MOVWF  x3D
02856:  MOVLB  0
02858:  CALL   1F20
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
0285C:  MOVFF  4FB,7E
....................                   TxD_Buff[5] = CRC_Lo ;
02860:  MOVFF  4FA,7F
.................... 
.................... 
....................                   output_bit(P485ctrl,1);
02864:  BSF    F8A.3
02866:  BCF    F93.3
....................                   restart_wdt();
02868:  CLRWDT
....................                   delay_ms(4);
0286A:  MOVLW  04
0286C:  MOVLB  7
0286E:  MOVWF  x3A
02870:  MOVLB  0
02872:  CALL   0750
....................                   restart_wdt();
02876:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02878:  MOVF   x7A,W
0287A:  CALL   1F76
....................                   putc(TxD_Buff[1]) ;               //Function Code
0287E:  MOVF   x7B,W
02880:  CALL   1F76
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02884:  MOVF   x7C,W
02886:  CALL   1F76
....................                   putc(TxD_Buff[3]) ;
0288A:  MOVF   x7D,W
0288C:  CALL   1F76
....................                   putc(TxD_Buff[4]) ;
02890:  MOVF   x7E,W
02892:  CALL   1F76
....................                   putc(TxD_Buff[5]) ;
02896:  MOVF   x7F,W
02898:  CALL   1F76
.................... 
....................                
....................                   restart_wdt();
0289C:  CLRWDT
....................                   delay_ms(3);
0289E:  MOVLW  03
028A0:  MOVLB  7
028A2:  MOVWF  x3A
028A4:  MOVLB  0
028A6:  CALL   0750
....................                   restart_wdt();
028AA:  CLRWDT
....................                   output_bit(P485ctrl,0);
028AC:  BCF    F8A.3
028AE:  BCF    F93.3
....................               
....................                }
028B0:  BRA    2A86
028B2:  MOVLB  5
....................                else if(Data_ByteCount == 0x02)
028B4:  MOVF   x02,W
028B6:  SUBLW  02
028B8:  BTFSS  FD8.2
028BA:  BRA    2A88
....................                {
.................... 
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
028BC:  MOVFF  49,503
028C0:  MOVLB  4
028C2:  MOVF   xFE,W
028C4:  MOVWF  01
028C6:  BZ    28DA
028C8:  BCF    FD8.0
028CA:  MOVLB  5
028CC:  RRCF   x03,F
028CE:  DECFSZ 01,F
028D0:  BRA    28D4
028D2:  BRA    28D8
028D4:  MOVLB  4
028D6:  BRA    28C8
028D8:  MOVLB  4
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
028DA:  MOVFF  4A,504
.................... 
.................... 
....................                   if((No_PointCount - 0x07) == 0x08)
028DE:  MOVLW  07
028E0:  MOVLB  5
028E2:  SUBWF  x00,W
028E4:  MOVLB  7
028E6:  MOVWF  x3A
028E8:  MOVLW  00
028EA:  MOVLB  5
028EC:  SUBWFB x01,W
028EE:  MOVLB  7
028F0:  MOVWF  x3B
028F2:  MOVF   x3A,W
028F4:  SUBLW  08
028F6:  BNZ   28FE
028F8:  MOVF   x3B,F
028FA:  BNZ   28FE
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
028FC:  BRA    2A04
....................                   else if((No_PointCount - 0x07) == 0x07)
028FE:  MOVLW  07
02900:  MOVLB  5
02902:  SUBWF  x00,W
02904:  MOVLB  7
02906:  MOVWF  x3A
02908:  MOVLW  00
0290A:  MOVLB  5
0290C:  SUBWFB x01,W
0290E:  MOVLB  7
02910:  MOVWF  x3B
02912:  MOVF   x3A,W
02914:  SUBLW  07
02916:  BNZ   2922
02918:  MOVF   x3B,F
0291A:  BNZ   2922
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
0291C:  MOVLB  5
0291E:  BCF    x04.7
....................                   }
02920:  BRA    2A02
....................                   else if((No_PointCount - 0x07) == 0x06)
02922:  MOVLW  07
02924:  MOVLB  5
02926:  SUBWF  x00,W
02928:  MOVLB  7
0292A:  MOVWF  x3A
0292C:  MOVLW  00
0292E:  MOVLB  5
02930:  SUBWFB x01,W
02932:  MOVLB  7
02934:  MOVWF  x3B
02936:  MOVF   x3A,W
02938:  SUBLW  06
0293A:  BNZ   2948
0293C:  MOVF   x3B,F
0293E:  BNZ   2948
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
02940:  MOVLW  3F
02942:  MOVLB  5
02944:  ANDWF  x04,F
....................                   }
02946:  BRA    2A02
....................                   else if((No_PointCount - 0x07) == 0x05)
02948:  MOVLW  07
0294A:  MOVLB  5
0294C:  SUBWF  x00,W
0294E:  MOVLB  7
02950:  MOVWF  x3A
02952:  MOVLW  00
02954:  MOVLB  5
02956:  SUBWFB x01,W
02958:  MOVLB  7
0295A:  MOVWF  x3B
0295C:  MOVF   x3A,W
0295E:  SUBLW  05
02960:  BNZ   296E
02962:  MOVF   x3B,F
02964:  BNZ   296E
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
02966:  MOVLW  1F
02968:  MOVLB  5
0296A:  ANDWF  x04,F
....................                   }
0296C:  BRA    2A02
....................                   else if((No_PointCount - 0x07) == 0x04)
0296E:  MOVLW  07
02970:  MOVLB  5
02972:  SUBWF  x00,W
02974:  MOVLB  7
02976:  MOVWF  x3A
02978:  MOVLW  00
0297A:  MOVLB  5
0297C:  SUBWFB x01,W
0297E:  MOVLB  7
02980:  MOVWF  x3B
02982:  MOVF   x3A,W
02984:  SUBLW  04
02986:  BNZ   2994
02988:  MOVF   x3B,F
0298A:  BNZ   2994
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
0298C:  MOVLW  0F
0298E:  MOVLB  5
02990:  ANDWF  x04,F
....................                   }
02992:  BRA    2A02
....................                   else if((No_PointCount - 0x07) == 0x03)
02994:  MOVLW  07
02996:  MOVLB  5
02998:  SUBWF  x00,W
0299A:  MOVLB  7
0299C:  MOVWF  x3A
0299E:  MOVLW  00
029A0:  MOVLB  5
029A2:  SUBWFB x01,W
029A4:  MOVLB  7
029A6:  MOVWF  x3B
029A8:  MOVF   x3A,W
029AA:  SUBLW  03
029AC:  BNZ   29BA
029AE:  MOVF   x3B,F
029B0:  BNZ   29BA
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
029B2:  MOVLW  07
029B4:  MOVLB  5
029B6:  ANDWF  x04,F
....................                   }
029B8:  BRA    2A02
....................                   else if((No_PointCount - 0x07) == 0x02)
029BA:  MOVLW  07
029BC:  MOVLB  5
029BE:  SUBWF  x00,W
029C0:  MOVLB  7
029C2:  MOVWF  x3A
029C4:  MOVLW  00
029C6:  MOVLB  5
029C8:  SUBWFB x01,W
029CA:  MOVLB  7
029CC:  MOVWF  x3B
029CE:  MOVF   x3A,W
029D0:  SUBLW  02
029D2:  BNZ   29E0
029D4:  MOVF   x3B,F
029D6:  BNZ   29E0
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
029D8:  MOVLW  03
029DA:  MOVLB  5
029DC:  ANDWF  x04,F
....................                   }
029DE:  BRA    2A02
....................                   else if((No_PointCount - 0x07) == 0x01)
029E0:  MOVLW  07
029E2:  MOVLB  5
029E4:  SUBWF  x00,W
029E6:  MOVLB  7
029E8:  MOVWF  x3A
029EA:  MOVLW  00
029EC:  MOVLB  5
029EE:  SUBWFB x01,W
029F0:  MOVLB  7
029F2:  MOVWF  x3B
029F4:  DECFSZ x3A,W
029F6:  BRA    2A04
029F8:  MOVF   x3B,F
029FA:  BNZ   2A04
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
029FC:  MOVLW  01
029FE:  MOVLB  5
02A00:  ANDWF  x04,F
02A02:  MOVLB  7
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02A04:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
02A08:  MOVLW  01
02A0A:  MOVLB  0
02A0C:  MOVWF  x7B
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02A0E:  MOVFF  502,7C
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02A12:  MOVFF  503,7D
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02A16:  MOVFF  504,7E
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
02A1A:  MOVLB  7
02A1C:  CLRF   x3C
02A1E:  MOVLW  7A
02A20:  MOVWF  x3B
02A22:  MOVLW  05
02A24:  MOVWF  x3D
02A26:  MOVLB  0
02A28:  CALL   1F20
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
02A2C:  MOVFF  4FB,7F
....................                   TxD_Buff[6] = CRC_Lo ;
02A30:  MOVFF  4FA,80
.................... 
.................... 
....................                   output_bit(P485ctrl,1);
02A34:  BSF    F8A.3
02A36:  BCF    F93.3
....................                   restart_wdt();
02A38:  CLRWDT
....................                   delay_ms(4);
02A3A:  MOVLW  04
02A3C:  MOVLB  7
02A3E:  MOVWF  x3A
02A40:  MOVLB  0
02A42:  CALL   0750
....................                   restart_wdt();
02A46:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02A48:  MOVF   x7A,W
02A4A:  CALL   1F76
....................                   putc(TxD_Buff[1]) ;               //Function Code
02A4E:  MOVF   x7B,W
02A50:  CALL   1F76
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02A54:  MOVF   x7C,W
02A56:  CALL   1F76
....................                   putc(TxD_Buff[3]) ;
02A5A:  MOVF   x7D,W
02A5C:  CALL   1F76
....................                   putc(TxD_Buff[4]) ;
02A60:  MOVF   x7E,W
02A62:  CALL   1F76
....................                   putc(TxD_Buff[5]) ;
02A66:  MOVF   x7F,W
02A68:  CALL   1F76
....................                   putc(TxD_Buff[6]) ;
02A6C:  MOVF   x80,W
02A6E:  CALL   1F76
.................... 
.................... 
....................                   restart_wdt();
02A72:  CLRWDT
....................                   delay_ms(3);
02A74:  MOVLW  03
02A76:  MOVLB  7
02A78:  MOVWF  x3A
02A7A:  MOVLB  0
02A7C:  CALL   0750
....................                   restart_wdt();
02A80:  CLRWDT
....................                   output_bit(P485ctrl,0);
02A82:  BCF    F8A.3
02A84:  BCF    F93.3
02A86:  MOVLB  5
....................               
....................                }
....................             }
02A88:  BRA    2AFC
02A8A:  MOVLB  4
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
02A8C:  MOVFF  78,7A
....................                TxD_Buff[1] = 0x81 ;         //Function Code
02A90:  MOVLW  81
02A92:  MOVLB  0
02A94:  MOVWF  x7B
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
02A96:  MOVLW  02
02A98:  MOVWF  x7C
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
02A9A:  MOVLB  7
02A9C:  CLRF   x3C
02A9E:  MOVLW  7A
02AA0:  MOVWF  x3B
02AA2:  MOVLW  03
02AA4:  MOVWF  x3D
02AA6:  MOVLB  0
02AA8:  CALL   1F20
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
02AAC:  MOVFF  4FB,7D
....................                TxD_Buff[4] = CRC_Lo ;
02AB0:  MOVFF  4FA,7E
.................... 
....................                output_bit(P485ctrl,1);
02AB4:  BSF    F8A.3
02AB6:  BCF    F93.3
....................                restart_wdt();
02AB8:  CLRWDT
....................                delay_ms(4);
02ABA:  MOVLW  04
02ABC:  MOVLB  7
02ABE:  MOVWF  x3A
02AC0:  MOVLB  0
02AC2:  CALL   0750
....................                restart_wdt();
02AC6:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
02AC8:  MOVF   x7A,W
02ACA:  CALL   1F76
....................                putc(TxD_Buff[1]) ;               //Function Code
02ACE:  MOVF   x7B,W
02AD0:  CALL   1F76
....................                putc(TxD_Buff[2]) ;               //Byte Count
02AD4:  MOVF   x7C,W
02AD6:  CALL   1F76
....................                putc(TxD_Buff[3]) ;
02ADA:  MOVF   x7D,W
02ADC:  CALL   1F76
....................                putc(TxD_Buff[4]) ;
02AE0:  MOVF   x7E,W
02AE2:  CALL   1F76
.................... 
.................... 
....................                restart_wdt();
02AE6:  CLRWDT
....................                delay_ms(3);
02AE8:  MOVLW  03
02AEA:  MOVLB  7
02AEC:  MOVWF  x3A
02AEE:  MOVLB  0
02AF0:  CALL   0750
....................                restart_wdt();
02AF4:  CLRWDT
....................                output_bit(P485ctrl,0);
02AF6:  BCF    F8A.3
02AF8:  BCF    F93.3
02AFA:  MOVLB  5
....................                
....................             }
....................          }
.................... ////\*/
.................... 
.................... 
....................                  /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
02AFC:  MOVLB  0
02AFE:  MOVF   xFB,W
02B00:  SUBLW  07
02B02:  BTFSS  FD8.2
02B04:  BRA    2C64
....................       {
....................          alarmtosend();
02B06:  GOTO   1F7E
....................          
....................          disable_interrupts(INT_TIMER2);
02B0A:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
02B0C:  MOVFF  1E,503
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
02B10:  MOVFF  1F,504
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
02B14:  MOVFF  20,505
....................             Data_Buff[3] = Input25_32_Send ;
02B18:  MOVFF  21,506
....................             Data_Buff[4] = Input33_40_Send ;
02B1C:  MOVFF  22,507
....................             Data_Buff[5] = Input41_48_Send ;
02B20:  MOVFF  23,508
....................             Data_Buff[6] = Input49_56_Send ;
02B24:  MOVFF  24,509
....................             Data_Buff[7] = Input57_64_Send ;
02B28:  MOVFF  25,50A
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
02B2C:  MOVFF  26,50B
....................             Data_Buff[9] = Ack9_16_Send ;
02B30:  MOVFF  27,50C
....................             Data_Buff[10] = Ack17_24_Send ;
02B34:  MOVFF  28,50D
....................             Data_Buff[11] = Ack25_32_Send ;
02B38:  MOVFF  29,50E
....................             Data_Buff[12] = Ack33_40_Send ;
02B3C:  MOVFF  2A,50F
....................             Data_Buff[13] = Ack41_48_Send ;
02B40:  MOVFF  2B,510
....................             Data_Buff[14] = Ack49_56_Send ;
02B44:  MOVFF  2C,511
....................             Data_Buff[15] = Ack57_64_Send ;
02B48:  MOVFF  2D,512
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
02B4C:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x07 ;         //Function Code
02B50:  MOVLW  07
02B52:  MOVWF  x7B
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
02B54:  MOVLW  10
02B56:  MOVLB  5
02B58:  MOVWF  x02
02B5A:  MOVFF  502,7C
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02B5E:  MOVFF  503,7D
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02B62:  MOVFF  504,7E
....................             TxD_Buff[5] = Data_Buff[2] ;  
02B66:  MOVFF  505,7F
....................             TxD_Buff[6] = Data_Buff[3] ;
02B6A:  MOVFF  506,80
....................             TxD_Buff[7] = Data_Buff[4] ;
02B6E:  MOVFF  507,81
....................             TxD_Buff[8] = Data_Buff[5] ;
02B72:  MOVFF  508,82
....................             TxD_Buff[9] = Data_Buff[6] ;
02B76:  MOVFF  509,83
....................             TxD_Buff[10] = Data_Buff[7] ;
02B7A:  MOVFF  50A,84
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
02B7E:  MOVFF  50B,85
....................            TxD_Buff[12] = Data_Buff[9] ;
02B82:  MOVFF  50C,86
....................            TxD_Buff[13] = Data_Buff[10] ;
02B86:  MOVFF  50D,87
....................            TxD_Buff[14] = Data_Buff[11] ;
02B8A:  MOVFF  50E,88
....................            TxD_Buff[15] = Data_Buff[12] ;
02B8E:  MOVFF  50F,89
....................            TxD_Buff[16] = Data_Buff[13] ;
02B92:  MOVFF  510,8A
....................            TxD_Buff[17] = Data_Buff[14] ;
02B96:  MOVFF  511,8B
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
02B9A:  MOVFF  512,8C
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
02B9E:  MOVLB  7
02BA0:  CLRF   x3C
02BA2:  MOVLW  7A
02BA4:  MOVWF  x3B
02BA6:  MOVLW  13
02BA8:  MOVWF  x3D
02BAA:  MOVLB  0
02BAC:  CALL   1F20
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
02BB0:  MOVFF  4FB,8D
....................           TxD_Buff[20] = CRC_Lo ;
02BB4:  MOVFF  4FA,8E
.................... 
....................         
....................          output_bit(P485ctrl,1);
02BB8:  BSF    F8A.3
02BBA:  BCF    F93.3
....................          restart_wdt();
02BBC:  CLRWDT
....................          delay_ms(4);
02BBE:  MOVLW  04
02BC0:  MOVLB  7
02BC2:  MOVWF  x3A
02BC4:  MOVLB  0
02BC6:  CALL   0750
....................          restart_wdt();
02BCA:  CLRWDT
....................          
....................          
....................          
....................          putc(TxD_Buff[0]) ;               //Address
02BCC:  MOVF   x7A,W
02BCE:  CALL   1F76
....................          putc(TxD_Buff[1]) ;               //Function Code
02BD2:  MOVF   x7B,W
02BD4:  CALL   1F76
....................          putc(TxD_Buff[2]) ;               //Byte Count
02BD8:  MOVF   x7C,W
02BDA:  CALL   1F76
....................          putc(TxD_Buff[3]) ;
02BDE:  MOVF   x7D,W
02BE0:  CALL   1F76
....................          putc(TxD_Buff[4]) ;
02BE4:  MOVF   x7E,W
02BE6:  CALL   1F76
....................          putc(TxD_Buff[5]) ;
02BEA:  MOVF   x7F,W
02BEC:  CALL   1F76
....................          putc(TxD_Buff[6]) ;
02BF0:  MOVF   x80,W
02BF2:  CALL   1F76
....................          putc(TxD_Buff[7]) ;
02BF6:  MOVF   x81,W
02BF8:  CALL   1F76
....................          putc(TxD_Buff[8]) ;
02BFC:  MOVF   x82,W
02BFE:  CALL   1F76
....................          putc(TxD_Buff[9]) ;
02C02:  MOVF   x83,W
02C04:  CALL   1F76
....................          putc(TxD_Buff[10]) ;
02C08:  MOVF   x84,W
02C0A:  CALL   1F76
....................          putc(TxD_Buff[11]) ;
02C0E:  MOVF   x85,W
02C10:  CALL   1F76
....................          putc(TxD_Buff[12]) ;
02C14:  MOVF   x86,W
02C16:  CALL   1F76
....................          putc(TxD_Buff[13]) ;
02C1A:  MOVF   x87,W
02C1C:  CALL   1F76
....................          putc(TxD_Buff[14]) ;
02C20:  MOVF   x88,W
02C22:  CALL   1F76
....................          putc(TxD_Buff[15]) ;
02C26:  MOVF   x89,W
02C28:  CALL   1F76
....................          putc(TxD_Buff[16]) ;
02C2C:  MOVF   x8A,W
02C2E:  CALL   1F76
....................          putc(TxD_Buff[17]) ;
02C32:  MOVF   x8B,W
02C34:  CALL   1F76
....................          putc(TxD_Buff[18]) ;
02C38:  MOVF   x8C,W
02C3A:  CALL   1F76
....................          putc(TxD_Buff[19]) ;
02C3E:  MOVF   x8D,W
02C40:  CALL   1F76
....................          putc(TxD_Buff[20]) ;
02C44:  MOVF   x8E,W
02C46:  CALL   1F76
.................... 
....................          restart_wdt();
02C4A:  CLRWDT
....................          delay_ms(3);
02C4C:  MOVLW  03
02C4E:  MOVLB  7
02C50:  MOVWF  x3A
02C52:  MOVLB  0
02C54:  CALL   0750
....................          restart_wdt();
02C58:  CLRWDT
....................          output_bit(P485ctrl,0);
02C5A:  BCF    F8A.3
02C5C:  BCF    F93.3
....................            
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
02C5E:  BSF    F9D.1
....................      
....................        }
02C60:  GOTO   43D8
....................       /////////////////////////////////////////////////////////////////
.................... 
....................        else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
02C64:  MOVF   xFB,W
02C66:  SUBLW  05
02C68:  BTFSS  FD8.2
02C6A:  BRA    316C
....................          {
....................             //Do Force Coil
....................             Start_Address = RxD_Buff[2] ;
02C6C:  MOVLB  4
02C6E:  CLRF   xFF
02C70:  MOVFF  FC,4FE
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
02C74:  MOVFF  4FE,4FF
02C78:  MOVLB  7
02C7A:  CLRF   x3A
02C7C:  MOVF   x3A,W
02C7E:  MOVLB  0
02C80:  IORWF  xFD,W
02C82:  MOVLB  4
02C84:  MOVWF  xFE
02C86:  MOVLB  4
....................             No_PointCount = RxD_Buff[4] ;
02C88:  MOVLB  5
02C8A:  CLRF   x01
02C8C:  MOVFF  FE,500
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
02C90:  MOVFF  500,501
02C94:  MOVLB  7
02C96:  CLRF   x3A
02C98:  MOVF   x3A,W
02C9A:  MOVLB  0
02C9C:  IORWF  xFF,W
02C9E:  MOVLB  5
02CA0:  MOVWF  x00
02CA2:  MOVLB  5
.................... 
....................             if(Start_Address == 0x00)   ////// Acknowlegde //////
02CA4:  MOVLB  4
02CA6:  MOVF   xFE,F
02CA8:  BNZ   2D4C
02CAA:  MOVF   xFF,F
02CAC:  BNZ   2D4C
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02CAE:  MOVLB  5
02CB0:  MOVF   x00,F
02CB2:  BNZ   2D48
02CB4:  INCFSZ x01,W
02CB6:  BRA    2D48
....................                {
....................                   //Modbus_ACK = 1 ;
....................                   AutoAckFlag = 1;
02CB8:  BSF    1A.2
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02CBA:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02CBE:  MOVLW  05
02CC0:  MOVLB  0
02CC2:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02CC4:  MOVFF  FC,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02CC8:  MOVFF  FD,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02CCC:  MOVFF  FE,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02CD0:  MOVFF  FF,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02CD4:  MOVLB  7
02CD6:  CLRF   x3C
02CD8:  MOVLW  7A
02CDA:  MOVWF  x3B
02CDC:  MOVLW  06
02CDE:  MOVWF  x3D
02CE0:  MOVLB  0
02CE2:  CALL   1F20
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02CE6:  MOVFF  4FB,80
....................                   TxD_Buff[7] = CRC_Lo ;
02CEA:  MOVFF  4FA,81
.................... 
....................                   output_bit(P485ctrl,1);
02CEE:  BSF    F8A.3
02CF0:  BCF    F93.3
....................                   restart_wdt();
02CF2:  CLRWDT
....................                   delay_ms(4);
02CF4:  MOVLW  04
02CF6:  MOVLB  7
02CF8:  MOVWF  x3A
02CFA:  MOVLB  0
02CFC:  CALL   0750
....................                   restart_wdt();
02D00:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02D02:  MOVF   x7A,W
02D04:  CALL   1F76
....................                   putc(TxD_Buff[1]) ;               //Function Code
02D08:  MOVF   x7B,W
02D0A:  CALL   1F76
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02D0E:  MOVF   x7C,W
02D10:  CALL   1F76
....................                   putc(TxD_Buff[3]) ;
02D14:  MOVF   x7D,W
02D16:  CALL   1F76
....................                   putc(TxD_Buff[4]) ;
02D1A:  MOVF   x7E,W
02D1C:  CALL   1F76
....................                   putc(TxD_Buff[5]) ;
02D20:  MOVF   x7F,W
02D22:  CALL   1F76
....................                   putc(TxD_Buff[6]) ;
02D26:  MOVF   x80,W
02D28:  CALL   1F76
....................                   putc(TxD_Buff[7]) ;
02D2C:  MOVF   x81,W
02D2E:  CALL   1F76
.................... 
.................... 
....................                   restart_wdt();
02D32:  CLRWDT
....................                   delay_ms(3);
02D34:  MOVLW  03
02D36:  MOVLB  7
02D38:  MOVWF  x3A
02D3A:  MOVLB  0
02D3C:  CALL   0750
....................                   restart_wdt();
02D40:  CLRWDT
....................                   output_bit(P485ctrl,0);
02D42:  BCF    F8A.3
02D44:  BCF    F93.3
02D46:  MOVLB  5
....................               
....................                }
....................             }
02D48:  BRA    3166
02D4A:  MOVLB  4
....................             else if(Start_Address == 0x01)   ///// Reset //////
02D4C:  DECFSZ xFE,W
02D4E:  BRA    2DF2
02D50:  MOVF   xFF,F
02D52:  BNZ   2DF2
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02D54:  MOVLB  5
02D56:  MOVF   x00,F
02D58:  BNZ   2DEE
02D5A:  INCFSZ x01,W
02D5C:  BRA    2DEE
....................                {
....................                   //Modbus_RET = 1 ;
....................                   AutoResetFlag = 1;
02D5E:  BSF    1A.3
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
02D60:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02D64:  MOVLW  05
02D66:  MOVLB  0
02D68:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02D6A:  MOVFF  FC,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02D6E:  MOVFF  FD,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02D72:  MOVFF  FE,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02D76:  MOVFF  FF,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02D7A:  MOVLB  7
02D7C:  CLRF   x3C
02D7E:  MOVLW  7A
02D80:  MOVWF  x3B
02D82:  MOVLW  06
02D84:  MOVWF  x3D
02D86:  MOVLB  0
02D88:  CALL   1F20
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02D8C:  MOVFF  4FB,80
....................                   TxD_Buff[7] = CRC_Lo ;
02D90:  MOVFF  4FA,81
.................... 
.................... 
....................               output_bit(P485ctrl,1);
02D94:  BSF    F8A.3
02D96:  BCF    F93.3
....................                   restart_wdt();
02D98:  CLRWDT
....................                   delay_ms(4);
02D9A:  MOVLW  04
02D9C:  MOVLB  7
02D9E:  MOVWF  x3A
02DA0:  MOVLB  0
02DA2:  CALL   0750
....................                   restart_wdt();
02DA6:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02DA8:  MOVF   x7A,W
02DAA:  CALL   1F76
....................                   putc(TxD_Buff[1]) ;               //Function Code
02DAE:  MOVF   x7B,W
02DB0:  CALL   1F76
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02DB4:  MOVF   x7C,W
02DB6:  CALL   1F76
....................                   putc(TxD_Buff[3]) ;
02DBA:  MOVF   x7D,W
02DBC:  CALL   1F76
....................                   putc(TxD_Buff[4]) ;
02DC0:  MOVF   x7E,W
02DC2:  CALL   1F76
....................                   putc(TxD_Buff[5]) ;
02DC6:  MOVF   x7F,W
02DC8:  CALL   1F76
....................                   putc(TxD_Buff[6]) ;
02DCC:  MOVF   x80,W
02DCE:  CALL   1F76
....................                   putc(TxD_Buff[7]) ;
02DD2:  MOVF   x81,W
02DD4:  CALL   1F76
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02DD8:  CLRWDT
....................                   delay_ms(3);
02DDA:  MOVLW  03
02DDC:  MOVLB  7
02DDE:  MOVWF  x3A
02DE0:  MOVLB  0
02DE2:  CALL   0750
....................                   restart_wdt();
02DE6:  CLRWDT
....................                   output_bit(P485ctrl,0);
02DE8:  BCF    F8A.3
02DEA:  BCF    F93.3
02DEC:  MOVLB  5
....................               
....................                }
....................             }
02DEE:  BRA    3166
02DF0:  MOVLB  4
....................             else if(Start_Address == 0x02)   ///// Test //////
02DF2:  MOVF   xFE,W
02DF4:  SUBLW  02
02DF6:  BTFSS  FD8.2
02DF8:  BRA    2F48
02DFA:  MOVF   xFF,F
02DFC:  BTFSS  FD8.2
02DFE:  BRA    2F48
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02E00:  MOVLB  5
02E02:  MOVF   x00,F
02E04:  BNZ   2E9C
02E06:  INCFSZ x01,W
02E08:  BRA    2E9C
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   AutoTestFlag = 1;
02E0A:  BSF    1A.4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02E0C:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02E10:  MOVLW  05
02E12:  MOVLB  0
02E14:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02E16:  MOVFF  FC,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02E1A:  MOVFF  FD,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02E1E:  MOVFF  FE,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02E22:  MOVFF  FF,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02E26:  MOVLB  7
02E28:  CLRF   x3C
02E2A:  MOVLW  7A
02E2C:  MOVWF  x3B
02E2E:  MOVLW  06
02E30:  MOVWF  x3D
02E32:  MOVLB  0
02E34:  CALL   1F20
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02E38:  MOVFF  4FB,80
....................                   TxD_Buff[7] = CRC_Lo ;
02E3C:  MOVFF  4FA,81
.................... 
....................                   output_bit(P485ctrl,1);
02E40:  BSF    F8A.3
02E42:  BCF    F93.3
....................                   restart_wdt();
02E44:  CLRWDT
....................                   delay_ms(4);
02E46:  MOVLW  04
02E48:  MOVLB  7
02E4A:  MOVWF  x3A
02E4C:  MOVLB  0
02E4E:  CALL   0750
....................                   restart_wdt();
02E52:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02E54:  MOVF   x7A,W
02E56:  CALL   1F76
....................                   putc(TxD_Buff[1]) ;               //Function Code
02E5A:  MOVF   x7B,W
02E5C:  CALL   1F76
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02E60:  MOVF   x7C,W
02E62:  CALL   1F76
....................                   putc(TxD_Buff[3]) ;
02E66:  MOVF   x7D,W
02E68:  CALL   1F76
....................                   putc(TxD_Buff[4]) ;
02E6C:  MOVF   x7E,W
02E6E:  CALL   1F76
....................                   putc(TxD_Buff[5]) ;
02E72:  MOVF   x7F,W
02E74:  CALL   1F76
....................                   putc(TxD_Buff[6]) ;
02E78:  MOVF   x80,W
02E7A:  CALL   1F76
....................                   putc(TxD_Buff[7]) ;
02E7E:  MOVF   x81,W
02E80:  CALL   1F76
.................... 
....................                   restart_wdt();
02E84:  CLRWDT
....................                   delay_ms(3);
02E86:  MOVLW  03
02E88:  MOVLB  7
02E8A:  MOVWF  x3A
02E8C:  MOVLB  0
02E8E:  CALL   0750
....................                   restart_wdt();
02E92:  CLRWDT
....................                   output_bit(P485ctrl,0);
02E94:  BCF    F8A.3
02E96:  BCF    F93.3
....................              
....................                }
02E98:  BRA    2F42
02E9A:  MOVLB  5
....................                else if(No_PointCount == 0x00)   //OFF
02E9C:  MOVF   x00,F
02E9E:  BNZ   2F44
02EA0:  MOVF   x01,F
02EA2:  BNZ   2F44
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   AutoTestFlag = 0;
02EA4:  BCF    1A.4
....................                   Read_input();
02EA6:  MOVLB  0
02EA8:  CALL   15C8
....................                   AutoAckFlag = 1;
02EAC:  BSF    1A.2
....................                   check_ack();
02EAE:  CALL   2128
....................                   AutoResetFlag = 1;
02EB2:  BSF    1A.3
....................                   check_reset();
02EB4:  CALL   220C
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02EB8:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02EBC:  MOVLW  05
02EBE:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02EC0:  MOVFF  FC,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02EC4:  MOVFF  FD,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02EC8:  MOVFF  FE,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02ECC:  MOVFF  FF,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02ED0:  MOVLB  7
02ED2:  CLRF   x3C
02ED4:  MOVLW  7A
02ED6:  MOVWF  x3B
02ED8:  MOVLW  06
02EDA:  MOVWF  x3D
02EDC:  MOVLB  0
02EDE:  CALL   1F20
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02EE2:  MOVFF  4FB,80
....................                   TxD_Buff[7] = CRC_Lo ;
02EE6:  MOVFF  4FA,81
.................... 
....................                   output_bit(P485ctrl,1);
02EEA:  BSF    F8A.3
02EEC:  BCF    F93.3
....................                   restart_wdt();
02EEE:  CLRWDT
....................                   delay_ms(4);
02EF0:  MOVLW  04
02EF2:  MOVLB  7
02EF4:  MOVWF  x3A
02EF6:  MOVLB  0
02EF8:  CALL   0750
....................                   restart_wdt();
02EFC:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02EFE:  MOVF   x7A,W
02F00:  CALL   1F76
....................                   putc(TxD_Buff[1]) ;               //Function Code
02F04:  MOVF   x7B,W
02F06:  CALL   1F76
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02F0A:  MOVF   x7C,W
02F0C:  CALL   1F76
....................                   putc(TxD_Buff[3]) ;
02F10:  MOVF   x7D,W
02F12:  CALL   1F76
....................                   putc(TxD_Buff[4]) ;
02F16:  MOVF   x7E,W
02F18:  CALL   1F76
....................                   putc(TxD_Buff[5]) ;
02F1C:  MOVF   x7F,W
02F1E:  CALL   1F76
....................                   putc(TxD_Buff[6]) ;
02F22:  MOVF   x80,W
02F24:  CALL   1F76
....................                   putc(TxD_Buff[7]) ;
02F28:  MOVF   x81,W
02F2A:  CALL   1F76
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02F2E:  CLRWDT
....................                   delay_ms(3);
02F30:  MOVLW  03
02F32:  MOVLB  7
02F34:  MOVWF  x3A
02F36:  MOVLB  0
02F38:  CALL   0750
....................                   restart_wdt();
02F3C:  CLRWDT
....................                   output_bit(P485ctrl,0);
02F3E:  BCF    F8A.3
02F40:  BCF    F93.3
02F42:  MOVLB  5
....................                   
....................                }
....................             }
02F44:  BRA    3166
02F46:  MOVLB  4
....................             else if(Start_Address == 0x03)   ///// Function Test //////
02F48:  MOVF   xFE,W
02F4A:  SUBLW  03
02F4C:  BTFSS  FD8.2
02F4E:  BRA    309E
02F50:  MOVF   xFF,F
02F52:  BTFSS  FD8.2
02F54:  BRA    309E
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02F56:  MOVLB  5
02F58:  MOVF   x00,F
02F5A:  BNZ   2FF2
02F5C:  INCFSZ x01,W
02F5E:  BRA    2FF2
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   test_fault = 1 ;
02F60:  BSF    1A.5
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02F62:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02F66:  MOVLW  05
02F68:  MOVLB  0
02F6A:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02F6C:  MOVFF  FC,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02F70:  MOVFF  FD,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02F74:  MOVFF  FE,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02F78:  MOVFF  FF,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02F7C:  MOVLB  7
02F7E:  CLRF   x3C
02F80:  MOVLW  7A
02F82:  MOVWF  x3B
02F84:  MOVLW  06
02F86:  MOVWF  x3D
02F88:  MOVLB  0
02F8A:  CALL   1F20
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02F8E:  MOVFF  4FB,80
....................                   TxD_Buff[7] = CRC_Lo ;
02F92:  MOVFF  4FA,81
.................... 
....................                  output_bit(P485ctrl,1);
02F96:  BSF    F8A.3
02F98:  BCF    F93.3
....................                   restart_wdt();
02F9A:  CLRWDT
....................                   delay_ms(4);
02F9C:  MOVLW  04
02F9E:  MOVLB  7
02FA0:  MOVWF  x3A
02FA2:  MOVLB  0
02FA4:  CALL   0750
....................                   restart_wdt();
02FA8:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02FAA:  MOVF   x7A,W
02FAC:  CALL   1F76
....................                   putc(TxD_Buff[1]) ;               //Function Code
02FB0:  MOVF   x7B,W
02FB2:  CALL   1F76
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02FB6:  MOVF   x7C,W
02FB8:  CALL   1F76
....................                   putc(TxD_Buff[3]) ;
02FBC:  MOVF   x7D,W
02FBE:  CALL   1F76
....................                   putc(TxD_Buff[4]) ;
02FC2:  MOVF   x7E,W
02FC4:  CALL   1F76
....................                   putc(TxD_Buff[5]) ;
02FC8:  MOVF   x7F,W
02FCA:  CALL   1F76
....................                   putc(TxD_Buff[6]) ;
02FCE:  MOVF   x80,W
02FD0:  CALL   1F76
....................                   putc(TxD_Buff[7]) ;
02FD4:  MOVF   x81,W
02FD6:  CALL   1F76
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02FDA:  CLRWDT
....................                   delay_ms(10);
02FDC:  MOVLW  0A
02FDE:  MOVLB  7
02FE0:  MOVWF  x3A
02FE2:  MOVLB  0
02FE4:  CALL   0750
....................                   restart_wdt();
02FE8:  CLRWDT
....................                   output_bit(P485ctrl,0);
02FEA:  BCF    F8A.3
02FEC:  BCF    F93.3
....................                }
02FEE:  BRA    3098
02FF0:  MOVLB  5
....................                else if(No_PointCount == 0x00)   //OFF
02FF2:  MOVF   x00,F
02FF4:  BNZ   309A
02FF6:  MOVF   x01,F
02FF8:  BNZ   309A
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   test_fault = 0;
02FFA:  BCF    1A.5
....................                   Read_input();
02FFC:  MOVLB  0
02FFE:  CALL   15C8
....................                   AutoAckFlag = 1;
03002:  BSF    1A.2
....................                   check_ack();
03004:  CALL   2128
....................                   AutoResetFlag = 1;
03008:  BSF    1A.3
....................                   check_reset();
0300A:  CALL   220C
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
0300E:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
03012:  MOVLW  05
03014:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03016:  MOVFF  FC,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0301A:  MOVFF  FD,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
0301E:  MOVFF  FE,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03022:  MOVFF  FF,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03026:  MOVLB  7
03028:  CLRF   x3C
0302A:  MOVLW  7A
0302C:  MOVWF  x3B
0302E:  MOVLW  06
03030:  MOVWF  x3D
03032:  MOVLB  0
03034:  CALL   1F20
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
03038:  MOVFF  4FB,80
....................                   TxD_Buff[7] = CRC_Lo ;
0303C:  MOVFF  4FA,81
.................... 
....................                   output_bit(P485ctrl,1);
03040:  BSF    F8A.3
03042:  BCF    F93.3
....................                   restart_wdt();
03044:  CLRWDT
....................                   delay_ms(4);
03046:  MOVLW  04
03048:  MOVLB  7
0304A:  MOVWF  x3A
0304C:  MOVLB  0
0304E:  CALL   0750
....................                   restart_wdt();
03052:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
03054:  MOVF   x7A,W
03056:  CALL   1F76
....................                   putc(TxD_Buff[1]) ;               //Function Code
0305A:  MOVF   x7B,W
0305C:  CALL   1F76
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03060:  MOVF   x7C,W
03062:  CALL   1F76
....................                   putc(TxD_Buff[3]) ;
03066:  MOVF   x7D,W
03068:  CALL   1F76
....................                   putc(TxD_Buff[4]) ;
0306C:  MOVF   x7E,W
0306E:  CALL   1F76
....................                   putc(TxD_Buff[5]) ;
03072:  MOVF   x7F,W
03074:  CALL   1F76
....................                   putc(TxD_Buff[6]) ;
03078:  MOVF   x80,W
0307A:  CALL   1F76
....................                   putc(TxD_Buff[7]) ;
0307E:  MOVF   x81,W
03080:  CALL   1F76
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
03084:  CLRWDT
....................                   delay_ms(3);
03086:  MOVLW  03
03088:  MOVLB  7
0308A:  MOVWF  x3A
0308C:  MOVLB  0
0308E:  CALL   0750
....................                   restart_wdt();
03092:  CLRWDT
....................                   output_bit(P485ctrl,0);
03094:  BCF    F8A.3
03096:  BCF    F93.3
03098:  MOVLB  5
....................                   
....................                }
....................             }
0309A:  BRA    3166
0309C:  MOVLB  4
....................             else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
0309E:  MOVF   xFE,W
030A0:  SUBLW  64
030A2:  BNZ   3164
030A4:  MOVF   xFF,F
030A6:  BNZ   3164
....................             {
....................                Address = No_PointCount;
030A8:  MOVFF  500,78
....................                write_eeprom(0x1D,Address);   //Communication Address
030AC:  MOVF   FF2,W
030AE:  MOVWF  00
030B0:  BCF    FF2.7
030B2:  CLRF   FAA
030B4:  MOVLW  1D
030B6:  MOVWF  FA9
030B8:  MOVFF  78,FA8
030BC:  BCF    FA6.6
030BE:  BCF    FA6.7
030C0:  BSF    FA6.2
030C2:  MOVLB  F
030C4:  MOVLW  55
030C6:  MOVWF  FA7
030C8:  MOVLW  AA
030CA:  MOVWF  FA7
030CC:  BSF    FA6.1
030CE:  BTFSC  FA6.1
030D0:  BRA    30CE
030D2:  BCF    FA6.2
030D4:  MOVF   00,W
030D6:  IORWF  FF2,F
....................                
....................                TxD_Buff[0] = Address ;         //Address
030D8:  MOVFF  78,7A
....................                TxD_Buff[1] = 0x05 ;         //Function Code
030DC:  MOVLW  05
030DE:  MOVLB  0
030E0:  MOVWF  x7B
....................                TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
030E2:  MOVFF  FC,7C
....................                TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
030E6:  MOVFF  FD,7D
....................                TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
030EA:  MOVFF  FE,7E
....................                TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
030EE:  MOVFF  FF,7F
.................... 
....................                CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
030F2:  MOVLB  7
030F4:  CLRF   x3C
030F6:  MOVLW  7A
030F8:  MOVWF  x3B
030FA:  MOVLW  06
030FC:  MOVWF  x3D
030FE:  MOVLB  0
03100:  CALL   1F20
.................... 
....................                TxD_Buff[6] = CRC_Hi ;
03104:  MOVFF  4FB,80
....................                TxD_Buff[7] = CRC_Lo ;
03108:  MOVFF  4FA,81
.................... 
....................                output_bit(P485ctrl,1);
0310C:  BSF    F8A.3
0310E:  BCF    F93.3
....................                restart_wdt();
03110:  CLRWDT
....................                delay_ms(4);
03112:  MOVLW  04
03114:  MOVLB  7
03116:  MOVWF  x3A
03118:  MOVLB  0
0311A:  CALL   0750
....................                restart_wdt();
0311E:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
03120:  MOVF   x7A,W
03122:  CALL   1F76
....................                putc(TxD_Buff[1]) ;               //Function Code
03126:  MOVF   x7B,W
03128:  CALL   1F76
....................                putc(TxD_Buff[2]) ;               //Byte Count
0312C:  MOVF   x7C,W
0312E:  CALL   1F76
....................                putc(TxD_Buff[3]) ;
03132:  MOVF   x7D,W
03134:  CALL   1F76
....................                putc(TxD_Buff[4]) ;
03138:  MOVF   x7E,W
0313A:  CALL   1F76
....................                putc(TxD_Buff[5]) ;
0313E:  MOVF   x7F,W
03140:  CALL   1F76
....................                putc(TxD_Buff[6]) ;
03144:  MOVF   x80,W
03146:  CALL   1F76
....................                putc(TxD_Buff[7]) ;
0314A:  MOVF   x81,W
0314C:  CALL   1F76
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
03150:  CLRWDT
....................                delay_ms(3);
03152:  MOVLW  03
03154:  MOVLB  7
03156:  MOVWF  x3A
03158:  MOVLB  0
0315A:  CALL   0750
....................                restart_wdt();
0315E:  CLRWDT
....................                output_bit(P485ctrl,0);
03160:  BCF    F8A.3
03162:  BCF    F93.3
03164:  MOVLB  5
.................... 
.................... 
....................                //save_addr();
....................             }
....................          }
03166:  GOTO   43DA
0316A:  MOVLB  0
....................          //--------------------------------------------------//
.................... 
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
0316C:  MOVF   xFB,W
0316E:  SUBLW  21
03170:  BTFSS  FD8.2
03172:  GOTO   3AD8
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
03176:  MOVF   FF2,W
03178:  MOVWF  00
0317A:  BCF    FF2.7
0317C:  CLRF   FAA
0317E:  CLRF   FA9
03180:  MOVLW  0F
03182:  MOVWF  FA8
03184:  BCF    FA6.6
03186:  BCF    FA6.7
03188:  BSF    FA6.2
0318A:  MOVLB  F
0318C:  MOVLW  55
0318E:  MOVWF  FA7
03190:  MOVLW  AA
03192:  MOVWF  FA7
03194:  BSF    FA6.1
03196:  BTFSC  FA6.1
03198:  BRA    3196
0319A:  BCF    FA6.2
0319C:  MOVF   00,W
0319E:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Inputt Type
031A0:  MOVFF  FF2,00
031A4:  BCF    FF2.7
031A6:  CLRF   FAA
031A8:  MOVLW  01
031AA:  MOVWF  FA9
031AC:  MOVFF  FD,FA8
031B0:  BCF    FA6.6
031B2:  BCF    FA6.7
031B4:  BSF    FA6.2
031B6:  MOVLW  55
031B8:  MOVWF  FA7
031BA:  MOVLW  AA
031BC:  MOVWF  FA7
031BE:  BSF    FA6.1
031C0:  BTFSC  FA6.1
031C2:  BRA    31C0
031C4:  BCF    FA6.2
031C6:  MOVF   00,W
031C8:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
031CA:  MOVFF  FF2,00
031CE:  BCF    FF2.7
031D0:  CLRF   FAA
031D2:  MOVLW  02
031D4:  MOVWF  FA9
031D6:  MOVFF  FE,FA8
031DA:  BCF    FA6.6
031DC:  BCF    FA6.7
031DE:  BSF    FA6.2
031E0:  MOVLW  55
031E2:  MOVWF  FA7
031E4:  MOVLW  AA
031E6:  MOVWF  FA7
031E8:  BSF    FA6.1
031EA:  BTFSC  FA6.1
031EC:  BRA    31EA
031EE:  BCF    FA6.2
031F0:  MOVF   00,W
031F2:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
031F4:  MOVFF  FF2,00
031F8:  BCF    FF2.7
031FA:  CLRF   FAA
031FC:  MOVLW  03
031FE:  MOVWF  FA9
03200:  MOVFF  FF,FA8
03204:  BCF    FA6.6
03206:  BCF    FA6.7
03208:  BSF    FA6.2
0320A:  MOVLW  55
0320C:  MOVWF  FA7
0320E:  MOVLW  AA
03210:  MOVWF  FA7
03212:  BSF    FA6.1
03214:  BTFSC  FA6.1
03216:  BRA    3214
03218:  BCF    FA6.2
0321A:  MOVF   00,W
0321C:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
0321E:  MOVFF  FF2,00
03222:  BCF    FF2.7
03224:  CLRF   FAA
03226:  MOVLW  04
03228:  MOVWF  FA9
0322A:  MOVFF  100,FA8
0322E:  BCF    FA6.6
03230:  BCF    FA6.7
03232:  BSF    FA6.2
03234:  MOVLW  55
03236:  MOVWF  FA7
03238:  MOVLW  AA
0323A:  MOVWF  FA7
0323C:  BSF    FA6.1
0323E:  BTFSC  FA6.1
03240:  BRA    323E
03242:  BCF    FA6.2
03244:  MOVF   00,W
03246:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
03248:  MOVFF  FF2,00
0324C:  BCF    FF2.7
0324E:  CLRF   FAA
03250:  MOVLW  05
03252:  MOVWF  FA9
03254:  MOVFF  101,FA8
03258:  BCF    FA6.6
0325A:  BCF    FA6.7
0325C:  BSF    FA6.2
0325E:  MOVLW  55
03260:  MOVWF  FA7
03262:  MOVLW  AA
03264:  MOVWF  FA7
03266:  BSF    FA6.1
03268:  BTFSC  FA6.1
0326A:  BRA    3268
0326C:  BCF    FA6.2
0326E:  MOVF   00,W
03270:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
03272:  MOVFF  FF2,00
03276:  BCF    FF2.7
03278:  CLRF   FAA
0327A:  MOVLW  06
0327C:  MOVWF  FA9
0327E:  MOVFF  102,FA8
03282:  BCF    FA6.6
03284:  BCF    FA6.7
03286:  BSF    FA6.2
03288:  MOVLW  55
0328A:  MOVWF  FA7
0328C:  MOVLW  AA
0328E:  MOVWF  FA7
03290:  BSF    FA6.1
03292:  BTFSC  FA6.1
03294:  BRA    3292
03296:  BCF    FA6.2
03298:  MOVF   00,W
0329A:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
0329C:  MOVFF  FF2,00
032A0:  BCF    FF2.7
032A2:  CLRF   FAA
032A4:  MOVLW  07
032A6:  MOVWF  FA9
032A8:  MOVFF  103,FA8
032AC:  BCF    FA6.6
032AE:  BCF    FA6.7
032B0:  BSF    FA6.2
032B2:  MOVLW  55
032B4:  MOVWF  FA7
032B6:  MOVLW  AA
032B8:  MOVWF  FA7
032BA:  BSF    FA6.1
032BC:  BTFSC  FA6.1
032BE:  BRA    32BC
032C0:  BCF    FA6.2
032C2:  MOVF   00,W
032C4:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
032C6:  MOVFF  FF2,00
032CA:  BCF    FF2.7
032CC:  CLRF   FAA
032CE:  MOVLW  08
032D0:  MOVWF  FA9
032D2:  MOVFF  104,FA8
032D6:  BCF    FA6.6
032D8:  BCF    FA6.7
032DA:  BSF    FA6.2
032DC:  MOVLW  55
032DE:  MOVWF  FA7
032E0:  MOVLW  AA
032E2:  MOVWF  FA7
032E4:  BSF    FA6.1
032E6:  BTFSC  FA6.1
032E8:  BRA    32E6
032EA:  BCF    FA6.2
032EC:  MOVF   00,W
032EE:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
032F0:  MOVFF  FF2,00
032F4:  BCF    FF2.7
032F6:  CLRF   FAA
032F8:  MOVLW  09
032FA:  MOVWF  FA9
032FC:  MOVFF  105,FA8
03300:  BCF    FA6.6
03302:  BCF    FA6.7
03304:  BSF    FA6.2
03306:  MOVLW  55
03308:  MOVWF  FA7
0330A:  MOVLW  AA
0330C:  MOVWF  FA7
0330E:  BSF    FA6.1
03310:  BTFSC  FA6.1
03312:  BRA    3310
03314:  BCF    FA6.2
03316:  MOVF   00,W
03318:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
0331A:  MOVFF  FF2,00
0331E:  BCF    FF2.7
03320:  CLRF   FAA
03322:  MOVLW  0A
03324:  MOVWF  FA9
03326:  MOVFF  106,FA8
0332A:  BCF    FA6.6
0332C:  BCF    FA6.7
0332E:  BSF    FA6.2
03330:  MOVLW  55
03332:  MOVWF  FA7
03334:  MOVLW  AA
03336:  MOVWF  FA7
03338:  BSF    FA6.1
0333A:  BTFSC  FA6.1
0333C:  BRA    333A
0333E:  BCF    FA6.2
03340:  MOVF   00,W
03342:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
03344:  MOVFF  FF2,00
03348:  BCF    FF2.7
0334A:  CLRF   FAA
0334C:  MOVLW  0B
0334E:  MOVWF  FA9
03350:  MOVFF  107,FA8
03354:  BCF    FA6.6
03356:  BCF    FA6.7
03358:  BSF    FA6.2
0335A:  MOVLW  55
0335C:  MOVWF  FA7
0335E:  MOVLW  AA
03360:  MOVWF  FA7
03362:  BSF    FA6.1
03364:  BTFSC  FA6.1
03366:  BRA    3364
03368:  BCF    FA6.2
0336A:  MOVF   00,W
0336C:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
0336E:  MOVFF  FF2,00
03372:  BCF    FF2.7
03374:  CLRF   FAA
03376:  MOVLW  0C
03378:  MOVWF  FA9
0337A:  MOVFF  108,FA8
0337E:  BCF    FA6.6
03380:  BCF    FA6.7
03382:  BSF    FA6.2
03384:  MOVLW  55
03386:  MOVWF  FA7
03388:  MOVLW  AA
0338A:  MOVWF  FA7
0338C:  BSF    FA6.1
0338E:  BTFSC  FA6.1
03390:  BRA    338E
03392:  BCF    FA6.2
03394:  MOVF   00,W
03396:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
03398:  MOVFF  FF2,00
0339C:  BCF    FF2.7
0339E:  CLRF   FAA
033A0:  MOVLW  0D
033A2:  MOVWF  FA9
033A4:  MOVFF  109,FA8
033A8:  BCF    FA6.6
033AA:  BCF    FA6.7
033AC:  BSF    FA6.2
033AE:  MOVLW  55
033B0:  MOVWF  FA7
033B2:  MOVLW  AA
033B4:  MOVWF  FA7
033B6:  BSF    FA6.1
033B8:  BTFSC  FA6.1
033BA:  BRA    33B8
033BC:  BCF    FA6.2
033BE:  MOVF   00,W
033C0:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
033C2:  MOVFF  FF2,00
033C6:  BCF    FF2.7
033C8:  CLRF   FAA
033CA:  MOVLW  0E
033CC:  MOVWF  FA9
033CE:  MOVFF  10A,FA8
033D2:  BCF    FA6.6
033D4:  BCF    FA6.7
033D6:  BSF    FA6.2
033D8:  MOVLW  55
033DA:  MOVWF  FA7
033DC:  MOVLW  AA
033DE:  MOVWF  FA7
033E0:  BSF    FA6.1
033E2:  BTFSC  FA6.1
033E4:  BRA    33E2
033E6:  BCF    FA6.2
033E8:  MOVF   00,W
033EA:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
033EC:  MOVFF  FF2,00
033F0:  BCF    FF2.7
033F2:  CLRF   FAA
033F4:  MOVLW  0F
033F6:  MOVWF  FA9
033F8:  MOVFF  10B,FA8
033FC:  BCF    FA6.6
033FE:  BCF    FA6.7
03400:  BSF    FA6.2
03402:  MOVLW  55
03404:  MOVWF  FA7
03406:  MOVLW  AA
03408:  MOVWF  FA7
0340A:  BSF    FA6.1
0340C:  BTFSC  FA6.1
0340E:  BRA    340C
03410:  BCF    FA6.2
03412:  MOVF   00,W
03414:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
03416:  MOVFF  FF2,00
0341A:  BCF    FF2.7
0341C:  CLRF   FAA
0341E:  MOVLW  10
03420:  MOVWF  FA9
03422:  MOVFF  10C,FA8
03426:  BCF    FA6.6
03428:  BCF    FA6.7
0342A:  BSF    FA6.2
0342C:  MOVLW  55
0342E:  MOVWF  FA7
03430:  MOVLW  AA
03432:  MOVWF  FA7
03434:  BSF    FA6.1
03436:  BTFSC  FA6.1
03438:  BRA    3436
0343A:  BCF    FA6.2
0343C:  MOVF   00,W
0343E:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
03440:  MOVFF  FF2,00
03444:  BCF    FF2.7
03446:  CLRF   FAA
03448:  MOVLW  11
0344A:  MOVWF  FA9
0344C:  MOVFF  10D,FA8
03450:  BCF    FA6.6
03452:  BCF    FA6.7
03454:  BSF    FA6.2
03456:  MOVLW  55
03458:  MOVWF  FA7
0345A:  MOVLW  AA
0345C:  MOVWF  FA7
0345E:  BSF    FA6.1
03460:  BTFSC  FA6.1
03462:  BRA    3460
03464:  BCF    FA6.2
03466:  MOVF   00,W
03468:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
0346A:  MOVFF  FF2,00
0346E:  BCF    FF2.7
03470:  CLRF   FAA
03472:  MOVLW  12
03474:  MOVWF  FA9
03476:  MOVFF  10E,FA8
0347A:  BCF    FA6.6
0347C:  BCF    FA6.7
0347E:  BSF    FA6.2
03480:  MOVLW  55
03482:  MOVWF  FA7
03484:  MOVLW  AA
03486:  MOVWF  FA7
03488:  BSF    FA6.1
0348A:  BTFSC  FA6.1
0348C:  BRA    348A
0348E:  BCF    FA6.2
03490:  MOVF   00,W
03492:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
03494:  MOVFF  FF2,00
03498:  BCF    FF2.7
0349A:  CLRF   FAA
0349C:  MOVLW  13
0349E:  MOVWF  FA9
034A0:  MOVFF  10F,FA8
034A4:  BCF    FA6.6
034A6:  BCF    FA6.7
034A8:  BSF    FA6.2
034AA:  MOVLW  55
034AC:  MOVWF  FA7
034AE:  MOVLW  AA
034B0:  MOVWF  FA7
034B2:  BSF    FA6.1
034B4:  BTFSC  FA6.1
034B6:  BRA    34B4
034B8:  BCF    FA6.2
034BA:  MOVF   00,W
034BC:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
034BE:  MOVFF  FF2,00
034C2:  BCF    FF2.7
034C4:  CLRF   FAA
034C6:  MOVLW  14
034C8:  MOVWF  FA9
034CA:  MOVFF  110,FA8
034CE:  BCF    FA6.6
034D0:  BCF    FA6.7
034D2:  BSF    FA6.2
034D4:  MOVLW  55
034D6:  MOVWF  FA7
034D8:  MOVLW  AA
034DA:  MOVWF  FA7
034DC:  BSF    FA6.1
034DE:  BTFSC  FA6.1
034E0:  BRA    34DE
034E2:  BCF    FA6.2
034E4:  MOVF   00,W
034E6:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
034E8:  MOVFF  FF2,00
034EC:  BCF    FF2.7
034EE:  CLRF   FAA
034F0:  MOVLW  15
034F2:  MOVWF  FA9
034F4:  MOVFF  111,FA8
034F8:  BCF    FA6.6
034FA:  BCF    FA6.7
034FC:  BSF    FA6.2
034FE:  MOVLW  55
03500:  MOVWF  FA7
03502:  MOVLW  AA
03504:  MOVWF  FA7
03506:  BSF    FA6.1
03508:  BTFSC  FA6.1
0350A:  BRA    3508
0350C:  BCF    FA6.2
0350E:  MOVF   00,W
03510:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
03512:  MOVFF  FF2,00
03516:  BCF    FF2.7
03518:  CLRF   FAA
0351A:  MOVLW  16
0351C:  MOVWF  FA9
0351E:  MOVFF  112,FA8
03522:  BCF    FA6.6
03524:  BCF    FA6.7
03526:  BSF    FA6.2
03528:  MOVLW  55
0352A:  MOVWF  FA7
0352C:  MOVLW  AA
0352E:  MOVWF  FA7
03530:  BSF    FA6.1
03532:  BTFSC  FA6.1
03534:  BRA    3532
03536:  BCF    FA6.2
03538:  MOVF   00,W
0353A:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
0353C:  MOVFF  FF2,00
03540:  BCF    FF2.7
03542:  CLRF   FAA
03544:  MOVLW  17
03546:  MOVWF  FA9
03548:  MOVFF  113,FA8
0354C:  BCF    FA6.6
0354E:  BCF    FA6.7
03550:  BSF    FA6.2
03552:  MOVLW  55
03554:  MOVWF  FA7
03556:  MOVLW  AA
03558:  MOVWF  FA7
0355A:  BSF    FA6.1
0355C:  BTFSC  FA6.1
0355E:  BRA    355C
03560:  BCF    FA6.2
03562:  MOVF   00,W
03564:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
03566:  MOVFF  FF2,00
0356A:  BCF    FF2.7
0356C:  CLRF   FAA
0356E:  MOVLW  18
03570:  MOVWF  FA9
03572:  MOVFF  114,FA8
03576:  BCF    FA6.6
03578:  BCF    FA6.7
0357A:  BSF    FA6.2
0357C:  MOVLW  55
0357E:  MOVWF  FA7
03580:  MOVLW  AA
03582:  MOVWF  FA7
03584:  BSF    FA6.1
03586:  BTFSC  FA6.1
03588:  BRA    3586
0358A:  BCF    FA6.2
0358C:  MOVF   00,W
0358E:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
03590:  MOVFF  FF2,00
03594:  BCF    FF2.7
03596:  CLRF   FAA
03598:  MOVLW  19
0359A:  MOVWF  FA9
0359C:  MOVFF  115,FA8
035A0:  BCF    FA6.6
035A2:  BCF    FA6.7
035A4:  BSF    FA6.2
035A6:  MOVLW  55
035A8:  MOVWF  FA7
035AA:  MOVLW  AA
035AC:  MOVWF  FA7
035AE:  BSF    FA6.1
035B0:  BTFSC  FA6.1
035B2:  BRA    35B0
035B4:  BCF    FA6.2
035B6:  MOVF   00,W
035B8:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
035BA:  MOVFF  FF2,00
035BE:  BCF    FF2.7
035C0:  CLRF   FAA
035C2:  MOVLW  1A
035C4:  MOVWF  FA9
035C6:  MOVFF  116,FA8
035CA:  BCF    FA6.6
035CC:  BCF    FA6.7
035CE:  BSF    FA6.2
035D0:  MOVLW  55
035D2:  MOVWF  FA7
035D4:  MOVLW  AA
035D6:  MOVWF  FA7
035D8:  BSF    FA6.1
035DA:  BTFSC  FA6.1
035DC:  BRA    35DA
035DE:  BCF    FA6.2
035E0:  MOVF   00,W
035E2:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
035E4:  MOVFF  FF2,00
035E8:  BCF    FF2.7
035EA:  CLRF   FAA
035EC:  MOVLW  1B
035EE:  MOVWF  FA9
035F0:  MOVFF  117,FA8
035F4:  BCF    FA6.6
035F6:  BCF    FA6.7
035F8:  BSF    FA6.2
035FA:  MOVLW  55
035FC:  MOVWF  FA7
035FE:  MOVLW  AA
03600:  MOVWF  FA7
03602:  BSF    FA6.1
03604:  BTFSC  FA6.1
03606:  BRA    3604
03608:  BCF    FA6.2
0360A:  MOVF   00,W
0360C:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //All Fault Delay Time
0360E:  MOVFF  FF2,00
03612:  BCF    FF2.7
03614:  CLRF   FAA
03616:  MOVLW  1C
03618:  MOVWF  FA9
0361A:  MOVFF  118,FA8
0361E:  BCF    FA6.6
03620:  BCF    FA6.7
03622:  BSF    FA6.2
03624:  MOVLW  55
03626:  MOVWF  FA7
03628:  MOVLW  AA
0362A:  MOVWF  FA7
0362C:  BSF    FA6.1
0362E:  BTFSC  FA6.1
03630:  BRA    362E
03632:  BCF    FA6.2
03634:  MOVF   00,W
03636:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
03638:  MOVFF  FF2,00
0363C:  BCF    FF2.7
0363E:  CLRF   FAA
03640:  MOVLW  1D
03642:  MOVWF  FA9
03644:  MOVFF  119,FA8
03648:  BCF    FA6.6
0364A:  BCF    FA6.7
0364C:  BSF    FA6.2
0364E:  MOVLW  55
03650:  MOVWF  FA7
03652:  MOVLW  AA
03654:  MOVWF  FA7
03656:  BSF    FA6.1
03658:  BTFSC  FA6.1
0365A:  BRA    3658
0365C:  BCF    FA6.2
0365E:  MOVF   00,W
03660:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Fault Delay Time
03662:  MOVFF  FF2,00
03666:  BCF    FF2.7
03668:  CLRF   FAA
0366A:  MOVLW  1E
0366C:  MOVWF  FA9
0366E:  MOVFF  11A,FA8
03672:  BCF    FA6.6
03674:  BCF    FA6.7
03676:  BSF    FA6.2
03678:  MOVLW  55
0367A:  MOVWF  FA7
0367C:  MOVLW  AA
0367E:  MOVWF  FA7
03680:  BSF    FA6.1
03682:  BTFSC  FA6.1
03684:  BRA    3682
03686:  BCF    FA6.2
03688:  MOVF   00,W
0368A:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Fault Delay Time
0368C:  MOVFF  FF2,00
03690:  BCF    FF2.7
03692:  CLRF   FAA
03694:  MOVLW  1F
03696:  MOVWF  FA9
03698:  MOVFF  11B,FA8
0369C:  BCF    FA6.6
0369E:  BCF    FA6.7
036A0:  BSF    FA6.2
036A2:  MOVLW  55
036A4:  MOVWF  FA7
036A6:  MOVLW  AA
036A8:  MOVWF  FA7
036AA:  BSF    FA6.1
036AC:  BTFSC  FA6.1
036AE:  BRA    36AC
036B0:  BCF    FA6.2
036B2:  MOVF   00,W
036B4:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Fault Delay Time
036B6:  MOVFF  FF2,00
036BA:  BCF    FF2.7
036BC:  CLRF   FAA
036BE:  MOVLW  20
036C0:  MOVWF  FA9
036C2:  MOVFF  11C,FA8
036C6:  BCF    FA6.6
036C8:  BCF    FA6.7
036CA:  BSF    FA6.2
036CC:  MOVLW  55
036CE:  MOVWF  FA7
036D0:  MOVLW  AA
036D2:  MOVWF  FA7
036D4:  BSF    FA6.1
036D6:  BTFSC  FA6.1
036D8:  BRA    36D6
036DA:  BCF    FA6.2
036DC:  MOVF   00,W
036DE:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Fault Delay Time
036E0:  MOVFF  FF2,00
036E4:  BCF    FF2.7
036E6:  CLRF   FAA
036E8:  MOVLW  21
036EA:  MOVWF  FA9
036EC:  MOVFF  11D,FA8
036F0:  BCF    FA6.6
036F2:  BCF    FA6.7
036F4:  BSF    FA6.2
036F6:  MOVLW  55
036F8:  MOVWF  FA7
036FA:  MOVLW  AA
036FC:  MOVWF  FA7
036FE:  BSF    FA6.1
03700:  BTFSC  FA6.1
03702:  BRA    3700
03704:  BCF    FA6.2
03706:  MOVF   00,W
03708:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Fault Delay Time
0370A:  MOVFF  FF2,00
0370E:  BCF    FF2.7
03710:  CLRF   FAA
03712:  MOVLW  22
03714:  MOVWF  FA9
03716:  MOVFF  11E,FA8
0371A:  BCF    FA6.6
0371C:  BCF    FA6.7
0371E:  BSF    FA6.2
03720:  MOVLW  55
03722:  MOVWF  FA7
03724:  MOVLW  AA
03726:  MOVWF  FA7
03728:  BSF    FA6.1
0372A:  BTFSC  FA6.1
0372C:  BRA    372A
0372E:  BCF    FA6.2
03730:  MOVF   00,W
03732:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Fault Delay Time
03734:  MOVFF  FF2,00
03738:  BCF    FF2.7
0373A:  CLRF   FAA
0373C:  MOVLW  23
0373E:  MOVWF  FA9
03740:  MOVFF  11F,FA8
03744:  BCF    FA6.6
03746:  BCF    FA6.7
03748:  BSF    FA6.2
0374A:  MOVLW  55
0374C:  MOVWF  FA7
0374E:  MOVLW  AA
03750:  MOVWF  FA7
03752:  BSF    FA6.1
03754:  BTFSC  FA6.1
03756:  BRA    3754
03758:  BCF    FA6.2
0375A:  MOVF   00,W
0375C:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Fault Delay Time
0375E:  MOVFF  FF2,00
03762:  BCF    FF2.7
03764:  CLRF   FAA
03766:  MOVLW  24
03768:  MOVWF  FA9
0376A:  MOVFF  120,FA8
0376E:  BCF    FA6.6
03770:  BCF    FA6.7
03772:  BSF    FA6.2
03774:  MOVLW  55
03776:  MOVWF  FA7
03778:  MOVLW  AA
0377A:  MOVWF  FA7
0377C:  BSF    FA6.1
0377E:  BTFSC  FA6.1
03780:  BRA    377E
03782:  BCF    FA6.2
03784:  MOVF   00,W
03786:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Fault Delay Time
03788:  MOVFF  FF2,00
0378C:  BCF    FF2.7
0378E:  CLRF   FAA
03790:  MOVLW  25
03792:  MOVWF  FA9
03794:  MOVFF  121,FA8
03798:  BCF    FA6.6
0379A:  BCF    FA6.7
0379C:  BSF    FA6.2
0379E:  MOVLW  55
037A0:  MOVWF  FA7
037A2:  MOVLW  AA
037A4:  MOVWF  FA7
037A6:  BSF    FA6.1
037A8:  BTFSC  FA6.1
037AA:  BRA    37A8
037AC:  BCF    FA6.2
037AE:  MOVF   00,W
037B0:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Fault Delay Time
037B2:  MOVFF  FF2,00
037B6:  BCF    FF2.7
037B8:  CLRF   FAA
037BA:  MOVLW  26
037BC:  MOVWF  FA9
037BE:  MOVFF  122,FA8
037C2:  BCF    FA6.6
037C4:  BCF    FA6.7
037C6:  BSF    FA6.2
037C8:  MOVLW  55
037CA:  MOVWF  FA7
037CC:  MOVLW  AA
037CE:  MOVWF  FA7
037D0:  BSF    FA6.1
037D2:  BTFSC  FA6.1
037D4:  BRA    37D2
037D6:  BCF    FA6.2
037D8:  MOVF   00,W
037DA:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Fault Delay Time
037DC:  MOVFF  FF2,00
037E0:  BCF    FF2.7
037E2:  CLRF   FAA
037E4:  MOVLW  27
037E6:  MOVWF  FA9
037E8:  MOVFF  123,FA8
037EC:  BCF    FA6.6
037EE:  BCF    FA6.7
037F0:  BSF    FA6.2
037F2:  MOVLW  55
037F4:  MOVWF  FA7
037F6:  MOVLW  AA
037F8:  MOVWF  FA7
037FA:  BSF    FA6.1
037FC:  BTFSC  FA6.1
037FE:  BRA    37FC
03800:  BCF    FA6.2
03802:  MOVF   00,W
03804:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Fault Delay Time
03806:  MOVFF  FF2,00
0380A:  BCF    FF2.7
0380C:  CLRF   FAA
0380E:  MOVLW  28
03810:  MOVWF  FA9
03812:  MOVFF  124,FA8
03816:  BCF    FA6.6
03818:  BCF    FA6.7
0381A:  BSF    FA6.2
0381C:  MOVLW  55
0381E:  MOVWF  FA7
03820:  MOVLW  AA
03822:  MOVWF  FA7
03824:  BSF    FA6.1
03826:  BTFSC  FA6.1
03828:  BRA    3826
0382A:  BCF    FA6.2
0382C:  MOVF   00,W
0382E:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Fault Delay Time
03830:  MOVFF  FF2,00
03834:  BCF    FF2.7
03836:  CLRF   FAA
03838:  MOVLW  29
0383A:  MOVWF  FA9
0383C:  MOVFF  125,FA8
03840:  BCF    FA6.6
03842:  BCF    FA6.7
03844:  BSF    FA6.2
03846:  MOVLW  55
03848:  MOVWF  FA7
0384A:  MOVLW  AA
0384C:  MOVWF  FA7
0384E:  BSF    FA6.1
03850:  BTFSC  FA6.1
03852:  BRA    3850
03854:  BCF    FA6.2
03856:  MOVF   00,W
03858:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Fault Delay Time
0385A:  MOVFF  FF2,00
0385E:  BCF    FF2.7
03860:  CLRF   FAA
03862:  MOVLW  2A
03864:  MOVWF  FA9
03866:  MOVFF  126,FA8
0386A:  BCF    FA6.6
0386C:  BCF    FA6.7
0386E:  BSF    FA6.2
03870:  MOVLW  55
03872:  MOVWF  FA7
03874:  MOVLW  AA
03876:  MOVWF  FA7
03878:  BSF    FA6.1
0387A:  BTFSC  FA6.1
0387C:  BRA    387A
0387E:  BCF    FA6.2
03880:  MOVF   00,W
03882:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Fault Delay Time
03884:  MOVFF  FF2,00
03888:  BCF    FF2.7
0388A:  CLRF   FAA
0388C:  MOVLW  2B
0388E:  MOVWF  FA9
03890:  MOVFF  127,FA8
03894:  BCF    FA6.6
03896:  BCF    FA6.7
03898:  BSF    FA6.2
0389A:  MOVLW  55
0389C:  MOVWF  FA7
0389E:  MOVLW  AA
038A0:  MOVWF  FA7
038A2:  BSF    FA6.1
038A4:  BTFSC  FA6.1
038A6:  BRA    38A4
038A8:  BCF    FA6.2
038AA:  MOVF   00,W
038AC:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Fault Delay Time
038AE:  MOVFF  FF2,00
038B2:  BCF    FF2.7
038B4:  CLRF   FAA
038B6:  MOVLW  2C
038B8:  MOVWF  FA9
038BA:  MOVFF  128,FA8
038BE:  BCF    FA6.6
038C0:  BCF    FA6.7
038C2:  BSF    FA6.2
038C4:  MOVLW  55
038C6:  MOVWF  FA7
038C8:  MOVLW  AA
038CA:  MOVWF  FA7
038CC:  BSF    FA6.1
038CE:  BTFSC  FA6.1
038D0:  BRA    38CE
038D2:  BCF    FA6.2
038D4:  MOVF   00,W
038D6:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Fault Delay Time
038D8:  MOVFF  FF2,00
038DC:  BCF    FF2.7
038DE:  CLRF   FAA
038E0:  MOVLW  2D
038E2:  MOVWF  FA9
038E4:  MOVFF  129,FA8
038E8:  BCF    FA6.6
038EA:  BCF    FA6.7
038EC:  BSF    FA6.2
038EE:  MOVLW  55
038F0:  MOVWF  FA7
038F2:  MOVLW  AA
038F4:  MOVWF  FA7
038F6:  BSF    FA6.1
038F8:  BTFSC  FA6.1
038FA:  BRA    38F8
038FC:  BCF    FA6.2
038FE:  MOVF   00,W
03900:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Fault Delay Time
03902:  MOVFF  FF2,00
03906:  BCF    FF2.7
03908:  CLRF   FAA
0390A:  MOVLW  2E
0390C:  MOVWF  FA9
0390E:  MOVFF  12A,FA8
03912:  BCF    FA6.6
03914:  BCF    FA6.7
03916:  BSF    FA6.2
03918:  MOVLW  55
0391A:  MOVWF  FA7
0391C:  MOVLW  AA
0391E:  MOVWF  FA7
03920:  BSF    FA6.1
03922:  BTFSC  FA6.1
03924:  BRA    3922
03926:  BCF    FA6.2
03928:  MOVF   00,W
0392A:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Fault Delay Time
0392C:  MOVFF  FF2,00
03930:  BCF    FF2.7
03932:  CLRF   FAA
03934:  MOVLW  2F
03936:  MOVWF  FA9
03938:  MOVFF  12B,FA8
0393C:  BCF    FA6.6
0393E:  BCF    FA6.7
03940:  BSF    FA6.2
03942:  MOVLW  55
03944:  MOVWF  FA7
03946:  MOVLW  AA
03948:  MOVWF  FA7
0394A:  BSF    FA6.1
0394C:  BTFSC  FA6.1
0394E:  BRA    394C
03950:  BCF    FA6.2
03952:  MOVF   00,W
03954:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Fault Delay Time
03956:  MOVFF  FF2,00
0395A:  BCF    FF2.7
0395C:  CLRF   FAA
0395E:  MOVLW  30
03960:  MOVWF  FA9
03962:  MOVFF  12C,FA8
03966:  BCF    FA6.6
03968:  BCF    FA6.7
0396A:  BSF    FA6.2
0396C:  MOVLW  55
0396E:  MOVWF  FA7
03970:  MOVLW  AA
03972:  MOVWF  FA7
03974:  BSF    FA6.1
03976:  BTFSC  FA6.1
03978:  BRA    3976
0397A:  BCF    FA6.2
0397C:  MOVF   00,W
0397E:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Fault Delay Time
03980:  MOVFF  FF2,00
03984:  BCF    FF2.7
03986:  CLRF   FAA
03988:  MOVLW  31
0398A:  MOVWF  FA9
0398C:  MOVFF  12D,FA8
03990:  BCF    FA6.6
03992:  BCF    FA6.7
03994:  BSF    FA6.2
03996:  MOVLW  55
03998:  MOVWF  FA7
0399A:  MOVLW  AA
0399C:  MOVWF  FA7
0399E:  BSF    FA6.1
039A0:  BTFSC  FA6.1
039A2:  BRA    39A0
039A4:  BCF    FA6.2
039A6:  MOVF   00,W
039A8:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
039AA:  MOVLB  7
039AC:  CLRF   x32
039AE:  CLRF   x31
....................             for(; ; a++)
....................             {
....................                restart_wdt();
039B0:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
039B2:  MOVLW  2E
039B4:  ADDWF  x31,W
039B6:  MOVWF  FE9
039B8:  MOVLW  01
039BA:  ADDWFC x32,W
039BC:  MOVWF  FEA
039BE:  MOVFF  FEF,733
....................                if((phonenum == 0x0D) || (a > 15))
039C2:  MOVF   x33,W
039C4:  SUBLW  0D
039C6:  BZ    39D2
039C8:  MOVF   x32,F
039CA:  BNZ   39D2
039CC:  MOVF   x31,W
039CE:  SUBLW  0F
039D0:  BC    3A20
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
039D2:  MOVLW  6C
039D4:  ADDWF  x31,W
039D6:  MOVWF  FE9
039D8:  MOVLW  05
039DA:  ADDWFC x32,W
039DC:  MOVWF  FEA
039DE:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
039E0:  MOVLW  32
039E2:  ADDWF  x31,W
039E4:  MOVWF  x3A
039E6:  MOVLW  00
039E8:  ADDWFC x32,W
039EA:  MOVWF  x3B
039EC:  MOVF   FF2,W
039EE:  MOVWF  00
039F0:  BCF    FF2.7
039F2:  MOVFF  73B,FAA
039F6:  MOVFF  73A,FA9
039FA:  MOVFF  733,FA8
039FE:  BCF    FA6.6
03A00:  BCF    FA6.7
03A02:  BSF    FA6.2
03A04:  MOVLB  F
03A06:  MOVLW  55
03A08:  MOVWF  FA7
03A0A:  MOVLW  AA
03A0C:  MOVWF  FA7
03A0E:  BSF    FA6.1
03A10:  BTFSC  FA6.1
03A12:  BRA    3A10
03A14:  BCF    FA6.2
03A16:  MOVF   00,W
03A18:  IORWF  FF2,F
....................                   break;
03A1A:  BRA    3A76
....................                }
03A1C:  BRA    3A6A
03A1E:  MOVLB  7
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
03A20:  MOVLW  6C
03A22:  ADDWF  x31,W
03A24:  MOVWF  FE9
03A26:  MOVLW  05
03A28:  ADDWFC x32,W
03A2A:  MOVWF  FEA
03A2C:  MOVFF  733,FEF
....................                   
....................                   write_eeprom(0x32+a,phonenum);
03A30:  MOVLW  32
03A32:  ADDWF  x31,W
03A34:  MOVWF  x3A
03A36:  MOVLW  00
03A38:  ADDWFC x32,W
03A3A:  MOVWF  x3B
03A3C:  MOVF   FF2,W
03A3E:  MOVWF  00
03A40:  BCF    FF2.7
03A42:  MOVFF  73B,FAA
03A46:  MOVFF  73A,FA9
03A4A:  MOVFF  733,FA8
03A4E:  BCF    FA6.6
03A50:  BCF    FA6.7
03A52:  BSF    FA6.2
03A54:  MOVLB  F
03A56:  MOVLW  55
03A58:  MOVWF  FA7
03A5A:  MOVLW  AA
03A5C:  MOVWF  FA7
03A5E:  BSF    FA6.1
03A60:  BTFSC  FA6.1
03A62:  BRA    3A60
03A64:  BCF    FA6.2
03A66:  MOVF   00,W
03A68:  IORWF  FF2,F
....................                }
03A6A:  MOVLB  7
03A6C:  INCF   x31,F
03A6E:  BTFSC  FD8.2
03A70:  INCF   x32,F
03A72:  BRA    39B0
03A74:  MOVLB  F
....................             }
.................... 
....................                         
....................             TxD_Buff[0] = Address ;         //Address
03A76:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x21 ;            //return function code
03A7A:  MOVLW  21
03A7C:  MOVLB  0
03A7E:  MOVWF  x7B
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
03A80:  MOVLB  7
03A82:  CLRF   x3C
03A84:  MOVLW  7A
03A86:  MOVWF  x3B
03A88:  MOVLW  02
03A8A:  MOVWF  x3D
03A8C:  MOVLB  0
03A8E:  CALL   1F20
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
03A92:  MOVFF  4FB,7C
....................             TxD_Buff[3] = CRC_Lo ;
03A96:  MOVFF  4FA,7D
.................... 
....................             output_bit(P485ctrl,1);
03A9A:  BSF    F8A.3
03A9C:  BCF    F93.3
....................             delay_ms(10);
03A9E:  MOVLW  0A
03AA0:  MOVLB  7
03AA2:  MOVWF  x3A
03AA4:  MOVLB  0
03AA6:  CALL   0750
.................... 
....................             putc(Txd_Buff[0]);
03AAA:  MOVF   x7A,W
03AAC:  CALL   1F76
....................             putc(Txd_Buff[1]);
03AB0:  MOVF   x7B,W
03AB2:  CALL   1F76
....................             putc(Txd_Buff[2]);
03AB6:  MOVF   x7C,W
03AB8:  CALL   1F76
....................             putc(Txd_Buff[3]);
03ABC:  MOVF   x7D,W
03ABE:  CALL   1F76
.................... 
....................             delay_ms(3);
03AC2:  MOVLW  03
03AC4:  MOVLB  7
03AC6:  MOVWF  x3A
03AC8:  MOVLB  0
03ACA:  CALL   0750
....................             output_bit(P485ctrl,0);
03ACE:  BCF    F8A.3
03AD0:  BCF    F93.3
....................             
....................             reset_cpu();
03AD2:  RESET
....................             //Read_Config(); //jj
....................          }
03AD4:  GOTO   43D8
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
03AD8:  MOVF   xFB,W
03ADA:  SUBLW  22
03ADC:  BTFSS  FD8.2
03ADE:  GOTO   43D8
....................          {
....................             //SMS_Massage
....................             int16  i =3,j=0,k=0;
03AE2:  MOVLB  7
03AE4:  CLRF   x35
03AE6:  MOVLW  03
03AE8:  MOVWF  x34
03AEA:  CLRF   x37
03AEC:  CLRF   x36
03AEE:  CLRF   x39
03AF0:  CLRF   x38
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03AF2:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03AF4:  MOVLW  FA
03AF6:  ADDWF  x34,W
03AF8:  MOVWF  FE9
03AFA:  MOVLW  00
03AFC:  ADDWFC x35,W
03AFE:  MOVWF  FEA
03B00:  MOVF   FEF,W
03B02:  SUBLW  0D
03B04:  BZ    3B10
03B06:  MOVF   x37,F
03B08:  BNZ   3B10
03B0A:  MOVF   x36,W
03B0C:  SUBLW  29
03B0E:  BC    3B60
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03B10:  MOVLW  5D
03B12:  ADDWF  x34,W
03B14:  MOVWF  x3A
03B16:  MOVLW  00
03B18:  ADDWFC x35,W
03B1A:  MOVWF  x3B
03B1C:  MOVLW  FA
03B1E:  ADDWF  x34,W
03B20:  MOVWF  FE9
03B22:  MOVLW  00
03B24:  ADDWFC x35,W
03B26:  MOVWF  FEA
03B28:  MOVFF  FEF,73C
03B2C:  MOVF   FF2,W
03B2E:  MOVWF  00
03B30:  BCF    FF2.7
03B32:  MOVFF  73B,FAA
03B36:  MOVFF  73A,FA9
03B3A:  MOVFF  73C,FA8
03B3E:  BCF    FA6.6
03B40:  BCF    FA6.7
03B42:  BSF    FA6.2
03B44:  MOVLB  F
03B46:  MOVLW  55
03B48:  MOVWF  FA7
03B4A:  MOVLW  AA
03B4C:  MOVWF  FA7
03B4E:  BSF    FA6.1
03B50:  BTFSC  FA6.1
03B52:  BRA    3B50
03B54:  BCF    FA6.2
03B56:  MOVF   00,W
03B58:  IORWF  FF2,F
....................                   break;
03B5A:  BRA    3BEA
....................                }
03B5C:  BRA    3BD2
03B5E:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage1[j] = RxD_Buff[i];
03B60:  MOVLW  7B
03B62:  ADDWF  x36,W
03B64:  MOVWF  01
03B66:  MOVLW  05
03B68:  ADDWFC x37,W
03B6A:  MOVWF  03
03B6C:  MOVLW  FA
03B6E:  ADDWF  x34,W
03B70:  MOVWF  FE9
03B72:  MOVLW  00
03B74:  ADDWFC x35,W
03B76:  MOVWF  FEA
03B78:  MOVFF  FEF,73C
03B7C:  MOVFF  03,FEA
03B80:  MOVFF  01,FE9
03B84:  MOVFF  73C,FEF
....................                   
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03B88:  MOVLW  5D
03B8A:  ADDWF  x34,W
03B8C:  MOVWF  x3A
03B8E:  MOVLW  00
03B90:  ADDWFC x35,W
03B92:  MOVWF  x3B
03B94:  MOVLW  FA
03B96:  ADDWF  x34,W
03B98:  MOVWF  FE9
03B9A:  MOVLW  00
03B9C:  ADDWFC x35,W
03B9E:  MOVWF  FEA
03BA0:  MOVFF  FEF,73C
03BA4:  MOVF   FF2,W
03BA6:  MOVWF  00
03BA8:  BCF    FF2.7
03BAA:  MOVFF  73B,FAA
03BAE:  MOVFF  73A,FA9
03BB2:  MOVFF  73C,FA8
03BB6:  BCF    FA6.6
03BB8:  BCF    FA6.7
03BBA:  BSF    FA6.2
03BBC:  MOVLB  F
03BBE:  MOVLW  55
03BC0:  MOVWF  FA7
03BC2:  MOVLW  AA
03BC4:  MOVWF  FA7
03BC6:  BSF    FA6.1
03BC8:  BTFSC  FA6.1
03BCA:  BRA    3BC8
03BCC:  BCF    FA6.2
03BCE:  MOVF   00,W
03BD0:  IORWF  FF2,F
....................                }
03BD2:  MOVLB  7
03BD4:  MOVFF  735,03
03BD8:  MOVF   x34,W
03BDA:  INCF   x34,F
03BDC:  BTFSC  FD8.2
03BDE:  INCF   x35,F
03BE0:  INCF   x36,F
03BE2:  BTFSC  FD8.2
03BE4:  INCF   x37,F
03BE6:  BRA    3AF2
03BE8:  MOVLB  F
....................             }
....................             SMS_Massage1[j] = '\0' ; // end string
03BEA:  MOVLW  7B
03BEC:  MOVLB  7
03BEE:  ADDWF  x36,W
03BF0:  MOVWF  FE9
03BF2:  MOVLW  05
03BF4:  ADDWFC x37,W
03BF6:  MOVWF  FEA
03BF8:  CLRF   FEF
....................             
....................             j=0;
03BFA:  CLRF   x37
03BFC:  CLRF   x36
....................             i++;
03BFE:  INCF   x34,F
03C00:  BTFSC  FD8.2
03C02:  INCF   x35,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03C04:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03C06:  MOVLW  FA
03C08:  ADDWF  x34,W
03C0A:  MOVWF  FE9
03C0C:  MOVLW  00
03C0E:  ADDWFC x35,W
03C10:  MOVWF  FEA
03C12:  MOVF   FEF,W
03C14:  SUBLW  0D
03C16:  BZ    3C22
03C18:  MOVF   x37,F
03C1A:  BNZ   3C22
03C1C:  MOVF   x36,W
03C1E:  SUBLW  29
03C20:  BC    3C72
....................                {  
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03C22:  MOVLW  5D
03C24:  ADDWF  x34,W
03C26:  MOVWF  x3A
03C28:  MOVLW  00
03C2A:  ADDWFC x35,W
03C2C:  MOVWF  x3B
03C2E:  MOVLW  FA
03C30:  ADDWF  x34,W
03C32:  MOVWF  FE9
03C34:  MOVLW  00
03C36:  ADDWFC x35,W
03C38:  MOVWF  FEA
03C3A:  MOVFF  FEF,73C
03C3E:  MOVF   FF2,W
03C40:  MOVWF  00
03C42:  BCF    FF2.7
03C44:  MOVFF  73B,FAA
03C48:  MOVFF  73A,FA9
03C4C:  MOVFF  73C,FA8
03C50:  BCF    FA6.6
03C52:  BCF    FA6.7
03C54:  BSF    FA6.2
03C56:  MOVLB  F
03C58:  MOVLW  55
03C5A:  MOVWF  FA7
03C5C:  MOVLW  AA
03C5E:  MOVWF  FA7
03C60:  BSF    FA6.1
03C62:  BTFSC  FA6.1
03C64:  BRA    3C62
03C66:  BCF    FA6.2
03C68:  MOVF   00,W
03C6A:  IORWF  FF2,F
....................                   break;
03C6C:  BRA    3CFC
....................                }
03C6E:  BRA    3CE4
03C70:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage2[j] = RxD_Buff[i];
03C72:  MOVLW  A4
03C74:  ADDWF  x36,W
03C76:  MOVWF  01
03C78:  MOVLW  05
03C7A:  ADDWFC x37,W
03C7C:  MOVWF  03
03C7E:  MOVLW  FA
03C80:  ADDWF  x34,W
03C82:  MOVWF  FE9
03C84:  MOVLW  00
03C86:  ADDWFC x35,W
03C88:  MOVWF  FEA
03C8A:  MOVFF  FEF,73C
03C8E:  MOVFF  03,FEA
03C92:  MOVFF  01,FE9
03C96:  MOVFF  73C,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03C9A:  MOVLW  5D
03C9C:  ADDWF  x34,W
03C9E:  MOVWF  x3A
03CA0:  MOVLW  00
03CA2:  ADDWFC x35,W
03CA4:  MOVWF  x3B
03CA6:  MOVLW  FA
03CA8:  ADDWF  x34,W
03CAA:  MOVWF  FE9
03CAC:  MOVLW  00
03CAE:  ADDWFC x35,W
03CB0:  MOVWF  FEA
03CB2:  MOVFF  FEF,73C
03CB6:  MOVF   FF2,W
03CB8:  MOVWF  00
03CBA:  BCF    FF2.7
03CBC:  MOVFF  73B,FAA
03CC0:  MOVFF  73A,FA9
03CC4:  MOVFF  73C,FA8
03CC8:  BCF    FA6.6
03CCA:  BCF    FA6.7
03CCC:  BSF    FA6.2
03CCE:  MOVLB  F
03CD0:  MOVLW  55
03CD2:  MOVWF  FA7
03CD4:  MOVLW  AA
03CD6:  MOVWF  FA7
03CD8:  BSF    FA6.1
03CDA:  BTFSC  FA6.1
03CDC:  BRA    3CDA
03CDE:  BCF    FA6.2
03CE0:  MOVF   00,W
03CE2:  IORWF  FF2,F
....................                }
03CE4:  MOVLB  7
03CE6:  MOVFF  735,03
03CEA:  MOVF   x34,W
03CEC:  INCF   x34,F
03CEE:  BTFSC  FD8.2
03CF0:  INCF   x35,F
03CF2:  INCF   x36,F
03CF4:  BTFSC  FD8.2
03CF6:  INCF   x37,F
03CF8:  BRA    3C04
03CFA:  MOVLB  F
....................             }
....................             SMS_Massage2[j] = '\0' ; // end string
03CFC:  MOVLW  A4
03CFE:  MOVLB  7
03D00:  ADDWF  x36,W
03D02:  MOVWF  FE9
03D04:  MOVLW  05
03D06:  ADDWFC x37,W
03D08:  MOVWF  FEA
03D0A:  CLRF   FEF
....................             
....................             j=0;
03D0C:  CLRF   x37
03D0E:  CLRF   x36
....................             i++;
03D10:  INCF   x34,F
03D12:  BTFSC  FD8.2
03D14:  INCF   x35,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03D16:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03D18:  MOVLW  FA
03D1A:  ADDWF  x34,W
03D1C:  MOVWF  FE9
03D1E:  MOVLW  00
03D20:  ADDWFC x35,W
03D22:  MOVWF  FEA
03D24:  MOVF   FEF,W
03D26:  SUBLW  0D
03D28:  BZ    3D34
03D2A:  MOVF   x37,F
03D2C:  BNZ   3D34
03D2E:  MOVF   x36,W
03D30:  SUBLW  29
03D32:  BC    3D84
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03D34:  MOVLW  5D
03D36:  ADDWF  x34,W
03D38:  MOVWF  x3A
03D3A:  MOVLW  00
03D3C:  ADDWFC x35,W
03D3E:  MOVWF  x3B
03D40:  MOVLW  FA
03D42:  ADDWF  x34,W
03D44:  MOVWF  FE9
03D46:  MOVLW  00
03D48:  ADDWFC x35,W
03D4A:  MOVWF  FEA
03D4C:  MOVFF  FEF,73C
03D50:  MOVF   FF2,W
03D52:  MOVWF  00
03D54:  BCF    FF2.7
03D56:  MOVFF  73B,FAA
03D5A:  MOVFF  73A,FA9
03D5E:  MOVFF  73C,FA8
03D62:  BCF    FA6.6
03D64:  BCF    FA6.7
03D66:  BSF    FA6.2
03D68:  MOVLB  F
03D6A:  MOVLW  55
03D6C:  MOVWF  FA7
03D6E:  MOVLW  AA
03D70:  MOVWF  FA7
03D72:  BSF    FA6.1
03D74:  BTFSC  FA6.1
03D76:  BRA    3D74
03D78:  BCF    FA6.2
03D7A:  MOVF   00,W
03D7C:  IORWF  FF2,F
....................                   break;
03D7E:  BRA    3E0E
....................                }
03D80:  BRA    3DF6
03D82:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage3[j] = RxD_Buff[i];
03D84:  MOVLW  CD
03D86:  ADDWF  x36,W
03D88:  MOVWF  01
03D8A:  MOVLW  05
03D8C:  ADDWFC x37,W
03D8E:  MOVWF  03
03D90:  MOVLW  FA
03D92:  ADDWF  x34,W
03D94:  MOVWF  FE9
03D96:  MOVLW  00
03D98:  ADDWFC x35,W
03D9A:  MOVWF  FEA
03D9C:  MOVFF  FEF,73C
03DA0:  MOVFF  03,FEA
03DA4:  MOVFF  01,FE9
03DA8:  MOVFF  73C,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03DAC:  MOVLW  5D
03DAE:  ADDWF  x34,W
03DB0:  MOVWF  x3A
03DB2:  MOVLW  00
03DB4:  ADDWFC x35,W
03DB6:  MOVWF  x3B
03DB8:  MOVLW  FA
03DBA:  ADDWF  x34,W
03DBC:  MOVWF  FE9
03DBE:  MOVLW  00
03DC0:  ADDWFC x35,W
03DC2:  MOVWF  FEA
03DC4:  MOVFF  FEF,73C
03DC8:  MOVF   FF2,W
03DCA:  MOVWF  00
03DCC:  BCF    FF2.7
03DCE:  MOVFF  73B,FAA
03DD2:  MOVFF  73A,FA9
03DD6:  MOVFF  73C,FA8
03DDA:  BCF    FA6.6
03DDC:  BCF    FA6.7
03DDE:  BSF    FA6.2
03DE0:  MOVLB  F
03DE2:  MOVLW  55
03DE4:  MOVWF  FA7
03DE6:  MOVLW  AA
03DE8:  MOVWF  FA7
03DEA:  BSF    FA6.1
03DEC:  BTFSC  FA6.1
03DEE:  BRA    3DEC
03DF0:  BCF    FA6.2
03DF2:  MOVF   00,W
03DF4:  IORWF  FF2,F
....................                }
03DF6:  MOVLB  7
03DF8:  MOVFF  735,03
03DFC:  MOVF   x34,W
03DFE:  INCF   x34,F
03E00:  BTFSC  FD8.2
03E02:  INCF   x35,F
03E04:  INCF   x36,F
03E06:  BTFSC  FD8.2
03E08:  INCF   x37,F
03E0A:  BRA    3D16
03E0C:  MOVLB  F
....................             }
....................             SMS_Massage3[j] = '\0' ; // end string
03E0E:  MOVLW  CD
03E10:  MOVLB  7
03E12:  ADDWF  x36,W
03E14:  MOVWF  FE9
03E16:  MOVLW  05
03E18:  ADDWFC x37,W
03E1A:  MOVWF  FEA
03E1C:  CLRF   FEF
....................             
....................             j=0;
03E1E:  CLRF   x37
03E20:  CLRF   x36
....................             i++;
03E22:  INCF   x34,F
03E24:  BTFSC  FD8.2
03E26:  INCF   x35,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03E28:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03E2A:  MOVLW  FA
03E2C:  ADDWF  x34,W
03E2E:  MOVWF  FE9
03E30:  MOVLW  00
03E32:  ADDWFC x35,W
03E34:  MOVWF  FEA
03E36:  MOVF   FEF,W
03E38:  SUBLW  0D
03E3A:  BZ    3E46
03E3C:  MOVF   x37,F
03E3E:  BNZ   3E46
03E40:  MOVF   x36,W
03E42:  SUBLW  29
03E44:  BC    3E96
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03E46:  MOVLW  5D
03E48:  ADDWF  x34,W
03E4A:  MOVWF  x3A
03E4C:  MOVLW  00
03E4E:  ADDWFC x35,W
03E50:  MOVWF  x3B
03E52:  MOVLW  FA
03E54:  ADDWF  x34,W
03E56:  MOVWF  FE9
03E58:  MOVLW  00
03E5A:  ADDWFC x35,W
03E5C:  MOVWF  FEA
03E5E:  MOVFF  FEF,73C
03E62:  MOVF   FF2,W
03E64:  MOVWF  00
03E66:  BCF    FF2.7
03E68:  MOVFF  73B,FAA
03E6C:  MOVFF  73A,FA9
03E70:  MOVFF  73C,FA8
03E74:  BCF    FA6.6
03E76:  BCF    FA6.7
03E78:  BSF    FA6.2
03E7A:  MOVLB  F
03E7C:  MOVLW  55
03E7E:  MOVWF  FA7
03E80:  MOVLW  AA
03E82:  MOVWF  FA7
03E84:  BSF    FA6.1
03E86:  BTFSC  FA6.1
03E88:  BRA    3E86
03E8A:  BCF    FA6.2
03E8C:  MOVF   00,W
03E8E:  IORWF  FF2,F
....................                   break;
03E90:  BRA    3F20
....................                }
03E92:  BRA    3F08
03E94:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage4[j] = RxD_Buff[i];
03E96:  MOVLW  F6
03E98:  ADDWF  x36,W
03E9A:  MOVWF  01
03E9C:  MOVLW  05
03E9E:  ADDWFC x37,W
03EA0:  MOVWF  03
03EA2:  MOVLW  FA
03EA4:  ADDWF  x34,W
03EA6:  MOVWF  FE9
03EA8:  MOVLW  00
03EAA:  ADDWFC x35,W
03EAC:  MOVWF  FEA
03EAE:  MOVFF  FEF,73C
03EB2:  MOVFF  03,FEA
03EB6:  MOVFF  01,FE9
03EBA:  MOVFF  73C,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03EBE:  MOVLW  5D
03EC0:  ADDWF  x34,W
03EC2:  MOVWF  x3A
03EC4:  MOVLW  00
03EC6:  ADDWFC x35,W
03EC8:  MOVWF  x3B
03ECA:  MOVLW  FA
03ECC:  ADDWF  x34,W
03ECE:  MOVWF  FE9
03ED0:  MOVLW  00
03ED2:  ADDWFC x35,W
03ED4:  MOVWF  FEA
03ED6:  MOVFF  FEF,73C
03EDA:  MOVF   FF2,W
03EDC:  MOVWF  00
03EDE:  BCF    FF2.7
03EE0:  MOVFF  73B,FAA
03EE4:  MOVFF  73A,FA9
03EE8:  MOVFF  73C,FA8
03EEC:  BCF    FA6.6
03EEE:  BCF    FA6.7
03EF0:  BSF    FA6.2
03EF2:  MOVLB  F
03EF4:  MOVLW  55
03EF6:  MOVWF  FA7
03EF8:  MOVLW  AA
03EFA:  MOVWF  FA7
03EFC:  BSF    FA6.1
03EFE:  BTFSC  FA6.1
03F00:  BRA    3EFE
03F02:  BCF    FA6.2
03F04:  MOVF   00,W
03F06:  IORWF  FF2,F
....................                }
03F08:  MOVLB  7
03F0A:  MOVFF  735,03
03F0E:  MOVF   x34,W
03F10:  INCF   x34,F
03F12:  BTFSC  FD8.2
03F14:  INCF   x35,F
03F16:  INCF   x36,F
03F18:  BTFSC  FD8.2
03F1A:  INCF   x37,F
03F1C:  BRA    3E28
03F1E:  MOVLB  F
....................             }
....................             SMS_Massage4[j] = '\0' ; // end string
03F20:  MOVLW  F6
03F22:  MOVLB  7
03F24:  ADDWF  x36,W
03F26:  MOVWF  FE9
03F28:  MOVLW  05
03F2A:  ADDWFC x37,W
03F2C:  MOVWF  FEA
03F2E:  CLRF   FEF
....................             
....................             j=0;
03F30:  CLRF   x37
03F32:  CLRF   x36
....................             i++;
03F34:  INCF   x34,F
03F36:  BTFSC  FD8.2
03F38:  INCF   x35,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03F3A:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03F3C:  MOVLW  FA
03F3E:  ADDWF  x34,W
03F40:  MOVWF  FE9
03F42:  MOVLW  00
03F44:  ADDWFC x35,W
03F46:  MOVWF  FEA
03F48:  MOVF   FEF,W
03F4A:  SUBLW  0D
03F4C:  BZ    3F58
03F4E:  MOVF   x37,F
03F50:  BNZ   3F58
03F52:  MOVF   x36,W
03F54:  SUBLW  29
03F56:  BC    3FA8
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03F58:  MOVLW  5D
03F5A:  ADDWF  x34,W
03F5C:  MOVWF  x3A
03F5E:  MOVLW  00
03F60:  ADDWFC x35,W
03F62:  MOVWF  x3B
03F64:  MOVLW  FA
03F66:  ADDWF  x34,W
03F68:  MOVWF  FE9
03F6A:  MOVLW  00
03F6C:  ADDWFC x35,W
03F6E:  MOVWF  FEA
03F70:  MOVFF  FEF,73C
03F74:  MOVF   FF2,W
03F76:  MOVWF  00
03F78:  BCF    FF2.7
03F7A:  MOVFF  73B,FAA
03F7E:  MOVFF  73A,FA9
03F82:  MOVFF  73C,FA8
03F86:  BCF    FA6.6
03F88:  BCF    FA6.7
03F8A:  BSF    FA6.2
03F8C:  MOVLB  F
03F8E:  MOVLW  55
03F90:  MOVWF  FA7
03F92:  MOVLW  AA
03F94:  MOVWF  FA7
03F96:  BSF    FA6.1
03F98:  BTFSC  FA6.1
03F9A:  BRA    3F98
03F9C:  BCF    FA6.2
03F9E:  MOVF   00,W
03FA0:  IORWF  FF2,F
....................                   break;
03FA2:  BRA    4032
....................                }
03FA4:  BRA    401A
03FA6:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage5[j] = RxD_Buff[i];
03FA8:  MOVLW  1F
03FAA:  ADDWF  x36,W
03FAC:  MOVWF  01
03FAE:  MOVLW  06
03FB0:  ADDWFC x37,W
03FB2:  MOVWF  03
03FB4:  MOVLW  FA
03FB6:  ADDWF  x34,W
03FB8:  MOVWF  FE9
03FBA:  MOVLW  00
03FBC:  ADDWFC x35,W
03FBE:  MOVWF  FEA
03FC0:  MOVFF  FEF,73C
03FC4:  MOVFF  03,FEA
03FC8:  MOVFF  01,FE9
03FCC:  MOVFF  73C,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03FD0:  MOVLW  5D
03FD2:  ADDWF  x34,W
03FD4:  MOVWF  x3A
03FD6:  MOVLW  00
03FD8:  ADDWFC x35,W
03FDA:  MOVWF  x3B
03FDC:  MOVLW  FA
03FDE:  ADDWF  x34,W
03FE0:  MOVWF  FE9
03FE2:  MOVLW  00
03FE4:  ADDWFC x35,W
03FE6:  MOVWF  FEA
03FE8:  MOVFF  FEF,73C
03FEC:  MOVF   FF2,W
03FEE:  MOVWF  00
03FF0:  BCF    FF2.7
03FF2:  MOVFF  73B,FAA
03FF6:  MOVFF  73A,FA9
03FFA:  MOVFF  73C,FA8
03FFE:  BCF    FA6.6
04000:  BCF    FA6.7
04002:  BSF    FA6.2
04004:  MOVLB  F
04006:  MOVLW  55
04008:  MOVWF  FA7
0400A:  MOVLW  AA
0400C:  MOVWF  FA7
0400E:  BSF    FA6.1
04010:  BTFSC  FA6.1
04012:  BRA    4010
04014:  BCF    FA6.2
04016:  MOVF   00,W
04018:  IORWF  FF2,F
....................                }
0401A:  MOVLB  7
0401C:  MOVFF  735,03
04020:  MOVF   x34,W
04022:  INCF   x34,F
04024:  BTFSC  FD8.2
04026:  INCF   x35,F
04028:  INCF   x36,F
0402A:  BTFSC  FD8.2
0402C:  INCF   x37,F
0402E:  BRA    3F3A
04030:  MOVLB  F
....................             }
....................             SMS_Massage5[j] = '\0' ; // end string
04032:  MOVLW  1F
04034:  MOVLB  7
04036:  ADDWF  x36,W
04038:  MOVWF  FE9
0403A:  MOVLW  06
0403C:  ADDWFC x37,W
0403E:  MOVWF  FEA
04040:  CLRF   FEF
....................             
....................             j=0;
04042:  CLRF   x37
04044:  CLRF   x36
....................             i++;
04046:  INCF   x34,F
04048:  BTFSC  FD8.2
0404A:  INCF   x35,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0404C:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
0404E:  MOVLW  FA
04050:  ADDWF  x34,W
04052:  MOVWF  FE9
04054:  MOVLW  00
04056:  ADDWFC x35,W
04058:  MOVWF  FEA
0405A:  MOVF   FEF,W
0405C:  SUBLW  0D
0405E:  BZ    406A
04060:  MOVF   x37,F
04062:  BNZ   406A
04064:  MOVF   x36,W
04066:  SUBLW  29
04068:  BC    40BA
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0406A:  MOVLW  5D
0406C:  ADDWF  x34,W
0406E:  MOVWF  x3A
04070:  MOVLW  00
04072:  ADDWFC x35,W
04074:  MOVWF  x3B
04076:  MOVLW  FA
04078:  ADDWF  x34,W
0407A:  MOVWF  FE9
0407C:  MOVLW  00
0407E:  ADDWFC x35,W
04080:  MOVWF  FEA
04082:  MOVFF  FEF,73C
04086:  MOVF   FF2,W
04088:  MOVWF  00
0408A:  BCF    FF2.7
0408C:  MOVFF  73B,FAA
04090:  MOVFF  73A,FA9
04094:  MOVFF  73C,FA8
04098:  BCF    FA6.6
0409A:  BCF    FA6.7
0409C:  BSF    FA6.2
0409E:  MOVLB  F
040A0:  MOVLW  55
040A2:  MOVWF  FA7
040A4:  MOVLW  AA
040A6:  MOVWF  FA7
040A8:  BSF    FA6.1
040AA:  BTFSC  FA6.1
040AC:  BRA    40AA
040AE:  BCF    FA6.2
040B0:  MOVF   00,W
040B2:  IORWF  FF2,F
....................                   break;
040B4:  BRA    4148
....................                }
040B6:  BRA    4130
040B8:  MOVLB  7
....................                else
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
040BA:  MOVLW  5D
040BC:  ADDWF  x34,W
040BE:  MOVWF  x3A
040C0:  MOVLW  00
040C2:  ADDWFC x35,W
040C4:  MOVWF  x3B
040C6:  MOVLW  FA
040C8:  ADDWF  x34,W
040CA:  MOVWF  FE9
040CC:  MOVLW  00
040CE:  ADDWFC x35,W
040D0:  MOVWF  FEA
040D2:  MOVFF  FEF,73C
040D6:  MOVF   FF2,W
040D8:  MOVWF  00
040DA:  BCF    FF2.7
040DC:  MOVFF  73B,FAA
040E0:  MOVFF  73A,FA9
040E4:  MOVFF  73C,FA8
040E8:  BCF    FA6.6
040EA:  BCF    FA6.7
040EC:  BSF    FA6.2
040EE:  MOVLB  F
040F0:  MOVLW  55
040F2:  MOVWF  FA7
040F4:  MOVLW  AA
040F6:  MOVWF  FA7
040F8:  BSF    FA6.1
040FA:  BTFSC  FA6.1
040FC:  BRA    40FA
040FE:  BCF    FA6.2
04100:  MOVF   00,W
04102:  IORWF  FF2,F
....................                   SMS_Massage6[j] = RxD_Buff[i];
04104:  MOVLW  48
04106:  MOVLB  7
04108:  ADDWF  x36,W
0410A:  MOVWF  01
0410C:  MOVLW  06
0410E:  ADDWFC x37,W
04110:  MOVWF  03
04112:  MOVLW  FA
04114:  ADDWF  x34,W
04116:  MOVWF  FE9
04118:  MOVLW  00
0411A:  ADDWFC x35,W
0411C:  MOVWF  FEA
0411E:  MOVFF  FEF,73C
04122:  MOVFF  03,FEA
04126:  MOVFF  01,FE9
0412A:  MOVFF  73C,FEF
0412E:  MOVLB  F
....................                }
04130:  MOVLB  7
04132:  MOVFF  735,03
04136:  MOVF   x34,W
04138:  INCF   x34,F
0413A:  BTFSC  FD8.2
0413C:  INCF   x35,F
0413E:  INCF   x36,F
04140:  BTFSC  FD8.2
04142:  INCF   x37,F
04144:  BRA    404C
04146:  MOVLB  F
....................             }
....................             SMS_Massage6[j] = '\0' ; // end string
04148:  MOVLW  48
0414A:  MOVLB  7
0414C:  ADDWF  x36,W
0414E:  MOVWF  FE9
04150:  MOVLW  06
04152:  ADDWFC x37,W
04154:  MOVWF  FEA
04156:  CLRF   FEF
....................             
....................             j=0;
04158:  CLRF   x37
0415A:  CLRF   x36
....................             i++;
0415C:  INCF   x34,F
0415E:  BTFSC  FD8.2
04160:  INCF   x35,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04162:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
04164:  MOVLW  FA
04166:  ADDWF  x34,W
04168:  MOVWF  FE9
0416A:  MOVLW  00
0416C:  ADDWFC x35,W
0416E:  MOVWF  FEA
04170:  MOVF   FEF,W
04172:  SUBLW  0D
04174:  BZ    4180
04176:  MOVF   x37,F
04178:  BNZ   4180
0417A:  MOVF   x36,W
0417C:  SUBLW  29
0417E:  BC    41D0
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04180:  MOVLW  5D
04182:  ADDWF  x34,W
04184:  MOVWF  x3A
04186:  MOVLW  00
04188:  ADDWFC x35,W
0418A:  MOVWF  x3B
0418C:  MOVLW  FA
0418E:  ADDWF  x34,W
04190:  MOVWF  FE9
04192:  MOVLW  00
04194:  ADDWFC x35,W
04196:  MOVWF  FEA
04198:  MOVFF  FEF,73C
0419C:  MOVF   FF2,W
0419E:  MOVWF  00
041A0:  BCF    FF2.7
041A2:  MOVFF  73B,FAA
041A6:  MOVFF  73A,FA9
041AA:  MOVFF  73C,FA8
041AE:  BCF    FA6.6
041B0:  BCF    FA6.7
041B2:  BSF    FA6.2
041B4:  MOVLB  F
041B6:  MOVLW  55
041B8:  MOVWF  FA7
041BA:  MOVLW  AA
041BC:  MOVWF  FA7
041BE:  BSF    FA6.1
041C0:  BTFSC  FA6.1
041C2:  BRA    41C0
041C4:  BCF    FA6.2
041C6:  MOVF   00,W
041C8:  IORWF  FF2,F
....................                   break;
041CA:  BRA    425A
....................                }
041CC:  BRA    4242
041CE:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage7[j] = RxD_Buff[i];
041D0:  MOVLW  71
041D2:  ADDWF  x36,W
041D4:  MOVWF  01
041D6:  MOVLW  06
041D8:  ADDWFC x37,W
041DA:  MOVWF  03
041DC:  MOVLW  FA
041DE:  ADDWF  x34,W
041E0:  MOVWF  FE9
041E2:  MOVLW  00
041E4:  ADDWFC x35,W
041E6:  MOVWF  FEA
041E8:  MOVFF  FEF,73C
041EC:  MOVFF  03,FEA
041F0:  MOVFF  01,FE9
041F4:  MOVFF  73C,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
041F8:  MOVLW  5D
041FA:  ADDWF  x34,W
041FC:  MOVWF  x3A
041FE:  MOVLW  00
04200:  ADDWFC x35,W
04202:  MOVWF  x3B
04204:  MOVLW  FA
04206:  ADDWF  x34,W
04208:  MOVWF  FE9
0420A:  MOVLW  00
0420C:  ADDWFC x35,W
0420E:  MOVWF  FEA
04210:  MOVFF  FEF,73C
04214:  MOVF   FF2,W
04216:  MOVWF  00
04218:  BCF    FF2.7
0421A:  MOVFF  73B,FAA
0421E:  MOVFF  73A,FA9
04222:  MOVFF  73C,FA8
04226:  BCF    FA6.6
04228:  BCF    FA6.7
0422A:  BSF    FA6.2
0422C:  MOVLB  F
0422E:  MOVLW  55
04230:  MOVWF  FA7
04232:  MOVLW  AA
04234:  MOVWF  FA7
04236:  BSF    FA6.1
04238:  BTFSC  FA6.1
0423A:  BRA    4238
0423C:  BCF    FA6.2
0423E:  MOVF   00,W
04240:  IORWF  FF2,F
....................                }
04242:  MOVLB  7
04244:  MOVFF  735,03
04248:  MOVF   x34,W
0424A:  INCF   x34,F
0424C:  BTFSC  FD8.2
0424E:  INCF   x35,F
04250:  INCF   x36,F
04252:  BTFSC  FD8.2
04254:  INCF   x37,F
04256:  BRA    4162
04258:  MOVLB  F
....................             }
....................             SMS_Massage7[j] = '\0' ; // end string
0425A:  MOVLW  71
0425C:  MOVLB  7
0425E:  ADDWF  x36,W
04260:  MOVWF  FE9
04262:  MOVLW  06
04264:  ADDWFC x37,W
04266:  MOVWF  FEA
04268:  CLRF   FEF
....................             
....................             j=0;
0426A:  CLRF   x37
0426C:  CLRF   x36
....................             i++;
0426E:  INCF   x34,F
04270:  BTFSC  FD8.2
04272:  INCF   x35,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04274:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
04276:  MOVLW  FA
04278:  ADDWF  x34,W
0427A:  MOVWF  FE9
0427C:  MOVLW  00
0427E:  ADDWFC x35,W
04280:  MOVWF  FEA
04282:  MOVF   FEF,W
04284:  SUBLW  0D
04286:  BZ    4292
04288:  MOVF   x37,F
0428A:  BNZ   4292
0428C:  MOVF   x36,W
0428E:  SUBLW  29
04290:  BC    42E2
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04292:  MOVLW  5D
04294:  ADDWF  x34,W
04296:  MOVWF  x3A
04298:  MOVLW  00
0429A:  ADDWFC x35,W
0429C:  MOVWF  x3B
0429E:  MOVLW  FA
042A0:  ADDWF  x34,W
042A2:  MOVWF  FE9
042A4:  MOVLW  00
042A6:  ADDWFC x35,W
042A8:  MOVWF  FEA
042AA:  MOVFF  FEF,73C
042AE:  MOVF   FF2,W
042B0:  MOVWF  00
042B2:  BCF    FF2.7
042B4:  MOVFF  73B,FAA
042B8:  MOVFF  73A,FA9
042BC:  MOVFF  73C,FA8
042C0:  BCF    FA6.6
042C2:  BCF    FA6.7
042C4:  BSF    FA6.2
042C6:  MOVLB  F
042C8:  MOVLW  55
042CA:  MOVWF  FA7
042CC:  MOVLW  AA
042CE:  MOVWF  FA7
042D0:  BSF    FA6.1
042D2:  BTFSC  FA6.1
042D4:  BRA    42D2
042D6:  BCF    FA6.2
042D8:  MOVF   00,W
042DA:  IORWF  FF2,F
....................                   break;
042DC:  BRA    436C
....................                }
042DE:  BRA    4354
042E0:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage8[j] = RxD_Buff[i];
042E2:  MOVLW  9A
042E4:  ADDWF  x36,W
042E6:  MOVWF  01
042E8:  MOVLW  06
042EA:  ADDWFC x37,W
042EC:  MOVWF  03
042EE:  MOVLW  FA
042F0:  ADDWF  x34,W
042F2:  MOVWF  FE9
042F4:  MOVLW  00
042F6:  ADDWFC x35,W
042F8:  MOVWF  FEA
042FA:  MOVFF  FEF,73C
042FE:  MOVFF  03,FEA
04302:  MOVFF  01,FE9
04306:  MOVFF  73C,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0430A:  MOVLW  5D
0430C:  ADDWF  x34,W
0430E:  MOVWF  x3A
04310:  MOVLW  00
04312:  ADDWFC x35,W
04314:  MOVWF  x3B
04316:  MOVLW  FA
04318:  ADDWF  x34,W
0431A:  MOVWF  FE9
0431C:  MOVLW  00
0431E:  ADDWFC x35,W
04320:  MOVWF  FEA
04322:  MOVFF  FEF,73C
04326:  MOVF   FF2,W
04328:  MOVWF  00
0432A:  BCF    FF2.7
0432C:  MOVFF  73B,FAA
04330:  MOVFF  73A,FA9
04334:  MOVFF  73C,FA8
04338:  BCF    FA6.6
0433A:  BCF    FA6.7
0433C:  BSF    FA6.2
0433E:  MOVLB  F
04340:  MOVLW  55
04342:  MOVWF  FA7
04344:  MOVLW  AA
04346:  MOVWF  FA7
04348:  BSF    FA6.1
0434A:  BTFSC  FA6.1
0434C:  BRA    434A
0434E:  BCF    FA6.2
04350:  MOVF   00,W
04352:  IORWF  FF2,F
....................                }
04354:  MOVLB  7
04356:  MOVFF  735,03
0435A:  MOVF   x34,W
0435C:  INCF   x34,F
0435E:  BTFSC  FD8.2
04360:  INCF   x35,F
04362:  INCF   x36,F
04364:  BTFSC  FD8.2
04366:  INCF   x37,F
04368:  BRA    4274
0436A:  MOVLB  F
....................             }
....................             SMS_Massage8[j] = '\0' ; // end string
0436C:  MOVLW  9A
0436E:  MOVLB  7
04370:  ADDWF  x36,W
04372:  MOVWF  FE9
04374:  MOVLW  06
04376:  ADDWFC x37,W
04378:  MOVWF  FEA
0437A:  CLRF   FEF
....................             
....................          
....................             TxD_Buff[0] = Address ;         //Address
0437C:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x21 ;            //return function code
04380:  MOVLW  21
04382:  MOVLB  0
04384:  MOVWF  x7B
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
04386:  MOVLB  7
04388:  CLRF   x3C
0438A:  MOVLW  7A
0438C:  MOVWF  x3B
0438E:  MOVLW  02
04390:  MOVWF  x3D
04392:  MOVLB  0
04394:  CALL   1F20
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
04398:  MOVFF  4FB,7C
....................             TxD_Buff[3] = CRC_Lo ;
0439C:  MOVFF  4FA,7D
.................... 
....................             output_bit(P485ctrl,1);
043A0:  BSF    F8A.3
043A2:  BCF    F93.3
....................             delay_ms(10);
043A4:  MOVLW  0A
043A6:  MOVLB  7
043A8:  MOVWF  x3A
043AA:  MOVLB  0
043AC:  CALL   0750
.................... 
....................             putc(Txd_Buff[0]);
043B0:  MOVF   x7A,W
043B2:  CALL   1F76
....................             putc(Txd_Buff[1]);
043B6:  MOVF   x7B,W
043B8:  CALL   1F76
....................             putc(Txd_Buff[2]);
043BC:  MOVF   x7C,W
043BE:  CALL   1F76
....................             putc(Txd_Buff[3]);
043C2:  MOVF   x7D,W
043C4:  CALL   1F76
.................... 
....................             delay_ms(3);
043C8:  MOVLW  03
043CA:  MOVLB  7
043CC:  MOVWF  x3A
043CE:  MOVLB  0
043D0:  CALL   0750
....................             output_bit(P485ctrl,0);
043D4:  BCF    F8A.3
043D6:  BCF    F93.3
043D8:  MOVLB  5
....................          }
.................... 
....................          if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
043DA:  MOVLB  0
043DC:  MOVF   xFB,W
043DE:  SUBLW  03
043E0:  BNZ   446C
....................          {
.................... 
....................             Data_Buff[0] = 0x00;// dummy data
043E2:  MOVLB  5
043E4:  CLRF   x03
....................             Data_Buff[1] = Input1_8;
043E6:  MOVFF  49,504
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
043EA:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x03 ;           //Function Code
043EE:  MOVLW  03
043F0:  MOVLB  0
043F2:  MOVWF  x7B
....................             TxD_Buff[2] = 0x02 ;          //Byte Count
043F4:  MOVLW  02
043F6:  MOVWF  x7C
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
043F8:  MOVFF  503,7D
....................             TxD_Buff[4] = Data_Buff[1];   //first byte Data
043FC:  MOVFF  504,7E
.................... 
....................             CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
04400:  MOVLB  7
04402:  CLRF   x3C
04404:  MOVLW  7A
04406:  MOVWF  x3B
04408:  MOVLW  05
0440A:  MOVWF  x3D
0440C:  MOVLB  0
0440E:  CALL   1F20
.................... 
....................             TxD_Buff[5] = CRC_Hi ;
04412:  MOVFF  4FB,7F
....................             TxD_Buff[6] = CRC_Lo ;
04416:  MOVFF  4FA,80
.................... 
.................... 
....................             output_bit(P485ctrl,1);
0441A:  BSF    F8A.3
0441C:  BCF    F93.3
....................             restart_wdt();
0441E:  CLRWDT
....................             delay_ms(4);
04420:  MOVLW  04
04422:  MOVLB  7
04424:  MOVWF  x3A
04426:  MOVLB  0
04428:  CALL   0750
....................             restart_wdt();
0442C:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
0442E:  MOVF   x7A,W
04430:  CALL   1F76
....................             putc(TxD_Buff[1]) ;               //Function Code
04434:  MOVF   x7B,W
04436:  CALL   1F76
....................             putc(TxD_Buff[2]) ;               //Byte Count
0443A:  MOVF   x7C,W
0443C:  CALL   1F76
....................             putc(TxD_Buff[3]) ;
04440:  MOVF   x7D,W
04442:  CALL   1F76
....................             putc(TxD_Buff[4]) ;
04446:  MOVF   x7E,W
04448:  CALL   1F76
....................             putc(TxD_Buff[5]) ;
0444C:  MOVF   x7F,W
0444E:  CALL   1F76
....................             putc(TxD_Buff[6]) ;
04452:  MOVF   x80,W
04454:  CALL   1F76
.................... 
....................             restart_wdt();
04458:  CLRWDT
....................             delay_ms(3);
0445A:  MOVLW  03
0445C:  MOVLB  7
0445E:  MOVWF  x3A
04460:  MOVLB  0
04462:  CALL   0750
....................             restart_wdt();
04466:  CLRWDT
....................             output_bit(P485ctrl,0);
04468:  BCF    F8A.3
0446A:  BCF    F93.3
.................... 
....................          }
....................        
.................... 
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
0446C:  MOVLW  01
0446E:  MOVLB  4
04470:  MOVWF  xFD
04472:  MOVLW  F4
04474:  MOVWF  xFC
....................    } // if crc
.................... 
....................    recieve_completed = 0 ;
04476:  BCF    30.5
....................    sequence = end_sq ;
04478:  MOVFF  6F,77
....................    T_timeout = 0x00;
0447C:  MOVLB  5
0447E:  CLRF   x69
....................    RxD_DataLen = 0x00 ;
04480:  MOVLB  0
04482:  CLRF   x79
....................    output_bit(P485ctrl,0);
04484:  BCF    F8A.3
04486:  BCF    F93.3
04488:  GOTO   6AA2 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
015C8:  MOVLW  02
015CA:  MOVLB  7
015CC:  MOVWF  x3B
015CE:  MOVLB  0
015D0:  BRA    1492
015D2:  MOVFF  01,567
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
015D6:  BTFSS  1A.4
015D8:  BRA    15E0
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
015DA:  MOVLB  5
015DC:  COMF   x67,F
015DE:  MOVLB  0
....................          
....................       }
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
015E0:  BCF    FD8.0
015E2:  MOVLB  5
015E4:  RRCF   x67,W
015E6:  MOVLB  6
015E8:  BCF    xD5.1
015EA:  BTFSC  FE8.0
015EC:  BSF    xD5.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
015EE:  MOVLB  5
015F0:  RRCF   x67,W
015F2:  MOVWF  00
015F4:  RRCF   00,F
015F6:  MOVLW  3F
015F8:  ANDWF  00,F
015FA:  MOVLB  6
015FC:  BCF    xD5.2
015FE:  BTFSC  00.0
01600:  BSF    xD5.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
01602:  MOVLB  5
01604:  RRCF   x67,W
01606:  MOVWF  00
01608:  RRCF   00,F
0160A:  RRCF   00,F
0160C:  MOVLW  1F
0160E:  ANDWF  00,F
01610:  MOVLB  6
01612:  BCF    xD5.3
01614:  BTFSC  00.0
01616:  BSF    xD5.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
01618:  MOVLB  5
0161A:  SWAPF  x67,W
0161C:  MOVWF  00
0161E:  MOVLW  0F
01620:  ANDWF  00,F
01622:  MOVLB  6
01624:  BCF    xD5.4
01626:  BTFSC  00.0
01628:  BSF    xD5.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
0162A:  MOVLB  5
0162C:  SWAPF  x67,W
0162E:  MOVWF  00
01630:  RRCF   00,F
01632:  MOVLW  07
01634:  ANDWF  00,F
01636:  MOVLB  6
01638:  BCF    xD5.5
0163A:  BTFSC  00.0
0163C:  BSF    xD5.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
0163E:  MOVLB  5
01640:  SWAPF  x67,W
01642:  MOVWF  00
01644:  RRCF   00,F
01646:  RRCF   00,F
01648:  MOVLW  03
0164A:  ANDWF  00,F
0164C:  MOVLB  6
0164E:  BCF    xD5.6
01650:  BTFSC  00.0
01652:  BSF    xD5.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
01654:  CLRF   00
01656:  MOVLB  5
01658:  BTFSC  x67.7
0165A:  BSF    00.0
0165C:  MOVLB  6
0165E:  BCF    xD5.7
01660:  BTFSC  00.0
01662:  BSF    xD5.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
01664:  MOVLW  02
01666:  MOVLB  7
01668:  MOVWF  x3B
0166A:  MOVLB  0
0166C:  BRA    14B0
0166E:  MOVFF  01,567
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01672:  BTFSS  1A.4
01674:  BRA    167C
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01676:  MOVLB  5
01678:  COMF   x67,F
0167A:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
0167C:  MOVLB  6
0167E:  BCF    xD6.0
01680:  MOVLB  5
01682:  BTFSS  x67.0
01684:  BRA    168C
01686:  MOVLB  6
01688:  BSF    xD6.0
0168A:  MOVLB  5
....................       
.................... 
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=8; i++)
0168C:  MOVLW  01
0168E:  MOVLB  7
01690:  MOVWF  x3A
01692:  MOVF   x3A,W
01694:  SUBLW  08
01696:  BTFSS  FD8.0
01698:  BRA    1B6A
....................       {
....................          if(FaultNCNO[i] ==NO)
0169A:  MOVFF  73A,73E
0169E:  MOVLW  07
016A0:  MOVWF  x40
016A2:  MOVLW  29
016A4:  MOVWF  x3F
016A6:  MOVLB  0
016A8:  RCALL  14CE
016AA:  MOVF   01,W
016AC:  ANDLW  01
016AE:  SUBLW  01
016B0:  BTFSS  FD8.2
016B2:  BRA    18FE
....................          {
....................              if(FaultNow[i]==0)
016B4:  MOVFF  73A,73E
016B8:  MOVLW  06
016BA:  MOVLB  7
016BC:  MOVWF  x40
016BE:  MOVLW  D5
016C0:  MOVWF  x3F
016C2:  MOVLB  0
016C4:  RCALL  14CE
016C6:  MOVF   01,W
016C8:  ANDLW  01
016CA:  BTFSS  FD8.2
016CC:  BRA    17E6
....................              {   
....................                if(FaultAgo[i]==0)
016CE:  MOVFF  73A,73E
016D2:  MOVLW  06
016D4:  MOVLB  7
016D6:  MOVWF  x40
016D8:  MOVLW  D2
016DA:  MOVWF  x3F
016DC:  MOVLB  0
016DE:  RCALL  14CE
016E0:  MOVF   01,W
016E2:  ANDLW  01
016E4:  BTFSS  FD8.2
016E6:  BRA    17CA
....................                {
....................                    ReleaseTime[i]++;
016E8:  BCF    FD8.0
016EA:  MOVLB  7
016EC:  RLCF   x3A,W
016EE:  CLRF   03
016F0:  ADDLW  D8
016F2:  MOVWF  FE9
016F4:  MOVLW  06
016F6:  ADDWFC 03,W
016F8:  MOVWF  FEA
016FA:  MOVLW  01
016FC:  ADDWF  FEE,F
016FE:  BNC   1702
01700:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01702:  BCF    FD8.0
01704:  RLCF   x3A,W
01706:  CLRF   03
01708:  ADDLW  D8
0170A:  MOVWF  FE9
0170C:  MOVLW  06
0170E:  ADDWFC 03,W
01710:  MOVWF  FEA
01712:  MOVFF  FEC,73C
01716:  MOVF   FED,F
01718:  MOVFF  FEF,73B
0171C:  BCF    FD8.0
0171E:  RLCF   x3A,W
01720:  MOVWF  FE9
01722:  MOVLW  07
01724:  MOVWF  FEA
01726:  MOVFF  FEC,740
0172A:  MOVF   FED,F
0172C:  MOVFF  FEF,73F
01730:  CLRF   x42
01732:  MOVLW  4B
01734:  MOVWF  x41
01736:  MOVLB  0
01738:  RCALL  1504
0173A:  MOVFF  02,73E
0173E:  MOVFF  01,73D
01742:  MOVLW  0F
01744:  MOVLB  7
01746:  ADDWF  01,W
01748:  MOVWF  01
0174A:  MOVLW  00
0174C:  ADDWFC 02,W
0174E:  MOVWF  03
01750:  MOVF   03,W
01752:  SUBWF  x3C,W
01754:  BNC   17C6
01756:  BNZ   175E
01758:  MOVF   01,W
0175A:  SUBWF  x3B,W
0175C:  BNC   17C6
....................                    {   
....................                      ReleaseTime[i] = 0;
0175E:  BCF    FD8.0
01760:  RLCF   x3A,W
01762:  CLRF   03
01764:  ADDLW  D8
01766:  MOVWF  FE9
01768:  MOVLW  06
0176A:  ADDWFC 03,W
0176C:  MOVWF  FEA
0176E:  CLRF   FEC
01770:  MOVF   FED,F
01772:  CLRF   FEF
....................                      switch(i)
01774:  MOVLW  01
01776:  SUBWF  x3A,W
01778:  ADDLW  F8
0177A:  BC    17C6
0177C:  ADDLW  08
0177E:  MOVLB  0
01780:  GOTO   1C0C
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01784:  MOVLB  6
01786:  BCF    xC3.0
....................                         break;
01788:  MOVLB  7
0178A:  BRA    17C6
....................                         case 2:
....................                            Inputt.B2 = 0; 
0178C:  MOVLB  6
0178E:  BCF    xC3.1
....................                         break;
01790:  MOVLB  7
01792:  BRA    17C6
....................                         case 3:
....................                            Inputt.B3 = 0; 
01794:  MOVLB  6
01796:  BCF    xC3.2
....................                         break;
01798:  MOVLB  7
0179A:  BRA    17C6
....................                         case 4:
....................                            Inputt.B4 = 0; 
0179C:  MOVLB  6
0179E:  BCF    xC3.3
....................                         break;
017A0:  MOVLB  7
017A2:  BRA    17C6
....................                         case 5:
....................                            Inputt.B5 = 0; 
017A4:  MOVLB  6
017A6:  BCF    xC3.4
....................                         break;
017A8:  MOVLB  7
017AA:  BRA    17C6
....................                         case 6:
....................                            Inputt.B6 = 0; 
017AC:  MOVLB  6
017AE:  BCF    xC3.5
....................                         break;
017B0:  MOVLB  7
017B2:  BRA    17C6
....................                         case 7:
....................                            Inputt.B7 = 0; 
017B4:  MOVLB  6
017B6:  BCF    xC3.6
....................                          break;
017B8:  MOVLB  7
017BA:  BRA    17C6
....................                          case 8:
....................                            Inputt.B8 = 0; 
017BC:  MOVLB  6
017BE:  BCF    xC3.7
....................                         break;
017C0:  MOVLB  7
017C2:  BRA    17C6
017C4:  MOVLB  7
....................            
....................                      }                 
....................                    }
....................                }
017C6:  BRA    17E2
017C8:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
017CA:  BCF    FD8.0
017CC:  MOVLB  7
017CE:  RLCF   x3A,W
017D0:  CLRF   03
017D2:  ADDLW  D8
017D4:  MOVWF  FE9
017D6:  MOVLW  06
017D8:  ADDWFC 03,W
017DA:  MOVWF  FEA
017DC:  CLRF   FEC
017DE:  MOVF   FED,F
017E0:  CLRF   FEF
....................                }
....................              }
017E2:  BRA    18FC
017E4:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
017E6:  MOVFF  73A,73E
017EA:  MOVLW  06
017EC:  MOVLB  7
017EE:  MOVWF  x40
017F0:  MOVLW  D2
017F2:  MOVWF  x3F
017F4:  MOVLB  0
017F6:  RCALL  14CE
017F8:  MOVF   01,W
017FA:  ANDLW  01
017FC:  SUBLW  01
017FE:  BTFSS  FD8.2
01800:  BRA    18E4
....................                {
....................                    ReleaseTime[i]++;
01802:  BCF    FD8.0
01804:  MOVLB  7
01806:  RLCF   x3A,W
01808:  CLRF   03
0180A:  ADDLW  D8
0180C:  MOVWF  FE9
0180E:  MOVLW  06
01810:  ADDWFC 03,W
01812:  MOVWF  FEA
01814:  MOVLW  01
01816:  ADDWF  FEE,F
01818:  BNC   181C
0181A:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0181C:  BCF    FD8.0
0181E:  RLCF   x3A,W
01820:  CLRF   03
01822:  ADDLW  D8
01824:  MOVWF  FE9
01826:  MOVLW  06
01828:  ADDWFC 03,W
0182A:  MOVWF  FEA
0182C:  MOVFF  FEC,73C
01830:  MOVF   FED,F
01832:  MOVFF  FEF,73B
01836:  BCF    FD8.0
01838:  RLCF   x3A,W
0183A:  MOVWF  FE9
0183C:  MOVLW  07
0183E:  MOVWF  FEA
01840:  MOVFF  FEC,740
01844:  MOVF   FED,F
01846:  MOVFF  FEF,73F
0184A:  CLRF   x42
0184C:  MOVLW  4B
0184E:  MOVWF  x41
01850:  MOVLB  0
01852:  RCALL  1504
01854:  MOVFF  02,73E
01858:  MOVFF  01,73D
0185C:  MOVLW  0F
0185E:  MOVLB  7
01860:  ADDWF  01,W
01862:  MOVWF  01
01864:  MOVLW  00
01866:  ADDWFC 02,W
01868:  MOVWF  03
0186A:  MOVF   03,W
0186C:  SUBWF  x3C,W
0186E:  BNC   18E0
01870:  BNZ   1878
01872:  MOVF   01,W
01874:  SUBWF  x3B,W
01876:  BNC   18E0
....................                    {   
....................                      ReleaseTime[i] = 1;
01878:  BCF    FD8.0
0187A:  RLCF   x3A,W
0187C:  CLRF   03
0187E:  ADDLW  D8
01880:  MOVWF  FE9
01882:  MOVLW  06
01884:  ADDWFC 03,W
01886:  MOVWF  FEA
01888:  CLRF   FEC
0188A:  MOVF   FED,F
0188C:  MOVLW  01
0188E:  MOVWF  FEF
....................                      switch(i)
01890:  SUBWF  x3A,W
01892:  ADDLW  F8
01894:  BC    18E0
01896:  ADDLW  08
01898:  MOVLB  0
0189A:  GOTO   1C36
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
0189E:  MOVLB  6
018A0:  BSF    xC3.0
....................                         break;
018A2:  MOVLB  7
018A4:  BRA    18E0
....................                         case 2:
....................                            Inputt.B2 = 1; 
018A6:  MOVLB  6
018A8:  BSF    xC3.1
....................                         break;
018AA:  MOVLB  7
018AC:  BRA    18E0
....................                         case 3:
....................                            Inputt.B3 = 1; 
018AE:  MOVLB  6
018B0:  BSF    xC3.2
....................                         break;
018B2:  MOVLB  7
018B4:  BRA    18E0
....................                         case 4:
....................                            Inputt.B4 = 1; 
018B6:  MOVLB  6
018B8:  BSF    xC3.3
....................                         break;
018BA:  MOVLB  7
018BC:  BRA    18E0
....................                         case 5:
....................                            Inputt.B5 = 1; 
018BE:  MOVLB  6
018C0:  BSF    xC3.4
....................                         break;
018C2:  MOVLB  7
018C4:  BRA    18E0
....................                         case 6:
....................                            Inputt.B6 = 1; 
018C6:  MOVLB  6
018C8:  BSF    xC3.5
....................                         break;
018CA:  MOVLB  7
018CC:  BRA    18E0
....................                         case 7:
....................                            Inputt.B7 = 1; 
018CE:  MOVLB  6
018D0:  BSF    xC3.6
....................                          break;
018D2:  MOVLB  7
018D4:  BRA    18E0
....................                          case 8:
....................                            Inputt.B8 = 1; 
018D6:  MOVLB  6
018D8:  BSF    xC3.7
....................                         break;
018DA:  MOVLB  7
018DC:  BRA    18E0
018DE:  MOVLB  7
....................          
....................                      }                 
....................                    }
....................                }
018E0:  BRA    18FC
018E2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
018E4:  BCF    FD8.0
018E6:  MOVLB  7
018E8:  RLCF   x3A,W
018EA:  CLRF   03
018EC:  ADDLW  D8
018EE:  MOVWF  FE9
018F0:  MOVLW  06
018F2:  ADDWFC 03,W
018F4:  MOVWF  FEA
018F6:  CLRF   FEC
018F8:  MOVF   FED,F
018FA:  CLRF   FEF
....................                }
....................              
.................... 
....................              }
....................           }
018FC:  BRA    1B62
....................           else if(FaultNCNO[i] ==NC)
018FE:  MOVFF  73A,73E
01902:  MOVLW  07
01904:  MOVLB  7
01906:  MOVWF  x40
01908:  MOVLW  29
0190A:  MOVWF  x3F
0190C:  MOVLB  0
0190E:  RCALL  14CE
01910:  MOVF   01,W
01912:  ANDLW  01
01914:  BTFSS  FD8.2
01916:  BRA    1B64
....................           {
....................              if(FaultNow[i]==1)
01918:  MOVFF  73A,73E
0191C:  MOVLW  06
0191E:  MOVLB  7
01920:  MOVWF  x40
01922:  MOVLW  D5
01924:  MOVWF  x3F
01926:  MOVLB  0
01928:  RCALL  14CE
0192A:  MOVF   01,W
0192C:  ANDLW  01
0192E:  SUBLW  01
01930:  BTFSS  FD8.2
01932:  BRA    1A4E
....................              {
....................                if(FaultAgo[i]==1)
01934:  MOVFF  73A,73E
01938:  MOVLW  06
0193A:  MOVLB  7
0193C:  MOVWF  x40
0193E:  MOVLW  D2
01940:  MOVWF  x3F
01942:  MOVLB  0
01944:  RCALL  14CE
01946:  MOVF   01,W
01948:  ANDLW  01
0194A:  SUBLW  01
0194C:  BTFSS  FD8.2
0194E:  BRA    1A32
....................                {
....................                    ReleaseTime[i]++;
01950:  BCF    FD8.0
01952:  MOVLB  7
01954:  RLCF   x3A,W
01956:  CLRF   03
01958:  ADDLW  D8
0195A:  MOVWF  FE9
0195C:  MOVLW  06
0195E:  ADDWFC 03,W
01960:  MOVWF  FEA
01962:  MOVLW  01
01964:  ADDWF  FEE,F
01966:  BNC   196A
01968:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0196A:  BCF    FD8.0
0196C:  RLCF   x3A,W
0196E:  CLRF   03
01970:  ADDLW  D8
01972:  MOVWF  FE9
01974:  MOVLW  06
01976:  ADDWFC 03,W
01978:  MOVWF  FEA
0197A:  MOVFF  FEC,73C
0197E:  MOVF   FED,F
01980:  MOVFF  FEF,73B
01984:  BCF    FD8.0
01986:  RLCF   x3A,W
01988:  MOVWF  FE9
0198A:  MOVLW  07
0198C:  MOVWF  FEA
0198E:  MOVFF  FEC,740
01992:  MOVF   FED,F
01994:  MOVFF  FEF,73F
01998:  CLRF   x42
0199A:  MOVLW  4B
0199C:  MOVWF  x41
0199E:  MOVLB  0
019A0:  RCALL  1504
019A2:  MOVFF  02,73E
019A6:  MOVFF  01,73D
019AA:  MOVLW  0F
019AC:  MOVLB  7
019AE:  ADDWF  01,W
019B0:  MOVWF  01
019B2:  MOVLW  00
019B4:  ADDWFC 02,W
019B6:  MOVWF  03
019B8:  MOVF   03,W
019BA:  SUBWF  x3C,W
019BC:  BNC   1A2E
019BE:  BNZ   19C6
019C0:  MOVF   01,W
019C2:  SUBWF  x3B,W
019C4:  BNC   1A2E
....................                    {   
....................                      ReleaseTime[i] = 0;
019C6:  BCF    FD8.0
019C8:  RLCF   x3A,W
019CA:  CLRF   03
019CC:  ADDLW  D8
019CE:  MOVWF  FE9
019D0:  MOVLW  06
019D2:  ADDWFC 03,W
019D4:  MOVWF  FEA
019D6:  CLRF   FEC
019D8:  MOVF   FED,F
019DA:  CLRF   FEF
....................                      switch(i)
019DC:  MOVLW  01
019DE:  SUBWF  x3A,W
019E0:  ADDLW  F8
019E2:  BC    1A2E
019E4:  ADDLW  08
019E6:  MOVLB  0
019E8:  GOTO   1C60
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
019EC:  MOVLB  6
019EE:  BSF    xC3.0
....................                         break;
019F0:  MOVLB  7
019F2:  BRA    1A2E
....................                         case 2:
....................                            Inputt.B2 = 1; 
019F4:  MOVLB  6
019F6:  BSF    xC3.1
....................                         break;
019F8:  MOVLB  7
019FA:  BRA    1A2E
....................                         case 3:
....................                            Inputt.B3 = 1; 
019FC:  MOVLB  6
019FE:  BSF    xC3.2
....................                         break;
01A00:  MOVLB  7
01A02:  BRA    1A2E
....................                         case 4:
....................                            Inputt.B4 = 1; 
01A04:  MOVLB  6
01A06:  BSF    xC3.3
....................                         break;
01A08:  MOVLB  7
01A0A:  BRA    1A2E
....................                         case 5:
....................                            Inputt.B5 = 1; 
01A0C:  MOVLB  6
01A0E:  BSF    xC3.4
....................                         break;
01A10:  MOVLB  7
01A12:  BRA    1A2E
....................                         case 6:
....................                            Inputt.B6 = 1; 
01A14:  MOVLB  6
01A16:  BSF    xC3.5
....................                         break;
01A18:  MOVLB  7
01A1A:  BRA    1A2E
....................                         case 7:
....................                            Inputt.B7 = 1; 
01A1C:  MOVLB  6
01A1E:  BSF    xC3.6
....................                          break;
01A20:  MOVLB  7
01A22:  BRA    1A2E
....................                          case 8:
....................                            Inputt.B8 = 1; 
01A24:  MOVLB  6
01A26:  BSF    xC3.7
....................                         break;
01A28:  MOVLB  7
01A2A:  BRA    1A2E
01A2C:  MOVLB  7
....................                                            
....................                      }                 
....................                   }
....................                }
01A2E:  BRA    1A4A
01A30:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01A32:  BCF    FD8.0
01A34:  MOVLB  7
01A36:  RLCF   x3A,W
01A38:  CLRF   03
01A3A:  ADDLW  D8
01A3C:  MOVWF  FE9
01A3E:  MOVLW  06
01A40:  ADDWFC 03,W
01A42:  MOVWF  FEA
01A44:  CLRF   FEC
01A46:  MOVF   FED,F
01A48:  CLRF   FEF
....................                }
....................              }
01A4A:  BRA    1B62
01A4C:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
01A4E:  MOVFF  73A,73E
01A52:  MOVLW  06
01A54:  MOVLB  7
01A56:  MOVWF  x40
01A58:  MOVLW  D2
01A5A:  MOVWF  x3F
01A5C:  MOVLB  0
01A5E:  RCALL  14CE
01A60:  MOVF   01,W
01A62:  ANDLW  01
01A64:  BTFSS  FD8.2
01A66:  BRA    1B4A
....................                {
....................                    ReleaseTime[i]++;
01A68:  BCF    FD8.0
01A6A:  MOVLB  7
01A6C:  RLCF   x3A,W
01A6E:  CLRF   03
01A70:  ADDLW  D8
01A72:  MOVWF  FE9
01A74:  MOVLW  06
01A76:  ADDWFC 03,W
01A78:  MOVWF  FEA
01A7A:  MOVLW  01
01A7C:  ADDWF  FEE,F
01A7E:  BNC   1A82
01A80:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01A82:  BCF    FD8.0
01A84:  RLCF   x3A,W
01A86:  CLRF   03
01A88:  ADDLW  D8
01A8A:  MOVWF  FE9
01A8C:  MOVLW  06
01A8E:  ADDWFC 03,W
01A90:  MOVWF  FEA
01A92:  MOVFF  FEC,73C
01A96:  MOVF   FED,F
01A98:  MOVFF  FEF,73B
01A9C:  BCF    FD8.0
01A9E:  RLCF   x3A,W
01AA0:  MOVWF  FE9
01AA2:  MOVLW  07
01AA4:  MOVWF  FEA
01AA6:  MOVFF  FEC,740
01AAA:  MOVF   FED,F
01AAC:  MOVFF  FEF,73F
01AB0:  CLRF   x42
01AB2:  MOVLW  4B
01AB4:  MOVWF  x41
01AB6:  MOVLB  0
01AB8:  RCALL  1504
01ABA:  MOVFF  02,73E
01ABE:  MOVFF  01,73D
01AC2:  MOVLW  0F
01AC4:  MOVLB  7
01AC6:  ADDWF  01,W
01AC8:  MOVWF  01
01ACA:  MOVLW  00
01ACC:  ADDWFC 02,W
01ACE:  MOVWF  03
01AD0:  MOVF   03,W
01AD2:  SUBWF  x3C,W
01AD4:  BNC   1B46
01AD6:  BNZ   1ADE
01AD8:  MOVF   01,W
01ADA:  SUBWF  x3B,W
01ADC:  BNC   1B46
....................                    {   
....................                      ReleaseTime[i] = 0;
01ADE:  BCF    FD8.0
01AE0:  RLCF   x3A,W
01AE2:  CLRF   03
01AE4:  ADDLW  D8
01AE6:  MOVWF  FE9
01AE8:  MOVLW  06
01AEA:  ADDWFC 03,W
01AEC:  MOVWF  FEA
01AEE:  CLRF   FEC
01AF0:  MOVF   FED,F
01AF2:  CLRF   FEF
....................                      switch(i)
01AF4:  MOVLW  01
01AF6:  SUBWF  x3A,W
01AF8:  ADDLW  F8
01AFA:  BC    1B46
01AFC:  ADDLW  08
01AFE:  MOVLB  0
01B00:  GOTO   1C8A
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01B04:  MOVLB  6
01B06:  BCF    xC3.0
....................                         break;
01B08:  MOVLB  7
01B0A:  BRA    1B46
....................                         case 2:
....................                            Inputt.B2 = 0; 
01B0C:  MOVLB  6
01B0E:  BCF    xC3.1
....................                         break;
01B10:  MOVLB  7
01B12:  BRA    1B46
....................                         case 3:
....................                            Inputt.B3 = 0; 
01B14:  MOVLB  6
01B16:  BCF    xC3.2
....................                         break;
01B18:  MOVLB  7
01B1A:  BRA    1B46
....................                         case 4:
....................                            Inputt.B4 = 0; 
01B1C:  MOVLB  6
01B1E:  BCF    xC3.3
....................                         break;
01B20:  MOVLB  7
01B22:  BRA    1B46
....................                         case 5:
....................                            Inputt.B5 = 0; 
01B24:  MOVLB  6
01B26:  BCF    xC3.4
....................                         break;
01B28:  MOVLB  7
01B2A:  BRA    1B46
....................                         case 6:
....................                            Inputt.B6 = 0; 
01B2C:  MOVLB  6
01B2E:  BCF    xC3.5
....................                         break;
01B30:  MOVLB  7
01B32:  BRA    1B46
....................                         case 7:
....................                            Inputt.B7 = 0; 
01B34:  MOVLB  6
01B36:  BCF    xC3.6
....................                          break;
01B38:  MOVLB  7
01B3A:  BRA    1B46
....................                          case 8:
....................                            Inputt.B8 = 0; 
01B3C:  MOVLB  6
01B3E:  BCF    xC3.7
....................                         break;
01B40:  MOVLB  7
01B42:  BRA    1B46
01B44:  MOVLB  7
....................               
....................                      }                 
....................                    }
....................                }
01B46:  BRA    1B62
01B48:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01B4A:  BCF    FD8.0
01B4C:  MOVLB  7
01B4E:  RLCF   x3A,W
01B50:  CLRF   03
01B52:  ADDLW  D8
01B54:  MOVWF  FE9
01B56:  MOVLW  06
01B58:  ADDWFC 03,W
01B5A:  MOVWF  FEA
01B5C:  CLRF   FEC
01B5E:  MOVF   FED,F
01B60:  CLRF   FEF
01B62:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
01B64:  MOVLB  7
01B66:  INCF   x3A,F
01B68:  BRA    1692
....................       }
....................       
....................       StoreReleaseFault();
01B6A:  MOVLB  0
01B6C:  BRA    156A
.................... 
....................    
....................       Input1_8 = 0x00;
01B6E:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
01B70:  MOVLW  00
01B72:  MOVLB  6
01B74:  BTFSS  xC3.7
01B76:  MOVLW  01
01B78:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
01B7A:  BCF    FD8.0
01B7C:  RLCF   49,W
01B7E:  MOVLB  7
01B80:  MOVWF  x3B
01B82:  MOVLW  00
01B84:  MOVLB  6
01B86:  BTFSS  xC3.6
01B88:  MOVLW  01
01B8A:  MOVLB  7
01B8C:  IORWF  x3B,W
01B8E:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
01B90:  BCF    FD8.0
01B92:  RLCF   49,W
01B94:  MOVWF  x3B
01B96:  MOVLW  00
01B98:  MOVLB  6
01B9A:  BTFSS  xC3.5
01B9C:  MOVLW  01
01B9E:  MOVLB  7
01BA0:  IORWF  x3B,W
01BA2:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
01BA4:  BCF    FD8.0
01BA6:  RLCF   49,W
01BA8:  MOVWF  x3B
01BAA:  MOVLW  00
01BAC:  MOVLB  6
01BAE:  BTFSS  xC3.4
01BB0:  MOVLW  01
01BB2:  MOVLB  7
01BB4:  IORWF  x3B,W
01BB6:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
01BB8:  BCF    FD8.0
01BBA:  RLCF   49,W
01BBC:  MOVWF  x3B
01BBE:  MOVLW  00
01BC0:  MOVLB  6
01BC2:  BTFSS  xC3.3
01BC4:  MOVLW  01
01BC6:  MOVLB  7
01BC8:  IORWF  x3B,W
01BCA:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
01BCC:  BCF    FD8.0
01BCE:  RLCF   49,W
01BD0:  MOVWF  x3B
01BD2:  MOVLW  00
01BD4:  MOVLB  6
01BD6:  BTFSS  xC3.2
01BD8:  MOVLW  01
01BDA:  MOVLB  7
01BDC:  IORWF  x3B,W
01BDE:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
01BE0:  BCF    FD8.0
01BE2:  RLCF   49,W
01BE4:  MOVWF  x3B
01BE6:  MOVLW  00
01BE8:  MOVLB  6
01BEA:  BTFSS  xC3.1
01BEC:  MOVLW  01
01BEE:  MOVLB  7
01BF0:  IORWF  x3B,W
01BF2:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
01BF4:  BCF    FD8.0
01BF6:  RLCF   49,W
01BF8:  MOVWF  x3B
01BFA:  MOVLW  00
01BFC:  MOVLB  6
01BFE:  BTFSS  xC3.0
01C00:  MOVLW  01
01C02:  MOVLB  7
01C04:  IORWF  x3B,W
01C06:  MOVWF  49
01C08:  MOVLB  0
01C0A:  RETURN 0
....................     
.................... 
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Inputt type 1-8
*
0086E:  MOVFF  FF2,73B
00872:  BCF    FF2.7
00874:  CLRF   FAA
00876:  MOVLW  01
00878:  MOVWF  FA9
0087A:  BCF    FA6.6
0087C:  BCF    FA6.7
0087E:  BSF    FA6.0
00880:  MOVF   FA8,W
00882:  MOVLB  7
00884:  BTFSC  x3B.7
00886:  BSF    FF2.7
00888:  MOVWF  39
....................    InputType1_8 = EEpDat;
0088A:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
0088E:  MOVLB  6
00890:  BCF    xC5.0
00892:  BTFSC  39.0
00894:  BSF    xC5.0
....................    InputType.B2 = EEpDat >> 1;
00896:  BCF    FD8.0
00898:  RRCF   39,W
0089A:  BCF    xC5.1
0089C:  BTFSC  FE8.0
0089E:  BSF    xC5.1
....................    InputType.B3 = EEpDat >> 2;
008A0:  RRCF   39,W
008A2:  MOVWF  00
008A4:  RRCF   00,F
008A6:  MOVLW  3F
008A8:  ANDWF  00,F
008AA:  BCF    xC5.2
008AC:  BTFSC  00.0
008AE:  BSF    xC5.2
....................    InputType.B4 = EEpDat >> 3;
008B0:  RRCF   39,W
008B2:  MOVWF  00
008B4:  RRCF   00,F
008B6:  RRCF   00,F
008B8:  MOVLW  1F
008BA:  ANDWF  00,F
008BC:  BCF    xC5.3
008BE:  BTFSC  00.0
008C0:  BSF    xC5.3
....................    InputType.B5 = EEpDat >> 4;
008C2:  SWAPF  39,W
008C4:  MOVWF  00
008C6:  MOVLW  0F
008C8:  ANDWF  00,F
008CA:  BCF    xC5.4
008CC:  BTFSC  00.0
008CE:  BSF    xC5.4
....................    InputType.B6 = EEpDat >> 5;
008D0:  SWAPF  39,W
008D2:  MOVWF  00
008D4:  RRCF   00,F
008D6:  MOVLW  07
008D8:  ANDWF  00,F
008DA:  BCF    xC5.5
008DC:  BTFSC  00.0
008DE:  BSF    xC5.5
....................    InputType.B7 = EEpDat >> 6;
008E0:  SWAPF  39,W
008E2:  MOVWF  00
008E4:  RRCF   00,F
008E6:  RRCF   00,F
008E8:  MOVLW  03
008EA:  ANDWF  00,F
008EC:  BCF    xC5.6
008EE:  BTFSC  00.0
008F0:  BSF    xC5.6
....................    InputType.B8 = EEpDat >> 7;
008F2:  CLRF   00
008F4:  BTFSC  39.7
008F6:  BSF    00.0
008F8:  BCF    xC5.7
008FA:  BTFSC  00.0
008FC:  BSF    xC5.7
.................... 
....................    FaultNCNO[1] = InputType.B1;
008FE:  MOVLB  7
00900:  BCF    x29.1
00902:  MOVLB  6
00904:  BTFSS  xC5.0
00906:  BRA    090E
00908:  MOVLB  7
0090A:  BSF    x29.1
0090C:  MOVLB  6
....................    FaultNCNO[2] = InputType.B2;
0090E:  MOVLB  7
00910:  BCF    x29.2
00912:  MOVLB  6
00914:  BTFSS  xC5.1
00916:  BRA    091E
00918:  MOVLB  7
0091A:  BSF    x29.2
0091C:  MOVLB  6
....................    FaultNCNO[3] = InputType.B3;
0091E:  MOVLB  7
00920:  BCF    x29.3
00922:  MOVLB  6
00924:  BTFSS  xC5.2
00926:  BRA    092E
00928:  MOVLB  7
0092A:  BSF    x29.3
0092C:  MOVLB  6
....................    FaultNCNO[4] = InputType.B4;
0092E:  MOVLB  7
00930:  BCF    x29.4
00932:  MOVLB  6
00934:  BTFSS  xC5.3
00936:  BRA    093E
00938:  MOVLB  7
0093A:  BSF    x29.4
0093C:  MOVLB  6
....................    FaultNCNO[5] = InputType.B5;
0093E:  MOVLB  7
00940:  BCF    x29.5
00942:  MOVLB  6
00944:  BTFSS  xC5.4
00946:  BRA    094E
00948:  MOVLB  7
0094A:  BSF    x29.5
0094C:  MOVLB  6
....................    FaultNCNO[6] = InputType.B6;
0094E:  MOVLB  7
00950:  BCF    x29.6
00952:  MOVLB  6
00954:  BTFSS  xC5.5
00956:  BRA    095E
00958:  MOVLB  7
0095A:  BSF    x29.6
0095C:  MOVLB  6
....................    FaultNCNO[7] = InputType.B7;
0095E:  MOVLB  7
00960:  BCF    x29.7
00962:  MOVLB  6
00964:  BTFSS  xC5.6
00966:  BRA    096E
00968:  MOVLB  7
0096A:  BSF    x29.7
0096C:  MOVLB  6
....................    FaultNCNO[8] = InputType.B8;
0096E:  MOVLB  7
00970:  BCF    x2A.0
00972:  MOVLB  6
00974:  BTFSS  xC5.7
00976:  BRA    097E
00978:  MOVLB  7
0097A:  BSF    x2A.0
0097C:  MOVLB  6
....................   
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
0097E:  MOVFF  FF2,73B
00982:  BCF    FF2.7
00984:  CLRF   FAA
00986:  MOVLW  04
00988:  MOVWF  FA9
0098A:  BCF    FA6.6
0098C:  BCF    FA6.7
0098E:  BSF    FA6.0
00990:  MOVF   FA8,W
00992:  MOVLB  7
00994:  BTFSC  x3B.7
00996:  BSF    FF2.7
00998:  MOVWF  39
....................    FaultType1_8 = EEpDat;
0099A:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
0099E:  MOVLB  6
009A0:  BCF    xC6.0
009A2:  BTFSC  39.0
009A4:  BSF    xC6.0
....................    FaultType.B2 = EEpDat >> 1;
009A6:  BCF    FD8.0
009A8:  RRCF   39,W
009AA:  BCF    xC6.1
009AC:  BTFSC  FE8.0
009AE:  BSF    xC6.1
....................    FaultType.B3 = EEpDat >> 2;
009B0:  RRCF   39,W
009B2:  MOVWF  00
009B4:  RRCF   00,F
009B6:  MOVLW  3F
009B8:  ANDWF  00,F
009BA:  BCF    xC6.2
009BC:  BTFSC  00.0
009BE:  BSF    xC6.2
....................    FaultType.B4 = EEpDat >> 3;
009C0:  RRCF   39,W
009C2:  MOVWF  00
009C4:  RRCF   00,F
009C6:  RRCF   00,F
009C8:  MOVLW  1F
009CA:  ANDWF  00,F
009CC:  BCF    xC6.3
009CE:  BTFSC  00.0
009D0:  BSF    xC6.3
....................    FaultType.B5 = EEpDat >> 4;
009D2:  SWAPF  39,W
009D4:  MOVWF  00
009D6:  MOVLW  0F
009D8:  ANDWF  00,F
009DA:  BCF    xC6.4
009DC:  BTFSC  00.0
009DE:  BSF    xC6.4
....................    FaultType.B6 = EEpDat >> 5;
009E0:  SWAPF  39,W
009E2:  MOVWF  00
009E4:  RRCF   00,F
009E6:  MOVLW  07
009E8:  ANDWF  00,F
009EA:  BCF    xC6.5
009EC:  BTFSC  00.0
009EE:  BSF    xC6.5
....................    FaultType.B7 = EEpDat >> 6;
009F0:  SWAPF  39,W
009F2:  MOVWF  00
009F4:  RRCF   00,F
009F6:  RRCF   00,F
009F8:  MOVLW  03
009FA:  ANDWF  00,F
009FC:  BCF    xC6.6
009FE:  BTFSC  00.0
00A00:  BSF    xC6.6
....................    FaultType.B8 = EEpDat >> 7;
00A02:  CLRF   00
00A04:  BTFSC  39.7
00A06:  BSF    00.0
00A08:  BCF    xC6.7
00A0A:  BTFSC  00.0
00A0C:  BSF    xC6.7
.................... 
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00A0E:  MOVFF  FF2,73B
00A12:  BCF    FF2.7
00A14:  CLRF   FAA
00A16:  MOVLW  07
00A18:  MOVWF  FA9
00A1A:  BCF    FA6.6
00A1C:  BCF    FA6.7
00A1E:  BSF    FA6.0
00A20:  MOVF   FA8,W
00A22:  MOVLB  7
00A24:  BTFSC  x3B.7
00A26:  BSF    FF2.7
00A28:  MOVWF  39
....................    OutputType1_8 = EEpDat;
00A2A:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00A2E:  MOVLB  6
00A30:  BCF    xC7.0
00A32:  BTFSC  39.0
00A34:  BSF    xC7.0
....................    OutputType.B2 = EEpDat >> 1;
00A36:  BCF    FD8.0
00A38:  RRCF   39,W
00A3A:  BCF    xC7.1
00A3C:  BTFSC  FE8.0
00A3E:  BSF    xC7.1
....................    OutputType.B3 = EEpDat >> 2;
00A40:  RRCF   39,W
00A42:  MOVWF  00
00A44:  RRCF   00,F
00A46:  MOVLW  3F
00A48:  ANDWF  00,F
00A4A:  BCF    xC7.2
00A4C:  BTFSC  00.0
00A4E:  BSF    xC7.2
....................    OutputType.B4 = EEpDat >> 3;
00A50:  RRCF   39,W
00A52:  MOVWF  00
00A54:  RRCF   00,F
00A56:  RRCF   00,F
00A58:  MOVLW  1F
00A5A:  ANDWF  00,F
00A5C:  BCF    xC7.3
00A5E:  BTFSC  00.0
00A60:  BSF    xC7.3
....................    OutputType.B5 = EEpDat >> 4;
00A62:  SWAPF  39,W
00A64:  MOVWF  00
00A66:  MOVLW  0F
00A68:  ANDWF  00,F
00A6A:  BCF    xC7.4
00A6C:  BTFSC  00.0
00A6E:  BSF    xC7.4
....................    OutputType.B6 = EEpDat >> 5;
00A70:  SWAPF  39,W
00A72:  MOVWF  00
00A74:  RRCF   00,F
00A76:  MOVLW  07
00A78:  ANDWF  00,F
00A7A:  BCF    xC7.5
00A7C:  BTFSC  00.0
00A7E:  BSF    xC7.5
....................    OutputType.B7 = EEpDat >> 6;
00A80:  SWAPF  39,W
00A82:  MOVWF  00
00A84:  RRCF   00,F
00A86:  RRCF   00,F
00A88:  MOVLW  03
00A8A:  ANDWF  00,F
00A8C:  BCF    xC7.6
00A8E:  BTFSC  00.0
00A90:  BSF    xC7.6
....................    OutputType.B8 = EEpDat >> 7;
00A92:  CLRF   00
00A94:  BTFSC  39.7
00A96:  BSF    00.0
00A98:  BCF    xC7.7
00A9A:  BTFSC  00.0
00A9C:  BSF    xC7.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00A9E:  MOVFF  FF2,73B
00AA2:  BCF    FF2.7
00AA4:  CLRF   FAA
00AA6:  MOVLW  0A
00AA8:  MOVWF  FA9
00AAA:  BCF    FA6.6
00AAC:  BCF    FA6.7
00AAE:  BSF    FA6.0
00AB0:  MOVF   FA8,W
00AB2:  MOVLB  7
00AB4:  BTFSC  x3B.7
00AB6:  BSF    FF2.7
00AB8:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
00ABA:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
00ABE:  MOVLB  6
00AC0:  BCF    xC8.0
00AC2:  BTFSC  39.0
00AC4:  BSF    xC8.0
....................    OutputBoth.B2 = EEpDat >> 1;
00AC6:  BCF    FD8.0
00AC8:  RRCF   39,W
00ACA:  BCF    xC8.1
00ACC:  BTFSC  FE8.0
00ACE:  BSF    xC8.1
....................    OutputBoth.B3 = EEpDat >> 2;
00AD0:  RRCF   39,W
00AD2:  MOVWF  00
00AD4:  RRCF   00,F
00AD6:  MOVLW  3F
00AD8:  ANDWF  00,F
00ADA:  BCF    xC8.2
00ADC:  BTFSC  00.0
00ADE:  BSF    xC8.2
....................    OutputBoth.B4 = EEpDat >> 3;
00AE0:  RRCF   39,W
00AE2:  MOVWF  00
00AE4:  RRCF   00,F
00AE6:  RRCF   00,F
00AE8:  MOVLW  1F
00AEA:  ANDWF  00,F
00AEC:  BCF    xC8.3
00AEE:  BTFSC  00.0
00AF0:  BSF    xC8.3
....................    OutputBoth.B5 = EEpDat >> 4;
00AF2:  SWAPF  39,W
00AF4:  MOVWF  00
00AF6:  MOVLW  0F
00AF8:  ANDWF  00,F
00AFA:  BCF    xC8.4
00AFC:  BTFSC  00.0
00AFE:  BSF    xC8.4
....................    OutputBoth.B6 = EEpDat >> 5;
00B00:  SWAPF  39,W
00B02:  MOVWF  00
00B04:  RRCF   00,F
00B06:  MOVLW  07
00B08:  ANDWF  00,F
00B0A:  BCF    xC8.5
00B0C:  BTFSC  00.0
00B0E:  BSF    xC8.5
....................    OutputBoth.B7 = EEpDat >> 6;
00B10:  SWAPF  39,W
00B12:  MOVWF  00
00B14:  RRCF   00,F
00B16:  RRCF   00,F
00B18:  MOVLW  03
00B1A:  ANDWF  00,F
00B1C:  BCF    xC8.6
00B1E:  BTFSC  00.0
00B20:  BSF    xC8.6
....................    OutputBoth.B8 = EEpDat >> 7;
00B22:  CLRF   00
00B24:  BTFSC  39.7
00B26:  BSF    00.0
00B28:  BCF    xC8.7
00B2A:  BTFSC  00.0
00B2C:  BSF    xC8.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00B2E:  MOVFF  FF2,73B
00B32:  BCF    FF2.7
00B34:  CLRF   FAA
00B36:  MOVLW  0D
00B38:  MOVWF  FA9
00B3A:  BCF    FA6.6
00B3C:  BCF    FA6.7
00B3E:  BSF    FA6.0
00B40:  MOVF   FA8,W
00B42:  MOVLB  7
00B44:  BTFSC  x3B.7
00B46:  BSF    FF2.7
00B48:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
00B4A:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00B4E:  MOVLB  6
00B50:  BCF    xC9.0
00B52:  BTFSC  39.0
00B54:  BSF    xC9.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00B56:  BCF    FD8.0
00B58:  RRCF   39,W
00B5A:  BCF    xC9.1
00B5C:  BTFSC  FE8.0
00B5E:  BSF    xC9.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00B60:  RRCF   39,W
00B62:  MOVWF  00
00B64:  RRCF   00,F
00B66:  MOVLW  3F
00B68:  ANDWF  00,F
00B6A:  BCF    xC9.2
00B6C:  BTFSC  00.0
00B6E:  BSF    xC9.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00B70:  RRCF   39,W
00B72:  MOVWF  00
00B74:  RRCF   00,F
00B76:  RRCF   00,F
00B78:  MOVLW  1F
00B7A:  ANDWF  00,F
00B7C:  BCF    xC9.3
00B7E:  BTFSC  00.0
00B80:  BSF    xC9.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00B82:  SWAPF  39,W
00B84:  MOVWF  00
00B86:  MOVLW  0F
00B88:  ANDWF  00,F
00B8A:  BCF    xC9.4
00B8C:  BTFSC  00.0
00B8E:  BSF    xC9.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00B90:  SWAPF  39,W
00B92:  MOVWF  00
00B94:  RRCF   00,F
00B96:  MOVLW  07
00B98:  ANDWF  00,F
00B9A:  BCF    xC9.5
00B9C:  BTFSC  00.0
00B9E:  BSF    xC9.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00BA0:  SWAPF  39,W
00BA2:  MOVWF  00
00BA4:  RRCF   00,F
00BA6:  RRCF   00,F
00BA8:  MOVLW  03
00BAA:  ANDWF  00,F
00BAC:  BCF    xC9.6
00BAE:  BTFSC  00.0
00BB0:  BSF    xC9.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00BB2:  CLRF   00
00BB4:  BTFSC  39.7
00BB6:  BSF    00.0
00BB8:  BCF    xC9.7
00BBA:  BTFSC  00.0
00BBC:  BSF    xC9.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00BBE:  MOVFF  FF2,73B
00BC2:  BCF    FF2.7
00BC4:  CLRF   FAA
00BC6:  MOVLW  10
00BC8:  MOVWF  FA9
00BCA:  BCF    FA6.6
00BCC:  BCF    FA6.7
00BCE:  BSF    FA6.0
00BD0:  MOVF   FA8,W
00BD2:  MOVLB  7
00BD4:  BTFSC  x3B.7
00BD6:  BSF    FF2.7
00BD8:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00BDA:  MOVLB  6
00BDC:  BCF    xCF.0
00BDE:  BTFSC  39.0
00BE0:  BSF    xCF.0
....................    RED_Colour.B2 = EEpDat >> 1;
00BE2:  BCF    FD8.0
00BE4:  RRCF   39,W
00BE6:  BCF    xCF.1
00BE8:  BTFSC  FE8.0
00BEA:  BSF    xCF.1
....................    RED_Colour.B3 = EEpDat >> 2;
00BEC:  RRCF   39,W
00BEE:  MOVWF  00
00BF0:  RRCF   00,F
00BF2:  MOVLW  3F
00BF4:  ANDWF  00,F
00BF6:  BCF    xCF.2
00BF8:  BTFSC  00.0
00BFA:  BSF    xCF.2
....................    RED_Colour.B4 = EEpDat >> 3;
00BFC:  RRCF   39,W
00BFE:  MOVWF  00
00C00:  RRCF   00,F
00C02:  RRCF   00,F
00C04:  MOVLW  1F
00C06:  ANDWF  00,F
00C08:  BCF    xCF.3
00C0A:  BTFSC  00.0
00C0C:  BSF    xCF.3
....................    RED_Colour.B5 = EEpDat >> 4;
00C0E:  SWAPF  39,W
00C10:  MOVWF  00
00C12:  MOVLW  0F
00C14:  ANDWF  00,F
00C16:  BCF    xCF.4
00C18:  BTFSC  00.0
00C1A:  BSF    xCF.4
....................    RED_Colour.B6 = EEpDat >> 5;
00C1C:  SWAPF  39,W
00C1E:  MOVWF  00
00C20:  RRCF   00,F
00C22:  MOVLW  07
00C24:  ANDWF  00,F
00C26:  BCF    xCF.5
00C28:  BTFSC  00.0
00C2A:  BSF    xCF.5
....................    RED_Colour.B7 = EEpDat >> 6;
00C2C:  SWAPF  39,W
00C2E:  MOVWF  00
00C30:  RRCF   00,F
00C32:  RRCF   00,F
00C34:  MOVLW  03
00C36:  ANDWF  00,F
00C38:  BCF    xCF.6
00C3A:  BTFSC  00.0
00C3C:  BSF    xCF.6
....................    RED_Colour.B8 = EEpDat >> 7;
00C3E:  CLRF   00
00C40:  BTFSC  39.7
00C42:  BSF    00.0
00C44:  BCF    xCF.7
00C46:  BTFSC  00.0
00C48:  BSF    xCF.7
....................     
....................    EEpDat = read_eeprom(0x14);
00C4A:  MOVFF  FF2,73B
00C4E:  BCF    FF2.7
00C50:  CLRF   FAA
00C52:  MOVLW  14
00C54:  MOVWF  FA9
00C56:  BCF    FA6.6
00C58:  BCF    FA6.7
00C5A:  BSF    FA6.0
00C5C:  MOVF   FA8,W
00C5E:  MOVLB  7
00C60:  BTFSC  x3B.7
00C62:  BSF    FF2.7
00C64:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00C66:  MOVLB  6
00C68:  BCF    xD0.0
00C6A:  BTFSC  39.0
00C6C:  BSF    xD0.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00C6E:  BCF    FD8.0
00C70:  RRCF   39,W
00C72:  BCF    xD0.1
00C74:  BTFSC  FE8.0
00C76:  BSF    xD0.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00C78:  RRCF   39,W
00C7A:  MOVWF  00
00C7C:  RRCF   00,F
00C7E:  MOVLW  3F
00C80:  ANDWF  00,F
00C82:  BCF    xD0.2
00C84:  BTFSC  00.0
00C86:  BSF    xD0.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00C88:  RRCF   39,W
00C8A:  MOVWF  00
00C8C:  RRCF   00,F
00C8E:  RRCF   00,F
00C90:  MOVLW  1F
00C92:  ANDWF  00,F
00C94:  BCF    xD0.3
00C96:  BTFSC  00.0
00C98:  BSF    xD0.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00C9A:  SWAPF  39,W
00C9C:  MOVWF  00
00C9E:  MOVLW  0F
00CA0:  ANDWF  00,F
00CA2:  BCF    xD0.4
00CA4:  BTFSC  00.0
00CA6:  BSF    xD0.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00CA8:  SWAPF  39,W
00CAA:  MOVWF  00
00CAC:  RRCF   00,F
00CAE:  MOVLW  07
00CB0:  ANDWF  00,F
00CB2:  BCF    xD0.5
00CB4:  BTFSC  00.0
00CB6:  BSF    xD0.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00CB8:  SWAPF  39,W
00CBA:  MOVWF  00
00CBC:  RRCF   00,F
00CBE:  RRCF   00,F
00CC0:  MOVLW  03
00CC2:  ANDWF  00,F
00CC4:  BCF    xD0.6
00CC6:  BTFSC  00.0
00CC8:  BSF    xD0.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00CCA:  CLRF   00
00CCC:  BTFSC  39.7
00CCE:  BSF    00.0
00CD0:  BCF    xD0.7
00CD2:  BTFSC  00.0
00CD4:  BSF    xD0.7
.................... 
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00CD6:  MOVFF  FF2,73B
00CDA:  BCF    FF2.7
00CDC:  CLRF   FAA
00CDE:  MOVLW  18
00CE0:  MOVWF  FA9
00CE2:  BCF    FA6.6
00CE4:  BCF    FA6.7
00CE6:  BSF    FA6.0
00CE8:  MOVF   FA8,W
00CEA:  MOVLB  7
00CEC:  BTFSC  x3B.7
00CEE:  BSF    FF2.7
00CF0:  MOVLB  0
00CF2:  MOVWF  x6A
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00CF4:  MOVFF  FF2,73B
00CF8:  BCF    FF2.7
00CFA:  CLRF   FAA
00CFC:  MOVLW  19
00CFE:  MOVWF  FA9
00D00:  BCF    FA6.6
00D02:  BCF    FA6.7
00D04:  BSF    FA6.0
00D06:  MOVF   FA8,W
00D08:  MOVLB  7
00D0A:  BTFSC  x3B.7
00D0C:  BSF    FF2.7
00D0E:  MOVLB  0
00D10:  MOVWF  x6B
....................    FlashingRateTime = FlashingRate = read_eeprom(0x1A); // Flashing rate
00D12:  MOVFF  FF2,73B
00D16:  BCF    FF2.7
00D18:  CLRF   FAA
00D1A:  MOVLW  1A
00D1C:  MOVWF  FA9
00D1E:  BCF    FA6.6
00D20:  BCF    FA6.7
00D22:  BSF    FA6.0
00D24:  MOVF   FA8,W
00D26:  MOVLB  7
00D28:  BTFSC  x3B.7
00D2A:  BSF    FF2.7
00D2C:  MOVLB  0
00D2E:  MOVWF  x6C
00D30:  MOVFF  6C,1B
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00D34:  MOVFF  FF2,73B
00D38:  BCF    FF2.7
00D3A:  CLRF   FAA
00D3C:  MOVLW  1B
00D3E:  MOVWF  FA9
00D40:  BCF    FA6.6
00D42:  BCF    FA6.7
00D44:  BSF    FA6.0
00D46:  MOVF   FA8,W
00D48:  MOVLB  7
00D4A:  BTFSC  x3B.7
00D4C:  BSF    FF2.7
00D4E:  MOVLB  0
00D50:  MOVWF  x6D
....................    AllFaultDelayTime = read_eeprom(0x1C);  // Master or slave sync(flashing)
00D52:  MOVFF  FF2,73B
00D56:  BCF    FF2.7
00D58:  CLRF   FAA
00D5A:  MOVLW  1C
00D5C:  MOVWF  FA9
00D5E:  BCF    FA6.6
00D60:  BCF    FA6.7
00D62:  BSF    FA6.0
00D64:  MOVF   FA8,W
00D66:  MOVLB  7
00D68:  BTFSC  x3B.7
00D6A:  BSF    FF2.7
00D6C:  MOVWF  x28
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
00D6E:  MOVFF  FF2,73B
00D72:  BCF    FF2.7
00D74:  CLRF   FAA
00D76:  MOVLW  1D
00D78:  MOVWF  FA9
00D7A:  BCF    FA6.6
00D7C:  BCF    FA6.7
00D7E:  BSF    FA6.0
00D80:  MOVF   FA8,W
00D82:  BTFSC  x3B.7
00D84:  BSF    FF2.7
00D86:  MOVLB  0
00D88:  MOVWF  x78
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
00D8A:  MOVFF  FF2,73B
00D8E:  BCF    FF2.7
00D90:  CLRF   FAA
00D92:  MOVLW  1E
00D94:  MOVWF  FA9
00D96:  BCF    FA6.6
00D98:  BCF    FA6.7
00D9A:  BSF    FA6.0
00D9C:  MOVF   FA8,W
00D9E:  MOVLB  7
00DA0:  BTFSC  x3B.7
00DA2:  BSF    FF2.7
00DA4:  CLRF   x03
00DA6:  MOVWF  x02
....................    FaultDelayTime[2] = read_eeprom(0x1F);
00DA8:  MOVFF  FF2,73B
00DAC:  BCF    FF2.7
00DAE:  CLRF   FAA
00DB0:  MOVLW  1F
00DB2:  MOVWF  FA9
00DB4:  BCF    FA6.6
00DB6:  BCF    FA6.7
00DB8:  BSF    FA6.0
00DBA:  MOVF   FA8,W
00DBC:  BTFSC  x3B.7
00DBE:  BSF    FF2.7
00DC0:  CLRF   x05
00DC2:  MOVWF  x04
....................    FaultDelayTime[3] = read_eeprom(0x20);
00DC4:  MOVFF  FF2,73B
00DC8:  BCF    FF2.7
00DCA:  CLRF   FAA
00DCC:  MOVLW  20
00DCE:  MOVWF  FA9
00DD0:  BCF    FA6.6
00DD2:  BCF    FA6.7
00DD4:  BSF    FA6.0
00DD6:  MOVF   FA8,W
00DD8:  BTFSC  x3B.7
00DDA:  BSF    FF2.7
00DDC:  CLRF   x07
00DDE:  MOVWF  x06
....................    FaultDelayTime[4] = read_eeprom(0x21);
00DE0:  MOVFF  FF2,73B
00DE4:  BCF    FF2.7
00DE6:  CLRF   FAA
00DE8:  MOVLW  21
00DEA:  MOVWF  FA9
00DEC:  BCF    FA6.6
00DEE:  BCF    FA6.7
00DF0:  BSF    FA6.0
00DF2:  MOVF   FA8,W
00DF4:  BTFSC  x3B.7
00DF6:  BSF    FF2.7
00DF8:  CLRF   x09
00DFA:  MOVWF  x08
....................    FaultDelayTime[5] = read_eeprom(0x22);
00DFC:  MOVFF  FF2,73B
00E00:  BCF    FF2.7
00E02:  CLRF   FAA
00E04:  MOVLW  22
00E06:  MOVWF  FA9
00E08:  BCF    FA6.6
00E0A:  BCF    FA6.7
00E0C:  BSF    FA6.0
00E0E:  MOVF   FA8,W
00E10:  BTFSC  x3B.7
00E12:  BSF    FF2.7
00E14:  CLRF   x0B
00E16:  MOVWF  x0A
....................    FaultDelayTime[6] = read_eeprom(0x23);
00E18:  MOVFF  FF2,73B
00E1C:  BCF    FF2.7
00E1E:  CLRF   FAA
00E20:  MOVLW  23
00E22:  MOVWF  FA9
00E24:  BCF    FA6.6
00E26:  BCF    FA6.7
00E28:  BSF    FA6.0
00E2A:  MOVF   FA8,W
00E2C:  BTFSC  x3B.7
00E2E:  BSF    FF2.7
00E30:  CLRF   x0D
00E32:  MOVWF  x0C
....................    FaultDelayTime[7] = read_eeprom(0x24);
00E34:  MOVFF  FF2,73B
00E38:  BCF    FF2.7
00E3A:  CLRF   FAA
00E3C:  MOVLW  24
00E3E:  MOVWF  FA9
00E40:  BCF    FA6.6
00E42:  BCF    FA6.7
00E44:  BSF    FA6.0
00E46:  MOVF   FA8,W
00E48:  BTFSC  x3B.7
00E4A:  BSF    FF2.7
00E4C:  CLRF   x0F
00E4E:  MOVWF  x0E
....................    FaultDelayTime[8] = read_eeprom(0x25);
00E50:  MOVFF  FF2,73B
00E54:  BCF    FF2.7
00E56:  CLRF   FAA
00E58:  MOVLW  25
00E5A:  MOVWF  FA9
00E5C:  BCF    FA6.6
00E5E:  BCF    FA6.7
00E60:  BSF    FA6.0
00E62:  MOVF   FA8,W
00E64:  BTFSC  x3B.7
00E66:  BSF    FF2.7
00E68:  CLRF   x11
00E6A:  MOVWF  x10
....................    FaultDelayTime[9] = read_eeprom(0x26);
00E6C:  MOVFF  FF2,73B
00E70:  BCF    FF2.7
00E72:  CLRF   FAA
00E74:  MOVLW  26
00E76:  MOVWF  FA9
00E78:  BCF    FA6.6
00E7A:  BCF    FA6.7
00E7C:  BSF    FA6.0
00E7E:  MOVF   FA8,W
00E80:  BTFSC  x3B.7
00E82:  BSF    FF2.7
00E84:  CLRF   x13
00E86:  MOVWF  x12
....................    FaultDelayTime[10] = read_eeprom(0x27);
00E88:  MOVFF  FF2,73B
00E8C:  BCF    FF2.7
00E8E:  CLRF   FAA
00E90:  MOVLW  27
00E92:  MOVWF  FA9
00E94:  BCF    FA6.6
00E96:  BCF    FA6.7
00E98:  BSF    FA6.0
00E9A:  MOVF   FA8,W
00E9C:  BTFSC  x3B.7
00E9E:  BSF    FF2.7
00EA0:  CLRF   x15
00EA2:  MOVWF  x14
....................    FaultDelayTime[11] = read_eeprom(0x28);
00EA4:  MOVFF  FF2,73B
00EA8:  BCF    FF2.7
00EAA:  CLRF   FAA
00EAC:  MOVLW  28
00EAE:  MOVWF  FA9
00EB0:  BCF    FA6.6
00EB2:  BCF    FA6.7
00EB4:  BSF    FA6.0
00EB6:  MOVF   FA8,W
00EB8:  BTFSC  x3B.7
00EBA:  BSF    FF2.7
00EBC:  CLRF   x17
00EBE:  MOVWF  x16
....................    FaultDelayTime[12] = read_eeprom(0x29);
00EC0:  MOVFF  FF2,73B
00EC4:  BCF    FF2.7
00EC6:  CLRF   FAA
00EC8:  MOVLW  29
00ECA:  MOVWF  FA9
00ECC:  BCF    FA6.6
00ECE:  BCF    FA6.7
00ED0:  BSF    FA6.0
00ED2:  MOVF   FA8,W
00ED4:  BTFSC  x3B.7
00ED6:  BSF    FF2.7
00ED8:  CLRF   x19
00EDA:  MOVWF  x18
....................    FaultDelayTime[13] = read_eeprom(0x2A);
00EDC:  MOVFF  FF2,73B
00EE0:  BCF    FF2.7
00EE2:  CLRF   FAA
00EE4:  MOVLW  2A
00EE6:  MOVWF  FA9
00EE8:  BCF    FA6.6
00EEA:  BCF    FA6.7
00EEC:  BSF    FA6.0
00EEE:  MOVF   FA8,W
00EF0:  BTFSC  x3B.7
00EF2:  BSF    FF2.7
00EF4:  CLRF   x1B
00EF6:  MOVWF  x1A
....................    FaultDelayTime[14] = read_eeprom(0x2B);
00EF8:  MOVFF  FF2,73B
00EFC:  BCF    FF2.7
00EFE:  CLRF   FAA
00F00:  MOVLW  2B
00F02:  MOVWF  FA9
00F04:  BCF    FA6.6
00F06:  BCF    FA6.7
00F08:  BSF    FA6.0
00F0A:  MOVF   FA8,W
00F0C:  BTFSC  x3B.7
00F0E:  BSF    FF2.7
00F10:  CLRF   x1D
00F12:  MOVWF  x1C
....................    FaultDelayTime[15] = read_eeprom(0x2C);
00F14:  MOVFF  FF2,73B
00F18:  BCF    FF2.7
00F1A:  CLRF   FAA
00F1C:  MOVLW  2C
00F1E:  MOVWF  FA9
00F20:  BCF    FA6.6
00F22:  BCF    FA6.7
00F24:  BSF    FA6.0
00F26:  MOVF   FA8,W
00F28:  BTFSC  x3B.7
00F2A:  BSF    FF2.7
00F2C:  CLRF   x1F
00F2E:  MOVWF  x1E
....................    FaultDelayTime[16] = read_eeprom(0x2D);
00F30:  MOVFF  FF2,73B
00F34:  BCF    FF2.7
00F36:  CLRF   FAA
00F38:  MOVLW  2D
00F3A:  MOVWF  FA9
00F3C:  BCF    FA6.6
00F3E:  BCF    FA6.7
00F40:  BSF    FA6.0
00F42:  MOVF   FA8,W
00F44:  BTFSC  x3B.7
00F46:  BSF    FF2.7
00F48:  CLRF   x21
00F4A:  MOVWF  x20
....................    FaultDelayTime[17] = read_eeprom(0x2E);
00F4C:  MOVFF  FF2,73B
00F50:  BCF    FF2.7
00F52:  CLRF   FAA
00F54:  MOVLW  2E
00F56:  MOVWF  FA9
00F58:  BCF    FA6.6
00F5A:  BCF    FA6.7
00F5C:  BSF    FA6.0
00F5E:  MOVF   FA8,W
00F60:  BTFSC  x3B.7
00F62:  BSF    FF2.7
00F64:  CLRF   x23
00F66:  MOVWF  x22
....................    FaultDelayTime[18] = read_eeprom(0x2F);
00F68:  MOVFF  FF2,73B
00F6C:  BCF    FF2.7
00F6E:  CLRF   FAA
00F70:  MOVLW  2F
00F72:  MOVWF  FA9
00F74:  BCF    FA6.6
00F76:  BCF    FA6.7
00F78:  BSF    FA6.0
00F7A:  MOVF   FA8,W
00F7C:  BTFSC  x3B.7
00F7E:  BSF    FF2.7
00F80:  CLRF   x25
00F82:  MOVWF  x24
....................    FaultDelayTime[19] = read_eeprom(0x30);
00F84:  MOVFF  FF2,73B
00F88:  BCF    FF2.7
00F8A:  CLRF   FAA
00F8C:  MOVLW  30
00F8E:  MOVWF  FA9
00F90:  BCF    FA6.6
00F92:  BCF    FA6.7
00F94:  BSF    FA6.0
00F96:  MOVF   FA8,W
00F98:  BTFSC  x3B.7
00F9A:  BSF    FF2.7
00F9C:  CLRF   x27
00F9E:  MOVWF  x26
....................    FaultDelayTime[20] = read_eeprom(0x31);
00FA0:  MOVFF  FF2,73B
00FA4:  BCF    FF2.7
00FA6:  CLRF   FAA
00FA8:  MOVLW  31
00FAA:  MOVWF  FA9
00FAC:  BCF    FA6.6
00FAE:  BCF    FA6.7
00FB0:  BSF    FA6.0
00FB2:  MOVF   FA8,W
00FB4:  BTFSC  x3B.7
00FB6:  BSF    FF2.7
00FB8:  CLRF   x29
00FBA:  MOVWF  x28
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
00FBC:  CLRF   x31
....................    for(; ; a++)
....................    {
....................       restart_wdt();
00FBE:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
00FC0:  MOVLW  32
00FC2:  ADDWF  x31,W
00FC4:  MOVWF  x3B
00FC6:  MOVFF  FF2,73C
00FCA:  BCF    FF2.7
00FCC:  CLRF   FAA
00FCE:  MOVFF  73B,FA9
00FD2:  BCF    FA6.6
00FD4:  BCF    FA6.7
00FD6:  BSF    FA6.0
00FD8:  MOVF   FA8,W
00FDA:  BTFSC  x3C.7
00FDC:  BSF    FF2.7
00FDE:  MOVWF  x32
....................       if((phonenum == 0x0D) || (a > 15))
00FE0:  MOVF   x32,W
00FE2:  SUBLW  0D
00FE4:  BZ    0FEC
00FE6:  MOVF   x31,W
00FE8:  SUBLW  0F
00FEA:  BC    1034
....................       {
....................          sms_phonenumber[a] =  '\0';
00FEC:  CLRF   03
00FEE:  MOVF   x31,W
00FF0:  ADDLW  6C
00FF2:  MOVWF  FE9
00FF4:  MOVLW  05
00FF6:  ADDWFC 03,W
00FF8:  MOVWF  FEA
00FFA:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
00FFC:  MOVLW  32
00FFE:  ADDWF  x31,W
01000:  MOVWF  x3B
01002:  MOVF   FF2,W
01004:  MOVWF  00
01006:  BCF    FF2.7
01008:  CLRF   FAA
0100A:  MOVFF  73B,FA9
0100E:  MOVFF  732,FA8
01012:  BCF    FA6.6
01014:  BCF    FA6.7
01016:  BSF    FA6.2
01018:  MOVLB  F
0101A:  MOVLW  55
0101C:  MOVWF  FA7
0101E:  MOVLW  AA
01020:  MOVWF  FA7
01022:  BSF    FA6.1
01024:  BTFSC  FA6.1
01026:  BRA    1024
01028:  BCF    FA6.2
0102A:  MOVF   00,W
0102C:  IORWF  FF2,F
....................          break;
0102E:  BRA    1050
....................       }
01030:  BRA    1048
01032:  MOVLB  7
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
01034:  CLRF   03
01036:  MOVF   x31,W
01038:  ADDLW  6C
0103A:  MOVWF  FE9
0103C:  MOVLW  05
0103E:  ADDWFC 03,W
01040:  MOVWF  FEA
01042:  MOVFF  732,FEF
01046:  MOVLB  F
....................       }
01048:  MOVLB  7
0104A:  INCF   x31,F
0104C:  BRA    0FBE
0104E:  MOVLB  F
....................    }
.................... 
....................    /*
....................    char b;
....................    for(b=0; b<10; b++)
....................    {
....................       sms_phonenumber[b] = read_eeprom(0x32 + b);
....................    }
....................    sms_phonenumber[b] = '\0' ; // end string
....................    */
.................... 
....................    
....................    int16  i =3,j=0,k=0 , buff;
01050:  MOVLB  7
01052:  CLRF   x34
01054:  MOVLW  03
01056:  MOVWF  x33
01058:  CLRF   x36
0105A:  CLRF   x35
0105C:  CLRF   x38
0105E:  CLRF   x37
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01060:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01062:  MOVLW  5D
01064:  ADDWF  x33,W
01066:  MOVWF  x3B
01068:  MOVLW  00
0106A:  ADDWFC x34,W
0106C:  MOVWF  x3C
0106E:  MOVFF  FF2,73D
01072:  BCF    FF2.7
01074:  MOVFF  73C,FAA
01078:  MOVFF  73B,FA9
0107C:  BCF    FA6.6
0107E:  BCF    FA6.7
01080:  BSF    FA6.0
01082:  MOVF   FA8,W
01084:  BTFSC  x3D.7
01086:  BSF    FF2.7
01088:  CLRF   x3A
0108A:  MOVWF  x39
....................       
....................       if((buff == 0x0D)|| (j>41))
0108C:  MOVF   x39,W
0108E:  SUBLW  0D
01090:  BNZ   1096
01092:  MOVF   x3A,F
01094:  BZ    10A0
01096:  MOVF   x36,F
01098:  BNZ   10A0
0109A:  MOVF   x35,W
0109C:  SUBLW  29
0109E:  BC    10B2
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
010A0:  MOVLW  7B
010A2:  ADDWF  x35,W
010A4:  MOVWF  FE9
010A6:  MOVLW  05
010A8:  ADDWFC x36,W
010AA:  MOVWF  FEA
010AC:  CLRF   FEF
....................          break;
010AE:  BRA    10D6
....................       }
010B0:  BRA    10C2
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
010B2:  MOVLW  7B
010B4:  ADDWF  x35,W
010B6:  MOVWF  FE9
010B8:  MOVLW  05
010BA:  ADDWFC x36,W
010BC:  MOVWF  FEA
010BE:  MOVFF  739,FEF
....................       }
010C2:  MOVFF  734,03
010C6:  MOVF   x33,W
010C8:  INCF   x33,F
010CA:  BTFSC  FD8.2
010CC:  INCF   x34,F
010CE:  INCF   x35,F
010D0:  BTFSC  FD8.2
010D2:  INCF   x36,F
010D4:  BRA    1060
....................    }
....................    
....................    i++;
010D6:  INCF   x33,F
010D8:  BTFSC  FD8.2
010DA:  INCF   x34,F
....................    j=0;
010DC:  CLRF   x36
010DE:  CLRF   x35
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
010E0:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
010E2:  MOVLW  5D
010E4:  ADDWF  x33,W
010E6:  MOVWF  x3B
010E8:  MOVLW  00
010EA:  ADDWFC x34,W
010EC:  MOVWF  x3C
010EE:  MOVFF  FF2,73D
010F2:  BCF    FF2.7
010F4:  MOVFF  73C,FAA
010F8:  MOVFF  73B,FA9
010FC:  BCF    FA6.6
010FE:  BCF    FA6.7
01100:  BSF    FA6.0
01102:  MOVF   FA8,W
01104:  BTFSC  x3D.7
01106:  BSF    FF2.7
01108:  CLRF   x3A
0110A:  MOVWF  x39
....................       
....................       if((buff == 0x0D) || (j>41))
0110C:  MOVF   x39,W
0110E:  SUBLW  0D
01110:  BNZ   1116
01112:  MOVF   x3A,F
01114:  BZ    1120
01116:  MOVF   x36,F
01118:  BNZ   1120
0111A:  MOVF   x35,W
0111C:  SUBLW  29
0111E:  BC    1132
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01120:  MOVLW  A4
01122:  ADDWF  x35,W
01124:  MOVWF  FE9
01126:  MOVLW  05
01128:  ADDWFC x36,W
0112A:  MOVWF  FEA
0112C:  CLRF   FEF
....................          break;
0112E:  BRA    1156
....................       }
01130:  BRA    1142
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
01132:  MOVLW  A4
01134:  ADDWF  x35,W
01136:  MOVWF  FE9
01138:  MOVLW  05
0113A:  ADDWFC x36,W
0113C:  MOVWF  FEA
0113E:  MOVFF  739,FEF
....................          
....................       }
01142:  MOVFF  734,03
01146:  MOVF   x33,W
01148:  INCF   x33,F
0114A:  BTFSC  FD8.2
0114C:  INCF   x34,F
0114E:  INCF   x35,F
01150:  BTFSC  FD8.2
01152:  INCF   x36,F
01154:  BRA    10E0
....................    }
....................    
....................    i++;
01156:  INCF   x33,F
01158:  BTFSC  FD8.2
0115A:  INCF   x34,F
....................    j=0;
0115C:  CLRF   x36
0115E:  CLRF   x35
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01160:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01162:  MOVLW  5D
01164:  ADDWF  x33,W
01166:  MOVWF  x3B
01168:  MOVLW  00
0116A:  ADDWFC x34,W
0116C:  MOVWF  x3C
0116E:  MOVFF  FF2,73D
01172:  BCF    FF2.7
01174:  MOVFF  73C,FAA
01178:  MOVFF  73B,FA9
0117C:  BCF    FA6.6
0117E:  BCF    FA6.7
01180:  BSF    FA6.0
01182:  MOVF   FA8,W
01184:  BTFSC  x3D.7
01186:  BSF    FF2.7
01188:  CLRF   x3A
0118A:  MOVWF  x39
....................       
....................       if((buff == 0x0D) || (j>41))
0118C:  MOVF   x39,W
0118E:  SUBLW  0D
01190:  BNZ   1196
01192:  MOVF   x3A,F
01194:  BZ    11A0
01196:  MOVF   x36,F
01198:  BNZ   11A0
0119A:  MOVF   x35,W
0119C:  SUBLW  29
0119E:  BC    11B2
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
011A0:  MOVLW  CD
011A2:  ADDWF  x35,W
011A4:  MOVWF  FE9
011A6:  MOVLW  05
011A8:  ADDWFC x36,W
011AA:  MOVWF  FEA
011AC:  CLRF   FEF
....................          break;
011AE:  BRA    11D6
....................       }
011B0:  BRA    11C2
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
011B2:  MOVLW  CD
011B4:  ADDWF  x35,W
011B6:  MOVWF  FE9
011B8:  MOVLW  05
011BA:  ADDWFC x36,W
011BC:  MOVWF  FEA
011BE:  MOVFF  739,FEF
....................          
....................       }
011C2:  MOVFF  734,03
011C6:  MOVF   x33,W
011C8:  INCF   x33,F
011CA:  BTFSC  FD8.2
011CC:  INCF   x34,F
011CE:  INCF   x35,F
011D0:  BTFSC  FD8.2
011D2:  INCF   x36,F
011D4:  BRA    1160
....................    }
....................    
....................    i++;
011D6:  INCF   x33,F
011D8:  BTFSC  FD8.2
011DA:  INCF   x34,F
....................    j=0;
011DC:  CLRF   x36
011DE:  CLRF   x35
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
011E0:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
011E2:  MOVLW  5D
011E4:  ADDWF  x33,W
011E6:  MOVWF  x3B
011E8:  MOVLW  00
011EA:  ADDWFC x34,W
011EC:  MOVWF  x3C
011EE:  MOVFF  FF2,73D
011F2:  BCF    FF2.7
011F4:  MOVFF  73C,FAA
011F8:  MOVFF  73B,FA9
011FC:  BCF    FA6.6
011FE:  BCF    FA6.7
01200:  BSF    FA6.0
01202:  MOVF   FA8,W
01204:  BTFSC  x3D.7
01206:  BSF    FF2.7
01208:  CLRF   x3A
0120A:  MOVWF  x39
....................       
....................       if((buff == 0x0D) || (j>41))
0120C:  MOVF   x39,W
0120E:  SUBLW  0D
01210:  BNZ   1216
01212:  MOVF   x3A,F
01214:  BZ    1220
01216:  MOVF   x36,F
01218:  BNZ   1220
0121A:  MOVF   x35,W
0121C:  SUBLW  29
0121E:  BC    1232
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01220:  MOVLW  F6
01222:  ADDWF  x35,W
01224:  MOVWF  FE9
01226:  MOVLW  05
01228:  ADDWFC x36,W
0122A:  MOVWF  FEA
0122C:  CLRF   FEF
....................          break;
0122E:  BRA    1256
....................       }
01230:  BRA    1242
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
01232:  MOVLW  F6
01234:  ADDWF  x35,W
01236:  MOVWF  FE9
01238:  MOVLW  05
0123A:  ADDWFC x36,W
0123C:  MOVWF  FEA
0123E:  MOVFF  739,FEF
....................          
....................       }
01242:  MOVFF  734,03
01246:  MOVF   x33,W
01248:  INCF   x33,F
0124A:  BTFSC  FD8.2
0124C:  INCF   x34,F
0124E:  INCF   x35,F
01250:  BTFSC  FD8.2
01252:  INCF   x36,F
01254:  BRA    11E0
....................    }
....................    
....................    i++;
01256:  INCF   x33,F
01258:  BTFSC  FD8.2
0125A:  INCF   x34,F
....................    j=0;
0125C:  CLRF   x36
0125E:  CLRF   x35
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01260:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01262:  MOVLW  5D
01264:  ADDWF  x33,W
01266:  MOVWF  x3B
01268:  MOVLW  00
0126A:  ADDWFC x34,W
0126C:  MOVWF  x3C
0126E:  MOVFF  FF2,73D
01272:  BCF    FF2.7
01274:  MOVFF  73C,FAA
01278:  MOVFF  73B,FA9
0127C:  BCF    FA6.6
0127E:  BCF    FA6.7
01280:  BSF    FA6.0
01282:  MOVF   FA8,W
01284:  BTFSC  x3D.7
01286:  BSF    FF2.7
01288:  CLRF   x3A
0128A:  MOVWF  x39
....................       
....................       if((buff == 0x0D) || (j>41))
0128C:  MOVF   x39,W
0128E:  SUBLW  0D
01290:  BNZ   1296
01292:  MOVF   x3A,F
01294:  BZ    12A0
01296:  MOVF   x36,F
01298:  BNZ   12A0
0129A:  MOVF   x35,W
0129C:  SUBLW  29
0129E:  BC    12B2
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
012A0:  MOVLW  1F
012A2:  ADDWF  x35,W
012A4:  MOVWF  FE9
012A6:  MOVLW  06
012A8:  ADDWFC x36,W
012AA:  MOVWF  FEA
012AC:  CLRF   FEF
....................          break;
012AE:  BRA    12D6
....................       }
012B0:  BRA    12C2
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
012B2:  MOVLW  1F
012B4:  ADDWF  x35,W
012B6:  MOVWF  FE9
012B8:  MOVLW  06
012BA:  ADDWFC x36,W
012BC:  MOVWF  FEA
012BE:  MOVFF  739,FEF
....................          
....................       }
012C2:  MOVFF  734,03
012C6:  MOVF   x33,W
012C8:  INCF   x33,F
012CA:  BTFSC  FD8.2
012CC:  INCF   x34,F
012CE:  INCF   x35,F
012D0:  BTFSC  FD8.2
012D2:  INCF   x36,F
012D4:  BRA    1260
....................    }
....................    
....................    i++;
012D6:  INCF   x33,F
012D8:  BTFSC  FD8.2
012DA:  INCF   x34,F
....................    j=0;
012DC:  CLRF   x36
012DE:  CLRF   x35
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
012E0:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
012E2:  MOVLW  5D
012E4:  ADDWF  x33,W
012E6:  MOVWF  x3B
012E8:  MOVLW  00
012EA:  ADDWFC x34,W
012EC:  MOVWF  x3C
012EE:  MOVFF  FF2,73D
012F2:  BCF    FF2.7
012F4:  MOVFF  73C,FAA
012F8:  MOVFF  73B,FA9
012FC:  BCF    FA6.6
012FE:  BCF    FA6.7
01300:  BSF    FA6.0
01302:  MOVF   FA8,W
01304:  BTFSC  x3D.7
01306:  BSF    FF2.7
01308:  CLRF   x3A
0130A:  MOVWF  x39
....................       
....................       if((buff == 0x0D) || (j>41))
0130C:  MOVF   x39,W
0130E:  SUBLW  0D
01310:  BNZ   1316
01312:  MOVF   x3A,F
01314:  BZ    1320
01316:  MOVF   x36,F
01318:  BNZ   1320
0131A:  MOVF   x35,W
0131C:  SUBLW  29
0131E:  BC    1332
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01320:  MOVLW  48
01322:  ADDWF  x35,W
01324:  MOVWF  FE9
01326:  MOVLW  06
01328:  ADDWFC x36,W
0132A:  MOVWF  FEA
0132C:  CLRF   FEF
....................          break;
0132E:  BRA    1356
....................       }
01330:  BRA    1342
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
01332:  MOVLW  48
01334:  ADDWF  x35,W
01336:  MOVWF  FE9
01338:  MOVLW  06
0133A:  ADDWFC x36,W
0133C:  MOVWF  FEA
0133E:  MOVFF  739,FEF
....................          
....................       }
01342:  MOVFF  734,03
01346:  MOVF   x33,W
01348:  INCF   x33,F
0134A:  BTFSC  FD8.2
0134C:  INCF   x34,F
0134E:  INCF   x35,F
01350:  BTFSC  FD8.2
01352:  INCF   x36,F
01354:  BRA    12E0
....................    }
....................    
....................    i++;
01356:  INCF   x33,F
01358:  BTFSC  FD8.2
0135A:  INCF   x34,F
....................    j=0;
0135C:  CLRF   x36
0135E:  CLRF   x35
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01360:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01362:  MOVLW  5D
01364:  ADDWF  x33,W
01366:  MOVWF  x3B
01368:  MOVLW  00
0136A:  ADDWFC x34,W
0136C:  MOVWF  x3C
0136E:  MOVFF  FF2,73D
01372:  BCF    FF2.7
01374:  MOVFF  73C,FAA
01378:  MOVFF  73B,FA9
0137C:  BCF    FA6.6
0137E:  BCF    FA6.7
01380:  BSF    FA6.0
01382:  MOVF   FA8,W
01384:  BTFSC  x3D.7
01386:  BSF    FF2.7
01388:  CLRF   x3A
0138A:  MOVWF  x39
....................       
....................       if((buff == 0x0D) || (j>41))
0138C:  MOVF   x39,W
0138E:  SUBLW  0D
01390:  BNZ   1396
01392:  MOVF   x3A,F
01394:  BZ    13A0
01396:  MOVF   x36,F
01398:  BNZ   13A0
0139A:  MOVF   x35,W
0139C:  SUBLW  29
0139E:  BC    13B2
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
013A0:  MOVLW  71
013A2:  ADDWF  x35,W
013A4:  MOVWF  FE9
013A6:  MOVLW  06
013A8:  ADDWFC x36,W
013AA:  MOVWF  FEA
013AC:  CLRF   FEF
....................          break;
013AE:  BRA    13D6
....................       }
013B0:  BRA    13C2
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
013B2:  MOVLW  71
013B4:  ADDWF  x35,W
013B6:  MOVWF  FE9
013B8:  MOVLW  06
013BA:  ADDWFC x36,W
013BC:  MOVWF  FEA
013BE:  MOVFF  739,FEF
....................          
....................       }
013C2:  MOVFF  734,03
013C6:  MOVF   x33,W
013C8:  INCF   x33,F
013CA:  BTFSC  FD8.2
013CC:  INCF   x34,F
013CE:  INCF   x35,F
013D0:  BTFSC  FD8.2
013D2:  INCF   x36,F
013D4:  BRA    1360
....................    }
....................    
....................    i++;
013D6:  INCF   x33,F
013D8:  BTFSC  FD8.2
013DA:  INCF   x34,F
....................    j=0;
013DC:  CLRF   x36
013DE:  CLRF   x35
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
013E0:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
013E2:  MOVLW  5D
013E4:  ADDWF  x33,W
013E6:  MOVWF  x3B
013E8:  MOVLW  00
013EA:  ADDWFC x34,W
013EC:  MOVWF  x3C
013EE:  MOVFF  FF2,73D
013F2:  BCF    FF2.7
013F4:  MOVFF  73C,FAA
013F8:  MOVFF  73B,FA9
013FC:  BCF    FA6.6
013FE:  BCF    FA6.7
01400:  BSF    FA6.0
01402:  MOVF   FA8,W
01404:  BTFSC  x3D.7
01406:  BSF    FF2.7
01408:  CLRF   x3A
0140A:  MOVWF  x39
....................       
....................       if((buff == 0x0D) || (j>41))
0140C:  MOVF   x39,W
0140E:  SUBLW  0D
01410:  BNZ   1416
01412:  MOVF   x3A,F
01414:  BZ    1420
01416:  MOVF   x36,F
01418:  BNZ   1420
0141A:  MOVF   x35,W
0141C:  SUBLW  29
0141E:  BC    1432
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01420:  MOVLW  9A
01422:  ADDWF  x35,W
01424:  MOVWF  FE9
01426:  MOVLW  06
01428:  ADDWFC x36,W
0142A:  MOVWF  FEA
0142C:  CLRF   FEF
....................          break;
0142E:  BRA    1456
....................       }
01430:  BRA    1442
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
01432:  MOVLW  9A
01434:  ADDWF  x35,W
01436:  MOVWF  FE9
01438:  MOVLW  06
0143A:  ADDWFC x36,W
0143C:  MOVWF  FEA
0143E:  MOVFF  739,FEF
....................          
....................       }
01442:  MOVFF  734,03
01446:  MOVF   x33,W
01448:  INCF   x33,F
0144A:  BTFSC  FD8.2
0144C:  INCF   x34,F
0144E:  INCF   x35,F
01450:  BTFSC  FD8.2
01452:  INCF   x36,F
01454:  BRA    13E0
....................    } 
01456:  MOVLB  0
01458:  RETURN 0
....................   
....................    
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
00516:  BTFSS  F9E.5
00518:  BRA    0516
0051A:  MOVFF  FAE,2E
....................    checkCommand();
0051E:  BRA    02DA
.................... }
.................... 
00520:  BCF    F9E.5
00522:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
00526:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
00528:  MOVLB  5
0052A:  MOVF   x69,F
0052C:  BZ    053C
....................    {
....................       T_timeout--;
0052E:  DECF   x69,F
....................       if(T_timeout == 0)
00530:  MOVF   x69,F
00532:  BNZ   053C
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout   
00534:  MOVFF  6F,77
....................          output_bit(P485ctrl,0);
00538:  BCF    F8A.3
0053A:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
0053C:  MOVF   1C,F
0053E:  BZ    0558
....................    {
....................       TimeBase1s--;
00540:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
00542:  MOVF   1C,F
00544:  BNZ   0558
....................       {
....................          if(AutoAckDelayTime != 0x00)
00546:  MOVF   1D,F
00548:  BZ    0552
....................          {
....................             AutoAckDelayTime--;
0054A:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
0054C:  MOVF   1D,F
0054E:  BNZ   0552
....................             {
....................                AutoAckFlag = 1 ;
00550:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
00552:  BSF    30.4
....................          TimeBase1s = 100;
00554:  MOVLW  64
00556:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
00558:  MOVF   19,W
0055A:  SUBLW  32
0055C:  BNZ   0588
....................    {
....................       StatusTime = 0;
0055E:  CLRF   19
....................       if(HearthbeatInd == 0)
00560:  BTFSC  1A.0
00562:  BRA    056C
....................       {
....................          HearthbeatInd = 1;
00564:  BSF    1A.0
....................          output_bit(Pled,1);
00566:  BSF    F8A.5
00568:  BCF    F93.5
....................       }
0056A:  BRA    0572
....................       else
....................       {
....................          HearthbeatInd = 0;
0056C:  BCF    1A.0
....................          output_bit(Pled,0);
0056E:  BCF    F8A.5
00570:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
00572:  BTFSS  1A.6
00574:  BRA    0586
....................       {
....................              if(T_test > 0x00) T_test --;
00576:  MOVF   2F,F
00578:  BZ    057C
0057A:  DECF   2F,F
....................              if(T_test == 0x00)
0057C:  MOVF   2F,F
0057E:  BNZ   0584
....................              {
....................                Test_fault = 1;
00580:  BSF    1A.5
....................                functointest_f = 1;
00582:  BSF    30.1
....................              }
....................        }
00584:  BRA    0588
....................        else
....................        {
....................           //Test = 0;
....................           T_test = 0x00;
00586:  CLRF   2F
....................        }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
00588:  MOVF   1B,F
0058A:  BZ    05AE
....................    {
....................       FlashingRateTime--;
0058C:  DECF   1B,F
....................       if(FlashingRateTime == 0)
0058E:  MOVF   1B,F
00590:  BNZ   05A2
....................       {
....................          outmcp23 = 0xff;
00592:  SETF   x6B
....................          
....................          //if(SyncStatus == 0)
....................          //{
....................             if(FlashingFlag)
00594:  BTFSS  1A.1
00596:  BRA    059C
....................             {
....................                FlashingFlag = 0;
00598:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
0059A:  BRA    059E
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
0059C:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          //}
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
0059E:  MOVFF  6C,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
005A2:  MOVF   31,F
005A4:  BZ    05AE
....................       {
....................          Synctimer--;
005A6:  DECF   31,F
....................          if(Synctimer == 0x00)
005A8:  MOVF   31,F
005AA:  BNZ   05AE
....................          {
....................             SyncStatus = 0;
005AC:  BCF    30.2
....................          }
....................       }
.................... 
....................    } 
005AE:  BCF    F9E.1
005B0:  MOVLB  0
005B2:  GOTO   006C
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
049D2:  MOVLB  6
049D4:  BTFSS  xC9.0
049D6:  BRA    4AEA
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
049D8:  MOVLW  00
049DA:  BTFSC  xC3.0
049DC:  MOVLW  01
049DE:  MOVLB  7
049E0:  MOVWF  x3A
049E2:  MOVLW  00
049E4:  MOVLB  6
049E6:  BTFSC  xC5.0
049E8:  MOVLW  01
049EA:  MOVLB  7
049EC:  XORWF  x3A,W
049EE:  SUBLW  01
049F0:  BNZ   49F8
049F2:  MOVLB  6
049F4:  BTFSC  xC6.0
049F6:  BRA    49FE
049F8:  MOVLB  6
049FA:  BTFSS  xCB.0
049FC:  BRA    4AE2
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
049FE:  BTFSC  xCA.0
04A00:  BRA    4AE0
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04A02:  BTFSC  xCB.0
04A04:  BRA    4A1E
04A06:  MOVLB  0
04A08:  MOVF   x6A,W
04A0A:  SUBLW  0F
04A0C:  BTFSC  FD8.2
04A0E:  BRA    4A14
04A10:  MOVLB  6
04A12:  BRA    4A1E
....................             {
....................                TimeBase1s = 100 ;            //reload again
04A14:  MOVLW  64
04A16:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04A18:  MOVFF  6B,1D
04A1C:  MOVLB  6
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
04A1E:  BSF    xCB.0
....................             if(FlashingFlag == 0)
04A20:  BTFSC  1A.1
04A22:  BRA    4A28
....................             {
....................                Output.B1 = 0;           //Flash output1
04A24:  BCF    xC4.0
....................             }
04A26:  BRA    4A2A
....................             else
....................             {
....................                Output.B1 = 1;
04A28:  BSF    xC4.0
....................             }
....................             if (~AutoTestFlag)
04A2A:  BTFSC  1A.4
04A2C:  BRA    4A4A
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
04A2E:  BTFSC  xC8.0
04A30:  BRA    4A3C
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04A32:  BCF    F89.4
04A34:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04A36:  BCF    F89.3
04A38:  BCF    F92.3
....................                }
04A3A:  BRA    4A4A
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,0);     //Buzzer
04A3C:  BTFSS  xC7.0
04A3E:  BRA    4A46
04A40:  BCF    F89.4
04A42:  BCF    F92.4
04A44:  BRA    4A4A
....................                   else output_bit(Pbell,0);                          //Bell
04A46:  BCF    F89.3
04A48:  BCF    F92.3
....................                }    
....................             }  
....................             // SMS Sending   
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04A4A:  BTFSC  xD1.0
04A4C:  BRA    4AE0
04A4E:  BTFSC  30.1
04A50:  BRA    4AE0
04A52:  BTFSC  xCA.0
04A54:  BRA    4AE0
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04A56:  MOVLW  B6
04A58:  MOVWF  FF6
04A5A:  MOVLW  05
04A5C:  MOVWF  FF7
04A5E:  MOVLB  0
04A60:  CALL   1F00
....................                putc('\n',CH2);
04A64:  MOVLW  0A
04A66:  MOVLB  7
04A68:  MOVWF  x3B
04A6A:  MOVLB  0
04A6C:  CALL   1EBA
....................                delay_ms(10);
04A70:  MOVLW  0A
04A72:  MOVLB  7
04A74:  MOVWF  x3A
04A76:  MOVLB  0
04A78:  CALL   0750
....................             
....................                SendSMS.B1 =1;
04A7C:  MOVLB  6
04A7E:  BSF    xD1.0
....................                fprintf(CH2,"AT+CMGS=\"");
04A80:  MOVLW  C0
04A82:  MOVWF  FF6
04A84:  MOVLW  05
04A86:  MOVWF  FF7
04A88:  MOVLB  0
04A8A:  CALL   1F00
....................                fprintf(CH2,sms_phonenumber);
04A8E:  MOVLW  05
04A90:  MOVWF  FEA
04A92:  MOVLW  6C
04A94:  MOVWF  FE9
04A96:  RCALL  44A4
....................                
....................                fprintf(CH2,"\"");
04A98:  MOVLW  22
04A9A:  MOVLB  7
04A9C:  MOVWF  x3B
04A9E:  MOVLB  0
04AA0:  CALL   1EBA
....................                putc('\n',CH2);
04AA4:  MOVLW  0A
04AA6:  MOVLB  7
04AA8:  MOVWF  x3B
04AAA:  MOVLB  0
04AAC:  CALL   1EBA
....................                delay_ms(50);
04AB0:  MOVLW  32
04AB2:  MOVLB  7
04AB4:  MOVWF  x3A
04AB6:  MOVLB  0
04AB8:  CALL   0750
....................               
....................               fprintf(CH2,SMS_Massage1);
04ABC:  MOVLW  05
04ABE:  MOVWF  FEA
04AC0:  MOVLW  7B
04AC2:  MOVWF  FE9
04AC4:  RCALL  44A4
....................               putc('\n',CH2);
04AC6:  MOVLW  0A
04AC8:  MOVLB  7
04ACA:  MOVWF  x3B
04ACC:  MOVLB  0
04ACE:  CALL   1EBA
....................               putc(26,CH2);
04AD2:  MOVLW  1A
04AD4:  MOVLB  7
04AD6:  MOVWF  x3B
04AD8:  MOVLB  0
04ADA:  CALL   1EBA
04ADE:  MOVLB  6
....................             }
....................             
....................         }
....................       }
04AE0:  BRA    4AE8
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
04AE2:  BTFSS  xC6.0
04AE4:  BRA    4AE8
04AE6:  BCF    xCA.0
....................    }
04AE8:  BRA    4BAA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
04AEA:  MOVLW  00
04AEC:  BTFSC  xC3.0
04AEE:  MOVLW  01
04AF0:  MOVLB  7
04AF2:  MOVWF  x3A
04AF4:  MOVLW  00
04AF6:  MOVLB  6
04AF8:  BTFSC  xC5.0
04AFA:  MOVLW  01
04AFC:  MOVLB  7
04AFE:  XORWF  x3A,W
04B00:  SUBLW  01
04B02:  BNZ   4BA2
....................       {
....................          Output.B1 = 0;
04B04:  MOVLB  6
04B06:  BCF    xC4.0
....................          
....................          
....................          // SMS Sending   
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04B08:  BTFSC  xD1.0
04B0A:  BRA    4B9E
04B0C:  BTFSC  30.1
04B0E:  BRA    4B9E
04B10:  BTFSC  xCA.0
04B12:  BRA    4B9E
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04B14:  MOVLW  CA
04B16:  MOVWF  FF6
04B18:  MOVLW  05
04B1A:  MOVWF  FF7
04B1C:  MOVLB  0
04B1E:  CALL   1F00
....................             putc('\n',CH2);
04B22:  MOVLW  0A
04B24:  MOVLB  7
04B26:  MOVWF  x3B
04B28:  MOVLB  0
04B2A:  CALL   1EBA
....................             delay_ms(10);
04B2E:  MOVLW  0A
04B30:  MOVLB  7
04B32:  MOVWF  x3A
04B34:  MOVLB  0
04B36:  CALL   0750
....................             
....................             SendSMS.B1 =1;
04B3A:  MOVLB  6
04B3C:  BSF    xD1.0
....................             fprintf(CH2,"AT+CMGS=\"");
04B3E:  MOVLW  D4
04B40:  MOVWF  FF6
04B42:  MOVLW  05
04B44:  MOVWF  FF7
04B46:  MOVLB  0
04B48:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
04B4C:  MOVLW  05
04B4E:  MOVWF  FEA
04B50:  MOVLW  6C
04B52:  MOVWF  FE9
04B54:  RCALL  44A4
....................             
....................             fprintf(CH2,"\"");
04B56:  MOVLW  22
04B58:  MOVLB  7
04B5A:  MOVWF  x3B
04B5C:  MOVLB  0
04B5E:  CALL   1EBA
....................             putc('\n',CH2);
04B62:  MOVLW  0A
04B64:  MOVLB  7
04B66:  MOVWF  x3B
04B68:  MOVLB  0
04B6A:  CALL   1EBA
....................             delay_ms(50);
04B6E:  MOVLW  32
04B70:  MOVLB  7
04B72:  MOVWF  x3A
04B74:  MOVLB  0
04B76:  CALL   0750
....................            
....................            fprintf(CH2,SMS_Massage1);
04B7A:  MOVLW  05
04B7C:  MOVWF  FEA
04B7E:  MOVLW  7B
04B80:  MOVWF  FE9
04B82:  RCALL  44A4
....................            putc('\n',CH2);
04B84:  MOVLW  0A
04B86:  MOVLB  7
04B88:  MOVWF  x3B
04B8A:  MOVLB  0
04B8C:  CALL   1EBA
....................           putc(26,CH2);
04B90:  MOVLW  1A
04B92:  MOVLB  7
04B94:  MOVWF  x3B
04B96:  MOVLB  0
04B98:  CALL   1EBA
04B9C:  MOVLB  6
....................          }
....................          
....................       }
04B9E:  BRA    4BAA
04BA0:  MOVLB  7
....................       else
....................       {
....................          Output.B1 = 1;
04BA2:  MOVLB  6
04BA4:  BSF    xC4.0
....................          
....................          SendSMS.B1 =0;
04BA6:  BCF    xD1.0
....................          functointest_f =0;
04BA8:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
04BAA:  BTFSS  xC9.1
04BAC:  BRA    4CC0
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
04BAE:  MOVLW  00
04BB0:  BTFSC  xC3.1
04BB2:  MOVLW  01
04BB4:  MOVLB  7
04BB6:  MOVWF  x3A
04BB8:  MOVLW  00
04BBA:  MOVLB  6
04BBC:  BTFSC  xC5.1
04BBE:  MOVLW  01
04BC0:  MOVLB  7
04BC2:  XORWF  x3A,W
04BC4:  SUBLW  01
04BC6:  BNZ   4BCE
04BC8:  MOVLB  6
04BCA:  BTFSC  xC6.1
04BCC:  BRA    4BD4
04BCE:  MOVLB  6
04BD0:  BTFSS  xCB.1
04BD2:  BRA    4CB8
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
04BD4:  BTFSC  xCA.1
04BD6:  BRA    4C20
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04BD8:  BTFSC  xCB.1
04BDA:  BRA    4BF4
04BDC:  MOVLB  0
04BDE:  MOVF   x6A,W
04BE0:  SUBLW  0F
04BE2:  BTFSC  FD8.2
04BE4:  BRA    4BEA
04BE6:  MOVLB  6
04BE8:  BRA    4BF4
....................             {
....................                TimeBase1s = 100 ;            //reload again
04BEA:  MOVLW  64
04BEC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04BEE:  MOVFF  6B,1D
04BF2:  MOVLB  6
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
04BF4:  BSF    xCB.1
....................             if(FlashingFlag == 0)
04BF6:  BTFSC  1A.1
04BF8:  BRA    4BFE
....................             {
....................                Output.B2 = 0;           //Flash output1
04BFA:  BCF    xC4.1
....................             }
04BFC:  BRA    4C00
....................             else
....................             {
....................                Output.B2 = 1;
04BFE:  BSF    xC4.1
....................             }
.................... 
....................             if (~AutoTestFlag)
04C00:  BTFSC  1A.4
04C02:  BRA    4C20
....................             {
....................                
....................                if(OutputBoth.B2 == 0)                  //Both output
04C04:  BTFSC  xC8.1
04C06:  BRA    4C12
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04C08:  BCF    F89.4
04C0A:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04C0C:  BCF    F89.3
04C0E:  BCF    F92.3
....................                }
04C10:  BRA    4C20
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,0);     //Buzzer
04C12:  BTFSS  xC7.1
04C14:  BRA    4C1C
04C16:  BCF    F89.4
04C18:  BCF    F92.4
04C1A:  BRA    4C20
....................                   else output_bit(Pbell,0);                          //Bell
04C1C:  BCF    F89.3
04C1E:  BCF    F92.3
....................                }
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04C20:  BTFSC  xD1.1
04C22:  BRA    4CB6
04C24:  BTFSC  30.1
04C26:  BRA    4CB6
04C28:  BTFSC  xCA.1
04C2A:  BRA    4CB6
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04C2C:  MOVLW  DE
04C2E:  MOVWF  FF6
04C30:  MOVLW  05
04C32:  MOVWF  FF7
04C34:  MOVLB  0
04C36:  CALL   1F00
....................                putc('\n',CH2);
04C3A:  MOVLW  0A
04C3C:  MOVLB  7
04C3E:  MOVWF  x3B
04C40:  MOVLB  0
04C42:  CALL   1EBA
....................                delay_ms(10);
04C46:  MOVLW  0A
04C48:  MOVLB  7
04C4A:  MOVWF  x3A
04C4C:  MOVLB  0
04C4E:  CALL   0750
....................                 
....................                SendSMS.B2 =1;
04C52:  MOVLB  6
04C54:  BSF    xD1.1
....................                fprintf(CH2,"AT+CMGS=\"");
04C56:  MOVLW  E8
04C58:  MOVWF  FF6
04C5A:  MOVLW  05
04C5C:  MOVWF  FF7
04C5E:  MOVLB  0
04C60:  CALL   1F00
....................                fprintf(CH2,sms_phonenumber);
04C64:  MOVLW  05
04C66:  MOVWF  FEA
04C68:  MOVLW  6C
04C6A:  MOVWF  FE9
04C6C:  RCALL  44A4
....................                
....................                fprintf(CH2,"\"");
04C6E:  MOVLW  22
04C70:  MOVLB  7
04C72:  MOVWF  x3B
04C74:  MOVLB  0
04C76:  CALL   1EBA
....................                putc('\n',CH2);
04C7A:  MOVLW  0A
04C7C:  MOVLB  7
04C7E:  MOVWF  x3B
04C80:  MOVLB  0
04C82:  CALL   1EBA
....................                delay_ms(50);
04C86:  MOVLW  32
04C88:  MOVLB  7
04C8A:  MOVWF  x3A
04C8C:  MOVLB  0
04C8E:  CALL   0750
....................                
....................               fprintf(CH2,SMS_Massage2);
04C92:  MOVLW  05
04C94:  MOVWF  FEA
04C96:  MOVLW  A4
04C98:  MOVWF  FE9
04C9A:  RCALL  44A4
....................               putc('\n',CH2);
04C9C:  MOVLW  0A
04C9E:  MOVLB  7
04CA0:  MOVWF  x3B
04CA2:  MOVLB  0
04CA4:  CALL   1EBA
....................              putc(26,CH2);
04CA8:  MOVLW  1A
04CAA:  MOVLB  7
04CAC:  MOVWF  x3B
04CAE:  MOVLB  0
04CB0:  CALL   1EBA
04CB4:  MOVLB  6
....................             }  
.................... 
....................       }
04CB6:  BRA    4CBE
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
04CB8:  BTFSS  xC6.1
04CBA:  BRA    4CBE
04CBC:  BCF    xCA.1
....................    }
04CBE:  BRA    4D84
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
04CC0:  MOVLW  00
04CC2:  BTFSC  xC3.1
04CC4:  MOVLW  01
04CC6:  MOVLB  7
04CC8:  MOVWF  x3A
04CCA:  MOVLW  00
04CCC:  MOVLB  6
04CCE:  BTFSC  xC5.1
04CD0:  MOVLW  01
04CD2:  MOVLB  7
04CD4:  XORWF  x3A,W
04CD6:  SUBLW  01
04CD8:  BNZ   4D7C
....................       {
....................          Output.B2 = 0;
04CDA:  MOVLB  6
04CDC:  BCF    xC4.1
....................           // SMS Sending   
....................          if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04CDE:  BTFSC  xD1.1
04CE0:  BRA    4D78
04CE2:  BTFSC  30.1
04CE4:  BRA    4D78
04CE6:  BTFSC  xCA.1
04CE8:  BRA    4D78
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04CEA:  MOVLW  F2
04CEC:  MOVWF  FF6
04CEE:  MOVLW  05
04CF0:  MOVWF  FF7
04CF2:  MOVLB  0
04CF4:  CALL   1F00
....................             putc('\n',CH2);
04CF8:  MOVLW  0A
04CFA:  MOVLB  7
04CFC:  MOVWF  x3B
04CFE:  MOVLB  0
04D00:  CALL   1EBA
....................             delay_ms(10);
04D04:  MOVLW  0A
04D06:  MOVLB  7
04D08:  MOVWF  x3A
04D0A:  MOVLB  0
04D0C:  CALL   0750
....................             
....................             SendSMS.B2 =1;
04D10:  MOVLB  6
04D12:  BSF    xD1.1
....................             fprintf(CH2,"AT+CMGS=\"");
04D14:  MOVLW  FC
04D16:  MOVWF  FF6
04D18:  MOVLW  05
04D1A:  MOVWF  FF7
04D1C:  MOVLB  0
04D1E:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
04D22:  MOVLW  05
04D24:  MOVWF  FEA
04D26:  MOVLW  6C
04D28:  MOVWF  FE9
04D2A:  CALL   44A4
....................             
....................             printf("\"");
04D2E:  MOVLW  22
04D30:  MOVLB  7
04D32:  MOVWF  x3B
04D34:  MOVLB  0
04D36:  CALL   1EBA
....................             putc('\n',CH2);
04D3A:  MOVLW  0A
04D3C:  MOVLB  7
04D3E:  MOVWF  x3B
04D40:  MOVLB  0
04D42:  CALL   1EBA
....................             delay_ms(50);
04D46:  MOVLW  32
04D48:  MOVLB  7
04D4A:  MOVWF  x3A
04D4C:  MOVLB  0
04D4E:  CALL   0750
....................            
....................            fprintf(CH2,SMS_Massage1);
04D52:  MOVLW  05
04D54:  MOVWF  FEA
04D56:  MOVLW  7B
04D58:  MOVWF  FE9
04D5A:  CALL   44A4
....................            putc('\n',CH2);
04D5E:  MOVLW  0A
04D60:  MOVLB  7
04D62:  MOVWF  x3B
04D64:  MOVLB  0
04D66:  CALL   1EBA
....................            putc(26,CH2);
04D6A:  MOVLW  1A
04D6C:  MOVLB  7
04D6E:  MOVWF  x3B
04D70:  MOVLB  0
04D72:  CALL   1EBA
04D76:  MOVLB  6
....................          }  
....................       }
04D78:  BRA    4D84
04D7A:  MOVLB  7
....................       else
....................       {
....................          Output.B2 = 1;
04D7C:  MOVLB  6
04D7E:  BSF    xC4.1
....................          SendSMS.B2 =0;
04D80:  BCF    xD1.1
....................          functointest_f =0;
04D82:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
04D84:  BTFSS  xC9.2
04D86:  BRA    4E9E
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
04D88:  MOVLW  00
04D8A:  BTFSC  xC3.2
04D8C:  MOVLW  01
04D8E:  MOVLB  7
04D90:  MOVWF  x3A
04D92:  MOVLW  00
04D94:  MOVLB  6
04D96:  BTFSC  xC5.2
04D98:  MOVLW  01
04D9A:  MOVLB  7
04D9C:  XORWF  x3A,W
04D9E:  SUBLW  01
04DA0:  BNZ   4DA8
04DA2:  MOVLB  6
04DA4:  BTFSC  xC6.2
04DA6:  BRA    4DAE
04DA8:  MOVLB  6
04DAA:  BTFSS  xCB.2
04DAC:  BRA    4E96
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
04DAE:  BTFSC  xCA.2
04DB0:  BRA    4DFA
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04DB2:  BTFSC  xCB.2
04DB4:  BRA    4DCE
04DB6:  MOVLB  0
04DB8:  MOVF   x6A,W
04DBA:  SUBLW  0F
04DBC:  BTFSC  FD8.2
04DBE:  BRA    4DC4
04DC0:  MOVLB  6
04DC2:  BRA    4DCE
....................             {
....................                TimeBase1s = 100 ;            //reload again
04DC4:  MOVLW  64
04DC6:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04DC8:  MOVFF  6B,1D
04DCC:  MOVLB  6
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
04DCE:  BSF    xCB.2
....................             if(FlashingFlag == 0)
04DD0:  BTFSC  1A.1
04DD2:  BRA    4DD8
....................             {
....................                Output.B3 = 0;           //Flash output1
04DD4:  BCF    xC4.2
....................             }
04DD6:  BRA    4DDA
....................             else
....................             {
....................                Output.B3 = 1;
04DD8:  BSF    xC4.2
....................             }
.................... 
....................             if (~AutoTestFlag)
04DDA:  BTFSC  1A.4
04DDC:  BRA    4DFA
....................             {
....................                
....................                if(OutputBoth.B3 == 0)                  //Both output
04DDE:  BTFSC  xC8.2
04DE0:  BRA    4DEC
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04DE2:  BCF    F89.4
04DE4:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04DE6:  BCF    F89.3
04DE8:  BCF    F92.3
....................                }
04DEA:  BRA    4DFA
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,0);     //Buzzer
04DEC:  BTFSS  xC7.2
04DEE:  BRA    4DF6
04DF0:  BCF    F89.4
04DF2:  BCF    F92.4
04DF4:  BRA    4DFA
....................                   else output_bit(Pbell,0);                          //Bell
04DF6:  BCF    F89.3
04DF8:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
04DFA:  BTFSC  xD1.2
04DFC:  BRA    4E94
04DFE:  BTFSC  30.1
04E00:  BRA    4E94
04E02:  BTFSC  xCA.2
04E04:  BRA    4E94
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04E06:  MOVLW  06
04E08:  MOVWF  FF6
04E0A:  MOVLW  06
04E0C:  MOVWF  FF7
04E0E:  MOVLB  0
04E10:  CALL   1F00
....................                putc('\n',CH2);
04E14:  MOVLW  0A
04E16:  MOVLB  7
04E18:  MOVWF  x3B
04E1A:  MOVLB  0
04E1C:  CALL   1EBA
....................                delay_ms(10);
04E20:  MOVLW  0A
04E22:  MOVLB  7
04E24:  MOVWF  x3A
04E26:  MOVLB  0
04E28:  CALL   0750
....................                
....................                SendSMS.B3 =1;
04E2C:  MOVLB  6
04E2E:  BSF    xD1.2
....................                fprintf(CH2,"AT+CMGS=\"");
04E30:  MOVLW  10
04E32:  MOVWF  FF6
04E34:  MOVLW  06
04E36:  MOVWF  FF7
04E38:  MOVLB  0
04E3A:  CALL   1F00
....................                fprintf(CH2,sms_phonenumber);
04E3E:  MOVLW  05
04E40:  MOVWF  FEA
04E42:  MOVLW  6C
04E44:  MOVWF  FE9
04E46:  CALL   44A4
....................                
....................                fprintf(CH2,"\"");
04E4A:  MOVLW  22
04E4C:  MOVLB  7
04E4E:  MOVWF  x3B
04E50:  MOVLB  0
04E52:  CALL   1EBA
....................                putc('\n',CH2);
04E56:  MOVLW  0A
04E58:  MOVLB  7
04E5A:  MOVWF  x3B
04E5C:  MOVLB  0
04E5E:  CALL   1EBA
....................                delay_ms(50);
04E62:  MOVLW  32
04E64:  MOVLB  7
04E66:  MOVWF  x3A
04E68:  MOVLB  0
04E6A:  CALL   0750
....................               
....................               fprintf(CH2,SMS_Massage3);
04E6E:  MOVLW  05
04E70:  MOVWF  FEA
04E72:  MOVLW  CD
04E74:  MOVWF  FE9
04E76:  CALL   44A4
....................               putc('\n',CH2);
04E7A:  MOVLW  0A
04E7C:  MOVLB  7
04E7E:  MOVWF  x3B
04E80:  MOVLB  0
04E82:  CALL   1EBA
....................              putc(26,CH2);
04E86:  MOVLW  1A
04E88:  MOVLB  7
04E8A:  MOVWF  x3B
04E8C:  MOVLB  0
04E8E:  CALL   1EBA
04E92:  MOVLB  6
....................             }
.................... 
....................       }
04E94:  BRA    4E9C
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
04E96:  BTFSS  xC6.2
04E98:  BRA    4E9C
04E9A:  BCF    xCA.2
....................    }
04E9C:  BRA    4F60
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
04E9E:  MOVLW  00
04EA0:  BTFSC  xC3.2
04EA2:  MOVLW  01
04EA4:  MOVLB  7
04EA6:  MOVWF  x3A
04EA8:  MOVLW  00
04EAA:  MOVLB  6
04EAC:  BTFSC  xC5.2
04EAE:  MOVLW  01
04EB0:  MOVLB  7
04EB2:  XORWF  x3A,W
04EB4:  SUBLW  01
04EB6:  BNZ   4F5A
....................       {
....................          Output.B3 = 0;
04EB8:  MOVLB  6
04EBA:  BCF    xC4.2
....................          // SMS Sending   
....................          if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
04EBC:  BTFSC  xD1.2
04EBE:  BRA    4F56
04EC0:  BTFSC  30.1
04EC2:  BRA    4F56
04EC4:  BTFSC  xCA.2
04EC6:  BRA    4F56
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04EC8:  MOVLW  1A
04ECA:  MOVWF  FF6
04ECC:  MOVLW  06
04ECE:  MOVWF  FF7
04ED0:  MOVLB  0
04ED2:  CALL   1F00
....................             putc('\n',CH2);
04ED6:  MOVLW  0A
04ED8:  MOVLB  7
04EDA:  MOVWF  x3B
04EDC:  MOVLB  0
04EDE:  CALL   1EBA
....................             delay_ms(10);
04EE2:  MOVLW  0A
04EE4:  MOVLB  7
04EE6:  MOVWF  x3A
04EE8:  MOVLB  0
04EEA:  CALL   0750
....................             
....................             SendSMS.B3 =1;
04EEE:  MOVLB  6
04EF0:  BSF    xD1.2
....................             fprintf(CH2,"AT+CMGS=\"");
04EF2:  MOVLW  24
04EF4:  MOVWF  FF6
04EF6:  MOVLW  06
04EF8:  MOVWF  FF7
04EFA:  MOVLB  0
04EFC:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
04F00:  MOVLW  05
04F02:  MOVWF  FEA
04F04:  MOVLW  6C
04F06:  MOVWF  FE9
04F08:  CALL   44A4
....................             
....................             fprintf(CH2,"\"");
04F0C:  MOVLW  22
04F0E:  MOVLB  7
04F10:  MOVWF  x3B
04F12:  MOVLB  0
04F14:  CALL   1EBA
....................             putc('\n',CH2);
04F18:  MOVLW  0A
04F1A:  MOVLB  7
04F1C:  MOVWF  x3B
04F1E:  MOVLB  0
04F20:  CALL   1EBA
....................             delay_ms(50);
04F24:  MOVLW  32
04F26:  MOVLB  7
04F28:  MOVWF  x3A
04F2A:  MOVLB  0
04F2C:  CALL   0750
....................            
....................            fprintf(CH2,SMS_Massage3);
04F30:  MOVLW  05
04F32:  MOVWF  FEA
04F34:  MOVLW  CD
04F36:  MOVWF  FE9
04F38:  CALL   44A4
....................            putc('\n',CH2);
04F3C:  MOVLW  0A
04F3E:  MOVLB  7
04F40:  MOVWF  x3B
04F42:  MOVLB  0
04F44:  CALL   1EBA
....................           putc(26,CH2);
04F48:  MOVLW  1A
04F4A:  MOVLB  7
04F4C:  MOVWF  x3B
04F4E:  MOVLB  0
04F50:  CALL   1EBA
04F54:  MOVLB  6
....................          }
....................       }
04F56:  BRA    4F60
04F58:  MOVLB  7
....................       else
....................       {
....................          Output.B3 = 1;
04F5A:  MOVLB  6
04F5C:  BSF    xC4.2
....................          SendSMS.B3 =0;
04F5E:  BCF    xD1.2
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
04F60:  BTFSS  xC9.3
04F62:  BRA    507A
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
04F64:  MOVLW  00
04F66:  BTFSC  xC3.3
04F68:  MOVLW  01
04F6A:  MOVLB  7
04F6C:  MOVWF  x3A
04F6E:  MOVLW  00
04F70:  MOVLB  6
04F72:  BTFSC  xC5.3
04F74:  MOVLW  01
04F76:  MOVLB  7
04F78:  XORWF  x3A,W
04F7A:  SUBLW  01
04F7C:  BNZ   4F84
04F7E:  MOVLB  6
04F80:  BTFSC  xC6.3
04F82:  BRA    4F8A
04F84:  MOVLB  6
04F86:  BTFSS  xCB.3
04F88:  BRA    5072
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
04F8A:  BTFSC  xCA.3
04F8C:  BRA    4FD6
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04F8E:  BTFSC  xCB.3
04F90:  BRA    4FAA
04F92:  MOVLB  0
04F94:  MOVF   x6A,W
04F96:  SUBLW  0F
04F98:  BTFSC  FD8.2
04F9A:  BRA    4FA0
04F9C:  MOVLB  6
04F9E:  BRA    4FAA
....................             {
....................                TimeBase1s = 100 ;            //reload again
04FA0:  MOVLW  64
04FA2:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04FA4:  MOVFF  6B,1D
04FA8:  MOVLB  6
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
04FAA:  BSF    xCB.3
....................             if(FlashingFlag == 0)
04FAC:  BTFSC  1A.1
04FAE:  BRA    4FB4
....................             {
....................                Output.B4 = 0;           //Flash output1
04FB0:  BCF    xC4.3
....................             }
04FB2:  BRA    4FB6
....................             else
....................             {
....................                Output.B4 = 1;
04FB4:  BSF    xC4.3
....................             }
.................... 
....................             if (~AutoTestFlag)
04FB6:  BTFSC  1A.4
04FB8:  BRA    4FD6
....................             {
....................                
....................                if(OutputBoth.B4 == 0)                  //Both output
04FBA:  BTFSC  xC8.3
04FBC:  BRA    4FC8
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04FBE:  BCF    F89.4
04FC0:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04FC2:  BCF    F89.3
04FC4:  BCF    F92.3
....................                }
04FC6:  BRA    4FD6
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,0);     //Buzzer
04FC8:  BTFSS  xC7.3
04FCA:  BRA    4FD2
04FCC:  BCF    F89.4
04FCE:  BCF    F92.4
04FD0:  BRA    4FD6
....................                   else output_bit(Pbell,0);                          //Bell
04FD2:  BCF    F89.3
04FD4:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
04FD6:  BTFSC  xD1.3
04FD8:  BRA    5070
04FDA:  BTFSC  30.1
04FDC:  BRA    5070
04FDE:  BTFSC  xCA.3
04FE0:  BRA    5070
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04FE2:  MOVLW  2E
04FE4:  MOVWF  FF6
04FE6:  MOVLW  06
04FE8:  MOVWF  FF7
04FEA:  MOVLB  0
04FEC:  CALL   1F00
....................                putc('\n',CH2);
04FF0:  MOVLW  0A
04FF2:  MOVLB  7
04FF4:  MOVWF  x3B
04FF6:  MOVLB  0
04FF8:  CALL   1EBA
....................                delay_ms(10);
04FFC:  MOVLW  0A
04FFE:  MOVLB  7
05000:  MOVWF  x3A
05002:  MOVLB  0
05004:  CALL   0750
....................                
....................                SendSMS.B4 =1;
05008:  MOVLB  6
0500A:  BSF    xD1.3
....................                fprintf(CH2,"AT+CMGS=\"");
0500C:  MOVLW  38
0500E:  MOVWF  FF6
05010:  MOVLW  06
05012:  MOVWF  FF7
05014:  MOVLB  0
05016:  CALL   1F00
....................                fprintf(CH2,sms_phonenumber);
0501A:  MOVLW  05
0501C:  MOVWF  FEA
0501E:  MOVLW  6C
05020:  MOVWF  FE9
05022:  CALL   44A4
....................             
....................                fprintf(CH2,"\"");
05026:  MOVLW  22
05028:  MOVLB  7
0502A:  MOVWF  x3B
0502C:  MOVLB  0
0502E:  CALL   1EBA
....................                putc('\n',CH2);
05032:  MOVLW  0A
05034:  MOVLB  7
05036:  MOVWF  x3B
05038:  MOVLB  0
0503A:  CALL   1EBA
....................                delay_ms(50);
0503E:  MOVLW  32
05040:  MOVLB  7
05042:  MOVWF  x3A
05044:  MOVLB  0
05046:  CALL   0750
....................               
....................               fprintf(CH2,SMS_Massage4);
0504A:  MOVLW  05
0504C:  MOVWF  FEA
0504E:  MOVLW  F6
05050:  MOVWF  FE9
05052:  CALL   44A4
....................               putc('\n',CH2);
05056:  MOVLW  0A
05058:  MOVLB  7
0505A:  MOVWF  x3B
0505C:  MOVLB  0
0505E:  CALL   1EBA
....................              putc(26,CH2);
05062:  MOVLW  1A
05064:  MOVLB  7
05066:  MOVWF  x3B
05068:  MOVLB  0
0506A:  CALL   1EBA
0506E:  MOVLB  6
....................             }
.................... 
....................       }
05070:  BRA    5078
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
05072:  BTFSS  xC6.3
05074:  BRA    5078
05076:  BCF    xCA.3
....................    }
05078:  BRA    513C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
0507A:  MOVLW  00
0507C:  BTFSC  xC3.3
0507E:  MOVLW  01
05080:  MOVLB  7
05082:  MOVWF  x3A
05084:  MOVLW  00
05086:  MOVLB  6
05088:  BTFSC  xC5.3
0508A:  MOVLW  01
0508C:  MOVLB  7
0508E:  XORWF  x3A,W
05090:  SUBLW  01
05092:  BNZ   5136
....................       {
....................          Output.B4 = 0;
05094:  MOVLB  6
05096:  BCF    xC4.3
....................          
....................          // SMS Sending   
....................          if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
05098:  BTFSC  xD1.3
0509A:  BRA    5132
0509C:  BTFSC  30.1
0509E:  BRA    5132
050A0:  BTFSC  xCA.3
050A2:  BRA    5132
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
050A4:  MOVLW  42
050A6:  MOVWF  FF6
050A8:  MOVLW  06
050AA:  MOVWF  FF7
050AC:  MOVLB  0
050AE:  CALL   1F00
....................             putc('\n',CH2);
050B2:  MOVLW  0A
050B4:  MOVLB  7
050B6:  MOVWF  x3B
050B8:  MOVLB  0
050BA:  CALL   1EBA
....................             delay_ms(10);
050BE:  MOVLW  0A
050C0:  MOVLB  7
050C2:  MOVWF  x3A
050C4:  MOVLB  0
050C6:  CALL   0750
....................             
....................             SendSMS.B4 =1;
050CA:  MOVLB  6
050CC:  BSF    xD1.3
....................             fprintf(CH2,"AT+CMGS=\"");
050CE:  MOVLW  4C
050D0:  MOVWF  FF6
050D2:  MOVLW  06
050D4:  MOVWF  FF7
050D6:  MOVLB  0
050D8:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
050DC:  MOVLW  05
050DE:  MOVWF  FEA
050E0:  MOVLW  6C
050E2:  MOVWF  FE9
050E4:  CALL   44A4
....................          
....................             fprintf(CH2,"\"");
050E8:  MOVLW  22
050EA:  MOVLB  7
050EC:  MOVWF  x3B
050EE:  MOVLB  0
050F0:  CALL   1EBA
....................             putc('\n',CH2);
050F4:  MOVLW  0A
050F6:  MOVLB  7
050F8:  MOVWF  x3B
050FA:  MOVLB  0
050FC:  CALL   1EBA
....................             delay_ms(50);
05100:  MOVLW  32
05102:  MOVLB  7
05104:  MOVWF  x3A
05106:  MOVLB  0
05108:  CALL   0750
....................            
....................            fprintf(CH2,SMS_Massage4);
0510C:  MOVLW  05
0510E:  MOVWF  FEA
05110:  MOVLW  F6
05112:  MOVWF  FE9
05114:  CALL   44A4
....................            putc('\n',CH2);
05118:  MOVLW  0A
0511A:  MOVLB  7
0511C:  MOVWF  x3B
0511E:  MOVLB  0
05120:  CALL   1EBA
....................           putc(26,CH2);
05124:  MOVLW  1A
05126:  MOVLB  7
05128:  MOVWF  x3B
0512A:  MOVLB  0
0512C:  CALL   1EBA
05130:  MOVLB  6
....................          }
....................       }
05132:  BRA    513C
05134:  MOVLB  7
....................       else
....................       {
....................          Output.B4 = 1;
05136:  MOVLB  6
05138:  BSF    xC4.3
....................          SendSMS.B4 =0;
0513A:  BCF    xD1.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
0513C:  BTFSS  xC9.4
0513E:  BRA    5256
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
05140:  MOVLW  00
05142:  BTFSC  xC3.4
05144:  MOVLW  01
05146:  MOVLB  7
05148:  MOVWF  x3A
0514A:  MOVLW  00
0514C:  MOVLB  6
0514E:  BTFSC  xC5.4
05150:  MOVLW  01
05152:  MOVLB  7
05154:  XORWF  x3A,W
05156:  SUBLW  01
05158:  BNZ   5160
0515A:  MOVLB  6
0515C:  BTFSC  xC6.4
0515E:  BRA    5166
05160:  MOVLB  6
05162:  BTFSS  xCB.4
05164:  BRA    524E
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
05166:  BTFSC  xCA.4
05168:  BRA    51B2
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0516A:  BTFSC  xCB.4
0516C:  BRA    5186
0516E:  MOVLB  0
05170:  MOVF   x6A,W
05172:  SUBLW  0F
05174:  BTFSC  FD8.2
05176:  BRA    517C
05178:  MOVLB  6
0517A:  BRA    5186
....................             {
....................                TimeBase1s = 100 ;            //reload again
0517C:  MOVLW  64
0517E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05180:  MOVFF  6B,1D
05184:  MOVLB  6
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
05186:  BSF    xCB.4
....................             if(FlashingFlag == 0)
05188:  BTFSC  1A.1
0518A:  BRA    5190
....................             {
....................                Output.B5 = 0;           //Flash output1
0518C:  BCF    xC4.4
....................             }
0518E:  BRA    5192
....................             else
....................             {
....................                Output.B5 = 1;
05190:  BSF    xC4.4
....................             }
.................... 
....................             if (~AutoTestFlag)
05192:  BTFSC  1A.4
05194:  BRA    51B2
....................             {
....................                
....................                if(OutputBoth.B5 == 0)                  //Both output
05196:  BTFSC  xC8.4
05198:  BRA    51A4
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
0519A:  BCF    F89.4
0519C:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
0519E:  BCF    F89.3
051A0:  BCF    F92.3
....................                }
051A2:  BRA    51B2
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,0);     //Buzzer
051A4:  BTFSS  xC7.4
051A6:  BRA    51AE
051A8:  BCF    F89.4
051AA:  BCF    F92.4
051AC:  BRA    51B2
....................                   else output_bit(Pbell,0);                          //Bell
051AE:  BCF    F89.3
051B0:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
051B2:  BTFSC  xD1.4
051B4:  BRA    524C
051B6:  BTFSC  30.1
051B8:  BRA    524C
051BA:  BTFSC  xCA.4
051BC:  BRA    524C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
051BE:  MOVLW  56
051C0:  MOVWF  FF6
051C2:  MOVLW  06
051C4:  MOVWF  FF7
051C6:  MOVLB  0
051C8:  CALL   1F00
....................                putc('\n',CH2);
051CC:  MOVLW  0A
051CE:  MOVLB  7
051D0:  MOVWF  x3B
051D2:  MOVLB  0
051D4:  CALL   1EBA
....................                delay_ms(10);
051D8:  MOVLW  0A
051DA:  MOVLB  7
051DC:  MOVWF  x3A
051DE:  MOVLB  0
051E0:  CALL   0750
....................                
....................                SendSMS.B5 =1;
051E4:  MOVLB  6
051E6:  BSF    xD1.4
....................                fprintf(CH2,"AT+CMGS=\"");
051E8:  MOVLW  60
051EA:  MOVWF  FF6
051EC:  MOVLW  06
051EE:  MOVWF  FF7
051F0:  MOVLB  0
051F2:  CALL   1F00
....................                fprintf(CH2,sms_phonenumber);
051F6:  MOVLW  05
051F8:  MOVWF  FEA
051FA:  MOVLW  6C
051FC:  MOVWF  FE9
051FE:  CALL   44A4
....................                
....................                fprintf(CH2,"\"");
05202:  MOVLW  22
05204:  MOVLB  7
05206:  MOVWF  x3B
05208:  MOVLB  0
0520A:  CALL   1EBA
....................                putc('\n',CH2);
0520E:  MOVLW  0A
05210:  MOVLB  7
05212:  MOVWF  x3B
05214:  MOVLB  0
05216:  CALL   1EBA
....................                delay_ms(50);
0521A:  MOVLW  32
0521C:  MOVLB  7
0521E:  MOVWF  x3A
05220:  MOVLB  0
05222:  CALL   0750
....................               
....................               fprintf(CH2,SMS_Massage5);
05226:  MOVLW  06
05228:  MOVWF  FEA
0522A:  MOVLW  1F
0522C:  MOVWF  FE9
0522E:  CALL   44A4
....................               putc('\n',CH2);
05232:  MOVLW  0A
05234:  MOVLB  7
05236:  MOVWF  x3B
05238:  MOVLB  0
0523A:  CALL   1EBA
....................              putc(26,CH2);
0523E:  MOVLW  1A
05240:  MOVLB  7
05242:  MOVWF  x3B
05244:  MOVLB  0
05246:  CALL   1EBA
0524A:  MOVLB  6
....................             }
.................... 
....................       }
0524C:  BRA    5254
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
0524E:  BTFSS  xC6.4
05250:  BRA    5254
05252:  BCF    xCA.4
....................    }
05254:  BRA    5318
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
05256:  MOVLW  00
05258:  BTFSC  xC3.4
0525A:  MOVLW  01
0525C:  MOVLB  7
0525E:  MOVWF  x3A
05260:  MOVLW  00
05262:  MOVLB  6
05264:  BTFSC  xC5.4
05266:  MOVLW  01
05268:  MOVLB  7
0526A:  XORWF  x3A,W
0526C:  SUBLW  01
0526E:  BNZ   5312
....................       {
....................          Output.B5 = 0;
05270:  MOVLB  6
05272:  BCF    xC4.4
....................          // SMS Sending   
....................          if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05274:  BTFSC  xD1.4
05276:  BRA    530E
05278:  BTFSC  30.1
0527A:  BRA    530E
0527C:  BTFSC  xCA.4
0527E:  BRA    530E
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05280:  MOVLW  6A
05282:  MOVWF  FF6
05284:  MOVLW  06
05286:  MOVWF  FF7
05288:  MOVLB  0
0528A:  CALL   1F00
....................             putc('\n',CH2);
0528E:  MOVLW  0A
05290:  MOVLB  7
05292:  MOVWF  x3B
05294:  MOVLB  0
05296:  CALL   1EBA
....................             delay_ms(10);
0529A:  MOVLW  0A
0529C:  MOVLB  7
0529E:  MOVWF  x3A
052A0:  MOVLB  0
052A2:  CALL   0750
....................             
....................             SendSMS.B5 =1;
052A6:  MOVLB  6
052A8:  BSF    xD1.4
....................             fprintf(CH2,"AT+CMGS=\"");
052AA:  MOVLW  74
052AC:  MOVWF  FF6
052AE:  MOVLW  06
052B0:  MOVWF  FF7
052B2:  MOVLB  0
052B4:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
052B8:  MOVLW  05
052BA:  MOVWF  FEA
052BC:  MOVLW  6C
052BE:  MOVWF  FE9
052C0:  CALL   44A4
....................             
....................             fprintf(CH2,"\"");
052C4:  MOVLW  22
052C6:  MOVLB  7
052C8:  MOVWF  x3B
052CA:  MOVLB  0
052CC:  CALL   1EBA
....................             putc('\n',CH2);
052D0:  MOVLW  0A
052D2:  MOVLB  7
052D4:  MOVWF  x3B
052D6:  MOVLB  0
052D8:  CALL   1EBA
....................             delay_ms(50);
052DC:  MOVLW  32
052DE:  MOVLB  7
052E0:  MOVWF  x3A
052E2:  MOVLB  0
052E4:  CALL   0750
....................            
....................            fprintf(CH2,SMS_Massage5);  
052E8:  MOVLW  06
052EA:  MOVWF  FEA
052EC:  MOVLW  1F
052EE:  MOVWF  FE9
052F0:  CALL   44A4
....................            putc('\n',CH2);
052F4:  MOVLW  0A
052F6:  MOVLB  7
052F8:  MOVWF  x3B
052FA:  MOVLB  0
052FC:  CALL   1EBA
....................           putc(26,CH2);
05300:  MOVLW  1A
05302:  MOVLB  7
05304:  MOVWF  x3B
05306:  MOVLB  0
05308:  CALL   1EBA
0530C:  MOVLB  6
....................          }
....................       }
0530E:  BRA    5318
05310:  MOVLB  7
....................       else
....................       {
....................          Output.B5 = 1;
05312:  MOVLB  6
05314:  BSF    xC4.4
....................          SendSMS.B5 =0;
05316:  BCF    xD1.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
05318:  BTFSS  xC9.5
0531A:  BRA    5432
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
0531C:  MOVLW  00
0531E:  BTFSC  xC3.5
05320:  MOVLW  01
05322:  MOVLB  7
05324:  MOVWF  x3A
05326:  MOVLW  00
05328:  MOVLB  6
0532A:  BTFSC  xC5.5
0532C:  MOVLW  01
0532E:  MOVLB  7
05330:  XORWF  x3A,W
05332:  SUBLW  01
05334:  BNZ   533C
05336:  MOVLB  6
05338:  BTFSC  xC6.5
0533A:  BRA    5342
0533C:  MOVLB  6
0533E:  BTFSS  xCB.5
05340:  BRA    542A
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
05342:  BTFSC  xCA.5
05344:  BRA    538E
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05346:  BTFSC  xCB.5
05348:  BRA    5362
0534A:  MOVLB  0
0534C:  MOVF   x6A,W
0534E:  SUBLW  0F
05350:  BTFSC  FD8.2
05352:  BRA    5358
05354:  MOVLB  6
05356:  BRA    5362
....................             {
....................                TimeBase1s = 100 ;            //reload again
05358:  MOVLW  64
0535A:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0535C:  MOVFF  6B,1D
05360:  MOVLB  6
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
05362:  BSF    xCB.5
....................             if(FlashingFlag == 0)
05364:  BTFSC  1A.1
05366:  BRA    536C
....................             {
....................                Output.B6 = 0;           //Flash output1
05368:  BCF    xC4.5
....................             }
0536A:  BRA    536E
....................             else
....................             {
....................                Output.B6 = 1;
0536C:  BSF    xC4.5
....................             }
.................... 
....................             if (~AutoTestFlag)
0536E:  BTFSC  1A.4
05370:  BRA    538E
....................             {
....................                
....................                if(OutputBoth.B6 == 0)                  //Both output
05372:  BTFSC  xC8.5
05374:  BRA    5380
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05376:  BCF    F89.4
05378:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
0537A:  BCF    F89.3
0537C:  BCF    F92.3
....................                }
0537E:  BRA    538E
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,0);     //Buzzer
05380:  BTFSS  xC7.5
05382:  BRA    538A
05384:  BCF    F89.4
05386:  BCF    F92.4
05388:  BRA    538E
....................                   else output_bit(Pbell,0);                          //Bell
0538A:  BCF    F89.3
0538C:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0538E:  BTFSC  xD1.5
05390:  BRA    5428
05392:  BTFSC  30.1
05394:  BRA    5428
05396:  BTFSC  xCA.5
05398:  BRA    5428
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0539A:  MOVLW  7E
0539C:  MOVWF  FF6
0539E:  MOVLW  06
053A0:  MOVWF  FF7
053A2:  MOVLB  0
053A4:  CALL   1F00
....................                putc('\n',CH2);
053A8:  MOVLW  0A
053AA:  MOVLB  7
053AC:  MOVWF  x3B
053AE:  MOVLB  0
053B0:  CALL   1EBA
....................                delay_ms(10);
053B4:  MOVLW  0A
053B6:  MOVLB  7
053B8:  MOVWF  x3A
053BA:  MOVLB  0
053BC:  CALL   0750
....................                
....................                SendSMS.B6 =1;
053C0:  MOVLB  6
053C2:  BSF    xD1.5
....................                fprintf(CH2,"AT+CMGS=\"");
053C4:  MOVLW  88
053C6:  MOVWF  FF6
053C8:  MOVLW  06
053CA:  MOVWF  FF7
053CC:  MOVLB  0
053CE:  CALL   1F00
....................                fprintf(CH2,sms_phonenumber);
053D2:  MOVLW  05
053D4:  MOVWF  FEA
053D6:  MOVLW  6C
053D8:  MOVWF  FE9
053DA:  CALL   44A4
....................                
....................                fprintf(CH2,"\"");
053DE:  MOVLW  22
053E0:  MOVLB  7
053E2:  MOVWF  x3B
053E4:  MOVLB  0
053E6:  CALL   1EBA
....................                putc('\n',CH2);
053EA:  MOVLW  0A
053EC:  MOVLB  7
053EE:  MOVWF  x3B
053F0:  MOVLB  0
053F2:  CALL   1EBA
....................                delay_ms(50);
053F6:  MOVLW  32
053F8:  MOVLB  7
053FA:  MOVWF  x3A
053FC:  MOVLB  0
053FE:  CALL   0750
....................               
....................               fprintf(CH2,SMS_Massage6);
05402:  MOVLW  06
05404:  MOVWF  FEA
05406:  MOVLW  48
05408:  MOVWF  FE9
0540A:  CALL   44A4
....................               putc('\n',CH2);
0540E:  MOVLW  0A
05410:  MOVLB  7
05412:  MOVWF  x3B
05414:  MOVLB  0
05416:  CALL   1EBA
....................              putc(26,CH2);
0541A:  MOVLW  1A
0541C:  MOVLB  7
0541E:  MOVWF  x3B
05420:  MOVLB  0
05422:  CALL   1EBA
05426:  MOVLB  6
....................             }
.................... 
....................       }
05428:  BRA    5430
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
0542A:  BTFSS  xC6.5
0542C:  BRA    5430
0542E:  BCF    xCA.5
....................    }
05430:  BRA    54F4
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
05432:  MOVLW  00
05434:  BTFSC  xC3.5
05436:  MOVLW  01
05438:  MOVLB  7
0543A:  MOVWF  x3A
0543C:  MOVLW  00
0543E:  MOVLB  6
05440:  BTFSC  xC5.5
05442:  MOVLW  01
05444:  MOVLB  7
05446:  XORWF  x3A,W
05448:  SUBLW  01
0544A:  BNZ   54EE
....................       {
....................          Output.B6 = 0;
0544C:  MOVLB  6
0544E:  BCF    xC4.5
....................          // SMS Sending   
....................          if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
05450:  BTFSC  xD1.5
05452:  BRA    54EA
05454:  BTFSC  30.1
05456:  BRA    54EA
05458:  BTFSC  xCA.5
0545A:  BRA    54EA
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0545C:  MOVLW  92
0545E:  MOVWF  FF6
05460:  MOVLW  06
05462:  MOVWF  FF7
05464:  MOVLB  0
05466:  CALL   1F00
....................             putc('\n',CH2);
0546A:  MOVLW  0A
0546C:  MOVLB  7
0546E:  MOVWF  x3B
05470:  MOVLB  0
05472:  CALL   1EBA
....................             delay_ms(10);
05476:  MOVLW  0A
05478:  MOVLB  7
0547A:  MOVWF  x3A
0547C:  MOVLB  0
0547E:  CALL   0750
....................             
....................             SendSMS.B6 =1;
05482:  MOVLB  6
05484:  BSF    xD1.5
....................             fprintf(CH2,"AT+CMGS=\"");
05486:  MOVLW  9C
05488:  MOVWF  FF6
0548A:  MOVLW  06
0548C:  MOVWF  FF7
0548E:  MOVLB  0
05490:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
05494:  MOVLW  05
05496:  MOVWF  FEA
05498:  MOVLW  6C
0549A:  MOVWF  FE9
0549C:  CALL   44A4
....................             
....................             fprintf(CH2,"\"");
054A0:  MOVLW  22
054A2:  MOVLB  7
054A4:  MOVWF  x3B
054A6:  MOVLB  0
054A8:  CALL   1EBA
....................             putc('\n',CH2);
054AC:  MOVLW  0A
054AE:  MOVLB  7
054B0:  MOVWF  x3B
054B2:  MOVLB  0
054B4:  CALL   1EBA
....................             delay_ms(50);
054B8:  MOVLW  32
054BA:  MOVLB  7
054BC:  MOVWF  x3A
054BE:  MOVLB  0
054C0:  CALL   0750
....................            
....................            fprintf(CH2,SMS_Massage6);  
054C4:  MOVLW  06
054C6:  MOVWF  FEA
054C8:  MOVLW  48
054CA:  MOVWF  FE9
054CC:  CALL   44A4
....................            putc('\n',CH2);
054D0:  MOVLW  0A
054D2:  MOVLB  7
054D4:  MOVWF  x3B
054D6:  MOVLB  0
054D8:  CALL   1EBA
....................           putc(26,CH2);
054DC:  MOVLW  1A
054DE:  MOVLB  7
054E0:  MOVWF  x3B
054E2:  MOVLB  0
054E4:  CALL   1EBA
054E8:  MOVLB  6
....................          }
....................       }
054EA:  BRA    54F4
054EC:  MOVLB  7
....................       else
....................       {
....................          Output.B6 = 1;
054EE:  MOVLB  6
054F0:  BSF    xC4.5
....................          SendSMS.B6 =0;
054F2:  BCF    xD1.5
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
054F4:  BTFSS  xC9.6
054F6:  BRA    560E
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
054F8:  MOVLW  00
054FA:  BTFSC  xC3.6
054FC:  MOVLW  01
054FE:  MOVLB  7
05500:  MOVWF  x3A
05502:  MOVLW  00
05504:  MOVLB  6
05506:  BTFSC  xC5.6
05508:  MOVLW  01
0550A:  MOVLB  7
0550C:  XORWF  x3A,W
0550E:  SUBLW  01
05510:  BNZ   5518
05512:  MOVLB  6
05514:  BTFSC  xC6.6
05516:  BRA    551E
05518:  MOVLB  6
0551A:  BTFSS  xCB.6
0551C:  BRA    5606
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
0551E:  BTFSC  xCA.6
05520:  BRA    556A
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05522:  BTFSC  xCB.6
05524:  BRA    553E
05526:  MOVLB  0
05528:  MOVF   x6A,W
0552A:  SUBLW  0F
0552C:  BTFSC  FD8.2
0552E:  BRA    5534
05530:  MOVLB  6
05532:  BRA    553E
....................             {
....................                TimeBase1s = 100 ;            //reload again
05534:  MOVLW  64
05536:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05538:  MOVFF  6B,1D
0553C:  MOVLB  6
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
0553E:  BSF    xCB.6
....................             if(FlashingFlag == 0)
05540:  BTFSC  1A.1
05542:  BRA    5548
....................             {
....................                Output.B7 = 0;           //Flash output1
05544:  BCF    xC4.6
....................             }
05546:  BRA    554A
....................             else
....................             {
....................                Output.B7 = 1;
05548:  BSF    xC4.6
....................             }
.................... 
....................             if (~AutoTestFlag)
0554A:  BTFSC  1A.4
0554C:  BRA    556A
....................             {
....................                
....................                if(OutputBoth.B7 == 0)                  //Both output
0554E:  BTFSC  xC8.6
05550:  BRA    555C
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05552:  BCF    F89.4
05554:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05556:  BCF    F89.3
05558:  BCF    F92.3
....................                }
0555A:  BRA    556A
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,0);     //Buzzer
0555C:  BTFSS  xC7.6
0555E:  BRA    5566
05560:  BCF    F89.4
05562:  BCF    F92.4
05564:  BRA    556A
....................                   else output_bit(Pbell,0);                          //Bell
05566:  BCF    F89.3
05568:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0556A:  BTFSC  xD1.6
0556C:  BRA    5604
0556E:  BTFSC  30.1
05570:  BRA    5604
05572:  BTFSC  xCA.6
05574:  BRA    5604
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05576:  MOVLW  A6
05578:  MOVWF  FF6
0557A:  MOVLW  06
0557C:  MOVWF  FF7
0557E:  MOVLB  0
05580:  CALL   1F00
....................                putc('\n',CH2);
05584:  MOVLW  0A
05586:  MOVLB  7
05588:  MOVWF  x3B
0558A:  MOVLB  0
0558C:  CALL   1EBA
....................                delay_ms(10);
05590:  MOVLW  0A
05592:  MOVLB  7
05594:  MOVWF  x3A
05596:  MOVLB  0
05598:  CALL   0750
....................                
....................                SendSMS.B7 =1;
0559C:  MOVLB  6
0559E:  BSF    xD1.6
....................                fprintf(CH2,"AT+CMGS=\"");
055A0:  MOVLW  B0
055A2:  MOVWF  FF6
055A4:  MOVLW  06
055A6:  MOVWF  FF7
055A8:  MOVLB  0
055AA:  CALL   1F00
....................                fprintf(CH2,sms_phonenumber);
055AE:  MOVLW  05
055B0:  MOVWF  FEA
055B2:  MOVLW  6C
055B4:  MOVWF  FE9
055B6:  CALL   44A4
....................                
....................                fprintf(CH2,"\"");
055BA:  MOVLW  22
055BC:  MOVLB  7
055BE:  MOVWF  x3B
055C0:  MOVLB  0
055C2:  CALL   1EBA
....................                putc('\n',CH2);
055C6:  MOVLW  0A
055C8:  MOVLB  7
055CA:  MOVWF  x3B
055CC:  MOVLB  0
055CE:  CALL   1EBA
....................                delay_ms(50);
055D2:  MOVLW  32
055D4:  MOVLB  7
055D6:  MOVWF  x3A
055D8:  MOVLB  0
055DA:  CALL   0750
....................               
....................               fprintf(CH2,SMS_Massage7);  
055DE:  MOVLW  06
055E0:  MOVWF  FEA
055E2:  MOVLW  71
055E4:  MOVWF  FE9
055E6:  CALL   44A4
....................               putc('\n',CH2);
055EA:  MOVLW  0A
055EC:  MOVLB  7
055EE:  MOVWF  x3B
055F0:  MOVLB  0
055F2:  CALL   1EBA
....................              putc(26,CH2);
055F6:  MOVLW  1A
055F8:  MOVLB  7
055FA:  MOVWF  x3B
055FC:  MOVLB  0
055FE:  CALL   1EBA
05602:  MOVLB  6
....................             }
.................... 
....................       }
05604:  BRA    560C
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
05606:  BTFSS  xC6.6
05608:  BRA    560C
0560A:  BCF    xCA.6
....................    }
0560C:  BRA    56D0
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
0560E:  MOVLW  00
05610:  BTFSC  xC3.6
05612:  MOVLW  01
05614:  MOVLB  7
05616:  MOVWF  x3A
05618:  MOVLW  00
0561A:  MOVLB  6
0561C:  BTFSC  xC5.6
0561E:  MOVLW  01
05620:  MOVLB  7
05622:  XORWF  x3A,W
05624:  SUBLW  01
05626:  BNZ   56CA
....................       {
....................          Output.B7 = 0;
05628:  MOVLB  6
0562A:  BCF    xC4.6
....................          // SMS Sending   
....................          if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0562C:  BTFSC  xD1.6
0562E:  BRA    56C6
05630:  BTFSC  30.1
05632:  BRA    56C6
05634:  BTFSC  xCA.6
05636:  BRA    56C6
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05638:  MOVLW  BA
0563A:  MOVWF  FF6
0563C:  MOVLW  06
0563E:  MOVWF  FF7
05640:  MOVLB  0
05642:  CALL   1F00
....................             putc('\n',CH2);
05646:  MOVLW  0A
05648:  MOVLB  7
0564A:  MOVWF  x3B
0564C:  MOVLB  0
0564E:  CALL   1EBA
....................             delay_ms(10);
05652:  MOVLW  0A
05654:  MOVLB  7
05656:  MOVWF  x3A
05658:  MOVLB  0
0565A:  CALL   0750
....................             
....................             SendSMS.B7 =1;
0565E:  MOVLB  6
05660:  BSF    xD1.6
....................             fprintf(CH2,"AT+CMGS=\"");
05662:  MOVLW  C4
05664:  MOVWF  FF6
05666:  MOVLW  06
05668:  MOVWF  FF7
0566A:  MOVLB  0
0566C:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
05670:  MOVLW  05
05672:  MOVWF  FEA
05674:  MOVLW  6C
05676:  MOVWF  FE9
05678:  CALL   44A4
....................             
....................             fprintf(CH2,"\"");
0567C:  MOVLW  22
0567E:  MOVLB  7
05680:  MOVWF  x3B
05682:  MOVLB  0
05684:  CALL   1EBA
....................             putc('\n',CH2);
05688:  MOVLW  0A
0568A:  MOVLB  7
0568C:  MOVWF  x3B
0568E:  MOVLB  0
05690:  CALL   1EBA
....................             delay_ms(50);
05694:  MOVLW  32
05696:  MOVLB  7
05698:  MOVWF  x3A
0569A:  MOVLB  0
0569C:  CALL   0750
....................            
....................            fprintf(CH2,SMS_Massage7); 
056A0:  MOVLW  06
056A2:  MOVWF  FEA
056A4:  MOVLW  71
056A6:  MOVWF  FE9
056A8:  CALL   44A4
....................            putc('\n',CH2);
056AC:  MOVLW  0A
056AE:  MOVLB  7
056B0:  MOVWF  x3B
056B2:  MOVLB  0
056B4:  CALL   1EBA
....................           putc(26,CH2);
056B8:  MOVLW  1A
056BA:  MOVLB  7
056BC:  MOVWF  x3B
056BE:  MOVLB  0
056C0:  CALL   1EBA
056C4:  MOVLB  6
....................          }
....................       }
056C6:  BRA    56D0
056C8:  MOVLB  7
....................       else
....................       {
....................          Output.B7 = 1;
056CA:  MOVLB  6
056CC:  BSF    xC4.6
....................          SendSMS.B7 =0;
056CE:  BCF    xD1.6
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
056D0:  BTFSS  xC9.7
056D2:  BRA    57EA
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
056D4:  MOVLW  00
056D6:  BTFSC  xC3.7
056D8:  MOVLW  01
056DA:  MOVLB  7
056DC:  MOVWF  x3A
056DE:  MOVLW  00
056E0:  MOVLB  6
056E2:  BTFSC  xC5.7
056E4:  MOVLW  01
056E6:  MOVLB  7
056E8:  XORWF  x3A,W
056EA:  SUBLW  01
056EC:  BNZ   56F4
056EE:  MOVLB  6
056F0:  BTFSC  xC6.7
056F2:  BRA    56FA
056F4:  MOVLB  6
056F6:  BTFSS  xCB.7
056F8:  BRA    57E2
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
056FA:  BTFSC  xCA.7
056FC:  BRA    5746
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
056FE:  BTFSC  xCB.7
05700:  BRA    571A
05702:  MOVLB  0
05704:  MOVF   x6A,W
05706:  SUBLW  0F
05708:  BTFSC  FD8.2
0570A:  BRA    5710
0570C:  MOVLB  6
0570E:  BRA    571A
....................             {
....................                TimeBase1s = 100 ;            //reload again
05710:  MOVLW  64
05712:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05714:  MOVFF  6B,1D
05718:  MOVLB  6
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
0571A:  BSF    xCB.7
....................             if(FlashingFlag == 0)
0571C:  BTFSC  1A.1
0571E:  BRA    5724
....................             {
....................                Output.B8 = 0;           //Flash output1
05720:  BCF    xC4.7
....................             }
05722:  BRA    5726
....................             else
....................             {
....................                Output.B8 = 1;
05724:  BSF    xC4.7
....................             }
.................... 
....................             if (~AutoTestFlag)
05726:  BTFSC  1A.4
05728:  BRA    5746
....................             {
....................                
....................                if(OutputBoth.B8 == 0)                  //Both output
0572A:  BTFSC  xC8.7
0572C:  BRA    5738
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
0572E:  BCF    F89.4
05730:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05732:  BCF    F89.3
05734:  BCF    F92.3
....................                }
05736:  BRA    5746
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,0);     //Buzzer
05738:  BTFSS  xC7.7
0573A:  BRA    5742
0573C:  BCF    F89.4
0573E:  BCF    F92.4
05740:  BRA    5746
....................                   else output_bit(Pbell,0);                          //Bell
05742:  BCF    F89.3
05744:  BCF    F92.3
....................                }
....................                
....................             }
....................        }
....................      
....................        // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05746:  BTFSC  xD1.7
05748:  BRA    57E0
0574A:  BTFSC  30.1
0574C:  BRA    57E0
0574E:  BTFSC  xCA.7
05750:  BRA    57E0
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05752:  MOVLW  CE
05754:  MOVWF  FF6
05756:  MOVLW  06
05758:  MOVWF  FF7
0575A:  MOVLB  0
0575C:  CALL   1F00
....................             putc('\n',CH2);
05760:  MOVLW  0A
05762:  MOVLB  7
05764:  MOVWF  x3B
05766:  MOVLB  0
05768:  CALL   1EBA
....................             delay_ms(10);
0576C:  MOVLW  0A
0576E:  MOVLB  7
05770:  MOVWF  x3A
05772:  MOVLB  0
05774:  CALL   0750
....................             
....................             SendSMS.B8 =1;
05778:  MOVLB  6
0577A:  BSF    xD1.7
....................             fprintf(CH2,"AT+CMGS=\"");
0577C:  MOVLW  D8
0577E:  MOVWF  FF6
05780:  MOVLW  06
05782:  MOVWF  FF7
05784:  MOVLB  0
05786:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
0578A:  MOVLW  05
0578C:  MOVWF  FEA
0578E:  MOVLW  6C
05790:  MOVWF  FE9
05792:  CALL   44A4
....................             
....................             fprintf(CH2,"\"");
05796:  MOVLW  22
05798:  MOVLB  7
0579A:  MOVWF  x3B
0579C:  MOVLB  0
0579E:  CALL   1EBA
....................             putc('\n',CH2);
057A2:  MOVLW  0A
057A4:  MOVLB  7
057A6:  MOVWF  x3B
057A8:  MOVLB  0
057AA:  CALL   1EBA
....................             delay_ms(50);
057AE:  MOVLW  32
057B0:  MOVLB  7
057B2:  MOVWF  x3A
057B4:  MOVLB  0
057B6:  CALL   0750
....................            
....................            printf(SMS_Massage8);  
057BA:  MOVLW  06
057BC:  MOVWF  FEA
057BE:  MOVLW  9A
057C0:  MOVWF  FE9
057C2:  CALL   44A4
....................            putc('\n',CH2);
057C6:  MOVLW  0A
057C8:  MOVLB  7
057CA:  MOVWF  x3B
057CC:  MOVLB  0
057CE:  CALL   1EBA
....................           putc(26,CH2);
057D2:  MOVLW  1A
057D4:  MOVLB  7
057D6:  MOVWF  x3B
057D8:  MOVLB  0
057DA:  CALL   1EBA
057DE:  MOVLB  6
....................          }
.................... 
....................       }
057E0:  BRA    57E8
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
057E2:  BTFSS  xC6.7
057E4:  BRA    57E8
057E6:  BCF    xCA.7
....................    }
057E8:  BRA    58AC
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
057EA:  MOVLW  00
057EC:  BTFSC  xC3.7
057EE:  MOVLW  01
057F0:  MOVLB  7
057F2:  MOVWF  x3A
057F4:  MOVLW  00
057F6:  MOVLB  6
057F8:  BTFSC  xC5.7
057FA:  MOVLW  01
057FC:  MOVLB  7
057FE:  XORWF  x3A,W
05800:  SUBLW  01
05802:  BNZ   58A6
....................       {
....................          Output.B8 = 0;
05804:  MOVLB  6
05806:  BCF    xC4.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05808:  BTFSC  xD1.7
0580A:  BRA    58A2
0580C:  BTFSC  30.1
0580E:  BRA    58A2
05810:  BTFSC  xCA.7
05812:  BRA    58A2
....................          {
....................             printf("AT+CMGF=1"); 
05814:  MOVLW  E2
05816:  MOVWF  FF6
05818:  MOVLW  06
0581A:  MOVWF  FF7
0581C:  MOVLB  0
0581E:  CALL   1F00
....................             putc('\n',CH2);
05822:  MOVLW  0A
05824:  MOVLB  7
05826:  MOVWF  x3B
05828:  MOVLB  0
0582A:  CALL   1EBA
....................             delay_ms(10);
0582E:  MOVLW  0A
05830:  MOVLB  7
05832:  MOVWF  x3A
05834:  MOVLB  0
05836:  CALL   0750
....................             
....................             SendSMS.B8 =1;
0583A:  MOVLB  6
0583C:  BSF    xD1.7
....................             fprintf(CH2,"AT+CMGS=\"");
0583E:  MOVLW  EC
05840:  MOVWF  FF6
05842:  MOVLW  06
05844:  MOVWF  FF7
05846:  MOVLB  0
05848:  CALL   1F00
....................             fprintf(CH2,sms_phonenumber);
0584C:  MOVLW  05
0584E:  MOVWF  FEA
05850:  MOVLW  6C
05852:  MOVWF  FE9
05854:  CALL   44A4
....................             
....................             fprintf(CH2,"\"");
05858:  MOVLW  22
0585A:  MOVLB  7
0585C:  MOVWF  x3B
0585E:  MOVLB  0
05860:  CALL   1EBA
....................             putc('\n',CH2);
05864:  MOVLW  0A
05866:  MOVLB  7
05868:  MOVWF  x3B
0586A:  MOVLB  0
0586C:  CALL   1EBA
....................             delay_ms(50);
05870:  MOVLW  32
05872:  MOVLB  7
05874:  MOVWF  x3A
05876:  MOVLB  0
05878:  CALL   0750
....................            
....................            fprintf(CH2,SMS_Massage8);  
0587C:  MOVLW  06
0587E:  MOVWF  FEA
05880:  MOVLW  9A
05882:  MOVWF  FE9
05884:  CALL   44A4
....................            putc('\n',CH2);
05888:  MOVLW  0A
0588A:  MOVLB  7
0588C:  MOVWF  x3B
0588E:  MOVLB  0
05890:  CALL   1EBA
....................           putc(26,CH2);
05894:  MOVLW  1A
05896:  MOVLB  7
05898:  MOVWF  x3B
0589A:  MOVLB  0
0589C:  CALL   1EBA
058A0:  MOVLB  6
....................          }
....................       }
058A2:  BRA    58AC
058A4:  MOVLB  7
....................       else
....................       {
....................          Output.B8 = 1;
058A6:  MOVLB  6
058A8:  BSF    xC4.7
....................          SendSMS.B8 =0;
058AA:  BCF    xD1.7
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
058AC:  MOVLW  00
058AE:  BTFSC  xC3.0
058B0:  MOVLW  01
058B2:  MOVLB  7
058B4:  MOVWF  x3A
058B6:  MOVLW  00
058B8:  MOVLB  6
058BA:  BTFSC  xC5.0
058BC:  MOVLW  01
058BE:  MOVLB  7
058C0:  XORWF  x3A,W
058C2:  SUBLW  01
058C4:  BNZ   58CE
058C6:  MOVLB  6
058C8:  BTFSS  xC6.0
058CA:  BRA    58D4
058CC:  MOVLB  7
058CE:  BTFSS  1A.5
058D0:  BRA    59A4
058D2:  MOVLB  6
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
058D4:  BTFSC  xCC.0
058D6:  BRA    58F4
058D8:  MOVLB  0
058DA:  MOVF   x6A,W
058DC:  SUBLW  0F
058DE:  BTFSC  FD8.2
058E0:  BRA    58E6
058E2:  MOVLB  6
058E4:  BRA    58F4
058E6:  MOVLB  6
058E8:  BTFSC  xCA.0
058EA:  BRA    58F4
....................       {
....................             TimeBase1s = 100 ;            //reload again
058EC:  MOVLW  64
058EE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
058F0:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B1 = 1;
058F4:  BSF    xCC.0
....................       if(Ack.B1 == 0)
058F6:  BTFSC  xCA.0
058F8:  BRA    5928
....................       {
....................          if(FlashingFlag == 0)
058FA:  BTFSC  1A.1
058FC:  BRA    5902
....................             {
....................                Output.B1 = 0;           //Flash output1
058FE:  BCF    xC4.0
....................             }
05900:  BRA    5904
....................             else
....................             {
....................                Output.B1 = 1;
05902:  BSF    xC4.0
....................             }
....................          if(~AutoTestFlag)
05904:  BTFSC  1A.4
05906:  BRA    5928
....................          {
....................             if(AlarmIndicator.B1 == 1){
05908:  BTFSS  xC9.0
0590A:  BRA    5928
....................                 if(OutputBoth.B1 == 0)        //Both output
0590C:  BTFSC  xC8.0
0590E:  BRA    591A
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05910:  BCF    F89.4
05912:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05914:  BCF    F89.3
05916:  BCF    F92.3
....................                 }
05918:  BRA    5928
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,0);     //Buzzer
0591A:  BTFSS  xC7.0
0591C:  BRA    5924
0591E:  BCF    F89.4
05920:  BCF    F92.4
05922:  BRA    5928
....................                   else output_bit(Pbell,0);                          //Bell
05924:  BCF    F89.3
05926:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05928:  MOVLW  01
0592A:  MOVLB  7
0592C:  MOVWF  x2E
....................       
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
0592E:  MOVLB  6
05930:  BTFSC  xD1.0
05932:  BRA    59A2
05934:  BTFSC  30.1
05936:  BRA    59A2
05938:  BTFSC  xCA.0
0593A:  BRA    59A2
....................       {
....................          SendSMS.B1 =1;
0593C:  BSF    xD1.0
....................          fprintf(CH2,"AT+CMGS=\"");
0593E:  MOVLW  F6
05940:  MOVWF  FF6
05942:  MOVLW  06
05944:  MOVWF  FF7
05946:  MOVLB  0
05948:  CALL   1F00
....................          fprintf(CH2,sms_phonenumber);
0594C:  MOVLW  05
0594E:  MOVWF  FEA
05950:  MOVLW  6C
05952:  MOVWF  FE9
05954:  CALL   44A4
....................          
....................          fprintf(CH2,"\"");
05958:  MOVLW  22
0595A:  MOVLB  7
0595C:  MOVWF  x3B
0595E:  MOVLB  0
05960:  CALL   1EBA
....................          putc('\n',CH2);
05964:  MOVLW  0A
05966:  MOVLB  7
05968:  MOVWF  x3B
0596A:  MOVLB  0
0596C:  CALL   1EBA
....................          delay_ms(50);
05970:  MOVLW  32
05972:  MOVLB  7
05974:  MOVWF  x3A
05976:  MOVLB  0
05978:  CALL   0750
....................         
....................         fprintf(CH2,SMS_Massage1);   
0597C:  MOVLW  05
0597E:  MOVWF  FEA
05980:  MOVLW  7B
05982:  MOVWF  FE9
05984:  CALL   44A4
....................         putc('\n',CH2);
05988:  MOVLW  0A
0598A:  MOVLB  7
0598C:  MOVWF  x3B
0598E:  MOVLB  0
05990:  CALL   1EBA
....................        putc(26,CH2);
05994:  MOVLW  1A
05996:  MOVLB  7
05998:  MOVWF  x3B
0599A:  MOVLB  0
0599C:  CALL   1EBA
059A0:  MOVLB  6
....................       }
....................    }
059A2:  BRA    5A2E
....................    else if(FaultType.B1 == 0)
059A4:  MOVLB  6
059A6:  BTFSC  xC6.0
059A8:  BRA    5A2E
....................    {
....................       In2.B1 = 0;
059AA:  BCF    xCC.0
....................       Ack.B1 = 0;
059AC:  BCF    xCA.0
....................       Output.B1 = 1;      //Off LED
059AE:  BSF    xC4.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
059B0:  BCF    xD1.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
059B2:  BTFSC  xC7.0
059B4:  BRA    59BA
059B6:  BTFSC  xC8.0
059B8:  BRA    59DC
059BA:  MOVLB  7
059BC:  MOVF   x2E,F
059BE:  BTFSC  FD8.2
059C0:  BRA    59C6
059C2:  MOVLB  6
059C4:  BRA    59DC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
059C6:  MOVLW  01
059C8:  MOVWF  x39
059CA:  MOVLB  0
059CC:  CALL   44CA
059D0:  DECFSZ 01,W
059D2:  BRA    59D6
059D4:  BRA    59DA
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
059D6:  BSF    F89.4
059D8:  BCF    F92.4
059DA:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
059DC:  BTFSS  xC7.0
059DE:  BRA    59E4
059E0:  BTFSC  xC8.0
059E2:  BRA    5A06
059E4:  MOVLB  7
059E6:  MOVF   x2E,F
059E8:  BTFSC  FD8.2
059EA:  BRA    59F0
059EC:  MOVLB  6
059EE:  BRA    5A06
....................       {
....................          if(CheckAutoReset(0x02) == 1);
059F0:  MOVLW  02
059F2:  MOVWF  x39
059F4:  MOVLB  0
059F6:  CALL   44CA
059FA:  DECFSZ 01,W
059FC:  BRA    5A00
059FE:  BRA    5A04
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05A00:  BSF    F89.3
05A02:  BCF    F92.3
05A04:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05A06:  BTFSC  xCC.0
05A08:  BRA    5A2E
05A0A:  BTFSC  xCC.1
05A0C:  BRA    5A2E
05A0E:  BTFSC  xCC.2
05A10:  BRA    5A2E
05A12:  BTFSC  xCC.3
05A14:  BRA    5A2E
05A16:  BTFSC  xCC.4
05A18:  BRA    5A2E
05A1A:  BTFSC  xCC.5
05A1C:  BRA    5A2E
05A1E:  BTFSC  xCC.6
05A20:  BRA    5A2E
05A22:  BTFSC  xCC.7
05A24:  BRA    5A2E
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05A26:  BSF    F89.3
05A28:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05A2A:  BSF    F89.4
05A2C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05A2E:  MOVLW  00
05A30:  BTFSC  xC3.1
05A32:  MOVLW  01
05A34:  MOVLB  7
05A36:  MOVWF  x3A
05A38:  MOVLW  00
05A3A:  MOVLB  6
05A3C:  BTFSC  xC5.1
05A3E:  MOVLW  01
05A40:  MOVLB  7
05A42:  XORWF  x3A,W
05A44:  SUBLW  01
05A46:  BNZ   5A50
05A48:  MOVLB  6
05A4A:  BTFSS  xC6.1
05A4C:  BRA    5A56
05A4E:  MOVLB  7
05A50:  BTFSS  1A.5
05A52:  BRA    5B26
05A54:  MOVLB  6
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
05A56:  BTFSC  xCC.1
05A58:  BRA    5A76
05A5A:  MOVLB  0
05A5C:  MOVF   x6A,W
05A5E:  SUBLW  0F
05A60:  BTFSC  FD8.2
05A62:  BRA    5A68
05A64:  MOVLB  6
05A66:  BRA    5A76
05A68:  MOVLB  6
05A6A:  BTFSC  xCA.1
05A6C:  BRA    5A76
....................       {
....................             TimeBase1s = 100 ;            //reload again
05A6E:  MOVLW  64
05A70:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05A72:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B2 = 1;
05A76:  BSF    xCC.1
....................       if(Ack.B2 == 0)
05A78:  BTFSC  xCA.1
05A7A:  BRA    5AAA
....................       {
....................          if(FlashingFlag == 0)
05A7C:  BTFSC  1A.1
05A7E:  BRA    5A84
....................             {
....................                Output.B2 = 0;           //Flash output1
05A80:  BCF    xC4.1
....................             }
05A82:  BRA    5A86
....................             else
....................             {
....................                Output.B2 = 1;
05A84:  BSF    xC4.1
....................             }
....................          if (~AutoTestFlag)
05A86:  BTFSC  1A.4
05A88:  BRA    5AAA
....................          {
....................            if(AlarmIndicator.B2 == 1){
05A8A:  BTFSS  xC9.1
05A8C:  BRA    5AAA
....................              if(OutputBoth.B2 == 0)        //Both output
05A8E:  BTFSC  xC8.1
05A90:  BRA    5A9C
....................              {
....................                output_bit(Pbuzzer,0);   //Buzzer
05A92:  BCF    F89.4
05A94:  BCF    F92.4
....................                output_bit(Pbell,0);     //Bell
05A96:  BCF    F89.3
05A98:  BCF    F92.3
....................              }
05A9A:  BRA    5AAA
....................              else
....................              {
....................                if(OutputType.B2 == 1) output_bit(Pbuzzer,0);     //Buzzer
05A9C:  BTFSS  xC7.1
05A9E:  BRA    5AA6
05AA0:  BCF    F89.4
05AA2:  BCF    F92.4
05AA4:  BRA    5AAA
....................                else output_bit(Pbell,0);                          //Bell
05AA6:  BCF    F89.3
05AA8:  BCF    F92.3
....................              }
....................            }
....................          }
....................        }
....................       inputflag =1;
05AAA:  MOVLW  01
05AAC:  MOVLB  7
05AAE:  MOVWF  x2E
....................       
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
05AB0:  MOVLB  6
05AB2:  BTFSC  xD1.1
05AB4:  BRA    5B24
05AB6:  BTFSC  30.1
05AB8:  BRA    5B24
05ABA:  BTFSC  xCA.1
05ABC:  BRA    5B24
....................       {
....................          SendSMS.B2 =1;
05ABE:  BSF    xD1.1
....................          fprintf(CH2,"AT+CMGS=\"");
05AC0:  MOVLW  00
05AC2:  MOVWF  FF6
05AC4:  MOVLW  07
05AC6:  MOVWF  FF7
05AC8:  MOVLB  0
05ACA:  CALL   1F00
....................          fprintf(CH2,sms_phonenumber);
05ACE:  MOVLW  05
05AD0:  MOVWF  FEA
05AD2:  MOVLW  6C
05AD4:  MOVWF  FE9
05AD6:  CALL   44A4
....................          
....................          fprintf(CH2,"\"");
05ADA:  MOVLW  22
05ADC:  MOVLB  7
05ADE:  MOVWF  x3B
05AE0:  MOVLB  0
05AE2:  CALL   1EBA
....................          putc('\n',CH2);
05AE6:  MOVLW  0A
05AE8:  MOVLB  7
05AEA:  MOVWF  x3B
05AEC:  MOVLB  0
05AEE:  CALL   1EBA
....................          delay_ms(50);
05AF2:  MOVLW  32
05AF4:  MOVLB  7
05AF6:  MOVWF  x3A
05AF8:  MOVLB  0
05AFA:  CALL   0750
....................         
....................         fprintf(CH2,SMS_Massage2); 
05AFE:  MOVLW  05
05B00:  MOVWF  FEA
05B02:  MOVLW  A4
05B04:  MOVWF  FE9
05B06:  CALL   44A4
....................         putc('\n',CH2);
05B0A:  MOVLW  0A
05B0C:  MOVLB  7
05B0E:  MOVWF  x3B
05B10:  MOVLB  0
05B12:  CALL   1EBA
....................        putc(26,CH2);
05B16:  MOVLW  1A
05B18:  MOVLB  7
05B1A:  MOVWF  x3B
05B1C:  MOVLB  0
05B1E:  CALL   1EBA
05B22:  MOVLB  6
....................       }
....................    }
05B24:  BRA    5BB0
....................    else if(FaultType.B2 == 0)
05B26:  MOVLB  6
05B28:  BTFSC  xC6.1
05B2A:  BRA    5BB0
....................    {
....................       In2.B2 = 0x00;
05B2C:  BCF    xCC.1
....................       Ack.B2 = 0;
05B2E:  BCF    xCA.1
....................       Output.B2 = 1;      //Off LED
05B30:  BSF    xC4.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
05B32:  BCF    xD1.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
05B34:  BTFSC  xC7.1
05B36:  BRA    5B3C
05B38:  BTFSC  xC8.1
05B3A:  BRA    5B5E
05B3C:  MOVLB  7
05B3E:  MOVF   x2E,F
05B40:  BTFSC  FD8.2
05B42:  BRA    5B48
05B44:  MOVLB  6
05B46:  BRA    5B5E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05B48:  MOVLW  01
05B4A:  MOVWF  x39
05B4C:  MOVLB  0
05B4E:  CALL   44CA
05B52:  DECFSZ 01,W
05B54:  BRA    5B58
05B56:  BRA    5B5C
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05B58:  BSF    F89.4
05B5A:  BCF    F92.4
05B5C:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
05B5E:  BTFSS  xC7.1
05B60:  BRA    5B66
05B62:  BTFSC  xC8.1
05B64:  BRA    5B88
05B66:  MOVLB  7
05B68:  MOVF   x2E,F
05B6A:  BTFSC  FD8.2
05B6C:  BRA    5B72
05B6E:  MOVLB  6
05B70:  BRA    5B88
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05B72:  MOVLW  02
05B74:  MOVWF  x39
05B76:  MOVLB  0
05B78:  CALL   44CA
05B7C:  DECFSZ 01,W
05B7E:  BRA    5B82
05B80:  BRA    5B86
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05B82:  BSF    F89.3
05B84:  BCF    F92.3
05B86:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05B88:  BTFSC  xCC.0
05B8A:  BRA    5BB0
05B8C:  BTFSC  xCC.1
05B8E:  BRA    5BB0
05B90:  BTFSC  xCC.2
05B92:  BRA    5BB0
05B94:  BTFSC  xCC.3
05B96:  BRA    5BB0
05B98:  BTFSC  xCC.4
05B9A:  BRA    5BB0
05B9C:  BTFSC  xCC.5
05B9E:  BRA    5BB0
05BA0:  BTFSC  xCC.6
05BA2:  BRA    5BB0
05BA4:  BTFSC  xCC.7
05BA6:  BRA    5BB0
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05BA8:  BSF    F89.3
05BAA:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05BAC:  BSF    F89.4
05BAE:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
05BB0:  MOVLW  00
05BB2:  BTFSC  xC3.2
05BB4:  MOVLW  01
05BB6:  MOVLB  7
05BB8:  MOVWF  x3A
05BBA:  MOVLW  00
05BBC:  MOVLB  6
05BBE:  BTFSC  xC5.2
05BC0:  MOVLW  01
05BC2:  MOVLB  7
05BC4:  XORWF  x3A,W
05BC6:  SUBLW  01
05BC8:  BNZ   5BD2
05BCA:  MOVLB  6
05BCC:  BTFSS  xC6.2
05BCE:  BRA    5BD8
05BD0:  MOVLB  7
05BD2:  BTFSS  1A.5
05BD4:  BRA    5CA8
05BD6:  MOVLB  6
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
05BD8:  BTFSC  xCC.2
05BDA:  BRA    5BF8
05BDC:  MOVLB  0
05BDE:  MOVF   x6A,W
05BE0:  SUBLW  0F
05BE2:  BTFSC  FD8.2
05BE4:  BRA    5BEA
05BE6:  MOVLB  6
05BE8:  BRA    5BF8
05BEA:  MOVLB  6
05BEC:  BTFSC  xCA.2
05BEE:  BRA    5BF8
....................       {
....................             TimeBase1s = 100 ;            //reload again
05BF0:  MOVLW  64
05BF2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05BF4:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B3 = 1;
05BF8:  BSF    xCC.2
....................       if(Ack.B3 == 0)
05BFA:  BTFSC  xCA.2
05BFC:  BRA    5C2C
....................       {
....................          if(FlashingFlag == 0)
05BFE:  BTFSC  1A.1
05C00:  BRA    5C06
....................             {
....................                Output.B3 = 0;           //Flash output1
05C02:  BCF    xC4.2
....................             }
05C04:  BRA    5C08
....................             else
....................             {
....................                Output.B3 = 1;
05C06:  BSF    xC4.2
....................             }
....................          if (~AutoTestFlag)
05C08:  BTFSC  1A.4
05C0A:  BRA    5C2C
....................          {
....................             if(AlarmIndicator.B3 == 1){
05C0C:  BTFSS  xC9.2
05C0E:  BRA    5C2C
....................                 if(OutputBoth.B3 == 0)        //Both output
05C10:  BTFSC  xC8.2
05C12:  BRA    5C1E
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05C14:  BCF    F89.4
05C16:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05C18:  BCF    F89.3
05C1A:  BCF    F92.3
....................                 }
05C1C:  BRA    5C2C
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,0);     //Buzzer
05C1E:  BTFSS  xC7.2
05C20:  BRA    5C28
05C22:  BCF    F89.4
05C24:  BCF    F92.4
05C26:  BRA    5C2C
....................                   else output_bit(Pbell,0);                          //Bell
05C28:  BCF    F89.3
05C2A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05C2C:  MOVLW  01
05C2E:  MOVLB  7
05C30:  MOVWF  x2E
....................       
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
05C32:  MOVLB  6
05C34:  BTFSC  xD1.2
05C36:  BRA    5CA6
05C38:  BTFSC  30.1
05C3A:  BRA    5CA6
05C3C:  BTFSC  xCA.2
05C3E:  BRA    5CA6
....................       {
....................          SendSMS.B3 =1;
05C40:  BSF    xD1.2
....................          fprintf(CH2,"AT+CMGS=\"");
05C42:  MOVLW  0A
05C44:  MOVWF  FF6
05C46:  MOVLW  07
05C48:  MOVWF  FF7
05C4A:  MOVLB  0
05C4C:  CALL   1F00
....................          fprintf(CH2,sms_phonenumber);
05C50:  MOVLW  05
05C52:  MOVWF  FEA
05C54:  MOVLW  6C
05C56:  MOVWF  FE9
05C58:  CALL   44A4
....................          
....................          fprintf(CH2,"\"");
05C5C:  MOVLW  22
05C5E:  MOVLB  7
05C60:  MOVWF  x3B
05C62:  MOVLB  0
05C64:  CALL   1EBA
....................          putc('\n',CH2);
05C68:  MOVLW  0A
05C6A:  MOVLB  7
05C6C:  MOVWF  x3B
05C6E:  MOVLB  0
05C70:  CALL   1EBA
....................          delay_ms(50);
05C74:  MOVLW  32
05C76:  MOVLB  7
05C78:  MOVWF  x3A
05C7A:  MOVLB  0
05C7C:  CALL   0750
....................         
....................         fprintf(CH2,SMS_Massage3); 
05C80:  MOVLW  05
05C82:  MOVWF  FEA
05C84:  MOVLW  CD
05C86:  MOVWF  FE9
05C88:  CALL   44A4
....................         putc('\n',CH2);
05C8C:  MOVLW  0A
05C8E:  MOVLB  7
05C90:  MOVWF  x3B
05C92:  MOVLB  0
05C94:  CALL   1EBA
....................        putc(26,CH2);
05C98:  MOVLW  1A
05C9A:  MOVLB  7
05C9C:  MOVWF  x3B
05C9E:  MOVLB  0
05CA0:  CALL   1EBA
05CA4:  MOVLB  6
....................       }
....................    }
05CA6:  BRA    5D32
....................    else if(FaultType.B3 == 0)
05CA8:  MOVLB  6
05CAA:  BTFSC  xC6.2
05CAC:  BRA    5D32
....................    {
....................       In2.B3 = 0x00;
05CAE:  BCF    xCC.2
....................       Ack.B3 = 0;
05CB0:  BCF    xCA.2
....................       Output.B3 = 1;      //Off LED
05CB2:  BSF    xC4.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
05CB4:  BCF    xD1.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
05CB6:  BTFSC  xC7.2
05CB8:  BRA    5CBE
05CBA:  BTFSC  xC8.2
05CBC:  BRA    5CE0
05CBE:  MOVLB  7
05CC0:  MOVF   x2E,F
05CC2:  BTFSC  FD8.2
05CC4:  BRA    5CCA
05CC6:  MOVLB  6
05CC8:  BRA    5CE0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05CCA:  MOVLW  01
05CCC:  MOVWF  x39
05CCE:  MOVLB  0
05CD0:  CALL   44CA
05CD4:  DECFSZ 01,W
05CD6:  BRA    5CDA
05CD8:  BRA    5CDE
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05CDA:  BSF    F89.4
05CDC:  BCF    F92.4
05CDE:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
05CE0:  BTFSS  xC7.2
05CE2:  BRA    5CE8
05CE4:  BTFSC  xC8.2
05CE6:  BRA    5D0A
05CE8:  MOVLB  7
05CEA:  MOVF   x2E,F
05CEC:  BTFSC  FD8.2
05CEE:  BRA    5CF4
05CF0:  MOVLB  6
05CF2:  BRA    5D0A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05CF4:  MOVLW  02
05CF6:  MOVWF  x39
05CF8:  MOVLB  0
05CFA:  CALL   44CA
05CFE:  DECFSZ 01,W
05D00:  BRA    5D04
05D02:  BRA    5D08
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05D04:  BSF    F89.3
05D06:  BCF    F92.3
05D08:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05D0A:  BTFSC  xCC.0
05D0C:  BRA    5D32
05D0E:  BTFSC  xCC.1
05D10:  BRA    5D32
05D12:  BTFSC  xCC.2
05D14:  BRA    5D32
05D16:  BTFSC  xCC.3
05D18:  BRA    5D32
05D1A:  BTFSC  xCC.4
05D1C:  BRA    5D32
05D1E:  BTFSC  xCC.5
05D20:  BRA    5D32
05D22:  BTFSC  xCC.6
05D24:  BRA    5D32
05D26:  BTFSC  xCC.7
05D28:  BRA    5D32
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05D2A:  BSF    F89.3
05D2C:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05D2E:  BSF    F89.4
05D30:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05D32:  MOVLW  00
05D34:  BTFSC  xC3.3
05D36:  MOVLW  01
05D38:  MOVLB  7
05D3A:  MOVWF  x3A
05D3C:  MOVLW  00
05D3E:  MOVLB  6
05D40:  BTFSC  xC5.3
05D42:  MOVLW  01
05D44:  MOVLB  7
05D46:  XORWF  x3A,W
05D48:  SUBLW  01
05D4A:  BNZ   5D54
05D4C:  MOVLB  6
05D4E:  BTFSS  xC6.3
05D50:  BRA    5D5A
05D52:  MOVLB  7
05D54:  BTFSS  1A.5
05D56:  BRA    5E2A
05D58:  MOVLB  6
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
05D5A:  BTFSC  xCC.3
05D5C:  BRA    5D7A
05D5E:  MOVLB  0
05D60:  MOVF   x6A,W
05D62:  SUBLW  0F
05D64:  BTFSC  FD8.2
05D66:  BRA    5D6C
05D68:  MOVLB  6
05D6A:  BRA    5D7A
05D6C:  MOVLB  6
05D6E:  BTFSC  xCA.3
05D70:  BRA    5D7A
....................       {
....................             TimeBase1s = 100 ;            //reload again
05D72:  MOVLW  64
05D74:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05D76:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B4 = 1;
05D7A:  BSF    xCC.3
....................       if(Ack.B4 == 0)
05D7C:  BTFSC  xCA.3
05D7E:  BRA    5DAE
....................       {
....................          if(FlashingFlag == 0)
05D80:  BTFSC  1A.1
05D82:  BRA    5D88
....................             {
....................                Output.B4 = 0;           //Flash output1
05D84:  BCF    xC4.3
....................             }
05D86:  BRA    5D8A
....................             else
....................             {
....................                Output.B4 = 1;
05D88:  BSF    xC4.3
....................             }
....................          if (~AutoTestFlag)
05D8A:  BTFSC  1A.4
05D8C:  BRA    5DAE
....................          {
....................             if(AlarmIndicator.B4 == 1){
05D8E:  BTFSS  xC9.3
05D90:  BRA    5DAE
....................                 if(OutputBoth.B4 == 0)        //Both output
05D92:  BTFSC  xC8.3
05D94:  BRA    5DA0
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05D96:  BCF    F89.4
05D98:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05D9A:  BCF    F89.3
05D9C:  BCF    F92.3
....................                 }
05D9E:  BRA    5DAE
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,0);     //Buzzer
05DA0:  BTFSS  xC7.3
05DA2:  BRA    5DAA
05DA4:  BCF    F89.4
05DA6:  BCF    F92.4
05DA8:  BRA    5DAE
....................                   else output_bit(Pbell,0);                          //Bell
05DAA:  BCF    F89.3
05DAC:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05DAE:  MOVLW  01
05DB0:  MOVLB  7
05DB2:  MOVWF  x2E
....................       
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
05DB4:  MOVLB  6
05DB6:  BTFSC  xD1.3
05DB8:  BRA    5E28
05DBA:  BTFSC  30.1
05DBC:  BRA    5E28
05DBE:  BTFSC  xCA.3
05DC0:  BRA    5E28
....................       {
....................          SendSMS.B4 =1;
05DC2:  BSF    xD1.3
....................          fprintf(CH2,"AT+CMGS=\"");
05DC4:  MOVLW  14
05DC6:  MOVWF  FF6
05DC8:  MOVLW  07
05DCA:  MOVWF  FF7
05DCC:  MOVLB  0
05DCE:  CALL   1F00
....................          fprintf(CH2,sms_phonenumber);
05DD2:  MOVLW  05
05DD4:  MOVWF  FEA
05DD6:  MOVLW  6C
05DD8:  MOVWF  FE9
05DDA:  CALL   44A4
....................          
....................          fprintf(CH2,"\"");
05DDE:  MOVLW  22
05DE0:  MOVLB  7
05DE2:  MOVWF  x3B
05DE4:  MOVLB  0
05DE6:  CALL   1EBA
....................          putc('\n',CH2);
05DEA:  MOVLW  0A
05DEC:  MOVLB  7
05DEE:  MOVWF  x3B
05DF0:  MOVLB  0
05DF2:  CALL   1EBA
....................          delay_ms(50);
05DF6:  MOVLW  32
05DF8:  MOVLB  7
05DFA:  MOVWF  x3A
05DFC:  MOVLB  0
05DFE:  CALL   0750
....................         
....................         fprintf(CH2,SMS_Massage4); 
05E02:  MOVLW  05
05E04:  MOVWF  FEA
05E06:  MOVLW  F6
05E08:  MOVWF  FE9
05E0A:  CALL   44A4
....................         putc('\n',CH2);
05E0E:  MOVLW  0A
05E10:  MOVLB  7
05E12:  MOVWF  x3B
05E14:  MOVLB  0
05E16:  CALL   1EBA
....................        putc(26,CH2);
05E1A:  MOVLW  1A
05E1C:  MOVLB  7
05E1E:  MOVWF  x3B
05E20:  MOVLB  0
05E22:  CALL   1EBA
05E26:  MOVLB  6
....................       }
....................    }
05E28:  BRA    5EB4
....................    else if(FaultType.B4 == 0)
05E2A:  MOVLB  6
05E2C:  BTFSC  xC6.3
05E2E:  BRA    5EB4
....................    {
....................       In2.B4 = 0x00;
05E30:  BCF    xCC.3
....................       Ack.B4 = 0;
05E32:  BCF    xCA.3
....................       Output.B4 = 1;      //Off LED
05E34:  BSF    xC4.3
....................       
....................       SendSMS.B4 =0;// Clear SMS
05E36:  BCF    xD1.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
05E38:  BTFSC  xC7.3
05E3A:  BRA    5E40
05E3C:  BTFSC  xC8.3
05E3E:  BRA    5E62
05E40:  MOVLB  7
05E42:  MOVF   x2E,F
05E44:  BTFSC  FD8.2
05E46:  BRA    5E4C
05E48:  MOVLB  6
05E4A:  BRA    5E62
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05E4C:  MOVLW  01
05E4E:  MOVWF  x39
05E50:  MOVLB  0
05E52:  CALL   44CA
05E56:  DECFSZ 01,W
05E58:  BRA    5E5C
05E5A:  BRA    5E60
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05E5C:  BSF    F89.4
05E5E:  BCF    F92.4
05E60:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
05E62:  BTFSS  xC7.3
05E64:  BRA    5E6A
05E66:  BTFSC  xC8.3
05E68:  BRA    5E8C
05E6A:  MOVLB  7
05E6C:  MOVF   x2E,F
05E6E:  BTFSC  FD8.2
05E70:  BRA    5E76
05E72:  MOVLB  6
05E74:  BRA    5E8C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05E76:  MOVLW  02
05E78:  MOVWF  x39
05E7A:  MOVLB  0
05E7C:  CALL   44CA
05E80:  DECFSZ 01,W
05E82:  BRA    5E86
05E84:  BRA    5E8A
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05E86:  BSF    F89.3
05E88:  BCF    F92.3
05E8A:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
05E8C:  BTFSC  xCC.0
05E8E:  BRA    5EB4
05E90:  BTFSC  xCC.1
05E92:  BRA    5EB4
05E94:  BTFSC  xCC.2
05E96:  BRA    5EB4
05E98:  BTFSC  xCC.3
05E9A:  BRA    5EB4
05E9C:  BTFSC  xCC.4
05E9E:  BRA    5EB4
05EA0:  BTFSC  xCC.5
05EA2:  BRA    5EB4
05EA4:  BTFSC  xCC.6
05EA6:  BRA    5EB4
05EA8:  BTFSC  xCC.7
05EAA:  BRA    5EB4
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05EAC:  BSF    F89.3
05EAE:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05EB0:  BSF    F89.4
05EB2:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05EB4:  MOVLW  00
05EB6:  BTFSC  xC3.4
05EB8:  MOVLW  01
05EBA:  MOVLB  7
05EBC:  MOVWF  x3A
05EBE:  MOVLW  00
05EC0:  MOVLB  6
05EC2:  BTFSC  xC5.4
05EC4:  MOVLW  01
05EC6:  MOVLB  7
05EC8:  XORWF  x3A,W
05ECA:  SUBLW  01
05ECC:  BNZ   5ED6
05ECE:  MOVLB  6
05ED0:  BTFSS  xC6.4
05ED2:  BRA    5EDC
05ED4:  MOVLB  7
05ED6:  BTFSS  1A.5
05ED8:  BRA    5FAC
05EDA:  MOVLB  6
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
05EDC:  BTFSC  xCC.4
05EDE:  BRA    5EFC
05EE0:  MOVLB  0
05EE2:  MOVF   x6A,W
05EE4:  SUBLW  0F
05EE6:  BTFSC  FD8.2
05EE8:  BRA    5EEE
05EEA:  MOVLB  6
05EEC:  BRA    5EFC
05EEE:  MOVLB  6
05EF0:  BTFSC  xCA.4
05EF2:  BRA    5EFC
....................       {
....................             TimeBase1s = 100 ;            //reload again
05EF4:  MOVLW  64
05EF6:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05EF8:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B5 = 1;
05EFC:  BSF    xCC.4
....................       if(Ack.B5 == 0)
05EFE:  BTFSC  xCA.4
05F00:  BRA    5F30
....................       {
....................          if(FlashingFlag == 0)
05F02:  BTFSC  1A.1
05F04:  BRA    5F0A
....................             {
....................                Output.B5 = 0;           //Flash output1
05F06:  BCF    xC4.4
....................             }
05F08:  BRA    5F0C
....................             else
....................             {
....................                Output.B5 = 1;
05F0A:  BSF    xC4.4
....................             }
....................          if (~AutoTestFlag)
05F0C:  BTFSC  1A.4
05F0E:  BRA    5F30
....................          {
....................             if(AlarmIndicator.B5 == 1){
05F10:  BTFSS  xC9.4
05F12:  BRA    5F30
....................                 if(OutputBoth.B5 == 0)        //Both output
05F14:  BTFSC  xC8.4
05F16:  BRA    5F22
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05F18:  BCF    F89.4
05F1A:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05F1C:  BCF    F89.3
05F1E:  BCF    F92.3
....................                 }
05F20:  BRA    5F30
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,0);     //Buzzer
05F22:  BTFSS  xC7.4
05F24:  BRA    5F2C
05F26:  BCF    F89.4
05F28:  BCF    F92.4
05F2A:  BRA    5F30
....................                   else output_bit(Pbell,0);                          //Bell
05F2C:  BCF    F89.3
05F2E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05F30:  MOVLW  01
05F32:  MOVLB  7
05F34:  MOVWF  x2E
....................       
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05F36:  MOVLB  6
05F38:  BTFSC  xD1.4
05F3A:  BRA    5FAA
05F3C:  BTFSC  30.1
05F3E:  BRA    5FAA
05F40:  BTFSC  xCA.4
05F42:  BRA    5FAA
....................       {
....................          SendSMS.B5 =1;
05F44:  BSF    xD1.4
....................          fprintf(CH2,"AT+CMGS=\"");
05F46:  MOVLW  1E
05F48:  MOVWF  FF6
05F4A:  MOVLW  07
05F4C:  MOVWF  FF7
05F4E:  MOVLB  0
05F50:  CALL   1F00
....................          fprintf(CH2,sms_phonenumber);
05F54:  MOVLW  05
05F56:  MOVWF  FEA
05F58:  MOVLW  6C
05F5A:  MOVWF  FE9
05F5C:  CALL   44A4
....................          
....................          fprintf(CH2,"\"");
05F60:  MOVLW  22
05F62:  MOVLB  7
05F64:  MOVWF  x3B
05F66:  MOVLB  0
05F68:  CALL   1EBA
....................          putc('\n',CH2);
05F6C:  MOVLW  0A
05F6E:  MOVLB  7
05F70:  MOVWF  x3B
05F72:  MOVLB  0
05F74:  CALL   1EBA
....................          delay_ms(50);
05F78:  MOVLW  32
05F7A:  MOVLB  7
05F7C:  MOVWF  x3A
05F7E:  MOVLB  0
05F80:  CALL   0750
....................         
....................         fprintf(CH2,SMS_Massage5); 
05F84:  MOVLW  06
05F86:  MOVWF  FEA
05F88:  MOVLW  1F
05F8A:  MOVWF  FE9
05F8C:  CALL   44A4
....................         putc('\n',CH2);
05F90:  MOVLW  0A
05F92:  MOVLB  7
05F94:  MOVWF  x3B
05F96:  MOVLB  0
05F98:  CALL   1EBA
....................        putc(26,CH2);
05F9C:  MOVLW  1A
05F9E:  MOVLB  7
05FA0:  MOVWF  x3B
05FA2:  MOVLB  0
05FA4:  CALL   1EBA
05FA8:  MOVLB  6
....................       }
....................    }
05FAA:  BRA    6036
....................    else if(FaultType.B5 == 0)
05FAC:  MOVLB  6
05FAE:  BTFSC  xC6.4
05FB0:  BRA    6036
....................    {
....................       In2.B5 = 0x00;
05FB2:  BCF    xCC.4
....................       Ack.B5 = 0;
05FB4:  BCF    xCA.4
....................       Output.B5 = 1;      //Off LED
05FB6:  BSF    xC4.4
....................       
....................       SendSMS.B5 =0;// Clear SMS
05FB8:  BCF    xD1.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
05FBA:  BTFSC  xC7.4
05FBC:  BRA    5FC2
05FBE:  BTFSC  xC8.4
05FC0:  BRA    5FE4
05FC2:  MOVLB  7
05FC4:  MOVF   x2E,F
05FC6:  BTFSC  FD8.2
05FC8:  BRA    5FCE
05FCA:  MOVLB  6
05FCC:  BRA    5FE4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05FCE:  MOVLW  01
05FD0:  MOVWF  x39
05FD2:  MOVLB  0
05FD4:  CALL   44CA
05FD8:  DECFSZ 01,W
05FDA:  BRA    5FDE
05FDC:  BRA    5FE2
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05FDE:  BSF    F89.4
05FE0:  BCF    F92.4
05FE2:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
05FE4:  BTFSS  xC7.4
05FE6:  BRA    5FEC
05FE8:  BTFSC  xC8.4
05FEA:  BRA    600E
05FEC:  MOVLB  7
05FEE:  MOVF   x2E,F
05FF0:  BTFSC  FD8.2
05FF2:  BRA    5FF8
05FF4:  MOVLB  6
05FF6:  BRA    600E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05FF8:  MOVLW  02
05FFA:  MOVWF  x39
05FFC:  MOVLB  0
05FFE:  CALL   44CA
06002:  DECFSZ 01,W
06004:  BRA    6008
06006:  BRA    600C
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
06008:  BSF    F89.3
0600A:  BCF    F92.3
0600C:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
0600E:  BTFSC  xCC.0
06010:  BRA    6036
06012:  BTFSC  xCC.1
06014:  BRA    6036
06016:  BTFSC  xCC.2
06018:  BRA    6036
0601A:  BTFSC  xCC.3
0601C:  BRA    6036
0601E:  BTFSC  xCC.4
06020:  BRA    6036
06022:  BTFSC  xCC.5
06024:  BRA    6036
06026:  BTFSC  xCC.6
06028:  BRA    6036
0602A:  BTFSC  xCC.7
0602C:  BRA    6036
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
0602E:  BSF    F89.3
06030:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
06032:  BSF    F89.4
06034:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06036:  MOVLW  00
06038:  BTFSC  xC3.5
0603A:  MOVLW  01
0603C:  MOVLB  7
0603E:  MOVWF  x3A
06040:  MOVLW  00
06042:  MOVLB  6
06044:  BTFSC  xC5.5
06046:  MOVLW  01
06048:  MOVLB  7
0604A:  XORWF  x3A,W
0604C:  SUBLW  01
0604E:  BNZ   6058
06050:  MOVLB  6
06052:  BTFSS  xC6.5
06054:  BRA    605E
06056:  MOVLB  7
06058:  BTFSS  1A.5
0605A:  BRA    612E
0605C:  MOVLB  6
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
0605E:  BTFSC  xCC.5
06060:  BRA    607E
06062:  MOVLB  0
06064:  MOVF   x6A,W
06066:  SUBLW  0F
06068:  BTFSC  FD8.2
0606A:  BRA    6070
0606C:  MOVLB  6
0606E:  BRA    607E
06070:  MOVLB  6
06072:  BTFSC  xCA.5
06074:  BRA    607E
....................       {
....................             TimeBase1s = 100 ;            //reload again
06076:  MOVLW  64
06078:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0607A:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B6 = 1;
0607E:  BSF    xCC.5
....................       if(Ack.B6 == 0)
06080:  BTFSC  xCA.5
06082:  BRA    60B2
....................       {
....................          if(FlashingFlag == 0)
06084:  BTFSC  1A.1
06086:  BRA    608C
....................             {
....................                Output.B6 = 0;           //Flash output1
06088:  BCF    xC4.5
....................             }
0608A:  BRA    608E
....................             else
....................             {
....................                Output.B6 = 1;
0608C:  BSF    xC4.5
....................             }
....................          if (~AutoTestFlag)
0608E:  BTFSC  1A.4
06090:  BRA    60B2
....................          {
....................             if(AlarmIndicator.B6 == 1){
06092:  BTFSS  xC9.5
06094:  BRA    60B2
....................                 if(OutputBoth.B6 == 0)        //Both output
06096:  BTFSC  xC8.5
06098:  BRA    60A4
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
0609A:  BCF    F89.4
0609C:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
0609E:  BCF    F89.3
060A0:  BCF    F92.3
....................                 }
060A2:  BRA    60B2
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,0);     //Buzzer
060A4:  BTFSS  xC7.5
060A6:  BRA    60AE
060A8:  BCF    F89.4
060AA:  BCF    F92.4
060AC:  BRA    60B2
....................                   else output_bit(Pbell,0);                          //Bell
060AE:  BCF    F89.3
060B0:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
060B2:  MOVLW  01
060B4:  MOVLB  7
060B6:  MOVWF  x2E
....................       
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
060B8:  MOVLB  6
060BA:  BTFSC  xD1.5
060BC:  BRA    612C
060BE:  BTFSC  30.1
060C0:  BRA    612C
060C2:  BTFSC  xCA.5
060C4:  BRA    612C
....................       {
....................          SendSMS.B6 =1;
060C6:  BSF    xD1.5
....................          fprintf(CH2,"AT+CMGS=\"");
060C8:  MOVLW  28
060CA:  MOVWF  FF6
060CC:  MOVLW  07
060CE:  MOVWF  FF7
060D0:  MOVLB  0
060D2:  CALL   1F00
....................          fprintf(CH2,sms_phonenumber);
060D6:  MOVLW  05
060D8:  MOVWF  FEA
060DA:  MOVLW  6C
060DC:  MOVWF  FE9
060DE:  CALL   44A4
....................          
....................          fprintf(CH2,"\"");
060E2:  MOVLW  22
060E4:  MOVLB  7
060E6:  MOVWF  x3B
060E8:  MOVLB  0
060EA:  CALL   1EBA
....................          putc('\n',CH2);
060EE:  MOVLW  0A
060F0:  MOVLB  7
060F2:  MOVWF  x3B
060F4:  MOVLB  0
060F6:  CALL   1EBA
....................          delay_ms(50);
060FA:  MOVLW  32
060FC:  MOVLB  7
060FE:  MOVWF  x3A
06100:  MOVLB  0
06102:  CALL   0750
....................         
....................         fprintf(CH2,SMS_Massage6);  
06106:  MOVLW  06
06108:  MOVWF  FEA
0610A:  MOVLW  48
0610C:  MOVWF  FE9
0610E:  CALL   44A4
....................         putc('\n',CH2);
06112:  MOVLW  0A
06114:  MOVLB  7
06116:  MOVWF  x3B
06118:  MOVLB  0
0611A:  CALL   1EBA
....................        putc(26,CH2);
0611E:  MOVLW  1A
06120:  MOVLB  7
06122:  MOVWF  x3B
06124:  MOVLB  0
06126:  CALL   1EBA
0612A:  MOVLB  6
....................       }
....................    }
0612C:  BRA    61B8
....................    else if(FaultType.B6 == 0)
0612E:  MOVLB  6
06130:  BTFSC  xC6.5
06132:  BRA    61B8
....................    {
....................       In2.B6 = 0x00;
06134:  BCF    xCC.5
....................       Ack.B6 = 0;
06136:  BCF    xCA.5
....................       Output.B6 = 1;      //Off LED
06138:  BSF    xC4.5
....................       
....................       SendSMS.B6 =0;// Clear SMS
0613A:  BCF    xD1.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
0613C:  BTFSC  xC7.5
0613E:  BRA    6144
06140:  BTFSC  xC8.5
06142:  BRA    6166
06144:  MOVLB  7
06146:  MOVF   x2E,F
06148:  BTFSC  FD8.2
0614A:  BRA    6150
0614C:  MOVLB  6
0614E:  BRA    6166
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
06150:  MOVLW  01
06152:  MOVWF  x39
06154:  MOVLB  0
06156:  CALL   44CA
0615A:  DECFSZ 01,W
0615C:  BRA    6160
0615E:  BRA    6164
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06160:  BSF    F89.4
06162:  BCF    F92.4
06164:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
06166:  BTFSS  xC7.5
06168:  BRA    616E
0616A:  BTFSC  xC8.5
0616C:  BRA    6190
0616E:  MOVLB  7
06170:  MOVF   x2E,F
06172:  BTFSC  FD8.2
06174:  BRA    617A
06176:  MOVLB  6
06178:  BRA    6190
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0617A:  MOVLW  02
0617C:  MOVWF  x39
0617E:  MOVLB  0
06180:  CALL   44CA
06184:  DECFSZ 01,W
06186:  BRA    618A
06188:  BRA    618E
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
0618A:  BSF    F89.3
0618C:  BCF    F92.3
0618E:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06190:  BTFSC  xCC.0
06192:  BRA    61B8
06194:  BTFSC  xCC.1
06196:  BRA    61B8
06198:  BTFSC  xCC.2
0619A:  BRA    61B8
0619C:  BTFSC  xCC.3
0619E:  BRA    61B8
061A0:  BTFSC  xCC.4
061A2:  BRA    61B8
061A4:  BTFSC  xCC.5
061A6:  BRA    61B8
061A8:  BTFSC  xCC.6
061AA:  BRA    61B8
061AC:  BTFSC  xCC.7
061AE:  BRA    61B8
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
061B0:  BSF    F89.3
061B2:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
061B4:  BSF    F89.4
061B6:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
061B8:  MOVLW  00
061BA:  BTFSC  xC3.6
061BC:  MOVLW  01
061BE:  MOVLB  7
061C0:  MOVWF  x3A
061C2:  MOVLW  00
061C4:  MOVLB  6
061C6:  BTFSC  xC5.6
061C8:  MOVLW  01
061CA:  MOVLB  7
061CC:  XORWF  x3A,W
061CE:  SUBLW  01
061D0:  BNZ   61DA
061D2:  MOVLB  6
061D4:  BTFSS  xC6.6
061D6:  BRA    61E0
061D8:  MOVLB  7
061DA:  BTFSS  1A.5
061DC:  BRA    62B0
061DE:  MOVLB  6
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
061E0:  BTFSC  xCC.6
061E2:  BRA    6200
061E4:  MOVLB  0
061E6:  MOVF   x6A,W
061E8:  SUBLW  0F
061EA:  BTFSC  FD8.2
061EC:  BRA    61F2
061EE:  MOVLB  6
061F0:  BRA    6200
061F2:  MOVLB  6
061F4:  BTFSC  xCA.6
061F6:  BRA    6200
....................       {
....................             TimeBase1s = 100 ;            //reload again
061F8:  MOVLW  64
061FA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
061FC:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B7 = 1;
06200:  BSF    xCC.6
....................       if(Ack.B7 == 0)
06202:  BTFSC  xCA.6
06204:  BRA    6234
....................       {
....................          if(FlashingFlag == 0)
06206:  BTFSC  1A.1
06208:  BRA    620E
....................             {
....................                Output.B7 = 0;           //Flash output1
0620A:  BCF    xC4.6
....................             }
0620C:  BRA    6210
....................             else
....................             {
....................                Output.B7 = 1;
0620E:  BSF    xC4.6
....................             }
....................          if (~AutoTestFlag)
06210:  BTFSC  1A.4
06212:  BRA    6234
....................          {
....................             if(AlarmIndicator.B7 == 1){
06214:  BTFSS  xC9.6
06216:  BRA    6234
....................                 if(OutputBoth.B7 == 0)        //Both output
06218:  BTFSC  xC8.6
0621A:  BRA    6226
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
0621C:  BCF    F89.4
0621E:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
06220:  BCF    F89.3
06222:  BCF    F92.3
....................                 }
06224:  BRA    6234
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,0);     //Buzzer
06226:  BTFSS  xC7.6
06228:  BRA    6230
0622A:  BCF    F89.4
0622C:  BCF    F92.4
0622E:  BRA    6234
....................                   else output_bit(Pbell,0);                          //Bell
06230:  BCF    F89.3
06232:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
06234:  MOVLW  01
06236:  MOVLB  7
06238:  MOVWF  x2E
....................       
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0623A:  MOVLB  6
0623C:  BTFSC  xD1.6
0623E:  BRA    62AE
06240:  BTFSC  30.1
06242:  BRA    62AE
06244:  BTFSC  xCA.6
06246:  BRA    62AE
....................       {
....................          SendSMS.B7 =1;
06248:  BSF    xD1.6
....................          fprintf(CH2,"AT+CMGS=\"");
0624A:  MOVLW  32
0624C:  MOVWF  FF6
0624E:  MOVLW  07
06250:  MOVWF  FF7
06252:  MOVLB  0
06254:  CALL   1F00
....................          fprintf(CH2,sms_phonenumber);
06258:  MOVLW  05
0625A:  MOVWF  FEA
0625C:  MOVLW  6C
0625E:  MOVWF  FE9
06260:  CALL   44A4
....................          
....................          fprintf(CH2,"\"");
06264:  MOVLW  22
06266:  MOVLB  7
06268:  MOVWF  x3B
0626A:  MOVLB  0
0626C:  CALL   1EBA
....................          putc('\n',CH2);
06270:  MOVLW  0A
06272:  MOVLB  7
06274:  MOVWF  x3B
06276:  MOVLB  0
06278:  CALL   1EBA
....................          delay_ms(50);
0627C:  MOVLW  32
0627E:  MOVLB  7
06280:  MOVWF  x3A
06282:  MOVLB  0
06284:  CALL   0750
....................         
....................         fprintf(CH2,SMS_Massage7);  
06288:  MOVLW  06
0628A:  MOVWF  FEA
0628C:  MOVLW  71
0628E:  MOVWF  FE9
06290:  CALL   44A4
....................         putc('\n',CH2);
06294:  MOVLW  0A
06296:  MOVLB  7
06298:  MOVWF  x3B
0629A:  MOVLB  0
0629C:  CALL   1EBA
....................        putc(26,CH2);
062A0:  MOVLW  1A
062A2:  MOVLB  7
062A4:  MOVWF  x3B
062A6:  MOVLB  0
062A8:  CALL   1EBA
062AC:  MOVLB  6
....................       }
....................    }
062AE:  BRA    633A
....................    else if(FaultType.B7 == 0)
062B0:  MOVLB  6
062B2:  BTFSC  xC6.6
062B4:  BRA    633A
....................    {
....................       In2.B7 = 0x00;
062B6:  BCF    xCC.6
....................       Ack.B7 = 0;
062B8:  BCF    xCA.6
....................       Output.B7 = 1;      //Off LED
062BA:  BSF    xC4.6
....................       
....................       SendSMS.B7 =0;// Clear SMS
062BC:  BCF    xD1.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
062BE:  BTFSC  xC7.6
062C0:  BRA    62C6
062C2:  BTFSC  xC8.6
062C4:  BRA    62E8
062C6:  MOVLB  7
062C8:  MOVF   x2E,F
062CA:  BTFSC  FD8.2
062CC:  BRA    62D2
062CE:  MOVLB  6
062D0:  BRA    62E8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
062D2:  MOVLW  01
062D4:  MOVWF  x39
062D6:  MOVLB  0
062D8:  CALL   44CA
062DC:  DECFSZ 01,W
062DE:  BRA    62E2
062E0:  BRA    62E6
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
062E2:  BSF    F89.4
062E4:  BCF    F92.4
062E6:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
062E8:  BTFSS  xC7.6
062EA:  BRA    62F0
062EC:  BTFSC  xC8.6
062EE:  BRA    6312
062F0:  MOVLB  7
062F2:  MOVF   x2E,F
062F4:  BTFSC  FD8.2
062F6:  BRA    62FC
062F8:  MOVLB  6
062FA:  BRA    6312
....................       {
....................          if(CheckAutoReset(0x02) == 1);
062FC:  MOVLW  02
062FE:  MOVWF  x39
06300:  MOVLB  0
06302:  CALL   44CA
06306:  DECFSZ 01,W
06308:  BRA    630C
0630A:  BRA    6310
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
0630C:  BSF    F89.3
0630E:  BCF    F92.3
06310:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06312:  BTFSC  xCC.0
06314:  BRA    633A
06316:  BTFSC  xCC.1
06318:  BRA    633A
0631A:  BTFSC  xCC.2
0631C:  BRA    633A
0631E:  BTFSC  xCC.3
06320:  BRA    633A
06322:  BTFSC  xCC.4
06324:  BRA    633A
06326:  BTFSC  xCC.5
06328:  BRA    633A
0632A:  BTFSC  xCC.6
0632C:  BRA    633A
0632E:  BTFSC  xCC.7
06330:  BRA    633A
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
06332:  BSF    F89.3
06334:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
06336:  BSF    F89.4
06338:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
0633A:  MOVLW  00
0633C:  BTFSC  xC3.7
0633E:  MOVLW  01
06340:  MOVLB  7
06342:  MOVWF  x3A
06344:  MOVLW  00
06346:  MOVLB  6
06348:  BTFSC  xC5.7
0634A:  MOVLW  01
0634C:  MOVLB  7
0634E:  XORWF  x3A,W
06350:  SUBLW  01
06352:  BNZ   635C
06354:  MOVLB  6
06356:  BTFSS  xC6.7
06358:  BRA    6362
0635A:  MOVLB  7
0635C:  BTFSS  1A.5
0635E:  BRA    6432
06360:  MOVLB  6
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
06362:  BTFSC  xCC.7
06364:  BRA    6382
06366:  MOVLB  0
06368:  MOVF   x6A,W
0636A:  SUBLW  0F
0636C:  BTFSC  FD8.2
0636E:  BRA    6374
06370:  MOVLB  6
06372:  BRA    6382
06374:  MOVLB  6
06376:  BTFSC  xCA.7
06378:  BRA    6382
....................       {
....................             TimeBase1s = 100 ;            //reload again
0637A:  MOVLW  64
0637C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0637E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B8 = 1;
06382:  BSF    xCC.7
....................       if(Ack.B8 == 0)
06384:  BTFSC  xCA.7
06386:  BRA    63B6
....................       {
....................          if(FlashingFlag == 0)
06388:  BTFSC  1A.1
0638A:  BRA    6390
....................             {
....................                Output.B8 = 0;           //Flash output1
0638C:  BCF    xC4.7
....................             }
0638E:  BRA    6392
....................             else
....................             {
....................                Output.B8 = 1;
06390:  BSF    xC4.7
....................             }
....................          if (~AutoTestFlag)
06392:  BTFSC  1A.4
06394:  BRA    63B6
....................          {
....................             if(AlarmIndicator.B8 == 1){
06396:  BTFSS  xC9.7
06398:  BRA    63B6
....................                 if(OutputBoth.B8 == 0)        //Both output
0639A:  BTFSC  xC8.7
0639C:  BRA    63A8
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
0639E:  BCF    F89.4
063A0:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
063A2:  BCF    F89.3
063A4:  BCF    F92.3
....................                 }
063A6:  BRA    63B6
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,0);     //Buzzer
063A8:  BTFSS  xC7.7
063AA:  BRA    63B2
063AC:  BCF    F89.4
063AE:  BCF    F92.4
063B0:  BRA    63B6
....................                   else output_bit(Pbell,0);                          //Bell
063B2:  BCF    F89.3
063B4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
063B6:  MOVLW  01
063B8:  MOVLB  7
063BA:  MOVWF  x2E
....................       
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
063BC:  MOVLB  6
063BE:  BTFSC  xD1.7
063C0:  BRA    6430
063C2:  BTFSC  30.1
063C4:  BRA    6430
063C6:  BTFSC  xCA.7
063C8:  BRA    6430
....................       {
....................          SendSMS.B8 =1;
063CA:  BSF    xD1.7
....................          fprintf(CH2,"AT+CMGS=\"");
063CC:  MOVLW  3C
063CE:  MOVWF  FF6
063D0:  MOVLW  07
063D2:  MOVWF  FF7
063D4:  MOVLB  0
063D6:  CALL   1F00
....................          fprintf(CH2,sms_phonenumber);
063DA:  MOVLW  05
063DC:  MOVWF  FEA
063DE:  MOVLW  6C
063E0:  MOVWF  FE9
063E2:  CALL   44A4
....................          
....................          fprintf(CH2,"\"");
063E6:  MOVLW  22
063E8:  MOVLB  7
063EA:  MOVWF  x3B
063EC:  MOVLB  0
063EE:  CALL   1EBA
....................          putc('\n',CH2);
063F2:  MOVLW  0A
063F4:  MOVLB  7
063F6:  MOVWF  x3B
063F8:  MOVLB  0
063FA:  CALL   1EBA
....................          delay_ms(50);
063FE:  MOVLW  32
06400:  MOVLB  7
06402:  MOVWF  x3A
06404:  MOVLB  0
06406:  CALL   0750
....................         
....................         fprintf(CH2,SMS_Massage8);   
0640A:  MOVLW  06
0640C:  MOVWF  FEA
0640E:  MOVLW  9A
06410:  MOVWF  FE9
06412:  CALL   44A4
....................         putc('\n',CH2);
06416:  MOVLW  0A
06418:  MOVLB  7
0641A:  MOVWF  x3B
0641C:  MOVLB  0
0641E:  CALL   1EBA
....................         putc(26,CH2);
06422:  MOVLW  1A
06424:  MOVLB  7
06426:  MOVWF  x3B
06428:  MOVLB  0
0642A:  CALL   1EBA
0642E:  MOVLB  6
....................       }
....................    }
06430:  BRA    64BC
....................    else if(FaultType.B8 == 0)
06432:  MOVLB  6
06434:  BTFSC  xC6.7
06436:  BRA    64BC
....................    {
....................       In2.B8 = 0x00;
06438:  BCF    xCC.7
....................       Ack.B8 = 0;
0643A:  BCF    xCA.7
....................       Output.B8 = 1;      //Off LED
0643C:  BSF    xC4.7
....................       
....................       SendSMS.B8 =0;// Clear SMS
0643E:  BCF    xD1.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
06440:  BTFSC  xC7.7
06442:  BRA    6448
06444:  BTFSC  xC8.7
06446:  BRA    646A
06448:  MOVLB  7
0644A:  MOVF   x2E,F
0644C:  BTFSC  FD8.2
0644E:  BRA    6454
06450:  MOVLB  6
06452:  BRA    646A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
06454:  MOVLW  01
06456:  MOVWF  x39
06458:  MOVLB  0
0645A:  CALL   44CA
0645E:  DECFSZ 01,W
06460:  BRA    6464
06462:  BRA    6468
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06464:  BSF    F89.4
06466:  BCF    F92.4
06468:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
0646A:  BTFSS  xC7.7
0646C:  BRA    6472
0646E:  BTFSC  xC8.7
06470:  BRA    6494
06472:  MOVLB  7
06474:  MOVF   x2E,F
06476:  BTFSC  FD8.2
06478:  BRA    647E
0647A:  MOVLB  6
0647C:  BRA    6494
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0647E:  MOVLW  02
06480:  MOVWF  x39
06482:  MOVLB  0
06484:  CALL   44CA
06488:  DECFSZ 01,W
0648A:  BRA    648E
0648C:  BRA    6492
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
0648E:  BSF    F89.3
06490:  BCF    F92.3
06492:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06494:  BTFSC  xCC.0
06496:  BRA    64BC
06498:  BTFSC  xCC.1
0649A:  BRA    64BC
0649C:  BTFSC  xCC.2
0649E:  BRA    64BC
064A0:  BTFSC  xCC.3
064A2:  BRA    64BC
064A4:  BTFSC  xCC.4
064A6:  BRA    64BC
064A8:  BTFSC  xCC.5
064AA:  BRA    64BC
064AC:  BTFSC  xCC.6
064AE:  BRA    64BC
064B0:  BTFSC  xCC.7
064B2:  BRA    64BC
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
064B4:  BSF    F89.3
064B6:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
064B8:  BSF    F89.4
064BA:  BCF    F92.4
....................       }
....................    }
064BC:  MOVLB  0
064BE:  RETURN 0
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////   
....................    
.................... 
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
01CE0:  CLRF   4E
....................     Red8_8 = 0;
01CE2:  CLRF   4F
....................     //Red9_15 = 0;
....................     //Red16_16 = 0;
.................... 
....................     Green1_7 = 0;
01CE4:  CLRF   52
....................     Green8_8 = 0;
01CE6:  CLRF   53
....................     //Green9_15 = 0;
....................     //Green16_16 = 0;
.................... 
....................    if(T_test == 0x00)
01CE8:  MOVF   2F,F
01CEA:  BTFSS  FD8.2
01CEC:  BRA    1EB8
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
01CEE:  MOVLB  6
01CF0:  BTFSS  xC4.0
01CF2:  BRA    1CFA
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
01CF4:  BCF    4E.1
01CF6:  BCF    52.1
....................            }
01CF8:  BRA    1D22
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
01CFA:  BTFSS  xCF.0
01CFC:  BRA    1D08
01CFE:  BTFSC  xD0.0
01D00:  BRA    1D08
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
01D02:  BSF    4E.1
01D04:  BCF    52.1
....................              }
01D06:  BRA    1D22
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
01D08:  BTFSC  xCF.0
01D0A:  BRA    1D16
01D0C:  BTFSS  xD0.0
01D0E:  BRA    1D16
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
01D10:  BCF    4E.1
01D12:  BSF    52.1
....................              }
01D14:  BRA    1D22
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
01D16:  BTFSS  xCF.0
01D18:  BRA    1D22
01D1A:  BTFSS  xD0.0
01D1C:  BRA    1D22
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
01D1E:  BSF    4E.1
01D20:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
01D22:  BTFSS  xC4.1
01D24:  BRA    1D2C
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
01D26:  BCF    4E.2
01D28:  BCF    52.2
....................            }
01D2A:  BRA    1D54
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
01D2C:  BTFSS  xCF.1
01D2E:  BRA    1D3A
01D30:  BTFSC  xD0.1
01D32:  BRA    1D3A
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
01D34:  BSF    4E.2
01D36:  BCF    52.2
....................              }
01D38:  BRA    1D54
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
01D3A:  BTFSC  xCF.1
01D3C:  BRA    1D48
01D3E:  BTFSS  xD0.1
01D40:  BRA    1D48
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
01D42:  BCF    4E.2
01D44:  BSF    52.2
....................              }
01D46:  BRA    1D54
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
01D48:  BTFSS  xCF.1
01D4A:  BRA    1D54
01D4C:  BTFSS  xD0.1
01D4E:  BRA    1D54
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
01D50:  BSF    4E.2
01D52:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
01D54:  BTFSS  xC4.2
01D56:  BRA    1D5E
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
01D58:  BCF    4E.3
01D5A:  BCF    52.3
....................            }
01D5C:  BRA    1D86
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
01D5E:  BTFSS  xCF.2
01D60:  BRA    1D6C
01D62:  BTFSC  xD0.2
01D64:  BRA    1D6C
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
01D66:  BSF    4E.3
01D68:  BCF    52.3
....................              }
01D6A:  BRA    1D86
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
01D6C:  BTFSC  xCF.2
01D6E:  BRA    1D7A
01D70:  BTFSS  xD0.2
01D72:  BRA    1D7A
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
01D74:  BCF    4E.3
01D76:  BSF    52.3
....................              }
01D78:  BRA    1D86
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
01D7A:  BTFSS  xCF.2
01D7C:  BRA    1D86
01D7E:  BTFSS  xD0.2
01D80:  BRA    1D86
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
01D82:  BSF    4E.3
01D84:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
01D86:  BTFSS  xC4.3
01D88:  BRA    1D90
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
01D8A:  BCF    4E.4
01D8C:  BCF    52.4
....................            }
01D8E:  BRA    1DB8
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
01D90:  BTFSS  xCF.3
01D92:  BRA    1D9E
01D94:  BTFSC  xD0.3
01D96:  BRA    1D9E
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
01D98:  BSF    4E.4
01D9A:  BCF    52.4
....................              }
01D9C:  BRA    1DB8
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
01D9E:  BTFSC  xCF.3
01DA0:  BRA    1DAC
01DA2:  BTFSS  xD0.3
01DA4:  BRA    1DAC
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
01DA6:  BCF    4E.4
01DA8:  BSF    52.4
....................              }
01DAA:  BRA    1DB8
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
01DAC:  BTFSS  xCF.3
01DAE:  BRA    1DB8
01DB0:  BTFSS  xD0.3
01DB2:  BRA    1DB8
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
01DB4:  BSF    4E.4
01DB6:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
01DB8:  BTFSS  xC4.4
01DBA:  BRA    1DC2
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
01DBC:  BCF    4E.5
01DBE:  BCF    52.5
....................            }
01DC0:  BRA    1DEA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
01DC2:  BTFSS  xCF.4
01DC4:  BRA    1DD0
01DC6:  BTFSC  xD0.4
01DC8:  BRA    1DD0
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
01DCA:  BSF    4E.5
01DCC:  BCF    52.5
....................              }
01DCE:  BRA    1DEA
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
01DD0:  BTFSC  xCF.4
01DD2:  BRA    1DDE
01DD4:  BTFSS  xD0.4
01DD6:  BRA    1DDE
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
01DD8:  BCF    4E.5
01DDA:  BSF    52.5
....................              }
01DDC:  BRA    1DEA
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
01DDE:  BTFSS  xCF.4
01DE0:  BRA    1DEA
01DE2:  BTFSS  xD0.4
01DE4:  BRA    1DEA
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
01DE6:  BSF    4E.5
01DE8:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
01DEA:  BTFSS  xC4.5
01DEC:  BRA    1DF4
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
01DEE:  BCF    4E.6
01DF0:  BCF    52.6
....................            }
01DF2:  BRA    1E1C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
01DF4:  BTFSS  xCF.5
01DF6:  BRA    1E02
01DF8:  BTFSC  xD0.5
01DFA:  BRA    1E02
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
01DFC:  BSF    4E.6
01DFE:  BCF    52.6
....................              }
01E00:  BRA    1E1C
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
01E02:  BTFSC  xCF.5
01E04:  BRA    1E10
01E06:  BTFSS  xD0.5
01E08:  BRA    1E10
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
01E0A:  BCF    4E.6
01E0C:  BSF    52.6
....................              }
01E0E:  BRA    1E1C
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
01E10:  BTFSS  xCF.5
01E12:  BRA    1E1C
01E14:  BTFSS  xD0.5
01E16:  BRA    1E1C
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
01E18:  BSF    4E.6
01E1A:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
01E1C:  BTFSS  xC4.6
01E1E:  BRA    1E26
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
01E20:  BCF    4E.7
01E22:  BCF    52.7
....................            }
01E24:  BRA    1E4E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
01E26:  BTFSS  xCF.6
01E28:  BRA    1E34
01E2A:  BTFSC  xD0.6
01E2C:  BRA    1E34
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
01E2E:  BSF    4E.7
01E30:  BCF    52.7
....................              }
01E32:  BRA    1E4E
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
01E34:  BTFSC  xCF.6
01E36:  BRA    1E42
01E38:  BTFSS  xD0.6
01E3A:  BRA    1E42
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
01E3C:  BCF    4E.7
01E3E:  BSF    52.7
....................              }
01E40:  BRA    1E4E
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
01E42:  BTFSS  xCF.6
01E44:  BRA    1E4E
01E46:  BTFSS  xD0.6
01E48:  BRA    1E4E
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
01E4A:  BSF    4E.7
01E4C:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
01E4E:  BTFSS  xC4.7
01E50:  BRA    1E58
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
01E52:  BCF    4F.0
01E54:  BCF    53.0
....................            }
01E56:  BRA    1E80
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
01E58:  BTFSS  xCF.7
01E5A:  BRA    1E66
01E5C:  BTFSC  xD0.7
01E5E:  BRA    1E66
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
01E60:  BSF    4F.0
01E62:  BCF    53.0
....................              }
01E64:  BRA    1E80
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
01E66:  BTFSC  xCF.7
01E68:  BRA    1E74
01E6A:  BTFSS  xD0.7
01E6C:  BRA    1E74
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
01E6E:  BCF    4F.0
01E70:  BSF    53.0
....................              }
01E72:  BRA    1E80
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
01E74:  BTFSS  xCF.7
01E76:  BRA    1E80
01E78:  BTFSS  xD0.7
01E7A:  BRA    1E80
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
01E7C:  BSF    4F.0
01E7E:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
.................... 
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
01E80:  MOVLW  04
01E82:  MOVLB  7
01E84:  MOVWF  x39
01E86:  MOVFF  4E,73A
01E8A:  MOVLB  0
01E8C:  RCALL  1CB4
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
01E8E:  MOVLW  04
01E90:  MOVLB  7
01E92:  MOVWF  x39
01E94:  MOVFF  4F,73A
01E98:  MOVLB  0
01E9A:  RCALL  1CCA
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
01E9C:  MOVLW  06
01E9E:  MOVLB  7
01EA0:  MOVWF  x39
01EA2:  MOVFF  52,73A
01EA6:  MOVLB  0
01EA8:  RCALL  1CB4
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
01EAA:  MOVLW  06
01EAC:  MOVLB  7
01EAE:  MOVWF  x39
01EB0:  MOVFF  53,73A
01EB4:  MOVLB  0
01EB6:  RCALL  1CCA
....................            
.................... 
....................                                            
....................            
....................    }
01EB8:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    In.B1 = 1;
*
0448C:  MOVLB  6
0448E:  BSF    xCB.0
....................    In.B2 = 1;
04490:  BSF    xCB.1
....................    In.B3 = 1;
04492:  BSF    xCB.2
....................    In.B4 = 1;
04494:  BSF    xCB.3
....................    In.B5 = 1;
04496:  BSF    xCB.4
....................    In.B6 = 1;
04498:  BSF    xCB.5
....................    In.B7 = 1;
0449A:  BSF    xCB.6
....................    In.B8 = 1;
0449C:  BSF    xCB.7
0449E:  MOVLB  0
044A0:  GOTO   655E (RETURN)
....................       /*
....................       Inputt.B1 = ~InputType.B1;
....................       Inputt.B2 = ~InputType.B2;
....................       Inputt.B3 = ~InputType.B3;
....................       Inputt.B4 = ~InputType.B4;
....................       Inputt.B5 = ~InputType.B5;
....................       Inputt.B6 = ~InputType.B6;
....................       Inputt.B7 = ~InputType.B7;
....................       Inputt.B8 = ~InputType.B8;
....................       Ack.B1 = 0;
....................       Ack.B2 = 0;
....................       Ack.B3 = 0;
....................       Ack.B4 = 0;
....................       Ack.B5 = 0;
....................       Ack.B6 = 0;
....................       Ack.B7 = 0;
....................       Ack.B8 = 0;
....................       */
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
064C0:  MOVFF  32,731
....................    output_temp[1] = output9_16;
064C4:  MOVFF  33,732
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
064C8:  BSF    F94.2
064CA:  BTFSC  F82.2
064CC:  BRA    64D2
064CE:  BTFSS  1A.6
064D0:  BRA    64D6
064D2:  BTFSS  1A.4
064D4:  BRA    64E2
064D6:  MOVLW  32
064D8:  MOVLB  7
064DA:  MOVWF  x3A
064DC:  MOVLB  0
064DE:  CALL   0750
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
064E2:  BSF    F94.2
064E4:  BTFSC  F82.2
064E6:  BRA    64EC
064E8:  BTFSS  1A.6
064EA:  BRA    64F0
064EC:  BTFSS  1A.4
064EE:  BRA    6544
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
064F0:  BSF    F94.2
064F2:  BTFSC  F82.2
064F4:  BRA    64FA
064F6:  BTFSS  1A.6
064F8:  BRA    64FE
064FA:  BTFSS  1A.4
064FC:  BRA    6542
....................            {
....................              restart_wdt();
064FE:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
06500:  MOVF   2F,F
06502:  BNZ   6508
06504:  MOVLW  06
06506:  MOVWF  2F
....................               Test = 1;
06508:  BSF    1A.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
0650A:  MOVLW  04
0650C:  MOVLB  7
0650E:  MOVWF  x39
06510:  SETF   x3A
06512:  MOVLB  0
06514:  CALL   1CB4
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
06518:  MOVLW  04
0651A:  MOVLB  7
0651C:  MOVWF  x39
0651E:  SETF   x3A
06520:  MOVLB  0
06522:  CALL   1CCA
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
06526:  MOVLW  06
06528:  MOVLB  7
0652A:  MOVWF  x39
0652C:  SETF   x3A
0652E:  MOVLB  0
06530:  CALL   1CB4
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
06534:  MOVLW  06
06536:  MOVLB  7
06538:  MOVWF  x39
0653A:  SETF   x3A
0653C:  MOVLB  0
0653E:  CALL   1CCA
....................   /*               
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
....................    */ 
....................              
....................            }
....................          
....................        }
06542:  BRA    6554
....................        else if(input(Ptest) == 1 && Test == 1)
06544:  BSF    F94.2
06546:  BTFSS  F82.2
06548:  BRA    6554
0654A:  BTFSS  1A.6
0654C:  BRA    6554
....................        {
....................            T_test = 0x00;
0654E:  CLRF   2F
....................            Test = 0;
06550:  BCF    1A.6
....................            Test_fault = 0;
06552:  BCF    1A.5
....................        }
....................        if(Test_fault == 1)
06554:  BTFSS  1A.5
06556:  BRA    656C
....................        {
....................           functointest_f = 1;
06558:  BSF    30.1
....................           ForceAllAlarm();
0655A:  GOTO   448C
....................           Anal_Function();
0655E:  CALL   49D2
....................           if(Input(Ptest) == 1)
06562:  BSF    F94.2
06564:  BTFSS  F82.2
06566:  BRA    656A
....................           {
....................             Test_fault = 0;
06568:  BCF    1A.5
....................           }
....................        }
0656A:  BRA    6582
....................        else if(input(Ptest) == 1 && Test == 1)
0656C:  BSF    F94.2
0656E:  BTFSS  F82.2
06570:  BRA    6582
06572:  BTFSS  1A.6
06574:  BRA    6582
....................        {
....................           if(NoOfPoint >= 16)
06576:  MOVF   x6D,W
06578:  SUBLW  0F
0657A:  BC    657C
....................           {
.................... 
....................           }
....................           
.................... 
....................           T_test = 0x00;
0657C:  CLRF   2F
....................           Test = 0;
0657E:  BCF    1A.6
....................           Test_fault = 0;
06580:  BCF    1A.5
....................        }
06582:  GOTO   6AAE (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
02128:  BSF    F94.0
0212A:  BTFSC  F82.0
0212C:  BRA    2132
0212E:  BTFSS  1A.7
02130:  BRA    2136
02132:  BTFSS  1A.2
02134:  BRA    2142
02136:  MOVLW  32
02138:  MOVLB  7
0213A:  MOVWF  x3A
0213C:  MOVLB  0
0213E:  CALL   0750
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
02142:  BSF    F94.0
02144:  BTFSC  F82.0
02146:  BRA    214C
02148:  BTFSS  1A.7
0214A:  BRA    2150
0214C:  BTFSS  1A.2
0214E:  BRA    21FA
....................    {
....................             AutoAckFlag = 0;
02150:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
02152:  CLRF   1D
.................... 
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
02154:  MOVLB  6
02156:  BTFSC  xCB.0
02158:  BRA    215E
0215A:  BTFSS  xCC.0
0215C:  BRA    2168
....................            {
....................              Ack.B1 = 1;
0215E:  BSF    xCA.0
....................              In.B1 = 0;
02160:  BCF    xCB.0
....................              In2.B1 = 0;      //for auto reset
02162:  BCF    xCC.0
....................              Output.B1 = 0;
02164:  BCF    xC4.0
....................              SendSMS.B1 =0;
02166:  BCF    xD1.0
....................            }
.................... 
....................            if((In.B2 == 1)||(In2.B2 == 1))
02168:  BTFSC  xCB.1
0216A:  BRA    2170
0216C:  BTFSS  xCC.1
0216E:  BRA    217A
....................            {
....................              Ack.B2 = 1;
02170:  BSF    xCA.1
....................              In.B2 = 0;
02172:  BCF    xCB.1
....................              In2.B2 = 0;      //for auto reset
02174:  BCF    xCC.1
....................              Output.B2 = 0;
02176:  BCF    xC4.1
....................              SendSMS.B2 =0;
02178:  BCF    xD1.1
....................            }
.................... 
....................            if((In.B3 == 1)||(In2.B3 == 1))
0217A:  BTFSC  xCB.2
0217C:  BRA    2182
0217E:  BTFSS  xCC.2
02180:  BRA    218C
....................            {
....................              Ack.B3 = 1;
02182:  BSF    xCA.2
....................              In.B3 = 0;
02184:  BCF    xCB.2
....................              In2.B3 = 0;      //for auto reset
02186:  BCF    xCC.2
....................              Output.B3 = 0;
02188:  BCF    xC4.2
....................              SendSMS.B3 =0;
0218A:  BCF    xD1.2
....................            }
.................... 
....................            if((In.B4 == 1)||(In2.B4 == 1))
0218C:  BTFSC  xCB.3
0218E:  BRA    2194
02190:  BTFSS  xCC.3
02192:  BRA    219E
....................            {
....................              Ack.B4 = 1;
02194:  BSF    xCA.3
....................              In.B4 = 0;
02196:  BCF    xCB.3
....................              In2.B4 = 0;      //for auto reset
02198:  BCF    xCC.3
....................              Output.B4 = 0;
0219A:  BCF    xC4.3
....................              SendSMS.B4 =0;
0219C:  BCF    xD1.3
....................            }
.................... 
....................            if((In.B5 == 1)||(In2.B5 == 1))
0219E:  BTFSC  xCB.4
021A0:  BRA    21A6
021A2:  BTFSS  xCC.4
021A4:  BRA    21B0
....................            {
....................              Ack.B5 = 1;
021A6:  BSF    xCA.4
....................              In.B5 = 0;
021A8:  BCF    xCB.4
....................              In2.B5 = 0;      //for auto reset
021AA:  BCF    xCC.4
....................              Output.B5 = 0;
021AC:  BCF    xC4.4
....................              SendSMS.B5 =0;
021AE:  BCF    xD1.4
....................            }
.................... 
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
021B0:  BTFSC  xCB.5
021B2:  BRA    21B8
021B4:  BTFSS  xCC.5
021B6:  BRA    21C2
....................            {
....................              Ack.B6 = 1;
021B8:  BSF    xCA.5
....................              In.B6 = 0;
021BA:  BCF    xCB.5
....................              In2.B6 = 0;      //for auto reset
021BC:  BCF    xCC.5
....................              Output.B6 = 0;
021BE:  BCF    xC4.5
....................              SendSMS.B6 =0;
021C0:  BCF    xD1.5
....................            }
.................... 
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
021C2:  BTFSC  xCB.6
021C4:  BRA    21CA
021C6:  BTFSS  xCC.6
021C8:  BRA    21D4
....................            {
....................              Ack.B7 = 1;
021CA:  BSF    xCA.6
....................              In.B7 = 0;
021CC:  BCF    xCB.6
....................              In2.B7 = 0;      //for auto reset
021CE:  BCF    xCC.6
....................              Output.B7 = 0;
021D0:  BCF    xC4.6
....................              SendSMS.B7 =0;
021D2:  BCF    xD1.6
....................            }
.................... 
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
021D4:  BTFSC  xCB.7
021D6:  BRA    21DC
021D8:  BTFSS  xCC.7
021DA:  BRA    21E6
....................            {
....................              Ack.B8 = 1;
021DC:  BSF    xCA.7
....................              In.B8 = 0;
021DE:  BCF    xCB.7
....................              In2.B8 = 0;      //for auto reset
021E0:  BCF    xCC.7
....................              Output.B8 = 0;
021E2:  BCF    xC4.7
....................              SendSMS.B8 =0;
021E4:  BCF    xD1.7
....................            }
....................       
....................             if(functointest_f){
021E6:  BTFSS  30.1
021E8:  BRA    21EC
....................                functointest_f = 0;
021EA:  BCF    30.1
....................             }
....................             Ack_F = 1;
021EC:  BSF    1A.7
....................             output_bit(Pbuzzer,1);   //Buzzer
021EE:  BSF    F89.4
021F0:  BCF    F92.4
....................             output_bit(Pbell,1);     //Bell
021F2:  BSF    F89.3
021F4:  BCF    F92.3
....................    }
021F6:  BRA    2208
021F8:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
021FA:  BSF    F94.0
021FC:  BTFSS  F82.0
021FE:  BRA    2206
02200:  BTFSS  1A.7
02202:  BRA    2206
....................    {
....................       Ack_F = 0;
02204:  BCF    1A.7
02206:  MOVLB  6
....................    }
02208:  MOVLB  0
0220A:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
0220C:  BSF    F94.1
0220E:  BTFSC  F82.1
02210:  BRA    2216
02212:  BTFSS  30.0
02214:  BRA    221A
02216:  BTFSS  1A.3
02218:  BRA    2226
0221A:  MOVLW  32
0221C:  MOVLB  7
0221E:  MOVWF  x3A
02220:  MOVLB  0
02222:  CALL   0750
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
02226:  BSF    F94.1
02228:  BTFSC  F82.1
0222A:  BRA    2230
0222C:  BTFSS  30.0
0222E:  BRA    2234
02230:  BTFSS  1A.3
02232:  BRA    237C
....................     {
....................        AutoResetFlag = 0;
02234:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
02236:  MOVLW  00
02238:  MOVLB  6
0223A:  BTFSC  xC3.0
0223C:  MOVLW  01
0223E:  MOVLB  7
02240:  MOVWF  x3B
02242:  MOVLW  00
02244:  MOVLB  6
02246:  BTFSC  xC5.0
02248:  MOVLW  01
0224A:  MOVLB  7
0224C:  XORWF  x3B,W
0224E:  BNZ   225E
02250:  MOVLB  6
02252:  BTFSS  xCB.0
02254:  BRA    225A
02256:  MOVLB  7
02258:  BRA    225E
0225A:  BSF    xC4.0
0225C:  MOVLB  7
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
0225E:  MOVLW  00
02260:  MOVLB  6
02262:  BTFSC  xC3.1
02264:  MOVLW  01
02266:  MOVLB  7
02268:  MOVWF  x3B
0226A:  MOVLW  00
0226C:  MOVLB  6
0226E:  BTFSC  xC5.1
02270:  MOVLW  01
02272:  MOVLB  7
02274:  XORWF  x3B,W
02276:  BNZ   2286
02278:  MOVLB  6
0227A:  BTFSS  xCB.1
0227C:  BRA    2282
0227E:  MOVLB  7
02280:  BRA    2286
02282:  BSF    xC4.1
02284:  MOVLB  7
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
02286:  MOVLW  00
02288:  MOVLB  6
0228A:  BTFSC  xC3.2
0228C:  MOVLW  01
0228E:  MOVLB  7
02290:  MOVWF  x3B
02292:  MOVLW  00
02294:  MOVLB  6
02296:  BTFSC  xC5.2
02298:  MOVLW  01
0229A:  MOVLB  7
0229C:  XORWF  x3B,W
0229E:  BNZ   22AE
022A0:  MOVLB  6
022A2:  BTFSS  xCB.2
022A4:  BRA    22AA
022A6:  MOVLB  7
022A8:  BRA    22AE
022AA:  BSF    xC4.2
022AC:  MOVLB  7
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
022AE:  MOVLW  00
022B0:  MOVLB  6
022B2:  BTFSC  xC3.3
022B4:  MOVLW  01
022B6:  MOVLB  7
022B8:  MOVWF  x3B
022BA:  MOVLW  00
022BC:  MOVLB  6
022BE:  BTFSC  xC5.3
022C0:  MOVLW  01
022C2:  MOVLB  7
022C4:  XORWF  x3B,W
022C6:  BNZ   22D6
022C8:  MOVLB  6
022CA:  BTFSS  xCB.3
022CC:  BRA    22D2
022CE:  MOVLB  7
022D0:  BRA    22D6
022D2:  BSF    xC4.3
022D4:  MOVLB  7
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
022D6:  MOVLW  00
022D8:  MOVLB  6
022DA:  BTFSC  xC3.4
022DC:  MOVLW  01
022DE:  MOVLB  7
022E0:  MOVWF  x3B
022E2:  MOVLW  00
022E4:  MOVLB  6
022E6:  BTFSC  xC5.4
022E8:  MOVLW  01
022EA:  MOVLB  7
022EC:  XORWF  x3B,W
022EE:  BNZ   22FE
022F0:  MOVLB  6
022F2:  BTFSS  xCB.4
022F4:  BRA    22FA
022F6:  MOVLB  7
022F8:  BRA    22FE
022FA:  BSF    xC4.4
022FC:  MOVLB  7
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
022FE:  MOVLW  00
02300:  MOVLB  6
02302:  BTFSC  xC3.5
02304:  MOVLW  01
02306:  MOVLB  7
02308:  MOVWF  x3B
0230A:  MOVLW  00
0230C:  MOVLB  6
0230E:  BTFSC  xC5.5
02310:  MOVLW  01
02312:  MOVLB  7
02314:  XORWF  x3B,W
02316:  BNZ   2326
02318:  MOVLB  6
0231A:  BTFSS  xCB.5
0231C:  BRA    2322
0231E:  MOVLB  7
02320:  BRA    2326
02322:  BSF    xC4.5
02324:  MOVLB  7
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
02326:  MOVLW  00
02328:  MOVLB  6
0232A:  BTFSC  xC3.6
0232C:  MOVLW  01
0232E:  MOVLB  7
02330:  MOVWF  x3B
02332:  MOVLW  00
02334:  MOVLB  6
02336:  BTFSC  xC5.6
02338:  MOVLW  01
0233A:  MOVLB  7
0233C:  XORWF  x3B,W
0233E:  BNZ   234E
02340:  MOVLB  6
02342:  BTFSS  xCB.6
02344:  BRA    234A
02346:  MOVLB  7
02348:  BRA    234E
0234A:  BSF    xC4.6
0234C:  MOVLB  7
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
0234E:  MOVLW  00
02350:  MOVLB  6
02352:  BTFSC  xC3.7
02354:  MOVLW  01
02356:  MOVLB  7
02358:  MOVWF  x3B
0235A:  MOVLW  00
0235C:  MOVLB  6
0235E:  BTFSC  xC5.7
02360:  MOVLW  01
02362:  MOVLB  7
02364:  XORWF  x3B,W
02366:  BNZ   2376
02368:  MOVLB  6
0236A:  BTFSS  xCB.7
0236C:  BRA    2372
0236E:  MOVLB  7
02370:  BRA    2376
02372:  BSF    xC4.7
02374:  MOVLB  7
.................... 
.................... 
....................        Reset_F = 1;
02376:  BSF    30.0
....................        
....................        
.................... 
....................        
....................     }
02378:  BRA    238A
0237A:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
0237C:  BSF    F94.1
0237E:  BTFSS  F82.1
02380:  BRA    2388
02382:  BTFSS  30.0
02384:  BRA    2388
....................     {
....................        Reset_F = 0;
02386:  BCF    30.0
02388:  MOVLB  7
....................     }
0238A:  MOVLB  0
0238C:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
044CA:  MOVLB  7
044CC:  DECFSZ x39,W
044CE:  BRA    4748
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
044D0:  MOVLW  00
044D2:  MOVLB  6
044D4:  BTFSC  xCB.0
044D6:  MOVLW  01
044D8:  MOVLB  7
044DA:  MOVWF  x3C
044DC:  MOVLW  00
044DE:  MOVLB  6
044E0:  BTFSC  xCC.0
044E2:  MOVLW  01
044E4:  MOVLB  7
044E6:  IORWF  x3C,W
044E8:  MOVWF  x3B
044EA:  MOVLW  00
044EC:  MOVLB  6
044EE:  BTFSS  xCA.0
044F0:  MOVLW  01
044F2:  MOVLB  7
044F4:  ANDWF  x3B,F
044F6:  MOVLW  00
044F8:  MOVLB  6
044FA:  BTFSC  xC7.0
044FC:  MOVLW  01
044FE:  MOVLB  7
04500:  MOVWF  x3E
04502:  MOVLW  00
04504:  MOVLB  6
04506:  BTFSC  xC8.0
04508:  MOVLW  01
0450A:  MOVLB  7
0450C:  IORWF  x3E,W
0450E:  ANDWF  x3B,W
04510:  BCF    x3A.0
04512:  BTFSC  FE8.0
04514:  BSF    x3A.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
04516:  MOVLW  00
04518:  BTFSC  x3A.0
0451A:  MOVLW  01
0451C:  MOVWF  x3B
0451E:  MOVLW  00
04520:  MOVLB  6
04522:  BTFSC  xCB.1
04524:  MOVLW  01
04526:  MOVLB  7
04528:  MOVWF  x3D
0452A:  MOVLW  00
0452C:  MOVLB  6
0452E:  BTFSC  xCC.1
04530:  MOVLW  01
04532:  MOVLB  7
04534:  IORWF  x3D,W
04536:  MOVWF  x3C
04538:  MOVLW  00
0453A:  MOVLB  6
0453C:  BTFSS  xCA.1
0453E:  MOVLW  01
04540:  MOVLB  7
04542:  ANDWF  x3C,F
04544:  MOVLW  00
04546:  MOVLB  6
04548:  BTFSC  xC7.1
0454A:  MOVLW  01
0454C:  MOVLB  7
0454E:  MOVWF  x3F
04550:  MOVLW  00
04552:  MOVLB  6
04554:  BTFSC  xC8.1
04556:  MOVLW  01
04558:  MOVLB  7
0455A:  IORWF  x3F,W
0455C:  ANDWF  x3C,W
0455E:  IORWF  x3B,W
04560:  BCF    x3A.0
04562:  BTFSC  FE8.0
04564:  BSF    x3A.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
04566:  MOVLW  00
04568:  BTFSC  x3A.0
0456A:  MOVLW  01
0456C:  MOVWF  x3B
0456E:  MOVLW  00
04570:  MOVLB  6
04572:  BTFSC  xCB.2
04574:  MOVLW  01
04576:  MOVLB  7
04578:  MOVWF  x3D
0457A:  MOVLW  00
0457C:  MOVLB  6
0457E:  BTFSC  xCC.2
04580:  MOVLW  01
04582:  MOVLB  7
04584:  IORWF  x3D,W
04586:  MOVWF  x3C
04588:  MOVLW  00
0458A:  MOVLB  6
0458C:  BTFSS  xCA.2
0458E:  MOVLW  01
04590:  MOVLB  7
04592:  ANDWF  x3C,F
04594:  MOVLW  00
04596:  MOVLB  6
04598:  BTFSC  xC7.2
0459A:  MOVLW  01
0459C:  MOVLB  7
0459E:  MOVWF  x3F
045A0:  MOVLW  00
045A2:  MOVLB  6
045A4:  BTFSC  xC8.2
045A6:  MOVLW  01
045A8:  MOVLB  7
045AA:  IORWF  x3F,W
045AC:  ANDWF  x3C,W
045AE:  IORWF  x3B,W
045B0:  BCF    x3A.0
045B2:  BTFSC  FE8.0
045B4:  BSF    x3A.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
045B6:  MOVLW  00
045B8:  BTFSC  x3A.0
045BA:  MOVLW  01
045BC:  MOVWF  x3B
045BE:  MOVLW  00
045C0:  MOVLB  6
045C2:  BTFSC  xCB.3
045C4:  MOVLW  01
045C6:  MOVLB  7
045C8:  MOVWF  x3D
045CA:  MOVLW  00
045CC:  MOVLB  6
045CE:  BTFSC  xCC.3
045D0:  MOVLW  01
045D2:  MOVLB  7
045D4:  IORWF  x3D,W
045D6:  MOVWF  x3C
045D8:  MOVLW  00
045DA:  MOVLB  6
045DC:  BTFSS  xCA.3
045DE:  MOVLW  01
045E0:  MOVLB  7
045E2:  ANDWF  x3C,F
045E4:  MOVLW  00
045E6:  MOVLB  6
045E8:  BTFSC  xC7.3
045EA:  MOVLW  01
045EC:  MOVLB  7
045EE:  MOVWF  x3F
045F0:  MOVLW  00
045F2:  MOVLB  6
045F4:  BTFSC  xC8.3
045F6:  MOVLW  01
045F8:  MOVLB  7
045FA:  IORWF  x3F,W
045FC:  ANDWF  x3C,W
045FE:  IORWF  x3B,W
04600:  BCF    x3A.0
04602:  BTFSC  FE8.0
04604:  BSF    x3A.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
04606:  MOVLW  00
04608:  BTFSC  x3A.0
0460A:  MOVLW  01
0460C:  MOVWF  x3B
0460E:  MOVLW  00
04610:  MOVLB  6
04612:  BTFSC  xCB.4
04614:  MOVLW  01
04616:  MOVLB  7
04618:  MOVWF  x3D
0461A:  MOVLW  00
0461C:  MOVLB  6
0461E:  BTFSC  xCC.4
04620:  MOVLW  01
04622:  MOVLB  7
04624:  IORWF  x3D,W
04626:  MOVWF  x3C
04628:  MOVLW  00
0462A:  MOVLB  6
0462C:  BTFSS  xCA.4
0462E:  MOVLW  01
04630:  MOVLB  7
04632:  ANDWF  x3C,F
04634:  MOVLW  00
04636:  MOVLB  6
04638:  BTFSC  xC7.4
0463A:  MOVLW  01
0463C:  MOVLB  7
0463E:  MOVWF  x3F
04640:  MOVLW  00
04642:  MOVLB  6
04644:  BTFSC  xC8.4
04646:  MOVLW  01
04648:  MOVLB  7
0464A:  IORWF  x3F,W
0464C:  ANDWF  x3C,W
0464E:  IORWF  x3B,W
04650:  BCF    x3A.0
04652:  BTFSC  FE8.0
04654:  BSF    x3A.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
04656:  MOVLW  00
04658:  BTFSC  x3A.0
0465A:  MOVLW  01
0465C:  MOVWF  x3B
0465E:  MOVLW  00
04660:  MOVLB  6
04662:  BTFSC  xCB.5
04664:  MOVLW  01
04666:  MOVLB  7
04668:  MOVWF  x3D
0466A:  MOVLW  00
0466C:  MOVLB  6
0466E:  BTFSC  xCC.5
04670:  MOVLW  01
04672:  MOVLB  7
04674:  IORWF  x3D,W
04676:  MOVWF  x3C
04678:  MOVLW  00
0467A:  MOVLB  6
0467C:  BTFSS  xCA.5
0467E:  MOVLW  01
04680:  MOVLB  7
04682:  ANDWF  x3C,F
04684:  MOVLW  00
04686:  MOVLB  6
04688:  BTFSC  xC7.5
0468A:  MOVLW  01
0468C:  MOVLB  7
0468E:  MOVWF  x3F
04690:  MOVLW  00
04692:  MOVLB  6
04694:  BTFSC  xC8.5
04696:  MOVLW  01
04698:  MOVLB  7
0469A:  IORWF  x3F,W
0469C:  ANDWF  x3C,W
0469E:  IORWF  x3B,W
046A0:  BCF    x3A.0
046A2:  BTFSC  FE8.0
046A4:  BSF    x3A.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
046A6:  MOVLW  00
046A8:  BTFSC  x3A.0
046AA:  MOVLW  01
046AC:  MOVWF  x3B
046AE:  MOVLW  00
046B0:  MOVLB  6
046B2:  BTFSC  xCB.6
046B4:  MOVLW  01
046B6:  MOVLB  7
046B8:  MOVWF  x3D
046BA:  MOVLW  00
046BC:  MOVLB  6
046BE:  BTFSC  xCC.6
046C0:  MOVLW  01
046C2:  MOVLB  7
046C4:  IORWF  x3D,W
046C6:  MOVWF  x3C
046C8:  MOVLW  00
046CA:  MOVLB  6
046CC:  BTFSS  xCA.6
046CE:  MOVLW  01
046D0:  MOVLB  7
046D2:  ANDWF  x3C,F
046D4:  MOVLW  00
046D6:  MOVLB  6
046D8:  BTFSC  xC7.6
046DA:  MOVLW  01
046DC:  MOVLB  7
046DE:  MOVWF  x3F
046E0:  MOVLW  00
046E2:  MOVLB  6
046E4:  BTFSC  xC8.6
046E6:  MOVLW  01
046E8:  MOVLB  7
046EA:  IORWF  x3F,W
046EC:  ANDWF  x3C,W
046EE:  IORWF  x3B,W
046F0:  BCF    x3A.0
046F2:  BTFSC  FE8.0
046F4:  BSF    x3A.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
046F6:  MOVLW  00
046F8:  BTFSC  x3A.0
046FA:  MOVLW  01
046FC:  MOVWF  x3B
046FE:  MOVLW  00
04700:  MOVLB  6
04702:  BTFSC  xCB.7
04704:  MOVLW  01
04706:  MOVLB  7
04708:  MOVWF  x3D
0470A:  MOVLW  00
0470C:  MOVLB  6
0470E:  BTFSC  xCC.7
04710:  MOVLW  01
04712:  MOVLB  7
04714:  IORWF  x3D,W
04716:  MOVWF  x3C
04718:  MOVLW  00
0471A:  MOVLB  6
0471C:  BTFSS  xCA.7
0471E:  MOVLW  01
04720:  MOVLB  7
04722:  ANDWF  x3C,F
04724:  MOVLW  00
04726:  MOVLB  6
04728:  BTFSC  xC7.7
0472A:  MOVLW  01
0472C:  MOVLB  7
0472E:  MOVWF  x3F
04730:  MOVLW  00
04732:  MOVLB  6
04734:  BTFSC  xC8.7
04736:  MOVLW  01
04738:  MOVLB  7
0473A:  IORWF  x3F,W
0473C:  ANDWF  x3C,W
0473E:  IORWF  x3B,W
04740:  BCF    x3A.0
04742:  BTFSC  FE8.0
04744:  BSF    x3A.0
.................... 
....................      
....................    }
04746:  BRA    49C6
....................    else if(DatType == 0x02)             //Bell
04748:  MOVF   x39,W
0474A:  SUBLW  02
0474C:  BTFSS  FD8.2
0474E:  BRA    49C6
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
04750:  MOVLW  00
04752:  MOVLB  6
04754:  BTFSC  xCB.0
04756:  MOVLW  01
04758:  MOVLB  7
0475A:  MOVWF  x3C
0475C:  MOVLW  00
0475E:  MOVLB  6
04760:  BTFSC  xCC.0
04762:  MOVLW  01
04764:  MOVLB  7
04766:  IORWF  x3C,W
04768:  MOVWF  x3B
0476A:  MOVLW  00
0476C:  MOVLB  6
0476E:  BTFSS  xCA.0
04770:  MOVLW  01
04772:  MOVLB  7
04774:  ANDWF  x3B,F
04776:  MOVLW  00
04778:  MOVLB  6
0477A:  BTFSS  xC7.0
0477C:  MOVLW  01
0477E:  MOVLB  7
04780:  MOVWF  x3E
04782:  MOVLW  00
04784:  MOVLB  6
04786:  BTFSC  xC8.0
04788:  MOVLW  01
0478A:  MOVLB  7
0478C:  IORWF  x3E,W
0478E:  ANDWF  x3B,W
04790:  BCF    x3A.0
04792:  BTFSC  FE8.0
04794:  BSF    x3A.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
04796:  MOVLW  00
04798:  BTFSC  x3A.0
0479A:  MOVLW  01
0479C:  MOVWF  x3B
0479E:  MOVLW  00
047A0:  MOVLB  6
047A2:  BTFSC  xCB.1
047A4:  MOVLW  01
047A6:  MOVLB  7
047A8:  MOVWF  x3D
047AA:  MOVLW  00
047AC:  MOVLB  6
047AE:  BTFSC  xCC.1
047B0:  MOVLW  01
047B2:  MOVLB  7
047B4:  IORWF  x3D,W
047B6:  MOVWF  x3C
047B8:  MOVLW  00
047BA:  MOVLB  6
047BC:  BTFSS  xCA.1
047BE:  MOVLW  01
047C0:  MOVLB  7
047C2:  ANDWF  x3C,F
047C4:  MOVLW  00
047C6:  MOVLB  6
047C8:  BTFSS  xC7.1
047CA:  MOVLW  01
047CC:  MOVLB  7
047CE:  MOVWF  x3F
047D0:  MOVLW  00
047D2:  MOVLB  6
047D4:  BTFSC  xC8.1
047D6:  MOVLW  01
047D8:  MOVLB  7
047DA:  IORWF  x3F,W
047DC:  ANDWF  x3C,W
047DE:  IORWF  x3B,W
047E0:  BCF    x3A.0
047E2:  BTFSC  FE8.0
047E4:  BSF    x3A.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
047E6:  MOVLW  00
047E8:  BTFSC  x3A.0
047EA:  MOVLW  01
047EC:  MOVWF  x3B
047EE:  MOVLW  00
047F0:  MOVLB  6
047F2:  BTFSC  xCB.2
047F4:  MOVLW  01
047F6:  MOVLB  7
047F8:  MOVWF  x3D
047FA:  MOVLW  00
047FC:  MOVLB  6
047FE:  BTFSC  xCC.2
04800:  MOVLW  01
04802:  MOVLB  7
04804:  IORWF  x3D,W
04806:  MOVWF  x3C
04808:  MOVLW  00
0480A:  MOVLB  6
0480C:  BTFSS  xCA.2
0480E:  MOVLW  01
04810:  MOVLB  7
04812:  ANDWF  x3C,F
04814:  MOVLW  00
04816:  MOVLB  6
04818:  BTFSS  xC7.2
0481A:  MOVLW  01
0481C:  MOVLB  7
0481E:  MOVWF  x3F
04820:  MOVLW  00
04822:  MOVLB  6
04824:  BTFSC  xC8.2
04826:  MOVLW  01
04828:  MOVLB  7
0482A:  IORWF  x3F,W
0482C:  ANDWF  x3C,W
0482E:  IORWF  x3B,W
04830:  BCF    x3A.0
04832:  BTFSC  FE8.0
04834:  BSF    x3A.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
04836:  MOVLW  00
04838:  BTFSC  x3A.0
0483A:  MOVLW  01
0483C:  MOVWF  x3B
0483E:  MOVLW  00
04840:  MOVLB  6
04842:  BTFSC  xCB.3
04844:  MOVLW  01
04846:  MOVLB  7
04848:  MOVWF  x3D
0484A:  MOVLW  00
0484C:  MOVLB  6
0484E:  BTFSC  xCC.3
04850:  MOVLW  01
04852:  MOVLB  7
04854:  IORWF  x3D,W
04856:  MOVWF  x3C
04858:  MOVLW  00
0485A:  MOVLB  6
0485C:  BTFSS  xCA.3
0485E:  MOVLW  01
04860:  MOVLB  7
04862:  ANDWF  x3C,F
04864:  MOVLW  00
04866:  MOVLB  6
04868:  BTFSS  xC7.3
0486A:  MOVLW  01
0486C:  MOVLB  7
0486E:  MOVWF  x3F
04870:  MOVLW  00
04872:  MOVLB  6
04874:  BTFSC  xC8.3
04876:  MOVLW  01
04878:  MOVLB  7
0487A:  IORWF  x3F,W
0487C:  ANDWF  x3C,W
0487E:  IORWF  x3B,W
04880:  BCF    x3A.0
04882:  BTFSC  FE8.0
04884:  BSF    x3A.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
04886:  MOVLW  00
04888:  BTFSC  x3A.0
0488A:  MOVLW  01
0488C:  MOVWF  x3B
0488E:  MOVLW  00
04890:  MOVLB  6
04892:  BTFSC  xCB.4
04894:  MOVLW  01
04896:  MOVLB  7
04898:  MOVWF  x3D
0489A:  MOVLW  00
0489C:  MOVLB  6
0489E:  BTFSC  xCC.4
048A0:  MOVLW  01
048A2:  MOVLB  7
048A4:  IORWF  x3D,W
048A6:  MOVWF  x3C
048A8:  MOVLW  00
048AA:  MOVLB  6
048AC:  BTFSS  xCA.4
048AE:  MOVLW  01
048B0:  MOVLB  7
048B2:  ANDWF  x3C,F
048B4:  MOVLW  00
048B6:  MOVLB  6
048B8:  BTFSS  xC7.4
048BA:  MOVLW  01
048BC:  MOVLB  7
048BE:  MOVWF  x3F
048C0:  MOVLW  00
048C2:  MOVLB  6
048C4:  BTFSC  xC8.4
048C6:  MOVLW  01
048C8:  MOVLB  7
048CA:  IORWF  x3F,W
048CC:  ANDWF  x3C,W
048CE:  IORWF  x3B,W
048D0:  BCF    x3A.0
048D2:  BTFSC  FE8.0
048D4:  BSF    x3A.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
048D6:  MOVLW  00
048D8:  BTFSC  x3A.0
048DA:  MOVLW  01
048DC:  MOVWF  x3B
048DE:  MOVLW  00
048E0:  MOVLB  6
048E2:  BTFSC  xCB.5
048E4:  MOVLW  01
048E6:  MOVLB  7
048E8:  MOVWF  x3D
048EA:  MOVLW  00
048EC:  MOVLB  6
048EE:  BTFSC  xCC.5
048F0:  MOVLW  01
048F2:  MOVLB  7
048F4:  IORWF  x3D,W
048F6:  MOVWF  x3C
048F8:  MOVLW  00
048FA:  MOVLB  6
048FC:  BTFSS  xCA.5
048FE:  MOVLW  01
04900:  MOVLB  7
04902:  ANDWF  x3C,F
04904:  MOVLW  00
04906:  MOVLB  6
04908:  BTFSS  xC7.5
0490A:  MOVLW  01
0490C:  MOVLB  7
0490E:  MOVWF  x3F
04910:  MOVLW  00
04912:  MOVLB  6
04914:  BTFSC  xC8.5
04916:  MOVLW  01
04918:  MOVLB  7
0491A:  IORWF  x3F,W
0491C:  ANDWF  x3C,W
0491E:  IORWF  x3B,W
04920:  BCF    x3A.0
04922:  BTFSC  FE8.0
04924:  BSF    x3A.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
04926:  MOVLW  00
04928:  BTFSC  x3A.0
0492A:  MOVLW  01
0492C:  MOVWF  x3B
0492E:  MOVLW  00
04930:  MOVLB  6
04932:  BTFSC  xCB.6
04934:  MOVLW  01
04936:  MOVLB  7
04938:  MOVWF  x3D
0493A:  MOVLW  00
0493C:  MOVLB  6
0493E:  BTFSC  xCC.6
04940:  MOVLW  01
04942:  MOVLB  7
04944:  IORWF  x3D,W
04946:  MOVWF  x3C
04948:  MOVLW  00
0494A:  MOVLB  6
0494C:  BTFSS  xCA.6
0494E:  MOVLW  01
04950:  MOVLB  7
04952:  ANDWF  x3C,F
04954:  MOVLW  00
04956:  MOVLB  6
04958:  BTFSS  xC7.6
0495A:  MOVLW  01
0495C:  MOVLB  7
0495E:  MOVWF  x3F
04960:  MOVLW  00
04962:  MOVLB  6
04964:  BTFSC  xC8.6
04966:  MOVLW  01
04968:  MOVLB  7
0496A:  IORWF  x3F,W
0496C:  ANDWF  x3C,W
0496E:  IORWF  x3B,W
04970:  BCF    x3A.0
04972:  BTFSC  FE8.0
04974:  BSF    x3A.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
04976:  MOVLW  00
04978:  BTFSC  x3A.0
0497A:  MOVLW  01
0497C:  MOVWF  x3B
0497E:  MOVLW  00
04980:  MOVLB  6
04982:  BTFSC  xCB.7
04984:  MOVLW  01
04986:  MOVLB  7
04988:  MOVWF  x3D
0498A:  MOVLW  00
0498C:  MOVLB  6
0498E:  BTFSC  xCC.7
04990:  MOVLW  01
04992:  MOVLB  7
04994:  IORWF  x3D,W
04996:  MOVWF  x3C
04998:  MOVLW  00
0499A:  MOVLB  6
0499C:  BTFSS  xCA.7
0499E:  MOVLW  01
049A0:  MOVLB  7
049A2:  ANDWF  x3C,F
049A4:  MOVLW  00
049A6:  MOVLB  6
049A8:  BTFSS  xC7.7
049AA:  MOVLW  01
049AC:  MOVLB  7
049AE:  MOVWF  x3F
049B0:  MOVLW  00
049B2:  MOVLB  6
049B4:  BTFSC  xC8.7
049B6:  MOVLW  01
049B8:  MOVLB  7
049BA:  IORWF  x3F,W
049BC:  ANDWF  x3C,W
049BE:  IORWF  x3B,W
049C0:  BCF    x3A.0
049C2:  BTFSC  FE8.0
049C4:  BSF    x3A.0
.................... 
.................... 
....................    }
....................    return(check);
049C6:  MOVLW  00
049C8:  BTFSC  x3A.0
049CA:  MOVLW  01
049CC:  MOVWF  01
049CE:  MOVLB  0
049D0:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
06586:  CLRF   FF8
06588:  BCF    FD0.7
0658A:  BSF    07.7
0658C:  MOVLW  70
0658E:  MOVWF  FD3
06590:  BCF    F9B.6
06592:  BCF    F9B.7
06594:  BSF    FB8.3
06596:  MOVLW  A0
06598:  MOVWF  FAF
0659A:  MOVLW  01
0659C:  MOVWF  FB0
0659E:  MOVLW  A6
065A0:  MOVWF  FAC
065A2:  MOVLW  90
065A4:  MOVWF  FAB
065A6:  BCF    F93.0
065A8:  BSF    F8A.0
065AA:  CLRF   19
065AC:  BCF    1A.0
065AE:  MOVLW  19
065B0:  MOVWF  1B
065B2:  BCF    1A.1
065B4:  MOVLW  64
065B6:  MOVWF  1C
065B8:  CLRF   1D
065BA:  BCF    1A.2
065BC:  BCF    1A.3
065BE:  BCF    1A.4
065C0:  CLRF   2E
065C2:  BCF    1A.5
065C4:  CLRF   2F
065C6:  BCF    1A.6
065C8:  BCF    1A.7
065CA:  BCF    30.0
065CC:  BCF    30.1
065CE:  BCF    30.2
065D0:  BCF    30.3
065D2:  CLRF   31
065D4:  BCF    30.4
065D6:  MOVLW  11
065D8:  MOVWF  x6F
065DA:  MOVLW  12
065DC:  MOVWF  x70
065DE:  MOVLW  13
065E0:  MOVWF  x71
065E2:  MOVLW  14
065E4:  MOVWF  x72
065E6:  MOVLW  16
065E8:  MOVWF  x73
065EA:  MOVLW  17
065EC:  MOVWF  x74
065EE:  MOVLW  19
065F0:  MOVWF  x75
065F2:  MOVLW  20
065F4:  MOVWF  x76
065F6:  BCF    30.5
065F8:  CLRF   x79
065FA:  MOVLW  01
065FC:  MOVLB  4
065FE:  MOVWF  xFD
06600:  MOVLW  F4
06602:  MOVWF  xFC
06604:  CLRF   xFF
06606:  CLRF   xFE
06608:  MOVLB  5
0660A:  CLRF   x01
0660C:  CLRF   x00
0660E:  CLRF   x02
06610:  CLRF   x6A
06612:  CLRF   x6B
06614:  MOVLB  7
06616:  CLRF   x2D
06618:  CLRF   x2C
0661A:  MOVLB  F
0661C:  CLRF   x38
0661E:  CLRF   x39
06620:  CLRF   x3A
06622:  CLRF   F77
06624:  CLRF   F78
06626:  CLRF   F79
06628:  MOVLB  7
0662A:  CLRF   x2E
.................... {
....................    
....................    
....................    delay_ms(50);
0662C:  MOVLW  32
0662E:  MOVWF  x3A
06630:  MOVLB  0
06632:  CALL   0750
....................    output_bit(Pled,0);   //power on watchdog signal
06636:  BCF    F8A.5
06638:  BCF    F93.5
.................... 
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD);
0663A:  MOVF   FC1,W
0663C:  ANDLW  F0
0663E:  MOVWF  FC1
06640:  MOVLW  00
06642:  MOVLB  F
06644:  MOVWF  x38
06646:  MOVWF  x39
06648:  MOVWF  x3A
....................    setup_adc(ADC_OFF|ADC_TAD_MUL_0);
0664A:  BCF    FC2.0
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
0664C:  MOVLW  80
0664E:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
06650:  MOVLW  78
06652:  IORLW  06
06654:  MOVWF  FBA
06656:  MOVLW  C4
06658:  MOVWF  FBB
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................    enable_interrupts(INT_TIMER2);
0665A:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
0665C:  BSF    F9D.5
....................      
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1
0665E:  BCF    FC6.5
06660:  BCF    F94.5
06662:  BSF    F94.4
06664:  BCF    F94.3
06666:  MOVLW  20
06668:  MOVWF  FC6
0666A:  MOVLW  40
0666C:  MOVWF  FC7
.................... 
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
0666E:  MOVLB  0
06670:  GOTO   07B2
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
06674:  MOVLB  7
06676:  CLRF   x31
06678:  SETF   x32
0667A:  MOVLB  0
0667C:  CALL   0848
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
06680:  MOVLB  7
06682:  CLRF   x31
06684:  SETF   x32
06686:  MOVLB  0
06688:  CALL   085A
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
0668C:  MOVLW  02
0668E:  MOVLB  7
06690:  MOVWF  x31
06692:  SETF   x32
06694:  MOVLB  0
06696:  CALL   0848
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt 
0669A:  MOVLW  02
0669C:  MOVLB  7
0669E:  MOVWF  x31
066A0:  SETF   x32
066A2:  MOVLB  0
066A4:  CALL   085A
....................    
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
066A8:  MOVLB  7
066AA:  CLRF   x3B
066AC:  MOVLW  06
066AE:  MOVWF  x3C
066B0:  SETF   x3D
066B2:  MOVLB  0
066B4:  CALL   0780
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
066B8:  MOVLB  7
066BA:  CLRF   x3B
066BC:  MOVLW  16
066BE:  MOVWF  x3C
066C0:  SETF   x3D
066C2:  MOVLB  0
066C4:  CALL   0780
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
066C8:  MOVLW  02
066CA:  MOVLB  7
066CC:  MOVWF  x3B
066CE:  MOVLW  06
066D0:  MOVWF  x3C
066D2:  SETF   x3D
066D4:  MOVLB  0
066D6:  CALL   0780
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
066DA:  MOVLW  02
066DC:  MOVLB  7
066DE:  MOVWF  x3B
066E0:  MOVLW  16
066E2:  MOVWF  x3C
066E4:  SETF   x3D
066E6:  MOVLB  0
066E8:  CALL   0780
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
066EC:  MOVLW  04
066EE:  MOVLB  7
066F0:  MOVWF  x31
066F2:  CLRF   x32
066F4:  MOVLB  0
066F6:  CALL   0848
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
066FA:  MOVLW  04
066FC:  MOVLB  7
066FE:  MOVWF  x31
06700:  CLRF   x32
06702:  MOVLB  0
06704:  CALL   085A
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
06708:  MOVLW  06
0670A:  MOVLB  7
0670C:  MOVWF  x31
0670E:  CLRF   x32
06710:  MOVLB  0
06712:  CALL   0848
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
06716:  MOVLW  06
06718:  MOVLB  7
0671A:  MOVWF  x31
0671C:  CLRF   x32
0671E:  MOVLB  0
06720:  CALL   085A
.................... 
....................    
....................    //FlashingFlag = 1;
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
06724:  MOVFF  6F,77
....................    //Address = 1;
....................    
....................    Output.B1 = 1;
06728:  MOVLB  6
0672A:  BSF    xC4.0
....................    Output.B2 = 1;
0672C:  BSF    xC4.1
....................    Output.B3 = 1;
0672E:  BSF    xC4.2
....................    Output.B4 = 1;
06730:  BSF    xC4.3
....................    Output.B5 = 1;
06732:  BSF    xC4.4
....................    Output.B6 = 1;
06734:  BSF    xC4.5
....................    Output.B7 = 1;
06736:  BSF    xC4.6
....................    Output.B8 = 1;
06738:  BSF    xC4.7
.................... 
....................    
....................    ////////////////////
....................    In.B1 = 0;
0673A:  BCF    xCB.0
....................    In.B2 = 0;
0673C:  BCF    xCB.1
....................    In.B3 = 0;
0673E:  BCF    xCB.2
....................    In.B4 = 0;
06740:  BCF    xCB.3
....................    In.B5 = 0;
06742:  BCF    xCB.4
....................    In.B6 = 0;
06744:  BCF    xCB.5
....................    In.B7 = 0;
06746:  BCF    xCB.6
....................    In.B8 = 0;
06748:  BCF    xCB.7
.................... 
....................    
....................    ////////////////////
....................    In2.B1 = 0;
0674A:  BCF    xCC.0
....................    In2.B2 = 0;
0674C:  BCF    xCC.1
....................    In2.B3 = 0;
0674E:  BCF    xCC.2
....................    In2.B4 = 0;
06750:  BCF    xCC.3
....................    In2.B5 = 0;
06752:  BCF    xCC.4
....................    In2.B6 = 0;
06754:  BCF    xCC.5
....................    In2.B7 = 0;
06756:  BCF    xCC.6
....................    In2.B8 = 0;  
06758:  BCF    xCC.7
....................    ////////////////////////
....................    Ack.B1 = 0;
0675A:  BCF    xCA.0
....................    Ack.B2 = 0;
0675C:  BCF    xCA.1
....................    Ack.B3 = 0;
0675E:  BCF    xCA.2
....................    Ack.B4 = 0;
06760:  BCF    xCA.3
....................    Ack.B5 = 0;
06762:  BCF    xCA.4
....................    Ack.B6 = 0;
06764:  BCF    xCA.5
....................    Ack.B7 = 0;
06766:  BCF    xCA.6
....................    Ack.B8 = 0;
06768:  BCF    xCA.7
....................    
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0xF0)
0676A:  MOVFF  FF2,731
0676E:  BCF    FF2.7
06770:  CLRF   FAA
06772:  CLRF   FA9
06774:  BCF    FA6.6
06776:  BCF    FA6.7
06778:  BSF    FA6.0
0677A:  MOVF   FA8,W
0677C:  MOVLB  7
0677E:  BTFSC  x31.7
06780:  BSF    FF2.7
06782:  SUBLW  F0
06784:  BNZ   6790
....................    {
....................       Read_Config();
06786:  MOVLB  0
06788:  CALL   086E
....................    }
0678C:  BRA    694C
0678E:  MOVLB  7
....................    else
....................    {
....................       FlashingRateTime = 25;
06790:  MOVLW  19
06792:  MOVWF  1B
....................       FlashingRate = 25;
06794:  MOVLB  0
06796:  MOVWF  x6C
....................       AutoAck = 0xF0; //not use auto ack
06798:  MOVLW  F0
0679A:  MOVWF  x6A
....................       Address = 0x01;
0679C:  MOVLW  01
0679E:  MOVWF  x78
.................... 
....................       AutoAckTime = 5;
067A0:  MOVLW  05
067A2:  MOVWF  x6B
....................       
....................       NoOfPoint = 8;
067A4:  MOVLW  08
067A6:  MOVWF  x6D
....................       //FlashingRateTime = 0x00;
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
067A8:  MOVLB  7
067AA:  CLRF   x2F
067AC:  MOVF   x2F,W
067AE:  MOVLB  0
067B0:  SUBWF  x6D,W
067B2:  BNC   67CC
....................       {
....................          FaultDelayTime[i] = 0;
067B4:  BCF    FD8.0
067B6:  MOVLB  7
067B8:  RLCF   x2F,W
067BA:  MOVWF  FE9
067BC:  MOVLW  07
067BE:  MOVWF  FEA
067C0:  CLRF   FEC
067C2:  MOVF   FED,F
067C4:  CLRF   FEF
067C6:  INCF   x2F,F
067C8:  BRA    67AC
067CA:  MOVLB  0
....................       }
.................... 
....................       InputType.B1 = 1;
067CC:  MOVLB  6
067CE:  BSF    xC5.0
....................       InputType.B2 = 1;
067D0:  BSF    xC5.1
....................       InputType.B3 = 1;
067D2:  BSF    xC5.2
....................       InputType.B4 = 1;
067D4:  BSF    xC5.3
....................       InputType.B5 = 1;
067D6:  BSF    xC5.4
....................       InputType.B6 = 1;
067D8:  BSF    xC5.5
....................       InputType.B7 = 1;
067DA:  BSF    xC5.6
....................       InputType.B8 = 1;
067DC:  BSF    xC5.7
....................       
....................       FaultNCNO[1] = 1;
067DE:  MOVLB  7
067E0:  BSF    x29.1
....................       FaultNCNO[2] = 1;
067E2:  BSF    x29.2
....................       FaultNCNO[3] = 1;
067E4:  BSF    x29.3
....................       FaultNCNO[4] = 1;
067E6:  BSF    x29.4
....................       FaultNCNO[5] = 1;
067E8:  BSF    x29.5
....................       FaultNCNO[6] = 1;
067EA:  BSF    x29.6
....................       FaultNCNO[7] = 1;
067EC:  BSF    x29.7
....................       FaultNCNO[8] = 1;
067EE:  BSF    x2A.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
067F0:  MOVLB  6
067F2:  BSF    xC6.0
....................       FaultType.B2= 1;
067F4:  BSF    xC6.1
....................       FaultType.B3 = 1;
067F6:  BSF    xC6.2
....................       FaultType.B4 = 1;
067F8:  BSF    xC6.3
....................       FaultType.B5 = 1;
067FA:  BSF    xC6.4
....................       FaultType.B6 = 1;
067FC:  BSF    xC6.5
....................       FaultType.B7 = 1;
067FE:  BSF    xC6.6
....................       FaultType.B8 = 1;
06800:  BSF    xC6.7
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
06802:  BSF    xC7.0
....................       OutputType.B2 = 1;
06804:  BSF    xC7.1
....................       OutputType.B3 = 1;
06806:  BSF    xC7.2
....................       OutputType.B4 = 1;
06808:  BSF    xC7.3
....................       OutputType.B5 = 1;
0680A:  BSF    xC7.4
....................       OutputType.B6 = 1;
0680C:  BSF    xC7.5
....................       OutputType.B7 = 1;
0680E:  BSF    xC7.6
....................       OutputType.B8 = 1;
06810:  BSF    xC7.7
.................... 
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
06812:  BSF    xC8.0
....................       OutputBoth.B2 = 1;
06814:  BSF    xC8.1
....................       OutputBoth.B3 = 1;
06816:  BSF    xC8.2
....................       OutputBoth.B4 = 1;
06818:  BSF    xC8.3
....................       OutputBoth.B5 = 1;
0681A:  BSF    xC8.4
....................       OutputBoth.B6 = 1;
0681C:  BSF    xC8.5
....................       OutputBoth.B7 = 1;
0681E:  BSF    xC8.6
....................       OutputBoth.B8 = 1;
06820:  BSF    xC8.7
.................... 
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
06822:  BSF    xC9.0
....................       AlarmIndicator.B2 = 1;
06824:  BSF    xC9.1
....................       AlarmIndicator.B3 = 1;
06826:  BSF    xC9.2
....................       AlarmIndicator.B4 = 1;
06828:  BSF    xC9.3
....................       AlarmIndicator.B5 = 1;
0682A:  BSF    xC9.4
....................       AlarmIndicator.B6 = 1;
0682C:  BSF    xC9.5
....................       AlarmIndicator.B7 = 1;
0682E:  BSF    xC9.6
....................       AlarmIndicator.B8 = 1;
06830:  BSF    xC9.7
.................... 
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
06832:  MOVFF  FF2,731
06836:  BCF    FF2.7
06838:  CLRF   FAA
0683A:  MOVLW  10
0683C:  MOVWF  FA9
0683E:  BCF    FA6.6
06840:  BCF    FA6.7
06842:  BSF    FA6.0
06844:  MOVF   FA8,W
06846:  MOVLB  7
06848:  BTFSC  x31.7
0684A:  BSF    FF2.7
0684C:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0684E:  MOVLB  6
06850:  BCF    xCF.0
06852:  BTFSC  39.0
06854:  BSF    xCF.0
....................    RED_Colour.B2 = EEpDat >> 1;
06856:  BCF    FD8.0
06858:  RRCF   39,W
0685A:  BCF    xCF.1
0685C:  BTFSC  FE8.0
0685E:  BSF    xCF.1
....................    RED_Colour.B3 = EEpDat >> 2;
06860:  RRCF   39,W
06862:  MOVWF  00
06864:  RRCF   00,F
06866:  MOVLW  3F
06868:  ANDWF  00,F
0686A:  BCF    xCF.2
0686C:  BTFSC  00.0
0686E:  BSF    xCF.2
....................    RED_Colour.B4 = EEpDat >> 3;
06870:  RRCF   39,W
06872:  MOVWF  00
06874:  RRCF   00,F
06876:  RRCF   00,F
06878:  MOVLW  1F
0687A:  ANDWF  00,F
0687C:  BCF    xCF.3
0687E:  BTFSC  00.0
06880:  BSF    xCF.3
....................    RED_Colour.B5 = EEpDat >> 4;
06882:  SWAPF  39,W
06884:  MOVWF  00
06886:  MOVLW  0F
06888:  ANDWF  00,F
0688A:  BCF    xCF.4
0688C:  BTFSC  00.0
0688E:  BSF    xCF.4
....................    RED_Colour.B6 = EEpDat >> 5;
06890:  SWAPF  39,W
06892:  MOVWF  00
06894:  RRCF   00,F
06896:  MOVLW  07
06898:  ANDWF  00,F
0689A:  BCF    xCF.5
0689C:  BTFSC  00.0
0689E:  BSF    xCF.5
....................    RED_Colour.B7 = EEpDat >> 6;
068A0:  SWAPF  39,W
068A2:  MOVWF  00
068A4:  RRCF   00,F
068A6:  RRCF   00,F
068A8:  MOVLW  03
068AA:  ANDWF  00,F
068AC:  BCF    xCF.6
068AE:  BTFSC  00.0
068B0:  BSF    xCF.6
....................    RED_Colour.B8 = EEpDat >> 7;
068B2:  CLRF   00
068B4:  BTFSC  39.7
068B6:  BSF    00.0
068B8:  BCF    xCF.7
068BA:  BTFSC  00.0
068BC:  BSF    xCF.7
....................       
....................    EEpDat = read_eeprom(0x14);
068BE:  MOVFF  FF2,731
068C2:  BCF    FF2.7
068C4:  CLRF   FAA
068C6:  MOVLW  14
068C8:  MOVWF  FA9
068CA:  BCF    FA6.6
068CC:  BCF    FA6.7
068CE:  BSF    FA6.0
068D0:  MOVF   FA8,W
068D2:  MOVLB  7
068D4:  BTFSC  x31.7
068D6:  BSF    FF2.7
068D8:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
068DA:  MOVLB  6
068DC:  BCF    xD0.0
068DE:  BTFSC  39.0
068E0:  BSF    xD0.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
068E2:  BCF    FD8.0
068E4:  RRCF   39,W
068E6:  BCF    xD0.1
068E8:  BTFSC  FE8.0
068EA:  BSF    xD0.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
068EC:  RRCF   39,W
068EE:  MOVWF  00
068F0:  RRCF   00,F
068F2:  MOVLW  3F
068F4:  ANDWF  00,F
068F6:  BCF    xD0.2
068F8:  BTFSC  00.0
068FA:  BSF    xD0.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
068FC:  RRCF   39,W
068FE:  MOVWF  00
06900:  RRCF   00,F
06902:  RRCF   00,F
06904:  MOVLW  1F
06906:  ANDWF  00,F
06908:  BCF    xD0.3
0690A:  BTFSC  00.0
0690C:  BSF    xD0.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
0690E:  SWAPF  39,W
06910:  MOVWF  00
06912:  MOVLW  0F
06914:  ANDWF  00,F
06916:  BCF    xD0.4
06918:  BTFSC  00.0
0691A:  BSF    xD0.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
0691C:  SWAPF  39,W
0691E:  MOVWF  00
06920:  RRCF   00,F
06922:  MOVLW  07
06924:  ANDWF  00,F
06926:  BCF    xD0.5
06928:  BTFSC  00.0
0692A:  BSF    xD0.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
0692C:  SWAPF  39,W
0692E:  MOVWF  00
06930:  RRCF   00,F
06932:  RRCF   00,F
06934:  MOVLW  03
06936:  ANDWF  00,F
06938:  BCF    xD0.6
0693A:  BTFSC  00.0
0693C:  BSF    xD0.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0693E:  CLRF   00
06940:  BTFSC  39.7
06942:  BSF    00.0
06944:  BCF    xD0.7
06946:  BTFSC  00.0
06948:  BSF    xD0.7
0694A:  MOVLB  0
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
0694C:  MOVLW  00
0694E:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
06950:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
06952:  MOVLW  C0
06954:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
06956:  BSF    FD1.0
....................    Read_input(); restart_wdt();
06958:  CALL   15C8
0695C:  CLRWDT
....................    output_bit(Pbuzzer,1);  //Clear Buzzer
0695E:  BSF    F89.4
06960:  BCF    F92.4
....................    output_bit(Pbell,1);   //Clear Bell
06962:  BSF    F89.3
06964:  BCF    F92.3
....................    output_bit(P485ctrl,0);
06966:  BCF    F8A.3
06968:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,0); //jj
0696A:  BCF    F8A.4
0696C:  BCF    F93.4
....................    Send_Ouput();
0696E:  CALL   1CE0
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
06972:  MOVLW  04
06974:  MOVLB  7
06976:  MOVWF  x39
06978:  SETF   x3A
0697A:  MOVLB  0
0697C:  CALL   1CB4
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
06980:  MOVLW  04
06982:  MOVLB  7
06984:  MOVWF  x39
06986:  SETF   x3A
06988:  MOVLB  0
0698A:  CALL   1CCA
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
0698E:  MOVLW  06
06990:  MOVLB  7
06992:  MOVWF  x39
06994:  SETF   x3A
06996:  MOVLB  0
06998:  CALL   1CB4
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0699C:  MOVLW  06
0699E:  MOVLB  7
069A0:  MOVWF  x39
069A2:  SETF   x3A
069A4:  MOVLB  0
069A6:  CALL   1CCA
....................    restart_wdt();
069AA:  CLRWDT
....................    delay_ms(100);
069AC:  MOVLW  64
069AE:  MOVLB  7
069B0:  MOVWF  x3A
069B2:  MOVLB  0
069B4:  CALL   0750
.................... /*
....................    char loop;
....................    for(loop=0;loop<=5;loop++)
....................    {
....................       
....................       IO_OUTPUT_A(IO_DEVICE_2, 0);
....................       IO_OUTPUT_B(IO_DEVICE_2, 0);
....................                 
....................       IO_OUTPUT_A(IO_DEVICE_3, 0);
....................       IO_OUTPUT_B(IO_DEVICE_3, 0);
....................       delay(250);
....................       IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
....................       IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
....................                 
....................       IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
....................       IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
....................   
....................    }
.................... */
.................... 
....................    // jj
.................... /*
....................    char i;
....................    for(i=1;i<=8;i++)
....................    {
....................       FaultAgo[i] = 0;
....................       FaultNow[i] = 0;
....................       ReleaseTime[i] = 0;
....................       if(FaultNCNO[i] ==NO)
....................       {
....................          switch(i)
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
....................             break;
....................             case 2:
....................                Inputt.B2 = 1; 
....................             break;
....................             case 3:
....................                Inputt.B3 = 1; 
....................             break;
....................             case 4:
....................                Inputt.B4 = 1; 
....................             break;
....................             case 5:
....................                Inputt.B5 = 1; 
....................             break;
....................             case 6:
....................                Inputt.B6 = 1; 
....................             break;
....................             case 7:
....................                Inputt.B7 = 1; 
....................              break;
....................              case 8:
....................                Inputt.B8 = 1; 
....................             break;
....................          
....................          }                 
....................       }
....................       else
....................       {
....................          switch(i)
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
....................             break;
....................             case 2:
....................                Inputt.B2 = 0; 
....................             break;
....................             case 3:
....................                Inputt.B3 = 0; 
....................             break;
....................             case 4:
....................                Inputt.B4 = 0; 
....................             break;
....................             case 5:
....................                Inputt.B5 = 0; 
....................             break;
....................             case 6:
....................                Inputt.B6 = 0; 
....................             break;
....................             case 7:
....................                Inputt.B7 = 0; 
....................              break;
....................              case 8:
....................                Inputt.B8 = 0; 
....................             break;
....................       
....................          }                 
....................       }
....................    }
....................    */
....................    
....................    //GSM SIM900 Init
....................    delay_ms(1000);
069B8:  MOVLW  04
069BA:  MOVLB  7
069BC:  MOVWF  x31
069BE:  MOVLW  FA
069C0:  MOVWF  x3A
069C2:  MOVLB  0
069C4:  CALL   0750
069C8:  MOVLB  7
069CA:  DECFSZ x31,F
069CC:  BRA    69BE
....................    fprintf(CH2,"AT+CMGF=1"); 
069CE:  MOVLW  46
069D0:  MOVWF  FF6
069D2:  MOVLW  07
069D4:  MOVWF  FF7
069D6:  MOVLB  0
069D8:  CALL   1F00
....................    putc('\n',CH2);
069DC:  MOVLW  0A
069DE:  MOVLB  7
069E0:  MOVWF  x3B
069E2:  MOVLB  0
069E4:  CALL   1EBA
....................    delay_ms(50);
069E8:  MOVLW  32
069EA:  MOVLB  7
069EC:  MOVWF  x3A
069EE:  MOVLB  0
069F0:  CALL   0750
....................    
....................    SendSMS.B1 =0;
069F4:  MOVLB  6
069F6:  BCF    xD1.0
....................    SendSMS.B2 =0;
069F8:  BCF    xD1.1
....................    SendSMS.B3 =0;
069FA:  BCF    xD1.2
....................    SendSMS.B4 =0;
069FC:  BCF    xD1.3
....................    SendSMS.B5 =0;
069FE:  BCF    xD1.4
....................    SendSMS.B6 =0;
06A00:  BCF    xD1.5
....................    SendSMS.B7 =0;
06A02:  BCF    xD1.6
....................    SendSMS.B8 =0;
06A04:  BCF    xD1.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
06A06:  MOVLB  7
06A08:  CLRF   x30
06A0A:  MOVF   x30,W
06A0C:  SUBLW  09
06A0E:  BNC   6A42
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
06A10:  CLRF   03
06A12:  MOVF   x30,W
06A14:  ADDLW  6C
06A16:  MOVWF  FE9
06A18:  MOVLW  05
06A1A:  ADDWFC 03,W
06A1C:  MOVWF  FEA
06A1E:  MOVLW  32
06A20:  ADDWF  x30,W
06A22:  MOVWF  x33
06A24:  MOVFF  FF2,734
06A28:  BCF    FF2.7
06A2A:  CLRF   FAA
06A2C:  MOVFF  733,FA9
06A30:  BCF    FA6.6
06A32:  BCF    FA6.7
06A34:  BSF    FA6.0
06A36:  MOVF   FA8,W
06A38:  BTFSC  x34.7
06A3A:  BSF    FF2.7
06A3C:  MOVWF  FEF
06A3E:  INCF   x30,F
06A40:  BRA    6A0A
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
06A42:  CLRF   03
06A44:  MOVF   x30,W
06A46:  ADDLW  6C
06A48:  MOVWF  FE9
06A4A:  MOVLW  05
06A4C:  ADDWFC 03,W
06A4E:  MOVWF  FEA
06A50:  CLRF   FEF
.................... 
....................    delay_ms(500);
06A52:  MOVLW  02
06A54:  MOVWF  x31
06A56:  MOVLW  FA
06A58:  MOVWF  x3A
06A5A:  MOVLB  0
06A5C:  CALL   0750
06A60:  MOVLB  7
06A62:  DECFSZ x31,F
06A64:  BRA    6A56
....................    while(TRUE)
....................    {
.................... 
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
06A66:  CLRF   x39
06A68:  SETF   x3A
06A6A:  MOVLB  0
06A6C:  CALL   1CB4
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
06A70:  MOVLB  7
06A72:  CLRF   x39
06A74:  SETF   x3A
06A76:  MOVLB  0
06A78:  CALL   1CCA
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
06A7C:  MOVLW  02
06A7E:  MOVLB  7
06A80:  MOVWF  x39
06A82:  SETF   x3A
06A84:  MOVLB  0
06A86:  CALL   1CB4
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
06A8A:  MOVLW  02
06A8C:  MOVLB  7
06A8E:  MOVWF  x39
06A90:  SETF   x3A
06A92:  MOVLB  0
06A94:  CALL   1CCA
....................       
....................       restart_wdt();
06A98:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
06A9A:  BTFSS  30.5
06A9C:  BRA    6AA4
....................       {
....................          Modbus_Function();
06A9E:  GOTO   238E
....................          recieve_completed = 0 ;
06AA2:  BCF    30.5
....................       }
....................   
....................       check_ack();
06AA4:  CALL   2128
....................       check_reset();
06AA8:  CALL   220C
....................       check_test();
06AAC:  BRA    64C0
....................       
....................       restart_wdt();
06AAE:  CLRWDT
.................... 
....................       Read_input(); restart_wdt(); //must be first
06AB0:  CALL   15C8
06AB4:  CLRWDT
....................       Anal_Function(); restart_wdt();
06AB6:  CALL   49D2
06ABA:  CLRWDT
....................       Send_Ouput(); restart_wdt();
06ABC:  CALL   1CE0
06AC0:  CLRWDT
....................       //Driver595(); restart_wdt();
....................       
....................       output_toggle(PIN_A0);
06AC2:  BCF    F92.0
06AC4:  BTG    F89.0
....................       
....................       if(RefreshConfigData)
06AC6:  BTFSS  30.4
06AC8:  BRA    6B80
....................       {
....................          RefreshConfigData =0;
06ACA:  BCF    30.4
....................          Read_Config();
06ACC:  CALL   086E
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
06AD0:  MOVLB  7
06AD2:  CLRF   x31
06AD4:  SETF   x32
06AD6:  MOVLB  0
06AD8:  CALL   0848
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
06ADC:  MOVLB  7
06ADE:  CLRF   x31
06AE0:  SETF   x32
06AE2:  MOVLB  0
06AE4:  CALL   085A
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
06AE8:  MOVLW  02
06AEA:  MOVLB  7
06AEC:  MOVWF  x31
06AEE:  SETF   x32
06AF0:  MOVLB  0
06AF2:  CALL   0848
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt 
06AF6:  MOVLW  02
06AF8:  MOVLB  7
06AFA:  MOVWF  x31
06AFC:  SETF   x32
06AFE:  MOVLB  0
06B00:  CALL   085A
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
06B04:  MOVLB  7
06B06:  CLRF   x3B
06B08:  MOVLW  06
06B0A:  MOVWF  x3C
06B0C:  SETF   x3D
06B0E:  MOVLB  0
06B10:  CALL   0780
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
06B14:  MOVLB  7
06B16:  CLRF   x3B
06B18:  MOVLW  16
06B1A:  MOVWF  x3C
06B1C:  SETF   x3D
06B1E:  MOVLB  0
06B20:  CALL   0780
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
06B24:  MOVLW  02
06B26:  MOVLB  7
06B28:  MOVWF  x3B
06B2A:  MOVLW  06
06B2C:  MOVWF  x3C
06B2E:  SETF   x3D
06B30:  MOVLB  0
06B32:  CALL   0780
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
06B36:  MOVLW  02
06B38:  MOVLB  7
06B3A:  MOVWF  x3B
06B3C:  MOVLW  16
06B3E:  MOVWF  x3C
06B40:  SETF   x3D
06B42:  MOVLB  0
06B44:  CALL   0780
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
06B48:  MOVLW  04
06B4A:  MOVLB  7
06B4C:  MOVWF  x31
06B4E:  CLRF   x32
06B50:  MOVLB  0
06B52:  CALL   0848
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
06B56:  MOVLW  04
06B58:  MOVLB  7
06B5A:  MOVWF  x31
06B5C:  CLRF   x32
06B5E:  MOVLB  0
06B60:  CALL   085A
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
06B64:  MOVLW  06
06B66:  MOVLB  7
06B68:  MOVWF  x31
06B6A:  CLRF   x32
06B6C:  MOVLB  0
06B6E:  CALL   0848
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
06B72:  MOVLW  06
06B74:  MOVLB  7
06B76:  MOVWF  x31
06B78:  CLRF   x32
06B7A:  MOVLB  0
06B7C:  CALL   085A
.................... 
....................       }
06B80:  MOVLB  7
06B82:  BRA    6A66
....................    }
....................    
.................... }
06B84:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
