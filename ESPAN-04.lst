CCS PCH C Compiler, Version 5.091, 5967               11-¡.Â.-21 20:40

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_8 - Delay - SP - SMS\ESPAN-04.lst

               ROM used:   27522 bytes (42%)
                           Largest free fragment is 38010
               RAM used:   1803 (46%) at main() level
                           1820 (47%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   657C
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   059A
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   058A
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... //#include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16\ESPAN-04.h"
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
00632:  DATA 41,54
00634:  DATA 2B,43
00636:  DATA 4D,47
00638:  DATA 46,3D
0063A:  DATA 31,00
0063C:  DATA 41,54
0063E:  DATA 2B,43
00640:  DATA 4D,47
00642:  DATA 53,3D
00644:  DATA 22,00
00646:  DATA 41,54
00648:  DATA 2B,43
0064A:  DATA 4D,47
0064C:  DATA 46,3D
0064E:  DATA 31,00
00650:  DATA 41,54
00652:  DATA 2B,43
00654:  DATA 4D,47
00656:  DATA 53,3D
00658:  DATA 22,00
0065A:  DATA 41,54
0065C:  DATA 2B,43
0065E:  DATA 4D,47
00660:  DATA 46,3D
00662:  DATA 31,00
00664:  DATA 41,54
00666:  DATA 2B,43
00668:  DATA 4D,47
0066A:  DATA 53,3D
0066C:  DATA 22,00
0066E:  DATA 41,54
00670:  DATA 2B,43
00672:  DATA 4D,47
00674:  DATA 46,3D
00676:  DATA 31,00
00678:  DATA 41,54
0067A:  DATA 2B,43
0067C:  DATA 4D,47
0067E:  DATA 53,3D
00680:  DATA 22,00
00682:  DATA 41,54
00684:  DATA 2B,43
00686:  DATA 4D,47
00688:  DATA 46,3D
0068A:  DATA 31,00
0068C:  DATA 41,54
0068E:  DATA 2B,43
00690:  DATA 4D,47
00692:  DATA 53,3D
00694:  DATA 22,00
00696:  DATA 41,54
00698:  DATA 2B,43
0069A:  DATA 4D,47
0069C:  DATA 46,3D
0069E:  DATA 31,00
006A0:  DATA 41,54
006A2:  DATA 2B,43
006A4:  DATA 4D,47
006A6:  DATA 53,3D
006A8:  DATA 22,00
006AA:  DATA 41,54
006AC:  DATA 2B,43
006AE:  DATA 4D,47
006B0:  DATA 46,3D
006B2:  DATA 31,00
006B4:  DATA 41,54
006B6:  DATA 2B,43
006B8:  DATA 4D,47
006BA:  DATA 53,3D
006BC:  DATA 22,00
006BE:  DATA 41,54
006C0:  DATA 2B,43
006C2:  DATA 4D,47
006C4:  DATA 46,3D
006C6:  DATA 31,00
006C8:  DATA 41,54
006CA:  DATA 2B,43
006CC:  DATA 4D,47
006CE:  DATA 53,3D
006D0:  DATA 22,00
006D2:  DATA 41,54
006D4:  DATA 2B,43
006D6:  DATA 4D,47
006D8:  DATA 46,3D
006DA:  DATA 31,00
006DC:  DATA 41,54
006DE:  DATA 2B,43
006E0:  DATA 4D,47
006E2:  DATA 53,3D
006E4:  DATA 22,00
006E6:  DATA 41,54
006E8:  DATA 2B,43
006EA:  DATA 4D,47
006EC:  DATA 46,3D
006EE:  DATA 31,00
006F0:  DATA 41,54
006F2:  DATA 2B,43
006F4:  DATA 4D,47
006F6:  DATA 53,3D
006F8:  DATA 22,00
006FA:  DATA 41,54
006FC:  DATA 2B,43
006FE:  DATA 4D,47
00700:  DATA 46,3D
00702:  DATA 31,00
00704:  DATA 41,54
00706:  DATA 2B,43
00708:  DATA 4D,47
0070A:  DATA 53,3D
0070C:  DATA 22,00
0070E:  DATA 41,54
00710:  DATA 2B,43
00712:  DATA 4D,47
00714:  DATA 46,3D
00716:  DATA 31,00
00718:  DATA 41,54
0071A:  DATA 2B,43
0071C:  DATA 4D,47
0071E:  DATA 53,3D
00720:  DATA 22,00
00722:  DATA 41,54
00724:  DATA 2B,43
00726:  DATA 4D,47
00728:  DATA 46,3D
0072A:  DATA 31,00
0072C:  DATA 41,54
0072E:  DATA 2B,43
00730:  DATA 4D,47
00732:  DATA 53,3D
00734:  DATA 22,00
00736:  DATA 41,54
00738:  DATA 2B,43
0073A:  DATA 4D,47
0073C:  DATA 46,3D
0073E:  DATA 31,00
00740:  DATA 41,54
00742:  DATA 2B,43
00744:  DATA 4D,47
00746:  DATA 53,3D
00748:  DATA 22,00
0074A:  DATA 41,54
0074C:  DATA 2B,43
0074E:  DATA 4D,47
00750:  DATA 46,3D
00752:  DATA 31,00
00754:  DATA 41,54
00756:  DATA 2B,43
00758:  DATA 4D,47
0075A:  DATA 53,3D
0075C:  DATA 22,00
0075E:  DATA 41,54
00760:  DATA 2B,43
00762:  DATA 4D,47
00764:  DATA 46,3D
00766:  DATA 31,00
00768:  DATA 41,54
0076A:  DATA 2B,43
0076C:  DATA 4D,47
0076E:  DATA 53,3D
00770:  DATA 22,00
00772:  DATA 41,54
00774:  DATA 2B,43
00776:  DATA 4D,47
00778:  DATA 53,3D
0077A:  DATA 22,00
0077C:  DATA 41,54
0077E:  DATA 2B,43
00780:  DATA 4D,47
00782:  DATA 53,3D
00784:  DATA 22,00
00786:  DATA 41,54
00788:  DATA 2B,43
0078A:  DATA 4D,47
0078C:  DATA 53,3D
0078E:  DATA 22,00
00790:  DATA 41,54
00792:  DATA 2B,43
00794:  DATA 4D,47
00796:  DATA 53,3D
00798:  DATA 22,00
0079A:  DATA 41,54
0079C:  DATA 2B,43
0079E:  DATA 4D,47
007A0:  DATA 53,3D
007A2:  DATA 22,00
007A4:  DATA 41,54
007A6:  DATA 2B,43
007A8:  DATA 4D,47
007AA:  DATA 53,3D
007AC:  DATA 22,00
007AE:  DATA 41,54
007B0:  DATA 2B,43
007B2:  DATA 4D,47
007B4:  DATA 53,3D
007B6:  DATA 22,00
007B8:  DATA 41,54
007BA:  DATA 2B,43
007BC:  DATA 4D,47
007BE:  DATA 53,3D
007C0:  DATA 22,00
007C2:  DATA 41,54
007C4:  DATA 2B,43
007C6:  DATA 4D,47
007C8:  DATA 46,3D
007CA:  DATA 31,00
*
0154E:  MOVLB  7
01550:  MOVF   x14,W
01552:  ANDLW  07
01554:  MOVWF  00
01556:  RRCF   x14,W
01558:  MOVWF  01
0155A:  RRCF   01,F
0155C:  RRCF   01,F
0155E:  MOVLW  1F
01560:  ANDWF  01,F
01562:  MOVF   01,W
01564:  ADDWF  x15,W
01566:  MOVWF  FE9
01568:  MOVLW  00
0156A:  ADDWFC x16,W
0156C:  MOVWF  FEA
0156E:  MOVFF  FEF,01
01572:  INCF   00,F
01574:  BRA    1578
01576:  RRCF   01,F
01578:  DECFSZ 00,F
0157A:  BRA    1576
0157C:  MOVLW  01
0157E:  ANDWF  01,F
01580:  MOVLB  0
01582:  RETURN 0
01584:  MOVLB  7
01586:  MOVF   x15,W
01588:  MULWF  x17
0158A:  MOVFF  FF3,01
0158E:  MOVFF  FF4,00
01592:  MULWF  x18
01594:  MOVF   FF3,W
01596:  ADDWF  00,F
01598:  MOVF   x16,W
0159A:  MULWF  x17
0159C:  MOVF   FF3,W
0159E:  ADDWFC 00,W
015A0:  MOVWF  02
015A2:  MOVLB  0
015A4:  RETURN 0
015A6:  MOVLB  7
015A8:  MOVF   x14,W
015AA:  ANDLW  07
015AC:  MOVWF  00
015AE:  RRCF   x14,W
015B0:  MOVWF  01
015B2:  RRCF   01,F
015B4:  RRCF   01,F
015B6:  MOVLW  1F
015B8:  ANDWF  01,F
015BA:  MOVF   01,W
015BC:  ADDWF  x16,W
015BE:  MOVWF  FE9
015C0:  MOVLW  00
015C2:  ADDWFC x17,W
015C4:  MOVWF  FEA
015C6:  CLRF   01
015C8:  INCF   01,F
015CA:  INCF   00,F
015CC:  BRA    15D0
015CE:  RLCF   01,F
015D0:  DECFSZ 00,F
015D2:  BRA    15CE
015D4:  MOVF   x15,F
015D6:  BZ    15DE
015D8:  MOVF   01,W
015DA:  IORWF  FEF,F
015DC:  BRA    15E4
015DE:  COMF   01,F
015E0:  MOVF   01,W
015E2:  ANDWF  FEF,F
015E4:  MOVLB  0
015E6:  GOTO   163C (RETURN)
*
01CA4:  ADDWF  FE8,W
01CA6:  CLRF   FF7
01CA8:  RLCF   FF7,F
01CAA:  ADDLW  BF
01CAC:  MOVWF  FF6
01CAE:  MOVLW  1C
01CB0:  ADDWFC FF7,F
01CB2:  TBLRD*-
01CB4:  MOVF   FF5,W
01CB6:  MOVWF  FFA
01CB8:  TBLRD*
01CBA:  MOVF   FF5,W
01CBC:  MOVWF  FF9
01CBE:  DATA 0A,18
01CC0:  DATA 12,18
01CC2:  DATA 1A,18
01CC4:  DATA 22,18
01CC6:  DATA 2A,18
01CC8:  DATA 32,18
01CCA:  DATA 3A,18
01CCC:  DATA 42,18
01CCE:  ADDWF  FE8,W
01CD0:  CLRF   FF7
01CD2:  RLCF   FF7,F
01CD4:  ADDLW  E9
01CD6:  MOVWF  FF6
01CD8:  MOVLW  1C
01CDA:  ADDWFC FF7,F
01CDC:  TBLRD*-
01CDE:  MOVF   FF5,W
01CE0:  MOVWF  FFA
01CE2:  TBLRD*
01CE4:  MOVF   FF5,W
01CE6:  MOVWF  FF9
01CE8:  DATA 2A,19
01CEA:  DATA 32,19
01CEC:  DATA 3A,19
01CEE:  DATA 42,19
01CF0:  DATA 4A,19
01CF2:  DATA 52,19
01CF4:  DATA 5A,19
01CF6:  DATA 62,19
01CF8:  ADDWF  FE8,W
01CFA:  CLRF   FF7
01CFC:  RLCF   FF7,F
01CFE:  ADDLW  13
01D00:  MOVWF  FF6
01D02:  MOVLW  1D
01D04:  ADDWFC FF7,F
01D06:  TBLRD*-
01D08:  MOVF   FF5,W
01D0A:  MOVWF  FFA
01D0C:  TBLRD*
01D0E:  MOVF   FF5,W
01D10:  MOVWF  FF9
01D12:  DATA 7E,1A
01D14:  DATA 86,1A
01D16:  DATA 8E,1A
01D18:  DATA 96,1A
01D1A:  DATA 9E,1A
01D1C:  DATA A6,1A
01D1E:  DATA AE,1A
01D20:  DATA B6,1A
01D22:  ADDWF  FE8,W
01D24:  CLRF   FF7
01D26:  RLCF   FF7,F
01D28:  ADDLW  3D
01D2A:  MOVWF  FF6
01D2C:  MOVLW  1D
01D2E:  ADDWFC FF7,F
01D30:  TBLRD*-
01D32:  MOVF   FF5,W
01D34:  MOVWF  FFA
01D36:  TBLRD*
01D38:  MOVF   FF5,W
01D3A:  MOVWF  FF9
01D3C:  DATA 9C,1B
01D3E:  DATA A4,1B
01D40:  DATA AC,1B
01D42:  DATA B4,1B
01D44:  DATA BC,1B
01D46:  DATA C4,1B
01D48:  DATA CC,1B
01D4A:  DATA D4,1B
*
01F98:  TBLRD*+
01F9A:  MOVF   FF5,F
01F9C:  BZ    1FB6
01F9E:  MOVFF  FF6,70F
01FA2:  MOVFF  FF7,710
01FA6:  MOVFF  FF5,711
01FAA:  RCALL  1F52
01FAC:  MOVFF  70F,FF6
01FB0:  MOVFF  710,FF7
01FB4:  BRA    1F98
01FB6:  RETURN 0
*
0448E:  MOVF   FEF,F
04490:  BZ    44B2
04492:  MOVFF  FEA,710
04496:  MOVFF  FE9,70F
0449A:  MOVFF  FEF,711
0449E:  CALL   1F52
044A2:  MOVFF  710,FEA
044A6:  MOVFF  70F,FE9
044AA:  INCF   FE9,F
044AC:  BTFSC  FD8.2
044AE:  INCF   FEA,F
044B0:  BRA    448E
044B2:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
007CC:  MOVLW  07
007CE:  MOVWF  FEA
007D0:  MOVLW  10
007D2:  MOVWF  FE9
007D4:  MOVF   FEF,W
007D6:  BZ    07FA
007D8:  MOVLW  05
007DA:  MOVWF  01
007DC:  MOVLW  BF
007DE:  MOVWF  00
007E0:  CLRWDT
007E2:  DECFSZ 00,F
007E4:  BRA    07E0
007E6:  DECFSZ 01,F
007E8:  BRA    07DC
007EA:  MOVLW  2E
007EC:  MOVWF  00
007EE:  DECFSZ 00,F
007F0:  BRA    07EE
007F2:  NOP   
007F4:  CLRWDT
007F6:  DECFSZ FEF,F
007F8:  BRA    07D8
007FA:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
0082E:  BCF    F92.5
00830:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
00832:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
00834:  MOVLB  7
00836:  CLRF   x11
00838:  MOVLW  0A
0083A:  MOVWF  x12
0083C:  MOVLW  AA
0083E:  MOVWF  x13
00840:  MOVLB  0
00842:  RCALL  07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
00844:  MOVLW  02
00846:  MOVLB  7
00848:  MOVWF  x11
0084A:  MOVLW  0A
0084C:  MOVWF  x12
0084E:  MOVLW  AA
00850:  MOVWF  x13
00852:  MOVLB  0
00854:  RCALL  07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
00856:  MOVLW  04
00858:  MOVLB  7
0085A:  MOVWF  x11
0085C:  MOVLW  0A
0085E:  MOVWF  x12
00860:  MOVLW  AA
00862:  MOVWF  x13
00864:  MOVLB  0
00866:  RCALL  07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
00868:  MOVLW  06
0086A:  MOVLB  7
0086C:  MOVWF  x11
0086E:  MOVLW  0A
00870:  MOVWF  x12
00872:  MOVLW  AA
00874:  MOVWF  x13
00876:  MOVLB  0
00878:  RCALL  07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
0087A:  MOVLW  08
0087C:  MOVLB  7
0087E:  MOVWF  x11
00880:  MOVLW  0A
00882:  MOVWF  x12
00884:  MOVLW  AA
00886:  MOVWF  x13
00888:  MOVLB  0
0088A:  RCALL  07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
0088C:  MOVLW  0A
0088E:  MOVLB  7
00890:  MOVWF  x11
00892:  MOVWF  x12
00894:  MOVLW  AA
00896:  MOVWF  x13
00898:  MOVLB  0
0089A:  RCALL  07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
0089C:  MOVLW  0C
0089E:  MOVLB  7
008A0:  MOVWF  x11
008A2:  MOVLW  0A
008A4:  MOVWF  x12
008A6:  MOVLW  AA
008A8:  MOVWF  x13
008AA:  MOVLB  0
008AC:  RCALL  07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
008AE:  MOVLW  0E
008B0:  MOVLB  7
008B2:  MOVWF  x11
008B4:  MOVLW  0A
008B6:  MOVWF  x12
008B8:  MOVLW  AA
008BA:  MOVWF  x13
008BC:  MOVLB  0
008BE:  RCALL  07FC
....................    #endif
008C0:  GOTO   6672 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
007FC:  BCF    F92.5
007FE:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
00800:  MOVLB  7
00802:  MOVF   x11,W
00804:  IORLW  40
00806:  MOVWF  x14
00808:  MOVF   FC9,W
0080A:  MOVFF  714,FC9
0080E:  RRCF   FC7,W
00810:  BNC   080E
....................    #endif
....................    
....................    spi_write(reg);
00812:  MOVF   FC9,W
00814:  MOVFF  712,FC9
00818:  RRCF   FC7,W
0081A:  BNC   0818
....................    spi_write(data);
0081C:  MOVF   FC9,W
0081E:  MOVFF  713,FC9
00822:  RRCF   FC7,W
00824:  BNC   0822
....................    
....................    output_high(IO_CS_PIN);
00826:  BCF    F92.5
00828:  BSF    F89.5
0082A:  MOVLB  0
0082C:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
014DA:  BCF    F92.5
014DC:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
014DE:  MOVLB  7
014E0:  MOVF   x13,W
014E2:  IORLW  41
014E4:  MOVWF  x16
014E6:  MOVF   FC9,W
014E8:  MOVFF  716,FC9
014EC:  RRCF   FC7,W
014EE:  BNC   14EC
....................    #endif
....................    
....................    spi_write(reg);
014F0:  MOVF   FC9,W
014F2:  MOVFF  714,FC9
014F6:  RRCF   FC7,W
014F8:  BNC   14F6
....................    retVal = spi_read(0);
014FA:  MOVF   FC9,W
014FC:  CLRF   FC9
014FE:  RRCF   FC7,W
01500:  BNC   14FE
01502:  MOVFF  FC9,715
....................    
....................    output_high(IO_CS_PIN);
01506:  BCF    F92.5
01508:  BSF    F89.5
....................    
....................    return retVal;
0150A:  MOVFF  715,01
0150E:  MOVLB  0
01510:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
01D4C:  MOVFF  70F,711
01D50:  MOVLW  0A
01D52:  MOVLB  7
01D54:  MOVWF  x12
01D56:  MOVFF  710,713
01D5A:  MOVLB  0
01D5C:  CALL   07FC
....................    #endif
01D60:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
01D62:  MOVFF  70F,711
01D66:  MOVLW  1A
01D68:  MOVLB  7
01D6A:  MOVWF  x12
01D6C:  MOVFF  710,713
01D70:  MOVLB  0
01D72:  CALL   07FC
....................    #endif
01D76:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
01512:  MOVFF  711,713
01516:  MOVLW  09
01518:  MOVLB  7
0151A:  MOVWF  x14
0151C:  MOVLB  0
0151E:  RCALL  14DA
01520:  MOVFF  01,712
....................    #endif
....................    
....................    return retVal;
01524:  MOVLB  7
01526:  MOVFF  712,01
0152A:  MOVLB  0
0152C:  GOTO   1652 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
01530:  MOVFF  711,713
01534:  MOVLW  19
01536:  MOVLB  7
01538:  MOVWF  x14
0153A:  MOVLB  0
0153C:  RCALL  14DA
0153E:  MOVFF  01,712
....................    #endif
....................    
....................    return retVal;
01542:  MOVLB  7
01544:  MOVFF  712,01
01548:  MOVLB  0
0154A:  GOTO   16EE (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
008C4:  MOVFF  707,711
008C8:  MOVLB  7
008CA:  CLRF   x12
008CC:  MOVFF  708,713
008D0:  MOVLB  0
008D2:  RCALL  07FC
....................    #endif
008D4:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
008D6:  MOVFF  707,711
008DA:  MOVLW  10
008DC:  MOVLB  7
008DE:  MOVWF  x12
008E0:  MOVFF  708,713
008E4:  MOVLB  0
008E6:  RCALL  07FC
....................    #endif
008E8:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... /*
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... */
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
0200E:  BTFSS  F9E.4
02010:  BRA    200E
02012:  MOVWF  FAD
02014:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
01F52:  BCF    F93.0
01F54:  BCF    F8A.0
01F56:  MOVLW  08
01F58:  MOVWF  01
01F5A:  BRA    1F5C
01F5C:  NOP   
01F5E:  BSF    01.7
01F60:  BRA    1F82
01F62:  BCF    01.7
01F64:  MOVLB  7
01F66:  RRCF   x11,F
01F68:  MOVLB  0
01F6A:  BTFSC  FD8.0
01F6C:  BSF    F8A.0
01F6E:  BTFSS  FD8.0
01F70:  BCF    F8A.0
01F72:  BSF    01.6
01F74:  BRA    1F82
01F76:  BCF    01.6
01F78:  DECFSZ 01,F
01F7A:  BRA    1F64
01F7C:  BRA    1F7E
01F7E:  NOP   
01F80:  BSF    F8A.0
01F82:  MOVLW  84
01F84:  MOVWF  FE9
01F86:  DECFSZ FE9,F
01F88:  BRA    1F86
01F8A:  BRA    1F8C
01F8C:  NOP   
01F8E:  BTFSC  01.7
01F90:  BRA    1F62
01F92:  BTFSC  01.6
01F94:  BRA    1F76
01F96:  RETURN 0
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////second_numofdata = 0x18,
.................... unsigned char const addr_sq = 0x10, end_sq = 0x11, code_sq = 0x12, start_addr_hi_sq = 0x13, start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15, ubyte_lo_sq = 0x16, crc_hi_sq = 0x17,second_numofdata = 0x18, byte_count_sq = 0x19, data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[255];
.................... unsigned char RxD_Buff[512];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[512];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... int16 index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Inputt
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8;
.................... 
.................... };
.................... 
.................... 
.................... struct Bit64 Inputt,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[20];
.................... int1 FaultNow[20];
.................... int16 ReleaseTime[20];
.................... int16 FaultDelayTime[20];
.................... int8  AllFaultDelayTime;
.................... int1 FaultNCNO[20];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
015EA:  MOVLB  7
015EC:  CLRF   x11
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
015EE:  MOVLW  01
015F0:  MOVWF  x11
015F2:  BTFSC  x11.7
015F4:  BRA    15FC
015F6:  MOVF   x11,W
015F8:  SUBLW  10
015FA:  BNC   1642
....................    {
....................       FaultAgo[i] = FaultNow[i];
015FC:  CLRF   03
015FE:  MOVF   x11,W
01600:  MOVWF  00
01602:  BTFSC  FE8.7
01604:  DECF   03,F
01606:  MOVWF  x12
01608:  MOVFF  03,713
0160C:  CLRF   03
0160E:  MOVF   x11,W
01610:  MOVWF  00
01612:  BTFSC  FE8.7
01614:  DECF   03,F
01616:  MOVWF  x14
01618:  MOVLW  06
0161A:  MOVWF  x16
0161C:  MOVLW  AA
0161E:  MOVWF  x15
01620:  MOVLB  0
01622:  RCALL  154E
01624:  MOVFF  712,714
01628:  MOVLB  7
0162A:  CLRF   x15
0162C:  BTFSC  01.0
0162E:  INCF   x15,F
01630:  MOVLW  06
01632:  MOVWF  x17
01634:  MOVLW  A7
01636:  MOVWF  x16
01638:  MOVLB  0
0163A:  BRA    15A6
0163C:  MOVLB  7
0163E:  INCF   x11,F
01640:  BRA    15F2
....................    }
01642:  MOVLB  0
01644:  GOTO   1C06 (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
01FB8:  MOVLB  3
01FBA:  SETF   x7B
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
01FBC:  SETF   x7A
.................... 
....................    for(i = 0;i < usDataLen;i++)
01FBE:  MOVLB  7
01FC0:  CLRF   x15
01FC2:  MOVF   x13,W
01FC4:  SUBWF  x15,W
01FC6:  BC    200A
....................    {
....................       restart_wdt();
01FC8:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
01FCA:  MOVF   x15,W
01FCC:  ADDWF  x11,W
01FCE:  MOVWF  FE9
01FD0:  MOVLW  00
01FD2:  ADDWFC x12,W
01FD4:  MOVWF  FEA
01FD6:  MOVF   FEF,W
01FD8:  MOVLB  3
01FDA:  XORWF  x7B,W
01FDC:  MOVLB  7
01FDE:  MOVWF  x14
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
01FE0:  CLRF   03
01FE2:  MOVF   x14,W
01FE4:  MOVLB  0
01FE6:  CALL   00BA
01FEA:  MOVWF  01
01FEC:  MOVLB  3
01FEE:  MOVF   x7A,W
01FF0:  XORWF  01,W
01FF2:  MOVWF  x7B
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
01FF4:  CLRF   03
01FF6:  MOVLB  7
01FF8:  MOVF   x14,W
01FFA:  MOVLB  0
01FFC:  CALL   01CA
02000:  MOVFF  FE8,37A
02004:  MOVLB  7
02006:  INCF   x15,F
02008:  BRA    1FC2
....................    }
0200A:  MOVLB  0
0200C:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................     
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
02016:  CLRF   1E
....................    
....................    Ack1_8_Send = 0x00;
02018:  CLRF   26
....................   
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
0201A:  MOVLB  6
0201C:  BTFSC  xA0.0
0201E:  BRA    2028
02020:  BTFSC  x99.0
02022:  BRA    2028
....................       AckSend.B1 = 1;
02024:  BSF    xA3.0
02026:  BRA    202A
....................    else
....................       AckSend.B1 = 0;
02028:  BCF    xA3.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
0202A:  BTFSC  xA0.1
0202C:  BRA    2036
0202E:  BTFSC  x99.1
02030:  BRA    2036
....................       AckSend.B2 = 1;
02032:  BSF    xA3.1
02034:  BRA    2038
....................    else
....................       AckSend.B2 = 0;
02036:  BCF    xA3.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
02038:  BTFSC  xA0.2
0203A:  BRA    2044
0203C:  BTFSC  x99.2
0203E:  BRA    2044
....................       AckSend.B3 = 1;
02040:  BSF    xA3.2
02042:  BRA    2046
....................    else
....................       AckSend.B3 = 0;
02044:  BCF    xA3.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
02046:  BTFSC  xA0.3
02048:  BRA    2052
0204A:  BTFSC  x99.3
0204C:  BRA    2052
....................       AckSend.B4 = 1;
0204E:  BSF    xA3.3
02050:  BRA    2054
....................    else
....................       AckSend.B4 = 0;
02052:  BCF    xA3.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
02054:  BTFSC  xA0.4
02056:  BRA    2060
02058:  BTFSC  x99.4
0205A:  BRA    2060
....................       AckSend.B5 = 1;
0205C:  BSF    xA3.4
0205E:  BRA    2062
....................    else
....................       AckSend.B5 = 0;
02060:  BCF    xA3.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
02062:  BTFSC  xA0.5
02064:  BRA    206E
02066:  BTFSC  x99.5
02068:  BRA    206E
....................       AckSend.B6 = 1;
0206A:  BSF    xA3.5
0206C:  BRA    2070
....................    else
....................       AckSend.B6 = 0;
0206E:  BCF    xA3.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
02070:  BTFSC  xA0.6
02072:  BRA    207C
02074:  BTFSC  x99.6
02076:  BRA    207C
....................       AckSend.B7 = 1;
02078:  BSF    xA3.6
0207A:  BRA    207E
....................    else
....................       AckSend.B7 = 0;
0207C:  BCF    xA3.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
0207E:  BTFSC  xA0.7
02080:  BRA    208A
02082:  BTFSC  x99.7
02084:  BRA    208A
....................       AckSend.B8 = 1;
02086:  BSF    xA3.7
02088:  BRA    208C
....................    else
....................       AckSend.B8 = 0;
0208A:  BCF    xA3.7
.................... 
....................    
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
0208C:  MOVLW  00
0208E:  BTFSC  xA3.7
02090:  MOVLW  01
02092:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
02094:  BCF    FD8.0
02096:  RLCF   26,W
02098:  MOVLB  7
0209A:  MOVWF  x11
0209C:  MOVLW  00
0209E:  MOVLB  6
020A0:  BTFSC  xA3.6
020A2:  MOVLW  01
020A4:  MOVLB  7
020A6:  IORWF  x11,W
020A8:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
020AA:  BCF    FD8.0
020AC:  RLCF   26,W
020AE:  MOVWF  x11
020B0:  MOVLW  00
020B2:  MOVLB  6
020B4:  BTFSC  xA3.5
020B6:  MOVLW  01
020B8:  MOVLB  7
020BA:  IORWF  x11,W
020BC:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
020BE:  BCF    FD8.0
020C0:  RLCF   26,W
020C2:  MOVWF  x11
020C4:  MOVLW  00
020C6:  MOVLB  6
020C8:  BTFSC  xA3.4
020CA:  MOVLW  01
020CC:  MOVLB  7
020CE:  IORWF  x11,W
020D0:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
020D2:  BCF    FD8.0
020D4:  RLCF   26,W
020D6:  MOVWF  x11
020D8:  MOVLW  00
020DA:  MOVLB  6
020DC:  BTFSC  xA3.3
020DE:  MOVLW  01
020E0:  MOVLB  7
020E2:  IORWF  x11,W
020E4:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
020E6:  BCF    FD8.0
020E8:  RLCF   26,W
020EA:  MOVWF  x11
020EC:  MOVLW  00
020EE:  MOVLB  6
020F0:  BTFSC  xA3.2
020F2:  MOVLW  01
020F4:  MOVLB  7
020F6:  IORWF  x11,W
020F8:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
020FA:  BCF    FD8.0
020FC:  RLCF   26,W
020FE:  MOVWF  x11
02100:  MOVLW  00
02102:  MOVLB  6
02104:  BTFSC  xA3.1
02106:  MOVLW  01
02108:  MOVLB  7
0210A:  IORWF  x11,W
0210C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
0210E:  BCF    FD8.0
02110:  RLCF   26,W
02112:  MOVWF  x11
02114:  MOVLW  00
02116:  MOVLB  6
02118:  BTFSC  xA3.0
0211A:  MOVLW  01
0211C:  MOVLB  7
0211E:  IORWF  x11,W
02120:  MOVWF  26
....................    
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
02122:  MOVLW  00
02124:  MOVLB  6
02126:  BTFSC  xA0.7
02128:  MOVLW  01
0212A:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
0212C:  BCF    FD8.0
0212E:  RLCF   1E,W
02130:  MOVLB  7
02132:  MOVWF  x11
02134:  MOVLW  00
02136:  MOVLB  6
02138:  BTFSC  xA0.6
0213A:  MOVLW  01
0213C:  MOVLB  7
0213E:  IORWF  x11,W
02140:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
02142:  BCF    FD8.0
02144:  RLCF   1E,W
02146:  MOVWF  x11
02148:  MOVLW  00
0214A:  MOVLB  6
0214C:  BTFSC  xA0.5
0214E:  MOVLW  01
02150:  MOVLB  7
02152:  IORWF  x11,W
02154:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
02156:  BCF    FD8.0
02158:  RLCF   1E,W
0215A:  MOVWF  x11
0215C:  MOVLW  00
0215E:  MOVLB  6
02160:  BTFSC  xA0.4
02162:  MOVLW  01
02164:  MOVLB  7
02166:  IORWF  x11,W
02168:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
0216A:  BCF    FD8.0
0216C:  RLCF   1E,W
0216E:  MOVWF  x11
02170:  MOVLW  00
02172:  MOVLB  6
02174:  BTFSC  xA0.3
02176:  MOVLW  01
02178:  MOVLB  7
0217A:  IORWF  x11,W
0217C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
0217E:  BCF    FD8.0
02180:  RLCF   1E,W
02182:  MOVWF  x11
02184:  MOVLW  00
02186:  MOVLB  6
02188:  BTFSC  xA0.2
0218A:  MOVLW  01
0218C:  MOVLB  7
0218E:  IORWF  x11,W
02190:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
02192:  BCF    FD8.0
02194:  RLCF   1E,W
02196:  MOVWF  x11
02198:  MOVLW  00
0219A:  MOVLB  6
0219C:  BTFSC  xA0.1
0219E:  MOVLW  01
021A0:  MOVLB  7
021A2:  IORWF  x11,W
021A4:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
021A6:  BCF    FD8.0
021A8:  RLCF   1E,W
021AA:  MOVWF  x11
021AC:  MOVLW  00
021AE:  MOVLB  6
021B0:  BTFSC  xA0.0
021B2:  MOVLW  01
021B4:  MOVLB  7
021B6:  IORWF  x11,W
021B8:  MOVWF  1E
021BA:  MOVLB  0
021BC:  GOTO   2B82 (RETURN)
....................      
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... int8 count_bytecount =0;
.................... void checkCommand(void)
.................... {
....................    
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x6F,W
002DE:  SUBWF  x78,W
002E0:  BNZ   030C
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x7A
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  7A
002E6:  ADDWF  x7A,W
002E8:  MOVWF  FE9
002EA:  MOVLW  01
002EC:  MOVWF  FEA
002EE:  BTFSC  FD8.0
002F0:  INCF   FEA,F
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x7A,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x78
....................      count_bytecount =0; // bytecount = 2 Byte //jj10092564
002FE:  MOVLB  7
00300:  CLRF   x01
....................      T_timeout = 0x14; //200ms
00302:  MOVLW  14
00304:  MOVLB  5
00306:  MOVWF  x85
....................    }
00308:  BRA    0584
0030A:  MOVLB  0
....................    else if(sequence == addr_sq)
0030C:  MOVF   x78,W
0030E:  SUBLW  10
00310:  BNZ   03CA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
00312:  MOVLW  7A
00314:  ADDWF  x7A,W
00316:  MOVWF  FE9
00318:  MOVLW  01
0031A:  MOVWF  FEA
0031C:  BTFSC  FD8.0
0031E:  INCF   FEA,F
00320:  MOVFF  2E,FEF
....................       restart_wdt();
00324:  CLRWDT
....................       RxD_DataLen ++ ;
00326:  INCF   x7A,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00328:  MOVLW  01
0032A:  SUBWF  x7A,W
0032C:  ADDLW  7A
0032E:  MOVWF  FE9
00330:  MOVLW  01
00332:  MOVWF  FEA
00334:  BTFSC  FD8.0
00336:  INCF   FEA,F
00338:  MOVF   FEF,W
0033A:  SUBLW  16
0033C:  BNC   034C
....................        {
....................            sequence = code_sq;
0033E:  MOVFF  70,78
....................            T_timeout = 0x14; //200ms
00342:  MOVLW  14
00344:  MOVLB  5
00346:  MOVWF  x85
....................        }
00348:  BRA    03C6
0034A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
0034C:  MOVLW  01
0034E:  SUBWF  x7A,W
00350:  ADDLW  7A
00352:  MOVWF  FE9
00354:  MOVLW  01
00356:  MOVWF  FEA
00358:  BTFSC  FD8.0
0035A:  INCF   FEA,F
0035C:  MOVF   FEF,W
0035E:  SUBLW  20
00360:  BNZ   0370
....................        {
....................           sequence = ubyte_lo_sq;
00362:  MOVFF  73,78
....................           T_timeout = 0x14; //200ms
00366:  MOVLW  14
00368:  MOVLB  5
0036A:  MOVWF  x85
....................        }
0036C:  BRA    03C6
0036E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
00370:  MOVLW  01
00372:  SUBWF  x7A,W
00374:  ADDLW  7A
00376:  MOVWF  FE9
00378:  MOVLW  01
0037A:  MOVWF  FEA
0037C:  BTFSC  FD8.0
0037E:  INCF   FEA,F
00380:  MOVF   FEF,W
00382:  SUBLW  21
00384:  BNZ   0394
....................        {
....................           sequence = byte_count_sq ;
00386:  MOVFF  76,78
....................           T_timeout = 0x14; //200ms
0038A:  MOVLW  14
0038C:  MOVLB  5
0038E:  MOVWF  x85
....................        }
00390:  BRA    03C6
00392:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
00394:  MOVLW  01
00396:  SUBWF  x7A,W
00398:  ADDLW  7A
0039A:  MOVWF  FE9
0039C:  MOVLW  01
0039E:  MOVWF  FEA
003A0:  BTFSC  FD8.0
003A2:  INCF   FEA,F
003A4:  MOVF   FEF,W
003A6:  SUBLW  22
003A8:  BNZ   03B8
....................        {
.................... 
....................           sequence = second_numofdata ;
003AA:  MOVFF  75,78
....................           T_timeout = 0x14; //200ms
003AE:  MOVLW  14
003B0:  MOVLB  5
003B2:  MOVWF  x85
....................        }
003B4:  BRA    03C6
003B6:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003B8:  CLRF   x7A
....................           sequence = end_sq;
003BA:  MOVFF  6F,78
....................           T_timeout = 0x00; 
003BE:  MOVLB  5
003C0:  CLRF   x85
....................           output_bit(P485ctrl,0);
003C2:  BCF    F8A.3
003C4:  BCF    F93.3
....................        }
....................        
....................    }
003C6:  BRA    0584
003C8:  MOVLB  0
....................    ////////////////////////////////
....................    else if(sequence == second_numofdata)
003CA:  MOVF   x75,W
003CC:  SUBWF  x78,W
003CE:  BNZ   03F4
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003D0:  MOVLW  7A
003D2:  ADDWF  x7A,W
003D4:  MOVWF  FE9
003D6:  MOVLW  01
003D8:  MOVWF  FEA
003DA:  BTFSC  FD8.0
003DC:  INCF   FEA,F
003DE:  MOVFF  2E,FEF
....................       restart_wdt();
003E2:  CLRWDT
....................       RxD_DataLen ++ ;
003E4:  INCF   x7A,F
....................       sequence = byte_count_sq;
003E6:  MOVFF  76,78
....................       T_timeout = 0x14; //200ms
003EA:  MOVLW  14
003EC:  MOVLB  5
003EE:  MOVWF  x85
.................... 
....................    }
003F0:  BRA    0584
003F2:  MOVLB  0
....................    ////////////////////////////////
....................    else if(sequence == byte_count_sq)
003F4:  MOVF   x76,W
003F6:  SUBWF  x78,W
003F8:  BNZ   0450
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003FA:  MOVLW  7A
003FC:  ADDWF  x7A,W
003FE:  MOVWF  FE9
00400:  MOVLW  01
00402:  MOVWF  FEA
00404:  BTFSC  FD8.0
00406:  INCF   FEA,F
00408:  MOVFF  2E,FEF
....................       restart_wdt();
0040C:  CLRWDT
....................       RxD_DataLen ++ ;
0040E:  INCF   x7A,F
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
00410:  MOVLB  1
00412:  MOVF   x7B,W
00414:  SUBLW  22
00416:  BNZ   042A
....................       {
....................          index = (RxD_Buff[2] * 0x64) + RxD_Buff[3];
00418:  MOVF   x7C,W
0041A:  MULLW  64
0041C:  MOVF   FF3,W
0041E:  ADDWF  x7D,W
00420:  MOVLB  5
00422:  MOVWF  x86
00424:  CLRF   x87
....................       }
00426:  BRA    0444
00428:  MOVLB  1
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
0042A:  MOVLW  01
0042C:  MOVLB  0
0042E:  SUBWF  x7A,W
00430:  ADDLW  7A
00432:  MOVWF  FE9
00434:  MOVLW  01
00436:  MOVWF  FEA
00438:  BTFSC  FD8.0
0043A:  INCF   FEA,F
0043C:  MOVLB  5
0043E:  CLRF   x87
00440:  MOVFF  FEF,586
....................       }
....................       
....................       T_timeout = 0x14; //200ms
00444:  MOVLW  14
00446:  MOVWF  x85
....................       sequence = data_sq ;
00448:  MOVFF  77,78
....................    }
0044C:  BRA    0584
0044E:  MOVLB  0
....................    else if(sequence == data_sq)
00450:  MOVF   x77,W
00452:  SUBWF  x78,W
00454:  BNZ   048A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00456:  MOVLW  7A
00458:  ADDWF  x7A,W
0045A:  MOVWF  FE9
0045C:  MOVLW  01
0045E:  MOVWF  FEA
00460:  BTFSC  FD8.0
00462:  INCF   FEA,F
00464:  MOVFF  2E,FEF
....................       restart_wdt();
00468:  CLRWDT
....................       RxD_DataLen ++ ;
0046A:  INCF   x7A,F
....................       index -- ;                     //Data Byte Count
0046C:  MOVLB  5
0046E:  MOVF   x86,W
00470:  BTFSC  FD8.2
00472:  DECF   x87,F
00474:  DECF   x86,F
....................       if(index == 0x00)
00476:  MOVF   x86,F
00478:  BNZ   0482
0047A:  MOVF   x87,F
0047C:  BNZ   0482
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0047E:  MOVFF  73,78
....................       }
....................       T_timeout = 0x14; //200ms
00482:  MOVLW  14
00484:  MOVWF  x85
....................    }
00486:  BRA    0584
00488:  MOVLB  0
....................    else if(sequence == code_sq)
0048A:  MOVF   x70,W
0048C:  SUBWF  x78,W
0048E:  BNZ   04B4
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
00490:  MOVLW  7A
00492:  ADDWF  x7A,W
00494:  MOVWF  FE9
00496:  MOVLW  01
00498:  MOVWF  FEA
0049A:  BTFSC  FD8.0
0049C:  INCF   FEA,F
0049E:  MOVFF  2E,FEF
....................       restart_wdt();
004A2:  CLRWDT
....................       RxD_DataLen ++ ;
004A4:  INCF   x7A,F
....................       sequence = start_addr_hi_sq;
004A6:  MOVFF  71,78
....................       T_timeout = 0x14; //200ms
004AA:  MOVLW  14
004AC:  MOVLB  5
004AE:  MOVWF  x85
.................... 
....................    }
004B0:  BRA    0584
004B2:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
004B4:  MOVF   x71,W
004B6:  SUBWF  x78,W
004B8:  BNZ   04DE
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
004BA:  MOVLW  7A
004BC:  ADDWF  x7A,W
004BE:  MOVWF  FE9
004C0:  MOVLW  01
004C2:  MOVWF  FEA
004C4:  BTFSC  FD8.0
004C6:  INCF   FEA,F
004C8:  MOVFF  2E,FEF
....................       restart_wdt();
004CC:  CLRWDT
....................       RxD_DataLen ++ ;
004CE:  INCF   x7A,F
....................       sequence = start_addr_lo_sq;
004D0:  MOVFF  72,78
....................       T_timeout = 0x14; //200ms
004D4:  MOVLW  14
004D6:  MOVLB  5
004D8:  MOVWF  x85
....................    }
004DA:  BRA    0584
004DC:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004DE:  MOVF   x72,W
004E0:  SUBWF  x78,W
004E2:  BNZ   0508
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004E4:  MOVLW  7A
004E6:  ADDWF  x7A,W
004E8:  MOVWF  FE9
004EA:  MOVLW  01
004EC:  MOVWF  FEA
004EE:  BTFSC  FD8.0
004F0:  INCF   FEA,F
004F2:  MOVFF  2E,FEF
....................       restart_wdt();
004F6:  CLRWDT
....................       RxD_DataLen ++ ;
004F8:  INCF   x7A,F
....................       sequence = ubyte_hi_sq;
004FA:  MOVLW  15
004FC:  MOVWF  x78
....................       T_timeout = 0x14; //200ms
004FE:  MOVLW  14
00500:  MOVLB  5
00502:  MOVWF  x85
....................    }
00504:  BRA    0584
00506:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
00508:  MOVF   x78,W
0050A:  SUBLW  15
0050C:  BNZ   0532
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
0050E:  MOVLW  7A
00510:  ADDWF  x7A,W
00512:  MOVWF  FE9
00514:  MOVLW  01
00516:  MOVWF  FEA
00518:  BTFSC  FD8.0
0051A:  INCF   FEA,F
0051C:  MOVFF  2E,FEF
....................       restart_wdt();
00520:  CLRWDT
....................       RxD_DataLen ++ ;
00522:  INCF   x7A,F
....................       sequence = ubyte_lo_sq;
00524:  MOVFF  73,78
....................       T_timeout = 0x14; //200ms
00528:  MOVLW  14
0052A:  MOVLB  5
0052C:  MOVWF  x85
....................    }
0052E:  BRA    0584
00530:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
00532:  MOVF   x73,W
00534:  SUBWF  x78,W
00536:  BNZ   055C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00538:  MOVLW  7A
0053A:  ADDWF  x7A,W
0053C:  MOVWF  FE9
0053E:  MOVLW  01
00540:  MOVWF  FEA
00542:  BTFSC  FD8.0
00544:  INCF   FEA,F
00546:  MOVFF  2E,FEF
....................       restart_wdt();
0054A:  CLRWDT
....................       RxD_DataLen ++ ;
0054C:  INCF   x7A,F
....................       sequence = crc_hi_sq;
0054E:  MOVFF  74,78
....................       T_timeout = 0x14; //200ms
00552:  MOVLW  14
00554:  MOVLB  5
00556:  MOVWF  x85
....................    }
00558:  BRA    0584
0055A:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
0055C:  MOVF   x74,W
0055E:  SUBWF  x78,W
00560:  BNZ   0584
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
00562:  MOVLW  7A
00564:  ADDWF  x7A,W
00566:  MOVWF  FE9
00568:  MOVLW  01
0056A:  MOVWF  FEA
0056C:  BTFSC  FD8.0
0056E:  INCF   FEA,F
00570:  MOVFF  2E,FEF
....................       restart_wdt();
00574:  CLRWDT
....................       sequence = end_sq;
00576:  MOVFF  6F,78
....................       T_timeout = 0x00;
0057A:  MOVLB  5
0057C:  CLRF   x85
....................       recieve_completed = 1 ;            //Recieve completed then translate
0057E:  BSF    30.5
....................       output_bit(P485ctrl,0);
00580:  BCF    F8A.3
00582:  BCF    F93.3
00584:  MOVLB  0
....................      //T_timeout = 0x14; //200ms  
....................      
....................    }
00586:  GOTO   0594 (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
02426:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
02428:  MOVLW  01
0242A:  SUBWF  x7A,W
0242C:  MOVLB  7
0242E:  MOVWF  x10
02430:  MOVLW  01
02432:  MOVWF  x12
02434:  MOVLW  7A
02436:  MOVWF  x11
02438:  MOVFF  710,713
0243C:  MOVLB  0
0243E:  RCALL  1FB8
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
02440:  MOVLW  01
02442:  SUBWF  x7A,W
02444:  ADDLW  7A
02446:  MOVWF  FE9
02448:  MOVLW  01
0244A:  MOVWF  FEA
0244C:  BTFSC  FD8.0
0244E:  INCF   FEA,F
02450:  MOVF   FEF,W
02452:  MOVLB  3
02454:  SUBWF  x7B,W
02456:  BTFSS  FD8.2
02458:  GOTO   4460
0245C:  MOVLW  7A
0245E:  MOVLB  0
02460:  ADDWF  x7A,W
02462:  MOVWF  FE9
02464:  MOVLW  01
02466:  MOVWF  FEA
02468:  BTFSC  FD8.0
0246A:  INCF   FEA,F
0246C:  MOVF   FEF,W
0246E:  MOVLB  3
02470:  SUBWF  x7A,W
02472:  BTFSS  FD8.2
02474:  GOTO   4460
....................    {
....................       
....................     
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
02478:  MOVLB  1
0247A:  MOVF   x7A,W
0247C:  SUBLW  AA
0247E:  BTFSS  FD8.2
02480:  BRA    273E
02482:  MOVF   x7B,W
02484:  SUBLW  20
02486:  BTFSS  FD8.2
02488:  BRA    273E
....................       {
....................          TxD_Buff[0] = Address ;         //Address
0248A:  MOVFF  79,7B
....................          TxD_Buff[1] = 0x20 ;            //function code
0248E:  MOVLW  20
02490:  MOVLB  0
02492:  MOVWF  x7C
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
02494:  MOVLW  1C
02496:  MOVWF  x7D
....................          TxD_Buff[3] = InputType1_8 ;    //1
02498:  MOVFF  3A,7E
....................          TxD_Buff[4] = InputType9_16 ;  //2
0249C:  MOVFF  3B,7F
....................          TxD_Buff[5] = InputType17_24 ;//3
024A0:  MOVFF  3C,80
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
024A4:  MOVFF  3D,81
....................          TxD_Buff[7] = FaultType9_16 ; //5
024A8:  MOVFF  3E,82
....................          TxD_Buff[8] = FaultType17_24 ;   //6
024AC:  MOVFF  3F,83
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
024B0:  MOVFF  40,84
....................          TxD_Buff[10] = OutputType9_16 ;  //8
024B4:  MOVFF  41,85
....................          TxD_Buff[11] = OutputType17_24 ; //9
024B8:  MOVFF  42,86
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
024BC:  MOVFF  43,87
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
024C0:  MOVFF  44,88
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
024C4:  MOVFF  45,89
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
024C8:  MOVFF  46,8A
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
024CC:  MOVFF  47,8B
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
024D0:  MOVFF  48,8C
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
024D4:  MOVFF  FF2,710
024D8:  BCF    FF2.7
024DA:  CLRF   FAA
024DC:  MOVLW  10
024DE:  MOVWF  FA9
024E0:  BCF    FA6.6
024E2:  BCF    FA6.7
024E4:  BSF    FA6.0
024E6:  MOVF   FA8,W
024E8:  MOVLB  7
024EA:  BTFSC  x10.7
024EC:  BSF    FF2.7
024EE:  MOVLB  0
024F0:  MOVWF  x8D
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
024F2:  MOVFF  FF2,710
024F6:  BCF    FF2.7
024F8:  CLRF   FAA
024FA:  MOVLW  11
024FC:  MOVWF  FA9
024FE:  BCF    FA6.6
02500:  BCF    FA6.7
02502:  BSF    FA6.0
02504:  MOVF   FA8,W
02506:  MOVLB  7
02508:  BTFSC  x10.7
0250A:  BSF    FF2.7
0250C:  MOVLB  0
0250E:  MOVWF  x8E
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
02510:  MOVFF  FF2,710
02514:  BCF    FF2.7
02516:  CLRF   FAA
02518:  MOVLW  12
0251A:  MOVWF  FA9
0251C:  BCF    FA6.6
0251E:  BCF    FA6.7
02520:  BSF    FA6.0
02522:  MOVF   FA8,W
02524:  MOVLB  7
02526:  BTFSC  x10.7
02528:  BSF    FF2.7
0252A:  MOVLB  0
0252C:  MOVWF  x8F
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
0252E:  MOVFF  FF2,710
02532:  BCF    FF2.7
02534:  CLRF   FAA
02536:  MOVLW  13
02538:  MOVWF  FA9
0253A:  BCF    FA6.6
0253C:  BCF    FA6.7
0253E:  BSF    FA6.0
02540:  MOVF   FA8,W
02542:  MOVLB  7
02544:  BTFSC  x10.7
02546:  BSF    FF2.7
02548:  MOVLB  0
0254A:  MOVWF  x90
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
0254C:  MOVFF  FF2,710
02550:  BCF    FF2.7
02552:  CLRF   FAA
02554:  MOVLW  14
02556:  MOVWF  FA9
02558:  BCF    FA6.6
0255A:  BCF    FA6.7
0255C:  BSF    FA6.0
0255E:  MOVF   FA8,W
02560:  MOVLB  7
02562:  BTFSC  x10.7
02564:  BSF    FF2.7
02566:  MOVLB  0
02568:  MOVWF  x91
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
0256A:  MOVFF  FF2,710
0256E:  BCF    FF2.7
02570:  CLRF   FAA
02572:  MOVLW  15
02574:  MOVWF  FA9
02576:  BCF    FA6.6
02578:  BCF    FA6.7
0257A:  BSF    FA6.0
0257C:  MOVF   FA8,W
0257E:  MOVLB  7
02580:  BTFSC  x10.7
02582:  BSF    FF2.7
02584:  MOVLB  0
02586:  MOVWF  x92
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
02588:  MOVFF  FF2,710
0258C:  BCF    FF2.7
0258E:  CLRF   FAA
02590:  MOVLW  16
02592:  MOVWF  FA9
02594:  BCF    FA6.6
02596:  BCF    FA6.7
02598:  BSF    FA6.0
0259A:  MOVF   FA8,W
0259C:  MOVLB  7
0259E:  BTFSC  x10.7
025A0:  BSF    FF2.7
025A2:  MOVLB  0
025A4:  MOVWF  x93
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
025A6:  MOVFF  FF2,710
025AA:  BCF    FF2.7
025AC:  CLRF   FAA
025AE:  MOVLW  17
025B0:  MOVWF  FA9
025B2:  BCF    FA6.6
025B4:  BCF    FA6.7
025B6:  BSF    FA6.0
025B8:  MOVF   FA8,W
025BA:  MOVLB  7
025BC:  BTFSC  x10.7
025BE:  BSF    FF2.7
025C0:  MOVLB  0
025C2:  MOVWF  x94
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
025C4:  MOVFF  6A,95
....................          TxD_Buff[27] = AutoAckTime ;        //25
025C8:  MOVFF  6B,96
....................          TxD_Buff[28] = FlashingRate ;       //26
025CC:  MOVFF  6C,97
....................          TxD_Buff[29] = NoOfPoint ;          //27
025D0:  MOVFF  6D,98
....................          TxD_Buff[30] = FaultDelayTime ;    //28
025D4:  MOVLW  D5
025D6:  MOVWF  x99
....................          TxD_Buff[31] = Address ;            //29
025D8:  MOVFF  79,9A
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
025DC:  MOVFF  6D7,9B
....................          TxD_Buff[33] = FaultDelayTime[2] ;
025E0:  MOVFF  6D9,9C
....................          TxD_Buff[34] = FaultDelayTime[3] ;
025E4:  MOVFF  6DB,9D
....................          TxD_Buff[35] = FaultDelayTime[4] ;
025E8:  MOVFF  6DD,9E
....................          TxD_Buff[36] = FaultDelayTime[5] ;
025EC:  MOVFF  6DF,9F
....................          TxD_Buff[37] = FaultDelayTime[6] ;
025F0:  MOVFF  6E1,A0
....................          TxD_Buff[38] = FaultDelayTime[7] ;
025F4:  MOVFF  6E3,A1
....................          TxD_Buff[39] = FaultDelayTime[8] ;
025F8:  MOVFF  6E5,A2
....................          TxD_Buff[40] = FaultDelayTime[9] ;
025FC:  MOVFF  6E7,A3
....................          TxD_Buff[41] = FaultDelayTime[10] ;
02600:  MOVFF  6E9,A4
....................          TxD_Buff[42] = FaultDelayTime[11] ;
02604:  MOVFF  6EB,A5
....................          TxD_Buff[43] = FaultDelayTime[12] ;
02608:  MOVFF  6ED,A6
....................          TxD_Buff[44] = FaultDelayTime[13] ;
0260C:  MOVFF  6EF,A7
....................          TxD_Buff[45] = FaultDelayTime[14] ;
02610:  MOVFF  6F1,A8
....................          TxD_Buff[46] = FaultDelayTime[15] ;
02614:  MOVFF  6F3,A9
....................          TxD_Buff[47] = FaultDelayTime[16] ;
02618:  MOVFF  6F5,AA
....................          TxD_Buff[48] = FaultDelayTime[17] ;
0261C:  MOVFF  6F7,AB
....................          TxD_Buff[49] = FaultDelayTime[18] ;
02620:  MOVFF  6F9,AC
....................          TxD_Buff[50] = FaultDelayTime[19] ;
02624:  MOVFF  6FB,AD
....................          TxD_Buff[51] = FaultDelayTime[20] ;
02628:  MOVFF  6FD,AE
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
0262C:  MOVLB  7
0262E:  CLRF   x12
02630:  MOVLW  7B
02632:  MOVWF  x11
02634:  MOVLW  34
02636:  MOVWF  x13
02638:  MOVLB  0
0263A:  RCALL  1FB8
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
0263C:  MOVFF  37B,AF
....................          TxD_Buff[53] = CRC_Lo ;
02640:  MOVFF  37A,B0
.................... 
....................          output_bit(P485ctrl,1);
02644:  BSF    F8A.3
02646:  BCF    F93.3
....................          delay_ms(10);
02648:  MOVLW  0A
0264A:  MOVLB  7
0264C:  MOVWF  x10
0264E:  MOVLB  0
02650:  CALL   07CC
.................... 
....................          putc(Txd_Buff[0]);
02654:  MOVF   x7B,W
02656:  RCALL  200E
....................          putc(Txd_Buff[1]);
02658:  MOVF   x7C,W
0265A:  RCALL  200E
....................          putc(Txd_Buff[2]);
0265C:  MOVF   x7D,W
0265E:  RCALL  200E
....................          putc(Txd_Buff[3]);
02660:  MOVF   x7E,W
02662:  RCALL  200E
....................          putc(Txd_Buff[4]);
02664:  MOVF   x7F,W
02666:  RCALL  200E
....................          putc(Txd_Buff[5]);
02668:  MOVF   x80,W
0266A:  RCALL  200E
....................          putc(Txd_Buff[6]);
0266C:  MOVF   x81,W
0266E:  RCALL  200E
....................          putc(Txd_Buff[7]);
02670:  MOVF   x82,W
02672:  RCALL  200E
....................          putc(Txd_Buff[8]);
02674:  MOVF   x83,W
02676:  RCALL  200E
....................          putc(Txd_Buff[9]);
02678:  MOVF   x84,W
0267A:  RCALL  200E
....................          putc(Txd_Buff[10]);
0267C:  MOVF   x85,W
0267E:  RCALL  200E
....................          putc(Txd_Buff[11]);
02680:  MOVF   x86,W
02682:  RCALL  200E
....................          putc(Txd_Buff[12]);
02684:  MOVF   x87,W
02686:  RCALL  200E
....................          putc(Txd_Buff[13]);
02688:  MOVF   x88,W
0268A:  RCALL  200E
....................          putc(Txd_Buff[14]);
0268C:  MOVF   x89,W
0268E:  RCALL  200E
....................          putc(Txd_Buff[15]);
02690:  MOVF   x8A,W
02692:  RCALL  200E
....................          putc(Txd_Buff[16]);
02694:  MOVF   x8B,W
02696:  RCALL  200E
....................          putc(Txd_Buff[17]);
02698:  MOVF   x8C,W
0269A:  RCALL  200E
....................          putc(Txd_Buff[18]);
0269C:  MOVF   x8D,W
0269E:  RCALL  200E
....................          putc(Txd_Buff[19]);
026A0:  MOVF   x8E,W
026A2:  RCALL  200E
....................          putc(Txd_Buff[20]);
026A4:  MOVF   x8F,W
026A6:  RCALL  200E
....................          putc(Txd_Buff[21]);
026A8:  MOVF   x90,W
026AA:  RCALL  200E
....................          putc(Txd_Buff[22]);
026AC:  MOVF   x91,W
026AE:  RCALL  200E
....................          putc(Txd_Buff[23]);
026B0:  MOVF   x92,W
026B2:  RCALL  200E
....................          putc(Txd_Buff[24]);
026B4:  MOVF   x93,W
026B6:  RCALL  200E
....................          putc(Txd_Buff[25]);
026B8:  MOVF   x94,W
026BA:  RCALL  200E
....................          putc(Txd_Buff[26]);
026BC:  MOVF   x95,W
026BE:  RCALL  200E
....................          putc(Txd_Buff[27]);
026C0:  MOVF   x96,W
026C2:  RCALL  200E
....................          putc(Txd_Buff[28]);
026C4:  MOVF   x97,W
026C6:  RCALL  200E
....................          putc(Txd_Buff[29]);
026C8:  MOVF   x98,W
026CA:  RCALL  200E
....................          putc(Txd_Buff[30]);
026CC:  MOVF   x99,W
026CE:  RCALL  200E
....................          putc(Txd_Buff[31]);
026D0:  MOVF   x9A,W
026D2:  RCALL  200E
....................          
....................          putc(Txd_Buff[32]);
026D4:  MOVF   x9B,W
026D6:  RCALL  200E
....................          putc(Txd_Buff[33]);
026D8:  MOVF   x9C,W
026DA:  RCALL  200E
....................          putc(Txd_Buff[34]);
026DC:  MOVF   x9D,W
026DE:  RCALL  200E
....................          putc(Txd_Buff[35]);
026E0:  MOVF   x9E,W
026E2:  RCALL  200E
....................          putc(Txd_Buff[36]);
026E4:  MOVF   x9F,W
026E6:  RCALL  200E
....................          putc(Txd_Buff[37]);
026E8:  MOVF   xA0,W
026EA:  RCALL  200E
....................          putc(Txd_Buff[38]);
026EC:  MOVF   xA1,W
026EE:  RCALL  200E
....................          putc(Txd_Buff[39]);
026F0:  MOVF   xA2,W
026F2:  RCALL  200E
....................          putc(Txd_Buff[40]);
026F4:  MOVF   xA3,W
026F6:  RCALL  200E
....................          putc(Txd_Buff[41]);
026F8:  MOVF   xA4,W
026FA:  RCALL  200E
....................          
....................          putc(Txd_Buff[42]);
026FC:  MOVF   xA5,W
026FE:  RCALL  200E
....................          putc(Txd_Buff[43]);
02700:  MOVF   xA6,W
02702:  RCALL  200E
....................          putc(Txd_Buff[44]);
02704:  MOVF   xA7,W
02706:  RCALL  200E
....................          putc(Txd_Buff[45]);
02708:  MOVF   xA8,W
0270A:  RCALL  200E
....................          putc(Txd_Buff[46]);
0270C:  MOVF   xA9,W
0270E:  RCALL  200E
....................          putc(Txd_Buff[47]);
02710:  MOVF   xAA,W
02712:  RCALL  200E
....................          putc(Txd_Buff[48]);
02714:  MOVF   xAB,W
02716:  RCALL  200E
....................          putc(Txd_Buff[49]);
02718:  MOVF   xAC,W
0271A:  RCALL  200E
....................          putc(Txd_Buff[50]);
0271C:  MOVF   xAD,W
0271E:  RCALL  200E
....................          putc(Txd_Buff[51]);
02720:  MOVF   xAE,W
02722:  RCALL  200E
....................          
....................          putc(Txd_Buff[52]);
02724:  MOVF   xAF,W
02726:  RCALL  200E
....................          putc(Txd_Buff[53]);
02728:  MOVF   xB0,W
0272A:  RCALL  200E
....................        
....................          delay_ms(3);
0272C:  MOVLW  03
0272E:  MOVLB  7
02730:  MOVWF  x10
02732:  MOVLB  0
02734:  CALL   07CC
....................          output_bit(P485ctrl,0);
02738:  BCF    F8A.3
0273A:  BCF    F93.3
0273C:  MOVLB  1
....................           
....................       }
....................    
.................... 
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
0273E:  MOVLB  0
02740:  MOVF   x79,W
02742:  MOVLB  1
02744:  SUBWF  x7A,W
02746:  BTFSS  FD8.2
02748:  GOTO   4456
....................       {
....................       
....................       if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
0274C:  DECFSZ x7B,W
0274E:  BRA    2B74
....................       {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
02750:  MOVLB  3
02752:  CLRF   x7F
02754:  MOVFF  17C,37E
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
02758:  MOVFF  37E,37F
0275C:  MOVLB  7
0275E:  CLRF   x10
02760:  MOVF   x10,W
02762:  MOVLB  1
02764:  IORWF  x7D,W
02766:  MOVLB  3
02768:  MOVWF  x7E
0276A:  MOVLB  3
....................             No_PointCount = RxD_Buff[4] ;
0276C:  CLRF   x81
0276E:  MOVFF  17E,380
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
02772:  MOVFF  380,381
02776:  MOVLB  7
02778:  CLRF   x10
0277A:  MOVF   x10,W
0277C:  MOVLB  1
0277E:  IORWF  x7F,W
02780:  MOVLB  3
02782:  MOVWF  x80
02784:  MOVLB  3
.................... 
....................             if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
02786:  MOVF   x7F,F
02788:  BTFSS  FD8.2
0278A:  BRA    2B02
0278C:  MOVF   x7E,W
0278E:  SUBLW  0F
02790:  BTFSS  FD8.0
02792:  BRA    2B02
02794:  MOVF   x80,W
02796:  ADDWF  x7E,W
02798:  MOVLB  7
0279A:  MOVWF  x10
0279C:  MOVLB  3
0279E:  MOVF   x81,W
027A0:  ADDWFC x7F,W
027A2:  MOVLB  7
027A4:  MOVWF  x11
027A6:  MOVF   x11,F
027A8:  BTFSC  FD8.2
027AA:  BRA    27B0
027AC:  MOVLB  3
027AE:  BRA    2B02
027B0:  MOVF   x10,W
027B2:  SUBLW  10
027B4:  BTFSC  FD8.0
027B6:  BRA    27BC
027B8:  MOVLB  3
027BA:  BRA    2B02
....................             {
....................                if(No_PointCount < 9) Data_ByteCount = 0x01 ;
027BC:  MOVLB  3
027BE:  MOVF   x81,F
027C0:  BNZ   27CE
027C2:  MOVF   x80,W
027C4:  SUBLW  08
027C6:  BNC   27CE
027C8:  MOVLW  01
027CA:  MOVWF  x82
027CC:  BRA    27F2
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
027CE:  MOVF   x81,F
027D0:  BNZ   27DE
027D2:  MOVF   x80,W
027D4:  SUBLW  10
027D6:  BNC   27DE
027D8:  MOVLW  02
027DA:  MOVWF  x82
027DC:  BRA    27F2
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
027DE:  MOVF   x81,F
027E0:  BNZ   27EE
027E2:  MOVF   x80,W
027E4:  SUBLW  18
027E6:  BNC   27EE
027E8:  MOVLW  03
027EA:  MOVWF  x82
027EC:  BRA    27F2
....................                else   Data_ByteCount = 0x01 ; //----Jack
027EE:  MOVLW  01
027F0:  MOVWF  x82
.................... 
....................                if(Data_ByteCount == 0x01)
027F2:  DECFSZ x82,W
027F4:  BRA    293A
....................                {
.................... 
....................                   if(Start_Address < 0x09)
027F6:  MOVF   x7F,F
027F8:  BNZ   2814
027FA:  MOVF   x7E,W
027FC:  SUBLW  08
027FE:  BNC   2814
....................                   {
....................                      //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                       Data_Buff[0] = Input1_8 >> Start_Address ;
02800:  MOVFF  49,383
02804:  MOVF   x7E,W
02806:  MOVWF  01
02808:  BZ    2812
0280A:  BCF    FD8.0
0280C:  RRCF   x83,F
0280E:  DECFSZ 01,F
02810:  BRA    280A
....................                       //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                       //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                   }
02812:  BRA    2848
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
02814:  MOVF   x7F,F
02816:  BNZ   281E
02818:  MOVF   x7E,W
0281A:  SUBLW  08
0281C:  BC    2848
0281E:  MOVF   x7F,F
02820:  BNZ   2848
02822:  MOVF   x7E,W
02824:  SUBLW  0F
02826:  BNC   2848
....................                   {
....................                      //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
02828:  MOVLW  08
0282A:  SUBWF  x7E,W
0282C:  MOVWF  00
0282E:  MOVLW  00
02830:  SUBWFB x7F,W
02832:  MOVWF  03
02834:  MOVFF  00,01
02838:  MOVFF  4A,383
0283C:  MOVF   01,F
0283E:  BZ    2848
02840:  BCF    FD8.0
02842:  RRCF   x83,F
02844:  DECFSZ 01,F
02846:  BRA    2840
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
02848:  MOVF   x80,W
0284A:  SUBLW  08
0284C:  BNZ   2854
0284E:  MOVF   x81,F
02850:  BNZ   2854
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
02852:  BRA    28BE
....................                   else if(No_PointCount == 0x07)
02854:  MOVF   x80,W
02856:  SUBLW  07
02858:  BNZ   2862
0285A:  MOVF   x81,F
0285C:  BNZ   2862
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
0285E:  BCF    x83.7
....................                   }
02860:  BRA    28BE
....................                   else if(No_PointCount == 0x06)
02862:  MOVF   x80,W
02864:  SUBLW  06
02866:  BNZ   2872
02868:  MOVF   x81,F
0286A:  BNZ   2872
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
0286C:  MOVLW  3F
0286E:  ANDWF  x83,F
....................                   }
02870:  BRA    28BE
....................                   else if(No_PointCount == 0x05)
02872:  MOVF   x80,W
02874:  SUBLW  05
02876:  BNZ   2882
02878:  MOVF   x81,F
0287A:  BNZ   2882
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
0287C:  MOVLW  1F
0287E:  ANDWF  x83,F
....................                   }
02880:  BRA    28BE
....................                   else if(No_PointCount == 0x04)
02882:  MOVF   x80,W
02884:  SUBLW  04
02886:  BNZ   2892
02888:  MOVF   x81,F
0288A:  BNZ   2892
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
0288C:  MOVLW  0F
0288E:  ANDWF  x83,F
....................                   }
02890:  BRA    28BE
....................                   else if(No_PointCount == 0x03)
02892:  MOVF   x80,W
02894:  SUBLW  03
02896:  BNZ   28A2
02898:  MOVF   x81,F
0289A:  BNZ   28A2
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
0289C:  MOVLW  07
0289E:  ANDWF  x83,F
....................                   }
028A0:  BRA    28BE
....................                   else if(No_PointCount == 0x02)
028A2:  MOVF   x80,W
028A4:  SUBLW  02
028A6:  BNZ   28B2
028A8:  MOVF   x81,F
028AA:  BNZ   28B2
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
028AC:  MOVLW  03
028AE:  ANDWF  x83,F
....................                   }
028B0:  BRA    28BE
....................                   else if(No_PointCount == 0x01)
028B2:  DECFSZ x80,W
028B4:  BRA    28BE
028B6:  MOVF   x81,F
028B8:  BNZ   28BE
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
028BA:  MOVLW  01
028BC:  ANDWF  x83,F
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
028BE:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
028C2:  MOVLW  01
028C4:  MOVLB  0
028C6:  MOVWF  x7C
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
028C8:  MOVFF  382,7D
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
028CC:  MOVFF  383,7E
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
028D0:  MOVLB  7
028D2:  CLRF   x12
028D4:  MOVLW  7B
028D6:  MOVWF  x11
028D8:  MOVLW  04
028DA:  MOVWF  x13
028DC:  MOVLB  0
028DE:  CALL   1FB8
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
028E2:  MOVFF  37B,7F
....................                   TxD_Buff[5] = CRC_Lo ;
028E6:  MOVFF  37A,80
.................... 
.................... 
....................                   output_bit(P485ctrl,1);
028EA:  BSF    F8A.3
028EC:  BCF    F93.3
....................                   restart_wdt();
028EE:  CLRWDT
....................                   delay_ms(4);
028F0:  MOVLW  04
028F2:  MOVLB  7
028F4:  MOVWF  x10
028F6:  MOVLB  0
028F8:  CALL   07CC
....................                   restart_wdt();
028FC:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
028FE:  MOVF   x7B,W
02900:  CALL   200E
....................                   putc(TxD_Buff[1]) ;               //Function Code
02904:  MOVF   x7C,W
02906:  CALL   200E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0290A:  MOVF   x7D,W
0290C:  CALL   200E
....................                   putc(TxD_Buff[3]) ;
02910:  MOVF   x7E,W
02912:  CALL   200E
....................                   putc(TxD_Buff[4]) ;
02916:  MOVF   x7F,W
02918:  CALL   200E
....................                   putc(TxD_Buff[5]) ;
0291C:  MOVF   x80,W
0291E:  CALL   200E
.................... 
....................                
....................                   restart_wdt();
02922:  CLRWDT
....................                   delay_ms(3);
02924:  MOVLW  03
02926:  MOVLB  7
02928:  MOVWF  x10
0292A:  MOVLB  0
0292C:  CALL   07CC
....................                   restart_wdt();
02930:  CLRWDT
....................                   output_bit(P485ctrl,0);
02932:  BCF    F8A.3
02934:  BCF    F93.3
....................               
....................                }
02936:  BRA    2AFE
02938:  MOVLB  3
....................                else if(Data_ByteCount == 0x02)
0293A:  MOVF   x82,W
0293C:  SUBLW  02
0293E:  BTFSS  FD8.2
02940:  BRA    2B00
....................                {
.................... 
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
02942:  MOVFF  49,383
02946:  MOVF   x7E,W
02948:  MOVWF  01
0294A:  BZ    2954
0294C:  BCF    FD8.0
0294E:  RRCF   x83,F
02950:  DECFSZ 01,F
02952:  BRA    294C
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
02954:  MOVFF  4A,384
.................... 
.................... 
....................                   if((No_PointCount - 0x07) == 0x08)
02958:  MOVLW  07
0295A:  SUBWF  x80,W
0295C:  MOVLB  7
0295E:  MOVWF  x10
02960:  MOVLW  00
02962:  MOVLB  3
02964:  SUBWFB x81,W
02966:  MOVLB  7
02968:  MOVWF  x11
0296A:  MOVF   x10,W
0296C:  SUBLW  08
0296E:  BNZ   2976
02970:  MOVF   x11,F
02972:  BNZ   2976
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
02974:  BRA    2A7C
....................                   else if((No_PointCount - 0x07) == 0x07)
02976:  MOVLW  07
02978:  MOVLB  3
0297A:  SUBWF  x80,W
0297C:  MOVLB  7
0297E:  MOVWF  x10
02980:  MOVLW  00
02982:  MOVLB  3
02984:  SUBWFB x81,W
02986:  MOVLB  7
02988:  MOVWF  x11
0298A:  MOVF   x10,W
0298C:  SUBLW  07
0298E:  BNZ   299A
02990:  MOVF   x11,F
02992:  BNZ   299A
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
02994:  MOVLB  3
02996:  BCF    x84.7
....................                   }
02998:  BRA    2A7A
....................                   else if((No_PointCount - 0x07) == 0x06)
0299A:  MOVLW  07
0299C:  MOVLB  3
0299E:  SUBWF  x80,W
029A0:  MOVLB  7
029A2:  MOVWF  x10
029A4:  MOVLW  00
029A6:  MOVLB  3
029A8:  SUBWFB x81,W
029AA:  MOVLB  7
029AC:  MOVWF  x11
029AE:  MOVF   x10,W
029B0:  SUBLW  06
029B2:  BNZ   29C0
029B4:  MOVF   x11,F
029B6:  BNZ   29C0
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
029B8:  MOVLW  3F
029BA:  MOVLB  3
029BC:  ANDWF  x84,F
....................                   }
029BE:  BRA    2A7A
....................                   else if((No_PointCount - 0x07) == 0x05)
029C0:  MOVLW  07
029C2:  MOVLB  3
029C4:  SUBWF  x80,W
029C6:  MOVLB  7
029C8:  MOVWF  x10
029CA:  MOVLW  00
029CC:  MOVLB  3
029CE:  SUBWFB x81,W
029D0:  MOVLB  7
029D2:  MOVWF  x11
029D4:  MOVF   x10,W
029D6:  SUBLW  05
029D8:  BNZ   29E6
029DA:  MOVF   x11,F
029DC:  BNZ   29E6
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
029DE:  MOVLW  1F
029E0:  MOVLB  3
029E2:  ANDWF  x84,F
....................                   }
029E4:  BRA    2A7A
....................                   else if((No_PointCount - 0x07) == 0x04)
029E6:  MOVLW  07
029E8:  MOVLB  3
029EA:  SUBWF  x80,W
029EC:  MOVLB  7
029EE:  MOVWF  x10
029F0:  MOVLW  00
029F2:  MOVLB  3
029F4:  SUBWFB x81,W
029F6:  MOVLB  7
029F8:  MOVWF  x11
029FA:  MOVF   x10,W
029FC:  SUBLW  04
029FE:  BNZ   2A0C
02A00:  MOVF   x11,F
02A02:  BNZ   2A0C
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
02A04:  MOVLW  0F
02A06:  MOVLB  3
02A08:  ANDWF  x84,F
....................                   }
02A0A:  BRA    2A7A
....................                   else if((No_PointCount - 0x07) == 0x03)
02A0C:  MOVLW  07
02A0E:  MOVLB  3
02A10:  SUBWF  x80,W
02A12:  MOVLB  7
02A14:  MOVWF  x10
02A16:  MOVLW  00
02A18:  MOVLB  3
02A1A:  SUBWFB x81,W
02A1C:  MOVLB  7
02A1E:  MOVWF  x11
02A20:  MOVF   x10,W
02A22:  SUBLW  03
02A24:  BNZ   2A32
02A26:  MOVF   x11,F
02A28:  BNZ   2A32
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
02A2A:  MOVLW  07
02A2C:  MOVLB  3
02A2E:  ANDWF  x84,F
....................                   }
02A30:  BRA    2A7A
....................                   else if((No_PointCount - 0x07) == 0x02)
02A32:  MOVLW  07
02A34:  MOVLB  3
02A36:  SUBWF  x80,W
02A38:  MOVLB  7
02A3A:  MOVWF  x10
02A3C:  MOVLW  00
02A3E:  MOVLB  3
02A40:  SUBWFB x81,W
02A42:  MOVLB  7
02A44:  MOVWF  x11
02A46:  MOVF   x10,W
02A48:  SUBLW  02
02A4A:  BNZ   2A58
02A4C:  MOVF   x11,F
02A4E:  BNZ   2A58
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
02A50:  MOVLW  03
02A52:  MOVLB  3
02A54:  ANDWF  x84,F
....................                   }
02A56:  BRA    2A7A
....................                   else if((No_PointCount - 0x07) == 0x01)
02A58:  MOVLW  07
02A5A:  MOVLB  3
02A5C:  SUBWF  x80,W
02A5E:  MOVLB  7
02A60:  MOVWF  x10
02A62:  MOVLW  00
02A64:  MOVLB  3
02A66:  SUBWFB x81,W
02A68:  MOVLB  7
02A6A:  MOVWF  x11
02A6C:  DECFSZ x10,W
02A6E:  BRA    2A7C
02A70:  MOVF   x11,F
02A72:  BNZ   2A7C
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
02A74:  MOVLW  01
02A76:  MOVLB  3
02A78:  ANDWF  x84,F
02A7A:  MOVLB  7
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02A7C:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
02A80:  MOVLW  01
02A82:  MOVLB  0
02A84:  MOVWF  x7C
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02A86:  MOVFF  382,7D
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02A8A:  MOVFF  383,7E
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02A8E:  MOVFF  384,7F
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
02A92:  MOVLB  7
02A94:  CLRF   x12
02A96:  MOVLW  7B
02A98:  MOVWF  x11
02A9A:  MOVLW  05
02A9C:  MOVWF  x13
02A9E:  MOVLB  0
02AA0:  CALL   1FB8
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
02AA4:  MOVFF  37B,80
....................                   TxD_Buff[6] = CRC_Lo ;
02AA8:  MOVFF  37A,81
.................... 
.................... 
....................                   output_bit(P485ctrl,1);
02AAC:  BSF    F8A.3
02AAE:  BCF    F93.3
....................                   restart_wdt();
02AB0:  CLRWDT
....................                   delay_ms(4);
02AB2:  MOVLW  04
02AB4:  MOVLB  7
02AB6:  MOVWF  x10
02AB8:  MOVLB  0
02ABA:  CALL   07CC
....................                   restart_wdt();
02ABE:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02AC0:  MOVF   x7B,W
02AC2:  CALL   200E
....................                   putc(TxD_Buff[1]) ;               //Function Code
02AC6:  MOVF   x7C,W
02AC8:  CALL   200E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02ACC:  MOVF   x7D,W
02ACE:  CALL   200E
....................                   putc(TxD_Buff[3]) ;
02AD2:  MOVF   x7E,W
02AD4:  CALL   200E
....................                   putc(TxD_Buff[4]) ;
02AD8:  MOVF   x7F,W
02ADA:  CALL   200E
....................                   putc(TxD_Buff[5]) ;
02ADE:  MOVF   x80,W
02AE0:  CALL   200E
....................                   putc(TxD_Buff[6]) ;
02AE4:  MOVF   x81,W
02AE6:  CALL   200E
.................... 
.................... 
....................                   restart_wdt();
02AEA:  CLRWDT
....................                   delay_ms(3);
02AEC:  MOVLW  03
02AEE:  MOVLB  7
02AF0:  MOVWF  x10
02AF2:  MOVLB  0
02AF4:  CALL   07CC
....................                   restart_wdt();
02AF8:  CLRWDT
....................                   output_bit(P485ctrl,0);
02AFA:  BCF    F8A.3
02AFC:  BCF    F93.3
02AFE:  MOVLB  3
....................               
....................                }
....................             }
02B00:  BRA    2B72
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
02B02:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x81 ;         //Function Code
02B06:  MOVLW  81
02B08:  MOVLB  0
02B0A:  MOVWF  x7C
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
02B0C:  MOVLW  02
02B0E:  MOVWF  x7D
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
02B10:  MOVLB  7
02B12:  CLRF   x12
02B14:  MOVLW  7B
02B16:  MOVWF  x11
02B18:  MOVLW  03
02B1A:  MOVWF  x13
02B1C:  MOVLB  0
02B1E:  CALL   1FB8
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
02B22:  MOVFF  37B,7E
....................                TxD_Buff[4] = CRC_Lo ;
02B26:  MOVFF  37A,7F
.................... 
....................                output_bit(P485ctrl,1);
02B2A:  BSF    F8A.3
02B2C:  BCF    F93.3
....................                restart_wdt();
02B2E:  CLRWDT
....................                delay_ms(4);
02B30:  MOVLW  04
02B32:  MOVLB  7
02B34:  MOVWF  x10
02B36:  MOVLB  0
02B38:  CALL   07CC
....................                restart_wdt();
02B3C:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
02B3E:  MOVF   x7B,W
02B40:  CALL   200E
....................                putc(TxD_Buff[1]) ;               //Function Code
02B44:  MOVF   x7C,W
02B46:  CALL   200E
....................                putc(TxD_Buff[2]) ;               //Byte Count
02B4A:  MOVF   x7D,W
02B4C:  CALL   200E
....................                putc(TxD_Buff[3]) ;
02B50:  MOVF   x7E,W
02B52:  CALL   200E
....................                putc(TxD_Buff[4]) ;
02B56:  MOVF   x7F,W
02B58:  CALL   200E
.................... 
.................... 
....................                restart_wdt();
02B5C:  CLRWDT
....................                delay_ms(3);
02B5E:  MOVLW  03
02B60:  MOVLB  7
02B62:  MOVWF  x10
02B64:  MOVLB  0
02B66:  CALL   07CC
....................                restart_wdt();
02B6A:  CLRWDT
....................                output_bit(P485ctrl,0);
02B6C:  BCF    F8A.3
02B6E:  BCF    F93.3
02B70:  MOVLB  3
02B72:  MOVLB  1
....................                
....................             }
....................          }
.................... ////\*/
.................... 
.................... 
....................                  /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
02B74:  MOVF   x7B,W
02B76:  SUBLW  07
02B78:  BTFSS  FD8.2
02B7A:  BRA    2CDE
....................       {
....................          alarmtosend();
02B7C:  MOVLB  0
02B7E:  GOTO   2016
....................          
....................          disable_interrupts(INT_TIMER2);
02B82:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
02B84:  MOVFF  1E,383
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
02B88:  MOVFF  1F,384
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
02B8C:  MOVFF  20,385
....................             Data_Buff[3] = Input25_32_Send ;
02B90:  MOVFF  21,386
....................             Data_Buff[4] = Input33_40_Send ;
02B94:  MOVFF  22,387
....................             Data_Buff[5] = Input41_48_Send ;
02B98:  MOVFF  23,388
....................             Data_Buff[6] = Input49_56_Send ;
02B9C:  MOVFF  24,389
....................             Data_Buff[7] = Input57_64_Send ;
02BA0:  MOVFF  25,38A
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
02BA4:  MOVFF  26,38B
....................             Data_Buff[9] = Ack9_16_Send ;
02BA8:  MOVFF  27,38C
....................             Data_Buff[10] = Ack17_24_Send ;
02BAC:  MOVFF  28,38D
....................             Data_Buff[11] = Ack25_32_Send ;
02BB0:  MOVFF  29,38E
....................             Data_Buff[12] = Ack33_40_Send ;
02BB4:  MOVFF  2A,38F
....................             Data_Buff[13] = Ack41_48_Send ;
02BB8:  MOVFF  2B,390
....................             Data_Buff[14] = Ack49_56_Send ;
02BBC:  MOVFF  2C,391
....................             Data_Buff[15] = Ack57_64_Send ;
02BC0:  MOVFF  2D,392
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
02BC4:  MOVFF  79,7B
....................             TxD_Buff[1] = 0x07 ;         //Function Code
02BC8:  MOVLW  07
02BCA:  MOVWF  x7C
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
02BCC:  MOVLW  10
02BCE:  MOVLB  3
02BD0:  MOVWF  x82
02BD2:  MOVFF  382,7D
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02BD6:  MOVFF  383,7E
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02BDA:  MOVFF  384,7F
....................             TxD_Buff[5] = Data_Buff[2] ;  
02BDE:  MOVFF  385,80
....................             TxD_Buff[6] = Data_Buff[3] ;
02BE2:  MOVFF  386,81
....................             TxD_Buff[7] = Data_Buff[4] ;
02BE6:  MOVFF  387,82
....................             TxD_Buff[8] = Data_Buff[5] ;
02BEA:  MOVFF  388,83
....................             TxD_Buff[9] = Data_Buff[6] ;
02BEE:  MOVFF  389,84
....................             TxD_Buff[10] = Data_Buff[7] ;
02BF2:  MOVFF  38A,85
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
02BF6:  MOVFF  38B,86
....................            TxD_Buff[12] = Data_Buff[9] ;
02BFA:  MOVFF  38C,87
....................            TxD_Buff[13] = Data_Buff[10] ;
02BFE:  MOVFF  38D,88
....................            TxD_Buff[14] = Data_Buff[11] ;
02C02:  MOVFF  38E,89
....................            TxD_Buff[15] = Data_Buff[12] ;
02C06:  MOVFF  38F,8A
....................            TxD_Buff[16] = Data_Buff[13] ;
02C0A:  MOVFF  390,8B
....................            TxD_Buff[17] = Data_Buff[14] ;
02C0E:  MOVFF  391,8C
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
02C12:  MOVFF  392,8D
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
02C16:  MOVLB  7
02C18:  CLRF   x12
02C1A:  MOVLW  7B
02C1C:  MOVWF  x11
02C1E:  MOVLW  13
02C20:  MOVWF  x13
02C22:  MOVLB  0
02C24:  CALL   1FB8
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
02C28:  MOVFF  37B,8E
....................           TxD_Buff[20] = CRC_Lo ;
02C2C:  MOVFF  37A,8F
.................... 
....................         
....................          output_bit(P485ctrl,1);
02C30:  BSF    F8A.3
02C32:  BCF    F93.3
....................          restart_wdt();
02C34:  CLRWDT
....................          delay_ms(4);
02C36:  MOVLW  04
02C38:  MOVLB  7
02C3A:  MOVWF  x10
02C3C:  MOVLB  0
02C3E:  CALL   07CC
....................          restart_wdt();
02C42:  CLRWDT
....................          
....................          
....................          
....................          putc(TxD_Buff[0]) ;               //Address
02C44:  MOVF   x7B,W
02C46:  CALL   200E
....................          putc(TxD_Buff[1]) ;               //Function Code
02C4A:  MOVF   x7C,W
02C4C:  CALL   200E
....................          putc(TxD_Buff[2]) ;               //Byte Count
02C50:  MOVF   x7D,W
02C52:  CALL   200E
....................          putc(TxD_Buff[3]) ;
02C56:  MOVF   x7E,W
02C58:  CALL   200E
....................          putc(TxD_Buff[4]) ;
02C5C:  MOVF   x7F,W
02C5E:  CALL   200E
....................          putc(TxD_Buff[5]) ;
02C62:  MOVF   x80,W
02C64:  CALL   200E
....................          putc(TxD_Buff[6]) ;
02C68:  MOVF   x81,W
02C6A:  CALL   200E
....................          putc(TxD_Buff[7]) ;
02C6E:  MOVF   x82,W
02C70:  CALL   200E
....................          putc(TxD_Buff[8]) ;
02C74:  MOVF   x83,W
02C76:  CALL   200E
....................          putc(TxD_Buff[9]) ;
02C7A:  MOVF   x84,W
02C7C:  CALL   200E
....................          putc(TxD_Buff[10]) ;
02C80:  MOVF   x85,W
02C82:  CALL   200E
....................          putc(TxD_Buff[11]) ;
02C86:  MOVF   x86,W
02C88:  CALL   200E
....................          putc(TxD_Buff[12]) ;
02C8C:  MOVF   x87,W
02C8E:  CALL   200E
....................          putc(TxD_Buff[13]) ;
02C92:  MOVF   x88,W
02C94:  CALL   200E
....................          putc(TxD_Buff[14]) ;
02C98:  MOVF   x89,W
02C9A:  CALL   200E
....................          putc(TxD_Buff[15]) ;
02C9E:  MOVF   x8A,W
02CA0:  CALL   200E
....................          putc(TxD_Buff[16]) ;
02CA4:  MOVF   x8B,W
02CA6:  CALL   200E
....................          putc(TxD_Buff[17]) ;
02CAA:  MOVF   x8C,W
02CAC:  CALL   200E
....................          putc(TxD_Buff[18]) ;
02CB0:  MOVF   x8D,W
02CB2:  CALL   200E
....................          putc(TxD_Buff[19]) ;
02CB6:  MOVF   x8E,W
02CB8:  CALL   200E
....................          putc(TxD_Buff[20]) ;
02CBC:  MOVF   x8F,W
02CBE:  CALL   200E
.................... 
....................          restart_wdt();
02CC2:  CLRWDT
....................          delay_ms(3);
02CC4:  MOVLW  03
02CC6:  MOVLB  7
02CC8:  MOVWF  x10
02CCA:  MOVLB  0
02CCC:  CALL   07CC
....................          restart_wdt();
02CD0:  CLRWDT
....................          output_bit(P485ctrl,0);
02CD2:  BCF    F8A.3
02CD4:  BCF    F93.3
....................            
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
02CD6:  BSF    F9D.1
....................      
....................        }
02CD8:  GOTO   43C0
02CDC:  MOVLB  1
....................       /////////////////////////////////////////////////////////////////
.................... 
....................        else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
02CDE:  MOVF   x7B,W
02CE0:  SUBLW  05
02CE2:  BTFSS  FD8.2
02CE4:  BRA    31D2
....................          {
....................             //Do Force Coil
....................             Start_Address = RxD_Buff[2] ;
02CE6:  MOVLB  3
02CE8:  CLRF   x7F
02CEA:  MOVFF  17C,37E
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
02CEE:  MOVFF  37E,37F
02CF2:  MOVLB  7
02CF4:  CLRF   x10
02CF6:  MOVF   x10,W
02CF8:  MOVLB  1
02CFA:  IORWF  x7D,W
02CFC:  MOVLB  3
02CFE:  MOVWF  x7E
02D00:  MOVLB  3
....................             No_PointCount = RxD_Buff[4] ;
02D02:  CLRF   x81
02D04:  MOVFF  17E,380
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
02D08:  MOVFF  380,381
02D0C:  MOVLB  7
02D0E:  CLRF   x10
02D10:  MOVF   x10,W
02D12:  MOVLB  1
02D14:  IORWF  x7F,W
02D16:  MOVLB  3
02D18:  MOVWF  x80
02D1A:  MOVLB  3
.................... 
....................             if(Start_Address == 0x00)   ////// Acknowlegde //////
02D1C:  MOVF   x7E,F
02D1E:  BNZ   2DBE
02D20:  MOVF   x7F,F
02D22:  BNZ   2DBE
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02D24:  MOVF   x80,F
02D26:  BNZ   2DBC
02D28:  INCFSZ x81,W
02D2A:  BRA    2DBC
....................                {
....................                   //Modbus_ACK = 1 ;
....................                   AutoAckFlag = 1;
02D2C:  BSF    1A.2
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02D2E:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02D32:  MOVLW  05
02D34:  MOVLB  0
02D36:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02D38:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02D3C:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02D40:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02D44:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02D48:  MOVLB  7
02D4A:  CLRF   x12
02D4C:  MOVLW  7B
02D4E:  MOVWF  x11
02D50:  MOVLW  06
02D52:  MOVWF  x13
02D54:  MOVLB  0
02D56:  CALL   1FB8
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02D5A:  MOVFF  37B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02D5E:  MOVFF  37A,82
.................... 
....................                   output_bit(P485ctrl,1);
02D62:  BSF    F8A.3
02D64:  BCF    F93.3
....................                   restart_wdt();
02D66:  CLRWDT
....................                   delay_ms(4);
02D68:  MOVLW  04
02D6A:  MOVLB  7
02D6C:  MOVWF  x10
02D6E:  MOVLB  0
02D70:  CALL   07CC
....................                   restart_wdt();
02D74:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02D76:  MOVF   x7B,W
02D78:  CALL   200E
....................                   putc(TxD_Buff[1]) ;               //Function Code
02D7C:  MOVF   x7C,W
02D7E:  CALL   200E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02D82:  MOVF   x7D,W
02D84:  CALL   200E
....................                   putc(TxD_Buff[3]) ;
02D88:  MOVF   x7E,W
02D8A:  CALL   200E
....................                   putc(TxD_Buff[4]) ;
02D8E:  MOVF   x7F,W
02D90:  CALL   200E
....................                   putc(TxD_Buff[5]) ;
02D94:  MOVF   x80,W
02D96:  CALL   200E
....................                   putc(TxD_Buff[6]) ;
02D9A:  MOVF   x81,W
02D9C:  CALL   200E
....................                   putc(TxD_Buff[7]) ;
02DA0:  MOVF   x82,W
02DA2:  CALL   200E
.................... 
.................... 
....................                   restart_wdt();
02DA6:  CLRWDT
....................                   delay_ms(3);
02DA8:  MOVLW  03
02DAA:  MOVLB  7
02DAC:  MOVWF  x10
02DAE:  MOVLB  0
02DB0:  CALL   07CC
....................                   restart_wdt();
02DB4:  CLRWDT
....................                   output_bit(P485ctrl,0);
02DB6:  BCF    F8A.3
02DB8:  BCF    F93.3
02DBA:  MOVLB  3
....................               
....................                }
....................             }
02DBC:  BRA    31CC
....................             else if(Start_Address == 0x01)   ///// Reset //////
02DBE:  DECFSZ x7E,W
02DC0:  BRA    2E60
02DC2:  MOVF   x7F,F
02DC4:  BNZ   2E60
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02DC6:  MOVF   x80,F
02DC8:  BNZ   2E5E
02DCA:  INCFSZ x81,W
02DCC:  BRA    2E5E
....................                {
....................                   //Modbus_RET = 1 ;
....................                   AutoResetFlag = 1;
02DCE:  BSF    1A.3
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
02DD0:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02DD4:  MOVLW  05
02DD6:  MOVLB  0
02DD8:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02DDA:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02DDE:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02DE2:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02DE6:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02DEA:  MOVLB  7
02DEC:  CLRF   x12
02DEE:  MOVLW  7B
02DF0:  MOVWF  x11
02DF2:  MOVLW  06
02DF4:  MOVWF  x13
02DF6:  MOVLB  0
02DF8:  CALL   1FB8
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02DFC:  MOVFF  37B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02E00:  MOVFF  37A,82
.................... 
.................... 
....................               output_bit(P485ctrl,1);
02E04:  BSF    F8A.3
02E06:  BCF    F93.3
....................                   restart_wdt();
02E08:  CLRWDT
....................                   delay_ms(4);
02E0A:  MOVLW  04
02E0C:  MOVLB  7
02E0E:  MOVWF  x10
02E10:  MOVLB  0
02E12:  CALL   07CC
....................                   restart_wdt();
02E16:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02E18:  MOVF   x7B,W
02E1A:  CALL   200E
....................                   putc(TxD_Buff[1]) ;               //Function Code
02E1E:  MOVF   x7C,W
02E20:  CALL   200E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02E24:  MOVF   x7D,W
02E26:  CALL   200E
....................                   putc(TxD_Buff[3]) ;
02E2A:  MOVF   x7E,W
02E2C:  CALL   200E
....................                   putc(TxD_Buff[4]) ;
02E30:  MOVF   x7F,W
02E32:  CALL   200E
....................                   putc(TxD_Buff[5]) ;
02E36:  MOVF   x80,W
02E38:  CALL   200E
....................                   putc(TxD_Buff[6]) ;
02E3C:  MOVF   x81,W
02E3E:  CALL   200E
....................                   putc(TxD_Buff[7]) ;
02E42:  MOVF   x82,W
02E44:  CALL   200E
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02E48:  CLRWDT
....................                   delay_ms(3);
02E4A:  MOVLW  03
02E4C:  MOVLB  7
02E4E:  MOVWF  x10
02E50:  MOVLB  0
02E52:  CALL   07CC
....................                   restart_wdt();
02E56:  CLRWDT
....................                   output_bit(P485ctrl,0);
02E58:  BCF    F8A.3
02E5A:  BCF    F93.3
02E5C:  MOVLB  3
....................               
....................                }
....................             }
02E5E:  BRA    31CC
....................             else if(Start_Address == 0x02)   ///// Test //////
02E60:  MOVF   x7E,W
02E62:  SUBLW  02
02E64:  BTFSS  FD8.2
02E66:  BRA    2FB2
02E68:  MOVF   x7F,F
02E6A:  BTFSS  FD8.2
02E6C:  BRA    2FB2
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02E6E:  MOVF   x80,F
02E70:  BNZ   2F08
02E72:  INCFSZ x81,W
02E74:  BRA    2F08
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   AutoTestFlag = 1;
02E76:  BSF    1A.4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02E78:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02E7C:  MOVLW  05
02E7E:  MOVLB  0
02E80:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02E82:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02E86:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02E8A:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02E8E:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02E92:  MOVLB  7
02E94:  CLRF   x12
02E96:  MOVLW  7B
02E98:  MOVWF  x11
02E9A:  MOVLW  06
02E9C:  MOVWF  x13
02E9E:  MOVLB  0
02EA0:  CALL   1FB8
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02EA4:  MOVFF  37B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02EA8:  MOVFF  37A,82
.................... 
....................                   output_bit(P485ctrl,1);
02EAC:  BSF    F8A.3
02EAE:  BCF    F93.3
....................                   restart_wdt();
02EB0:  CLRWDT
....................                   delay_ms(4);
02EB2:  MOVLW  04
02EB4:  MOVLB  7
02EB6:  MOVWF  x10
02EB8:  MOVLB  0
02EBA:  CALL   07CC
....................                   restart_wdt();
02EBE:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02EC0:  MOVF   x7B,W
02EC2:  CALL   200E
....................                   putc(TxD_Buff[1]) ;               //Function Code
02EC6:  MOVF   x7C,W
02EC8:  CALL   200E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02ECC:  MOVF   x7D,W
02ECE:  CALL   200E
....................                   putc(TxD_Buff[3]) ;
02ED2:  MOVF   x7E,W
02ED4:  CALL   200E
....................                   putc(TxD_Buff[4]) ;
02ED8:  MOVF   x7F,W
02EDA:  CALL   200E
....................                   putc(TxD_Buff[5]) ;
02EDE:  MOVF   x80,W
02EE0:  CALL   200E
....................                   putc(TxD_Buff[6]) ;
02EE4:  MOVF   x81,W
02EE6:  CALL   200E
....................                   putc(TxD_Buff[7]) ;
02EEA:  MOVF   x82,W
02EEC:  CALL   200E
.................... 
....................                   restart_wdt();
02EF0:  CLRWDT
....................                   delay_ms(3);
02EF2:  MOVLW  03
02EF4:  MOVLB  7
02EF6:  MOVWF  x10
02EF8:  MOVLB  0
02EFA:  CALL   07CC
....................                   restart_wdt();
02EFE:  CLRWDT
....................                   output_bit(P485ctrl,0);
02F00:  BCF    F8A.3
02F02:  BCF    F93.3
....................              
....................                }
02F04:  BRA    2FAE
02F06:  MOVLB  3
....................                else if(No_PointCount == 0x00)   //OFF
02F08:  MOVF   x80,F
02F0A:  BNZ   2FB0
02F0C:  MOVF   x81,F
02F0E:  BNZ   2FB0
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   AutoTestFlag = 0;
02F10:  BCF    1A.4
....................                   Read_input();
02F12:  MOVLB  0
02F14:  CALL   1648
....................                   AutoAckFlag = 1;
02F18:  BSF    1A.2
....................                   check_ack();
02F1A:  CALL   21C0
....................                   AutoResetFlag = 1;
02F1E:  BSF    1A.3
....................                   check_reset();
02F20:  CALL   22A4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02F24:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02F28:  MOVLW  05
02F2A:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02F2C:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02F30:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02F34:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02F38:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02F3C:  MOVLB  7
02F3E:  CLRF   x12
02F40:  MOVLW  7B
02F42:  MOVWF  x11
02F44:  MOVLW  06
02F46:  MOVWF  x13
02F48:  MOVLB  0
02F4A:  CALL   1FB8
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02F4E:  MOVFF  37B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02F52:  MOVFF  37A,82
.................... 
....................                   output_bit(P485ctrl,1);
02F56:  BSF    F8A.3
02F58:  BCF    F93.3
....................                   restart_wdt();
02F5A:  CLRWDT
....................                   delay_ms(4);
02F5C:  MOVLW  04
02F5E:  MOVLB  7
02F60:  MOVWF  x10
02F62:  MOVLB  0
02F64:  CALL   07CC
....................                   restart_wdt();
02F68:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02F6A:  MOVF   x7B,W
02F6C:  CALL   200E
....................                   putc(TxD_Buff[1]) ;               //Function Code
02F70:  MOVF   x7C,W
02F72:  CALL   200E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02F76:  MOVF   x7D,W
02F78:  CALL   200E
....................                   putc(TxD_Buff[3]) ;
02F7C:  MOVF   x7E,W
02F7E:  CALL   200E
....................                   putc(TxD_Buff[4]) ;
02F82:  MOVF   x7F,W
02F84:  CALL   200E
....................                   putc(TxD_Buff[5]) ;
02F88:  MOVF   x80,W
02F8A:  CALL   200E
....................                   putc(TxD_Buff[6]) ;
02F8E:  MOVF   x81,W
02F90:  CALL   200E
....................                   putc(TxD_Buff[7]) ;
02F94:  MOVF   x82,W
02F96:  CALL   200E
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02F9A:  CLRWDT
....................                   delay_ms(3);
02F9C:  MOVLW  03
02F9E:  MOVLB  7
02FA0:  MOVWF  x10
02FA2:  MOVLB  0
02FA4:  CALL   07CC
....................                   restart_wdt();
02FA8:  CLRWDT
....................                   output_bit(P485ctrl,0);
02FAA:  BCF    F8A.3
02FAC:  BCF    F93.3
02FAE:  MOVLB  3
....................                   
....................                }
....................             }
02FB0:  BRA    31CC
....................             else if(Start_Address == 0x03)   ///// Function Test //////
02FB2:  MOVF   x7E,W
02FB4:  SUBLW  03
02FB6:  BTFSS  FD8.2
02FB8:  BRA    3104
02FBA:  MOVF   x7F,F
02FBC:  BTFSS  FD8.2
02FBE:  BRA    3104
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02FC0:  MOVF   x80,F
02FC2:  BNZ   305A
02FC4:  INCFSZ x81,W
02FC6:  BRA    305A
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   test_fault = 1 ;
02FC8:  BSF    1A.5
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02FCA:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02FCE:  MOVLW  05
02FD0:  MOVLB  0
02FD2:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02FD4:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02FD8:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02FDC:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02FE0:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02FE4:  MOVLB  7
02FE6:  CLRF   x12
02FE8:  MOVLW  7B
02FEA:  MOVWF  x11
02FEC:  MOVLW  06
02FEE:  MOVWF  x13
02FF0:  MOVLB  0
02FF2:  CALL   1FB8
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02FF6:  MOVFF  37B,81
....................                   TxD_Buff[7] = CRC_Lo ;
02FFA:  MOVFF  37A,82
.................... 
....................                  output_bit(P485ctrl,1);
02FFE:  BSF    F8A.3
03000:  BCF    F93.3
....................                   restart_wdt();
03002:  CLRWDT
....................                   delay_ms(4);
03004:  MOVLW  04
03006:  MOVLB  7
03008:  MOVWF  x10
0300A:  MOVLB  0
0300C:  CALL   07CC
....................                   restart_wdt();
03010:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
03012:  MOVF   x7B,W
03014:  CALL   200E
....................                   putc(TxD_Buff[1]) ;               //Function Code
03018:  MOVF   x7C,W
0301A:  CALL   200E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0301E:  MOVF   x7D,W
03020:  CALL   200E
....................                   putc(TxD_Buff[3]) ;
03024:  MOVF   x7E,W
03026:  CALL   200E
....................                   putc(TxD_Buff[4]) ;
0302A:  MOVF   x7F,W
0302C:  CALL   200E
....................                   putc(TxD_Buff[5]) ;
03030:  MOVF   x80,W
03032:  CALL   200E
....................                   putc(TxD_Buff[6]) ;
03036:  MOVF   x81,W
03038:  CALL   200E
....................                   putc(TxD_Buff[7]) ;
0303C:  MOVF   x82,W
0303E:  CALL   200E
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
03042:  CLRWDT
....................                   delay_ms(10);
03044:  MOVLW  0A
03046:  MOVLB  7
03048:  MOVWF  x10
0304A:  MOVLB  0
0304C:  CALL   07CC
....................                   restart_wdt();
03050:  CLRWDT
....................                   output_bit(P485ctrl,0);
03052:  BCF    F8A.3
03054:  BCF    F93.3
....................                }
03056:  BRA    3100
03058:  MOVLB  3
....................                else if(No_PointCount == 0x00)   //OFF
0305A:  MOVF   x80,F
0305C:  BNZ   3102
0305E:  MOVF   x81,F
03060:  BNZ   3102
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   test_fault = 0;
03062:  BCF    1A.5
....................                   Read_input();
03064:  MOVLB  0
03066:  CALL   1648
....................                   AutoAckFlag = 1;
0306A:  BSF    1A.2
....................                   check_ack();
0306C:  CALL   21C0
....................                   AutoResetFlag = 1;
03070:  BSF    1A.3
....................                   check_reset();
03072:  CALL   22A4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
03076:  MOVFF  79,7B
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
0307A:  MOVLW  05
0307C:  MOVWF  x7C
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0307E:  MOVFF  17C,7D
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
03082:  MOVFF  17D,7E
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03086:  MOVFF  17E,7F
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0308A:  MOVFF  17F,80
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0308E:  MOVLB  7
03090:  CLRF   x12
03092:  MOVLW  7B
03094:  MOVWF  x11
03096:  MOVLW  06
03098:  MOVWF  x13
0309A:  MOVLB  0
0309C:  CALL   1FB8
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
030A0:  MOVFF  37B,81
....................                   TxD_Buff[7] = CRC_Lo ;
030A4:  MOVFF  37A,82
.................... 
....................                   output_bit(P485ctrl,1);
030A8:  BSF    F8A.3
030AA:  BCF    F93.3
....................                   restart_wdt();
030AC:  CLRWDT
....................                   delay_ms(4);
030AE:  MOVLW  04
030B0:  MOVLB  7
030B2:  MOVWF  x10
030B4:  MOVLB  0
030B6:  CALL   07CC
....................                   restart_wdt();
030BA:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
030BC:  MOVF   x7B,W
030BE:  CALL   200E
....................                   putc(TxD_Buff[1]) ;               //Function Code
030C2:  MOVF   x7C,W
030C4:  CALL   200E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
030C8:  MOVF   x7D,W
030CA:  CALL   200E
....................                   putc(TxD_Buff[3]) ;
030CE:  MOVF   x7E,W
030D0:  CALL   200E
....................                   putc(TxD_Buff[4]) ;
030D4:  MOVF   x7F,W
030D6:  CALL   200E
....................                   putc(TxD_Buff[5]) ;
030DA:  MOVF   x80,W
030DC:  CALL   200E
....................                   putc(TxD_Buff[6]) ;
030E0:  MOVF   x81,W
030E2:  CALL   200E
....................                   putc(TxD_Buff[7]) ;
030E6:  MOVF   x82,W
030E8:  CALL   200E
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
030EC:  CLRWDT
....................                   delay_ms(3);
030EE:  MOVLW  03
030F0:  MOVLB  7
030F2:  MOVWF  x10
030F4:  MOVLB  0
030F6:  CALL   07CC
....................                   restart_wdt();
030FA:  CLRWDT
....................                   output_bit(P485ctrl,0);
030FC:  BCF    F8A.3
030FE:  BCF    F93.3
03100:  MOVLB  3
....................                   
....................                }
....................             }
03102:  BRA    31CC
....................             else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
03104:  MOVF   x7E,W
03106:  SUBLW  64
03108:  BNZ   31CC
0310A:  MOVF   x7F,F
0310C:  BNZ   31CC
....................             {
....................                Address = No_PointCount;
0310E:  MOVFF  380,79
....................                write_eeprom(0x1D,Address);   //Communication Address
03112:  MOVF   FF2,W
03114:  MOVWF  00
03116:  BCF    FF2.7
03118:  CLRF   FAA
0311A:  MOVLW  1D
0311C:  MOVWF  FA9
0311E:  MOVFF  79,FA8
03122:  BCF    FA6.6
03124:  BCF    FA6.7
03126:  BSF    FA6.2
03128:  MOVLB  F
0312A:  MOVLW  55
0312C:  MOVWF  FA7
0312E:  MOVLW  AA
03130:  MOVWF  FA7
03132:  BSF    FA6.1
03134:  BTFSC  FA6.1
03136:  BRA    3134
03138:  BCF    FA6.2
0313A:  MOVF   00,W
0313C:  IORWF  FF2,F
....................                
....................                TxD_Buff[0] = Address ;         //Address
0313E:  MOVFF  79,7B
....................                TxD_Buff[1] = 0x05 ;         //Function Code
03142:  MOVLW  05
03144:  MOVLB  0
03146:  MOVWF  x7C
....................                TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
03148:  MOVFF  17C,7D
....................                TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0314C:  MOVFF  17D,7E
....................                TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
03150:  MOVFF  17E,7F
....................                TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
03154:  MOVFF  17F,80
.................... 
....................                CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03158:  MOVLB  7
0315A:  CLRF   x12
0315C:  MOVLW  7B
0315E:  MOVWF  x11
03160:  MOVLW  06
03162:  MOVWF  x13
03164:  MOVLB  0
03166:  CALL   1FB8
.................... 
....................                TxD_Buff[6] = CRC_Hi ;
0316A:  MOVFF  37B,81
....................                TxD_Buff[7] = CRC_Lo ;
0316E:  MOVFF  37A,82
.................... 
....................                output_bit(P485ctrl,1);
03172:  BSF    F8A.3
03174:  BCF    F93.3
....................                restart_wdt();
03176:  CLRWDT
....................                delay_ms(4);
03178:  MOVLW  04
0317A:  MOVLB  7
0317C:  MOVWF  x10
0317E:  MOVLB  0
03180:  CALL   07CC
....................                restart_wdt();
03184:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
03186:  MOVF   x7B,W
03188:  CALL   200E
....................                putc(TxD_Buff[1]) ;               //Function Code
0318C:  MOVF   x7C,W
0318E:  CALL   200E
....................                putc(TxD_Buff[2]) ;               //Byte Count
03192:  MOVF   x7D,W
03194:  CALL   200E
....................                putc(TxD_Buff[3]) ;
03198:  MOVF   x7E,W
0319A:  CALL   200E
....................                putc(TxD_Buff[4]) ;
0319E:  MOVF   x7F,W
031A0:  CALL   200E
....................                putc(TxD_Buff[5]) ;
031A4:  MOVF   x80,W
031A6:  CALL   200E
....................                putc(TxD_Buff[6]) ;
031AA:  MOVF   x81,W
031AC:  CALL   200E
....................                putc(TxD_Buff[7]) ;
031B0:  MOVF   x82,W
031B2:  CALL   200E
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
031B6:  CLRWDT
....................                delay_ms(3);
031B8:  MOVLW  03
031BA:  MOVLB  7
031BC:  MOVWF  x10
031BE:  MOVLB  0
031C0:  CALL   07CC
....................                restart_wdt();
031C4:  CLRWDT
....................                output_bit(P485ctrl,0);
031C6:  BCF    F8A.3
031C8:  BCF    F93.3
031CA:  MOVLB  3
.................... 
.................... 
....................                //save_addr();
....................             }
....................          }
031CC:  GOTO   43C2
031D0:  MOVLB  1
....................          //--------------------------------------------------//
.................... 
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
031D2:  MOVF   x7B,W
031D4:  SUBLW  21
031D6:  BTFSS  FD8.2
031D8:  GOTO   3B40
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
031DC:  MOVF   FF2,W
031DE:  MOVWF  00
031E0:  BCF    FF2.7
031E2:  CLRF   FAA
031E4:  CLRF   FA9
031E6:  MOVLW  0F
031E8:  MOVWF  FA8
031EA:  BCF    FA6.6
031EC:  BCF    FA6.7
031EE:  BSF    FA6.2
031F0:  MOVLB  F
031F2:  MOVLW  55
031F4:  MOVWF  FA7
031F6:  MOVLW  AA
031F8:  MOVWF  FA7
031FA:  BSF    FA6.1
031FC:  BTFSC  FA6.1
031FE:  BRA    31FC
03200:  BCF    FA6.2
03202:  MOVF   00,W
03204:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Inputt Type
03206:  MOVFF  FF2,00
0320A:  BCF    FF2.7
0320C:  CLRF   FAA
0320E:  MOVLW  01
03210:  MOVWF  FA9
03212:  MOVFF  17D,FA8
03216:  BCF    FA6.6
03218:  BCF    FA6.7
0321A:  BSF    FA6.2
0321C:  MOVLW  55
0321E:  MOVWF  FA7
03220:  MOVLW  AA
03222:  MOVWF  FA7
03224:  BSF    FA6.1
03226:  BTFSC  FA6.1
03228:  BRA    3226
0322A:  BCF    FA6.2
0322C:  MOVF   00,W
0322E:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
03230:  MOVFF  FF2,00
03234:  BCF    FF2.7
03236:  CLRF   FAA
03238:  MOVLW  02
0323A:  MOVWF  FA9
0323C:  MOVFF  17E,FA8
03240:  BCF    FA6.6
03242:  BCF    FA6.7
03244:  BSF    FA6.2
03246:  MOVLW  55
03248:  MOVWF  FA7
0324A:  MOVLW  AA
0324C:  MOVWF  FA7
0324E:  BSF    FA6.1
03250:  BTFSC  FA6.1
03252:  BRA    3250
03254:  BCF    FA6.2
03256:  MOVF   00,W
03258:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
0325A:  MOVFF  FF2,00
0325E:  BCF    FF2.7
03260:  CLRF   FAA
03262:  MOVLW  03
03264:  MOVWF  FA9
03266:  MOVFF  17F,FA8
0326A:  BCF    FA6.6
0326C:  BCF    FA6.7
0326E:  BSF    FA6.2
03270:  MOVLW  55
03272:  MOVWF  FA7
03274:  MOVLW  AA
03276:  MOVWF  FA7
03278:  BSF    FA6.1
0327A:  BTFSC  FA6.1
0327C:  BRA    327A
0327E:  BCF    FA6.2
03280:  MOVF   00,W
03282:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
03284:  MOVFF  FF2,00
03288:  BCF    FF2.7
0328A:  CLRF   FAA
0328C:  MOVLW  04
0328E:  MOVWF  FA9
03290:  MOVFF  180,FA8
03294:  BCF    FA6.6
03296:  BCF    FA6.7
03298:  BSF    FA6.2
0329A:  MOVLW  55
0329C:  MOVWF  FA7
0329E:  MOVLW  AA
032A0:  MOVWF  FA7
032A2:  BSF    FA6.1
032A4:  BTFSC  FA6.1
032A6:  BRA    32A4
032A8:  BCF    FA6.2
032AA:  MOVF   00,W
032AC:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
032AE:  MOVFF  FF2,00
032B2:  BCF    FF2.7
032B4:  CLRF   FAA
032B6:  MOVLW  05
032B8:  MOVWF  FA9
032BA:  MOVFF  181,FA8
032BE:  BCF    FA6.6
032C0:  BCF    FA6.7
032C2:  BSF    FA6.2
032C4:  MOVLW  55
032C6:  MOVWF  FA7
032C8:  MOVLW  AA
032CA:  MOVWF  FA7
032CC:  BSF    FA6.1
032CE:  BTFSC  FA6.1
032D0:  BRA    32CE
032D2:  BCF    FA6.2
032D4:  MOVF   00,W
032D6:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
032D8:  MOVFF  FF2,00
032DC:  BCF    FF2.7
032DE:  CLRF   FAA
032E0:  MOVLW  06
032E2:  MOVWF  FA9
032E4:  MOVFF  182,FA8
032E8:  BCF    FA6.6
032EA:  BCF    FA6.7
032EC:  BSF    FA6.2
032EE:  MOVLW  55
032F0:  MOVWF  FA7
032F2:  MOVLW  AA
032F4:  MOVWF  FA7
032F6:  BSF    FA6.1
032F8:  BTFSC  FA6.1
032FA:  BRA    32F8
032FC:  BCF    FA6.2
032FE:  MOVF   00,W
03300:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
03302:  MOVFF  FF2,00
03306:  BCF    FF2.7
03308:  CLRF   FAA
0330A:  MOVLW  07
0330C:  MOVWF  FA9
0330E:  MOVFF  183,FA8
03312:  BCF    FA6.6
03314:  BCF    FA6.7
03316:  BSF    FA6.2
03318:  MOVLW  55
0331A:  MOVWF  FA7
0331C:  MOVLW  AA
0331E:  MOVWF  FA7
03320:  BSF    FA6.1
03322:  BTFSC  FA6.1
03324:  BRA    3322
03326:  BCF    FA6.2
03328:  MOVF   00,W
0332A:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
0332C:  MOVFF  FF2,00
03330:  BCF    FF2.7
03332:  CLRF   FAA
03334:  MOVLW  08
03336:  MOVWF  FA9
03338:  MOVFF  184,FA8
0333C:  BCF    FA6.6
0333E:  BCF    FA6.7
03340:  BSF    FA6.2
03342:  MOVLW  55
03344:  MOVWF  FA7
03346:  MOVLW  AA
03348:  MOVWF  FA7
0334A:  BSF    FA6.1
0334C:  BTFSC  FA6.1
0334E:  BRA    334C
03350:  BCF    FA6.2
03352:  MOVF   00,W
03354:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
03356:  MOVFF  FF2,00
0335A:  BCF    FF2.7
0335C:  CLRF   FAA
0335E:  MOVLW  09
03360:  MOVWF  FA9
03362:  MOVFF  185,FA8
03366:  BCF    FA6.6
03368:  BCF    FA6.7
0336A:  BSF    FA6.2
0336C:  MOVLW  55
0336E:  MOVWF  FA7
03370:  MOVLW  AA
03372:  MOVWF  FA7
03374:  BSF    FA6.1
03376:  BTFSC  FA6.1
03378:  BRA    3376
0337A:  BCF    FA6.2
0337C:  MOVF   00,W
0337E:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
03380:  MOVFF  FF2,00
03384:  BCF    FF2.7
03386:  CLRF   FAA
03388:  MOVLW  0A
0338A:  MOVWF  FA9
0338C:  MOVFF  186,FA8
03390:  BCF    FA6.6
03392:  BCF    FA6.7
03394:  BSF    FA6.2
03396:  MOVLW  55
03398:  MOVWF  FA7
0339A:  MOVLW  AA
0339C:  MOVWF  FA7
0339E:  BSF    FA6.1
033A0:  BTFSC  FA6.1
033A2:  BRA    33A0
033A4:  BCF    FA6.2
033A6:  MOVF   00,W
033A8:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
033AA:  MOVFF  FF2,00
033AE:  BCF    FF2.7
033B0:  CLRF   FAA
033B2:  MOVLW  0B
033B4:  MOVWF  FA9
033B6:  MOVFF  187,FA8
033BA:  BCF    FA6.6
033BC:  BCF    FA6.7
033BE:  BSF    FA6.2
033C0:  MOVLW  55
033C2:  MOVWF  FA7
033C4:  MOVLW  AA
033C6:  MOVWF  FA7
033C8:  BSF    FA6.1
033CA:  BTFSC  FA6.1
033CC:  BRA    33CA
033CE:  BCF    FA6.2
033D0:  MOVF   00,W
033D2:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
033D4:  MOVFF  FF2,00
033D8:  BCF    FF2.7
033DA:  CLRF   FAA
033DC:  MOVLW  0C
033DE:  MOVWF  FA9
033E0:  MOVFF  188,FA8
033E4:  BCF    FA6.6
033E6:  BCF    FA6.7
033E8:  BSF    FA6.2
033EA:  MOVLW  55
033EC:  MOVWF  FA7
033EE:  MOVLW  AA
033F0:  MOVWF  FA7
033F2:  BSF    FA6.1
033F4:  BTFSC  FA6.1
033F6:  BRA    33F4
033F8:  BCF    FA6.2
033FA:  MOVF   00,W
033FC:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
033FE:  MOVFF  FF2,00
03402:  BCF    FF2.7
03404:  CLRF   FAA
03406:  MOVLW  0D
03408:  MOVWF  FA9
0340A:  MOVFF  189,FA8
0340E:  BCF    FA6.6
03410:  BCF    FA6.7
03412:  BSF    FA6.2
03414:  MOVLW  55
03416:  MOVWF  FA7
03418:  MOVLW  AA
0341A:  MOVWF  FA7
0341C:  BSF    FA6.1
0341E:  BTFSC  FA6.1
03420:  BRA    341E
03422:  BCF    FA6.2
03424:  MOVF   00,W
03426:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
03428:  MOVFF  FF2,00
0342C:  BCF    FF2.7
0342E:  CLRF   FAA
03430:  MOVLW  0E
03432:  MOVWF  FA9
03434:  MOVFF  18A,FA8
03438:  BCF    FA6.6
0343A:  BCF    FA6.7
0343C:  BSF    FA6.2
0343E:  MOVLW  55
03440:  MOVWF  FA7
03442:  MOVLW  AA
03444:  MOVWF  FA7
03446:  BSF    FA6.1
03448:  BTFSC  FA6.1
0344A:  BRA    3448
0344C:  BCF    FA6.2
0344E:  MOVF   00,W
03450:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
03452:  MOVFF  FF2,00
03456:  BCF    FF2.7
03458:  CLRF   FAA
0345A:  MOVLW  0F
0345C:  MOVWF  FA9
0345E:  MOVFF  18B,FA8
03462:  BCF    FA6.6
03464:  BCF    FA6.7
03466:  BSF    FA6.2
03468:  MOVLW  55
0346A:  MOVWF  FA7
0346C:  MOVLW  AA
0346E:  MOVWF  FA7
03470:  BSF    FA6.1
03472:  BTFSC  FA6.1
03474:  BRA    3472
03476:  BCF    FA6.2
03478:  MOVF   00,W
0347A:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
0347C:  MOVFF  FF2,00
03480:  BCF    FF2.7
03482:  CLRF   FAA
03484:  MOVLW  10
03486:  MOVWF  FA9
03488:  MOVFF  18C,FA8
0348C:  BCF    FA6.6
0348E:  BCF    FA6.7
03490:  BSF    FA6.2
03492:  MOVLW  55
03494:  MOVWF  FA7
03496:  MOVLW  AA
03498:  MOVWF  FA7
0349A:  BSF    FA6.1
0349C:  BTFSC  FA6.1
0349E:  BRA    349C
034A0:  BCF    FA6.2
034A2:  MOVF   00,W
034A4:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
034A6:  MOVFF  FF2,00
034AA:  BCF    FF2.7
034AC:  CLRF   FAA
034AE:  MOVLW  11
034B0:  MOVWF  FA9
034B2:  MOVFF  18D,FA8
034B6:  BCF    FA6.6
034B8:  BCF    FA6.7
034BA:  BSF    FA6.2
034BC:  MOVLW  55
034BE:  MOVWF  FA7
034C0:  MOVLW  AA
034C2:  MOVWF  FA7
034C4:  BSF    FA6.1
034C6:  BTFSC  FA6.1
034C8:  BRA    34C6
034CA:  BCF    FA6.2
034CC:  MOVF   00,W
034CE:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
034D0:  MOVFF  FF2,00
034D4:  BCF    FF2.7
034D6:  CLRF   FAA
034D8:  MOVLW  12
034DA:  MOVWF  FA9
034DC:  MOVFF  18E,FA8
034E0:  BCF    FA6.6
034E2:  BCF    FA6.7
034E4:  BSF    FA6.2
034E6:  MOVLW  55
034E8:  MOVWF  FA7
034EA:  MOVLW  AA
034EC:  MOVWF  FA7
034EE:  BSF    FA6.1
034F0:  BTFSC  FA6.1
034F2:  BRA    34F0
034F4:  BCF    FA6.2
034F6:  MOVF   00,W
034F8:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
034FA:  MOVFF  FF2,00
034FE:  BCF    FF2.7
03500:  CLRF   FAA
03502:  MOVLW  13
03504:  MOVWF  FA9
03506:  MOVFF  18F,FA8
0350A:  BCF    FA6.6
0350C:  BCF    FA6.7
0350E:  BSF    FA6.2
03510:  MOVLW  55
03512:  MOVWF  FA7
03514:  MOVLW  AA
03516:  MOVWF  FA7
03518:  BSF    FA6.1
0351A:  BTFSC  FA6.1
0351C:  BRA    351A
0351E:  BCF    FA6.2
03520:  MOVF   00,W
03522:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
03524:  MOVFF  FF2,00
03528:  BCF    FF2.7
0352A:  CLRF   FAA
0352C:  MOVLW  14
0352E:  MOVWF  FA9
03530:  MOVFF  190,FA8
03534:  BCF    FA6.6
03536:  BCF    FA6.7
03538:  BSF    FA6.2
0353A:  MOVLW  55
0353C:  MOVWF  FA7
0353E:  MOVLW  AA
03540:  MOVWF  FA7
03542:  BSF    FA6.1
03544:  BTFSC  FA6.1
03546:  BRA    3544
03548:  BCF    FA6.2
0354A:  MOVF   00,W
0354C:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
0354E:  MOVFF  FF2,00
03552:  BCF    FF2.7
03554:  CLRF   FAA
03556:  MOVLW  15
03558:  MOVWF  FA9
0355A:  MOVFF  191,FA8
0355E:  BCF    FA6.6
03560:  BCF    FA6.7
03562:  BSF    FA6.2
03564:  MOVLW  55
03566:  MOVWF  FA7
03568:  MOVLW  AA
0356A:  MOVWF  FA7
0356C:  BSF    FA6.1
0356E:  BTFSC  FA6.1
03570:  BRA    356E
03572:  BCF    FA6.2
03574:  MOVF   00,W
03576:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
03578:  MOVFF  FF2,00
0357C:  BCF    FF2.7
0357E:  CLRF   FAA
03580:  MOVLW  16
03582:  MOVWF  FA9
03584:  MOVFF  192,FA8
03588:  BCF    FA6.6
0358A:  BCF    FA6.7
0358C:  BSF    FA6.2
0358E:  MOVLW  55
03590:  MOVWF  FA7
03592:  MOVLW  AA
03594:  MOVWF  FA7
03596:  BSF    FA6.1
03598:  BTFSC  FA6.1
0359A:  BRA    3598
0359C:  BCF    FA6.2
0359E:  MOVF   00,W
035A0:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
035A2:  MOVFF  FF2,00
035A6:  BCF    FF2.7
035A8:  CLRF   FAA
035AA:  MOVLW  17
035AC:  MOVWF  FA9
035AE:  MOVFF  193,FA8
035B2:  BCF    FA6.6
035B4:  BCF    FA6.7
035B6:  BSF    FA6.2
035B8:  MOVLW  55
035BA:  MOVWF  FA7
035BC:  MOVLW  AA
035BE:  MOVWF  FA7
035C0:  BSF    FA6.1
035C2:  BTFSC  FA6.1
035C4:  BRA    35C2
035C6:  BCF    FA6.2
035C8:  MOVF   00,W
035CA:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
035CC:  MOVFF  FF2,00
035D0:  BCF    FF2.7
035D2:  CLRF   FAA
035D4:  MOVLW  18
035D6:  MOVWF  FA9
035D8:  MOVFF  194,FA8
035DC:  BCF    FA6.6
035DE:  BCF    FA6.7
035E0:  BSF    FA6.2
035E2:  MOVLW  55
035E4:  MOVWF  FA7
035E6:  MOVLW  AA
035E8:  MOVWF  FA7
035EA:  BSF    FA6.1
035EC:  BTFSC  FA6.1
035EE:  BRA    35EC
035F0:  BCF    FA6.2
035F2:  MOVF   00,W
035F4:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
035F6:  MOVFF  FF2,00
035FA:  BCF    FF2.7
035FC:  CLRF   FAA
035FE:  MOVLW  19
03600:  MOVWF  FA9
03602:  MOVFF  195,FA8
03606:  BCF    FA6.6
03608:  BCF    FA6.7
0360A:  BSF    FA6.2
0360C:  MOVLW  55
0360E:  MOVWF  FA7
03610:  MOVLW  AA
03612:  MOVWF  FA7
03614:  BSF    FA6.1
03616:  BTFSC  FA6.1
03618:  BRA    3616
0361A:  BCF    FA6.2
0361C:  MOVF   00,W
0361E:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
03620:  MOVFF  FF2,00
03624:  BCF    FF2.7
03626:  CLRF   FAA
03628:  MOVLW  1A
0362A:  MOVWF  FA9
0362C:  MOVFF  196,FA8
03630:  BCF    FA6.6
03632:  BCF    FA6.7
03634:  BSF    FA6.2
03636:  MOVLW  55
03638:  MOVWF  FA7
0363A:  MOVLW  AA
0363C:  MOVWF  FA7
0363E:  BSF    FA6.1
03640:  BTFSC  FA6.1
03642:  BRA    3640
03644:  BCF    FA6.2
03646:  MOVF   00,W
03648:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
0364A:  MOVFF  FF2,00
0364E:  BCF    FF2.7
03650:  CLRF   FAA
03652:  MOVLW  1B
03654:  MOVWF  FA9
03656:  MOVFF  197,FA8
0365A:  BCF    FA6.6
0365C:  BCF    FA6.7
0365E:  BSF    FA6.2
03660:  MOVLW  55
03662:  MOVWF  FA7
03664:  MOVLW  AA
03666:  MOVWF  FA7
03668:  BSF    FA6.1
0366A:  BTFSC  FA6.1
0366C:  BRA    366A
0366E:  BCF    FA6.2
03670:  MOVF   00,W
03672:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //All Fault Delay Time
03674:  MOVFF  FF2,00
03678:  BCF    FF2.7
0367A:  CLRF   FAA
0367C:  MOVLW  1C
0367E:  MOVWF  FA9
03680:  MOVFF  198,FA8
03684:  BCF    FA6.6
03686:  BCF    FA6.7
03688:  BSF    FA6.2
0368A:  MOVLW  55
0368C:  MOVWF  FA7
0368E:  MOVLW  AA
03690:  MOVWF  FA7
03692:  BSF    FA6.1
03694:  BTFSC  FA6.1
03696:  BRA    3694
03698:  BCF    FA6.2
0369A:  MOVF   00,W
0369C:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
0369E:  MOVFF  FF2,00
036A2:  BCF    FF2.7
036A4:  CLRF   FAA
036A6:  MOVLW  1D
036A8:  MOVWF  FA9
036AA:  MOVFF  199,FA8
036AE:  BCF    FA6.6
036B0:  BCF    FA6.7
036B2:  BSF    FA6.2
036B4:  MOVLW  55
036B6:  MOVWF  FA7
036B8:  MOVLW  AA
036BA:  MOVWF  FA7
036BC:  BSF    FA6.1
036BE:  BTFSC  FA6.1
036C0:  BRA    36BE
036C2:  BCF    FA6.2
036C4:  MOVF   00,W
036C6:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Fault Delay Time1
036C8:  MOVFF  FF2,00
036CC:  BCF    FF2.7
036CE:  CLRF   FAA
036D0:  MOVLW  1E
036D2:  MOVWF  FA9
036D4:  MOVFF  19A,FA8
036D8:  BCF    FA6.6
036DA:  BCF    FA6.7
036DC:  BSF    FA6.2
036DE:  MOVLW  55
036E0:  MOVWF  FA7
036E2:  MOVLW  AA
036E4:  MOVWF  FA7
036E6:  BSF    FA6.1
036E8:  BTFSC  FA6.1
036EA:  BRA    36E8
036EC:  BCF    FA6.2
036EE:  MOVF   00,W
036F0:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Fault Delay Time2
036F2:  MOVFF  FF2,00
036F6:  BCF    FF2.7
036F8:  CLRF   FAA
036FA:  MOVLW  1F
036FC:  MOVWF  FA9
036FE:  MOVFF  19B,FA8
03702:  BCF    FA6.6
03704:  BCF    FA6.7
03706:  BSF    FA6.2
03708:  MOVLW  55
0370A:  MOVWF  FA7
0370C:  MOVLW  AA
0370E:  MOVWF  FA7
03710:  BSF    FA6.1
03712:  BTFSC  FA6.1
03714:  BRA    3712
03716:  BCF    FA6.2
03718:  MOVF   00,W
0371A:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Fault Delay Time3
0371C:  MOVFF  FF2,00
03720:  BCF    FF2.7
03722:  CLRF   FAA
03724:  MOVLW  20
03726:  MOVWF  FA9
03728:  MOVFF  19C,FA8
0372C:  BCF    FA6.6
0372E:  BCF    FA6.7
03730:  BSF    FA6.2
03732:  MOVLW  55
03734:  MOVWF  FA7
03736:  MOVLW  AA
03738:  MOVWF  FA7
0373A:  BSF    FA6.1
0373C:  BTFSC  FA6.1
0373E:  BRA    373C
03740:  BCF    FA6.2
03742:  MOVF   00,W
03744:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Fault Delay Time4
03746:  MOVFF  FF2,00
0374A:  BCF    FF2.7
0374C:  CLRF   FAA
0374E:  MOVLW  21
03750:  MOVWF  FA9
03752:  MOVFF  19D,FA8
03756:  BCF    FA6.6
03758:  BCF    FA6.7
0375A:  BSF    FA6.2
0375C:  MOVLW  55
0375E:  MOVWF  FA7
03760:  MOVLW  AA
03762:  MOVWF  FA7
03764:  BSF    FA6.1
03766:  BTFSC  FA6.1
03768:  BRA    3766
0376A:  BCF    FA6.2
0376C:  MOVF   00,W
0376E:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Fault Delay Time5
03770:  MOVFF  FF2,00
03774:  BCF    FF2.7
03776:  CLRF   FAA
03778:  MOVLW  22
0377A:  MOVWF  FA9
0377C:  MOVFF  19E,FA8
03780:  BCF    FA6.6
03782:  BCF    FA6.7
03784:  BSF    FA6.2
03786:  MOVLW  55
03788:  MOVWF  FA7
0378A:  MOVLW  AA
0378C:  MOVWF  FA7
0378E:  BSF    FA6.1
03790:  BTFSC  FA6.1
03792:  BRA    3790
03794:  BCF    FA6.2
03796:  MOVF   00,W
03798:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Fault Delay Time6
0379A:  MOVFF  FF2,00
0379E:  BCF    FF2.7
037A0:  CLRF   FAA
037A2:  MOVLW  23
037A4:  MOVWF  FA9
037A6:  MOVFF  19F,FA8
037AA:  BCF    FA6.6
037AC:  BCF    FA6.7
037AE:  BSF    FA6.2
037B0:  MOVLW  55
037B2:  MOVWF  FA7
037B4:  MOVLW  AA
037B6:  MOVWF  FA7
037B8:  BSF    FA6.1
037BA:  BTFSC  FA6.1
037BC:  BRA    37BA
037BE:  BCF    FA6.2
037C0:  MOVF   00,W
037C2:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Fault Delay Time7
037C4:  MOVFF  FF2,00
037C8:  BCF    FF2.7
037CA:  CLRF   FAA
037CC:  MOVLW  24
037CE:  MOVWF  FA9
037D0:  MOVFF  1A0,FA8
037D4:  BCF    FA6.6
037D6:  BCF    FA6.7
037D8:  BSF    FA6.2
037DA:  MOVLW  55
037DC:  MOVWF  FA7
037DE:  MOVLW  AA
037E0:  MOVWF  FA7
037E2:  BSF    FA6.1
037E4:  BTFSC  FA6.1
037E6:  BRA    37E4
037E8:  BCF    FA6.2
037EA:  MOVF   00,W
037EC:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Fault Delay Time8
037EE:  MOVFF  FF2,00
037F2:  BCF    FF2.7
037F4:  CLRF   FAA
037F6:  MOVLW  25
037F8:  MOVWF  FA9
037FA:  MOVFF  1A1,FA8
037FE:  BCF    FA6.6
03800:  BCF    FA6.7
03802:  BSF    FA6.2
03804:  MOVLW  55
03806:  MOVWF  FA7
03808:  MOVLW  AA
0380A:  MOVWF  FA7
0380C:  BSF    FA6.1
0380E:  BTFSC  FA6.1
03810:  BRA    380E
03812:  BCF    FA6.2
03814:  MOVF   00,W
03816:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Fault Delay Time9
03818:  MOVFF  FF2,00
0381C:  BCF    FF2.7
0381E:  CLRF   FAA
03820:  MOVLW  26
03822:  MOVWF  FA9
03824:  MOVFF  1A2,FA8
03828:  BCF    FA6.6
0382A:  BCF    FA6.7
0382C:  BSF    FA6.2
0382E:  MOVLW  55
03830:  MOVWF  FA7
03832:  MOVLW  AA
03834:  MOVWF  FA7
03836:  BSF    FA6.1
03838:  BTFSC  FA6.1
0383A:  BRA    3838
0383C:  BCF    FA6.2
0383E:  MOVF   00,W
03840:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Fault Delay Time10
03842:  MOVFF  FF2,00
03846:  BCF    FF2.7
03848:  CLRF   FAA
0384A:  MOVLW  27
0384C:  MOVWF  FA9
0384E:  MOVFF  1A3,FA8
03852:  BCF    FA6.6
03854:  BCF    FA6.7
03856:  BSF    FA6.2
03858:  MOVLW  55
0385A:  MOVWF  FA7
0385C:  MOVLW  AA
0385E:  MOVWF  FA7
03860:  BSF    FA6.1
03862:  BTFSC  FA6.1
03864:  BRA    3862
03866:  BCF    FA6.2
03868:  MOVF   00,W
0386A:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Fault Delay Time11
0386C:  MOVFF  FF2,00
03870:  BCF    FF2.7
03872:  CLRF   FAA
03874:  MOVLW  28
03876:  MOVWF  FA9
03878:  MOVFF  1A4,FA8
0387C:  BCF    FA6.6
0387E:  BCF    FA6.7
03880:  BSF    FA6.2
03882:  MOVLW  55
03884:  MOVWF  FA7
03886:  MOVLW  AA
03888:  MOVWF  FA7
0388A:  BSF    FA6.1
0388C:  BTFSC  FA6.1
0388E:  BRA    388C
03890:  BCF    FA6.2
03892:  MOVF   00,W
03894:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Fault Delay Time12
03896:  MOVFF  FF2,00
0389A:  BCF    FF2.7
0389C:  CLRF   FAA
0389E:  MOVLW  29
038A0:  MOVWF  FA9
038A2:  MOVFF  1A5,FA8
038A6:  BCF    FA6.6
038A8:  BCF    FA6.7
038AA:  BSF    FA6.2
038AC:  MOVLW  55
038AE:  MOVWF  FA7
038B0:  MOVLW  AA
038B2:  MOVWF  FA7
038B4:  BSF    FA6.1
038B6:  BTFSC  FA6.1
038B8:  BRA    38B6
038BA:  BCF    FA6.2
038BC:  MOVF   00,W
038BE:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Fault Delay Time13
038C0:  MOVFF  FF2,00
038C4:  BCF    FF2.7
038C6:  CLRF   FAA
038C8:  MOVLW  2A
038CA:  MOVWF  FA9
038CC:  MOVFF  1A6,FA8
038D0:  BCF    FA6.6
038D2:  BCF    FA6.7
038D4:  BSF    FA6.2
038D6:  MOVLW  55
038D8:  MOVWF  FA7
038DA:  MOVLW  AA
038DC:  MOVWF  FA7
038DE:  BSF    FA6.1
038E0:  BTFSC  FA6.1
038E2:  BRA    38E0
038E4:  BCF    FA6.2
038E6:  MOVF   00,W
038E8:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Fault Delay Time14
038EA:  MOVFF  FF2,00
038EE:  BCF    FF2.7
038F0:  CLRF   FAA
038F2:  MOVLW  2B
038F4:  MOVWF  FA9
038F6:  MOVFF  1A7,FA8
038FA:  BCF    FA6.6
038FC:  BCF    FA6.7
038FE:  BSF    FA6.2
03900:  MOVLW  55
03902:  MOVWF  FA7
03904:  MOVLW  AA
03906:  MOVWF  FA7
03908:  BSF    FA6.1
0390A:  BTFSC  FA6.1
0390C:  BRA    390A
0390E:  BCF    FA6.2
03910:  MOVF   00,W
03912:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Fault Delay Time15
03914:  MOVFF  FF2,00
03918:  BCF    FF2.7
0391A:  CLRF   FAA
0391C:  MOVLW  2C
0391E:  MOVWF  FA9
03920:  MOVFF  1A8,FA8
03924:  BCF    FA6.6
03926:  BCF    FA6.7
03928:  BSF    FA6.2
0392A:  MOVLW  55
0392C:  MOVWF  FA7
0392E:  MOVLW  AA
03930:  MOVWF  FA7
03932:  BSF    FA6.1
03934:  BTFSC  FA6.1
03936:  BRA    3934
03938:  BCF    FA6.2
0393A:  MOVF   00,W
0393C:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Fault Delay Time16
0393E:  MOVFF  FF2,00
03942:  BCF    FF2.7
03944:  CLRF   FAA
03946:  MOVLW  2D
03948:  MOVWF  FA9
0394A:  MOVFF  1A9,FA8
0394E:  BCF    FA6.6
03950:  BCF    FA6.7
03952:  BSF    FA6.2
03954:  MOVLW  55
03956:  MOVWF  FA7
03958:  MOVLW  AA
0395A:  MOVWF  FA7
0395C:  BSF    FA6.1
0395E:  BTFSC  FA6.1
03960:  BRA    395E
03962:  BCF    FA6.2
03964:  MOVF   00,W
03966:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Fault Delay Time17
03968:  MOVFF  FF2,00
0396C:  BCF    FF2.7
0396E:  CLRF   FAA
03970:  MOVLW  2E
03972:  MOVWF  FA9
03974:  MOVFF  1AA,FA8
03978:  BCF    FA6.6
0397A:  BCF    FA6.7
0397C:  BSF    FA6.2
0397E:  MOVLW  55
03980:  MOVWF  FA7
03982:  MOVLW  AA
03984:  MOVWF  FA7
03986:  BSF    FA6.1
03988:  BTFSC  FA6.1
0398A:  BRA    3988
0398C:  BCF    FA6.2
0398E:  MOVF   00,W
03990:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Fault Delay Time18
03992:  MOVFF  FF2,00
03996:  BCF    FF2.7
03998:  CLRF   FAA
0399A:  MOVLW  2F
0399C:  MOVWF  FA9
0399E:  MOVFF  1AB,FA8
039A2:  BCF    FA6.6
039A4:  BCF    FA6.7
039A6:  BSF    FA6.2
039A8:  MOVLW  55
039AA:  MOVWF  FA7
039AC:  MOVLW  AA
039AE:  MOVWF  FA7
039B0:  BSF    FA6.1
039B2:  BTFSC  FA6.1
039B4:  BRA    39B2
039B6:  BCF    FA6.2
039B8:  MOVF   00,W
039BA:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Fault Delay Time19
039BC:  MOVFF  FF2,00
039C0:  BCF    FF2.7
039C2:  CLRF   FAA
039C4:  MOVLW  30
039C6:  MOVWF  FA9
039C8:  MOVFF  1AC,FA8
039CC:  BCF    FA6.6
039CE:  BCF    FA6.7
039D0:  BSF    FA6.2
039D2:  MOVLW  55
039D4:  MOVWF  FA7
039D6:  MOVLW  AA
039D8:  MOVWF  FA7
039DA:  BSF    FA6.1
039DC:  BTFSC  FA6.1
039DE:  BRA    39DC
039E0:  BCF    FA6.2
039E2:  MOVF   00,W
039E4:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Fault Delay Time20
039E6:  MOVFF  FF2,00
039EA:  BCF    FF2.7
039EC:  CLRF   FAA
039EE:  MOVLW  31
039F0:  MOVWF  FA9
039F2:  MOVFF  1AD,FA8
039F6:  BCF    FA6.6
039F8:  BCF    FA6.7
039FA:  BSF    FA6.2
039FC:  MOVLW  55
039FE:  MOVWF  FA7
03A00:  MOVLW  AA
03A02:  MOVWF  FA7
03A04:  BSF    FA6.1
03A06:  BTFSC  FA6.1
03A08:  BRA    3A06
03A0A:  BCF    FA6.2
03A0C:  MOVF   00,W
03A0E:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
03A10:  MOVLB  7
03A12:  CLRF   x08
03A14:  CLRF   x07
....................             for(; ; a++)
....................             {
....................                restart_wdt();
03A16:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
03A18:  MOVLW  AE
03A1A:  ADDWF  x07,W
03A1C:  MOVWF  FE9
03A1E:  MOVLW  01
03A20:  ADDWFC x08,W
03A22:  MOVWF  FEA
03A24:  MOVFF  FEF,709
....................                if((phonenum == 0x0D) || (a > 15))
03A28:  MOVF   x09,W
03A2A:  SUBLW  0D
03A2C:  BZ    3A38
03A2E:  MOVF   x08,F
03A30:  BNZ   3A38
03A32:  MOVF   x07,W
03A34:  SUBLW  0F
03A36:  BC    3A86
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
03A38:  MOVLW  89
03A3A:  ADDWF  x07,W
03A3C:  MOVWF  FE9
03A3E:  MOVLW  05
03A40:  ADDWFC x08,W
03A42:  MOVWF  FEA
03A44:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
03A46:  MOVLW  32
03A48:  ADDWF  x07,W
03A4A:  MOVWF  x10
03A4C:  MOVLW  00
03A4E:  ADDWFC x08,W
03A50:  MOVWF  x11
03A52:  MOVF   FF2,W
03A54:  MOVWF  00
03A56:  BCF    FF2.7
03A58:  MOVFF  711,FAA
03A5C:  MOVFF  710,FA9
03A60:  MOVFF  709,FA8
03A64:  BCF    FA6.6
03A66:  BCF    FA6.7
03A68:  BSF    FA6.2
03A6A:  MOVLB  F
03A6C:  MOVLW  55
03A6E:  MOVWF  FA7
03A70:  MOVLW  AA
03A72:  MOVWF  FA7
03A74:  BSF    FA6.1
03A76:  BTFSC  FA6.1
03A78:  BRA    3A76
03A7A:  BCF    FA6.2
03A7C:  MOVF   00,W
03A7E:  IORWF  FF2,F
....................                   break;
03A80:  BRA    3ADC
....................                }
03A82:  BRA    3AD0
03A84:  MOVLB  7
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
03A86:  MOVLW  89
03A88:  ADDWF  x07,W
03A8A:  MOVWF  FE9
03A8C:  MOVLW  05
03A8E:  ADDWFC x08,W
03A90:  MOVWF  FEA
03A92:  MOVFF  709,FEF
....................                   
....................                   write_eeprom(0x32+a,phonenum);
03A96:  MOVLW  32
03A98:  ADDWF  x07,W
03A9A:  MOVWF  x10
03A9C:  MOVLW  00
03A9E:  ADDWFC x08,W
03AA0:  MOVWF  x11
03AA2:  MOVF   FF2,W
03AA4:  MOVWF  00
03AA6:  BCF    FF2.7
03AA8:  MOVFF  711,FAA
03AAC:  MOVFF  710,FA9
03AB0:  MOVFF  709,FA8
03AB4:  BCF    FA6.6
03AB6:  BCF    FA6.7
03AB8:  BSF    FA6.2
03ABA:  MOVLB  F
03ABC:  MOVLW  55
03ABE:  MOVWF  FA7
03AC0:  MOVLW  AA
03AC2:  MOVWF  FA7
03AC4:  BSF    FA6.1
03AC6:  BTFSC  FA6.1
03AC8:  BRA    3AC6
03ACA:  BCF    FA6.2
03ACC:  MOVF   00,W
03ACE:  IORWF  FF2,F
....................                }
03AD0:  MOVLB  7
03AD2:  INCF   x07,F
03AD4:  BTFSC  FD8.2
03AD6:  INCF   x08,F
03AD8:  BRA    3A16
03ADA:  MOVLB  F
....................             }
.................... 
....................                         
....................             TxD_Buff[0] = Address ;         //Address
03ADC:  MOVFF  79,7B
....................             TxD_Buff[1] = 0x21 ;            //return function code
03AE0:  MOVLW  21
03AE2:  MOVLB  0
03AE4:  MOVWF  x7C
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
03AE6:  MOVLB  7
03AE8:  CLRF   x12
03AEA:  MOVLW  7B
03AEC:  MOVWF  x11
03AEE:  MOVLW  02
03AF0:  MOVWF  x13
03AF2:  MOVLB  0
03AF4:  CALL   1FB8
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
03AF8:  MOVFF  37B,7D
....................             TxD_Buff[3] = CRC_Lo ;
03AFC:  MOVFF  37A,7E
.................... 
....................             output_bit(P485ctrl,1);
03B00:  BSF    F8A.3
03B02:  BCF    F93.3
....................             delay_ms(10);
03B04:  MOVLW  0A
03B06:  MOVLB  7
03B08:  MOVWF  x10
03B0A:  MOVLB  0
03B0C:  CALL   07CC
.................... 
....................             putc(Txd_Buff[0]);
03B10:  MOVF   x7B,W
03B12:  CALL   200E
....................             putc(Txd_Buff[1]);
03B16:  MOVF   x7C,W
03B18:  CALL   200E
....................             putc(Txd_Buff[2]);
03B1C:  MOVF   x7D,W
03B1E:  CALL   200E
....................             putc(Txd_Buff[3]);
03B22:  MOVF   x7E,W
03B24:  CALL   200E
.................... 
....................             delay_ms(3);
03B28:  MOVLW  03
03B2A:  MOVLB  7
03B2C:  MOVWF  x10
03B2E:  MOVLB  0
03B30:  CALL   07CC
....................             output_bit(P485ctrl,0);
03B34:  BCF    F8A.3
03B36:  BCF    F93.3
....................             
....................             reset_cpu();
03B38:  RESET
....................             //Read_Config(); //jj
....................          }
03B3A:  GOTO   43C0
03B3E:  MOVLB  1
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
03B40:  MOVF   x7B,W
03B42:  SUBLW  22
03B44:  BTFSS  FD8.2
03B46:  GOTO   43C0
....................          {
....................             
....................             //SMS_Massage
....................             int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
03B4A:  MOVLB  7
03B4C:  CLRF   x0B
03B4E:  MOVLW  04
03B50:  MOVWF  x0A
03B52:  CLRF   x0D
03B54:  CLRF   x0C
03B56:  CLRF   x0F
03B58:  CLRF   x0E
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03B5A:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 32))
03B5C:  MOVLW  7A
03B5E:  ADDWF  x0A,W
03B60:  MOVWF  FE9
03B62:  MOVLW  01
03B64:  ADDWFC x0B,W
03B66:  MOVWF  FEA
03B68:  MOVF   FEF,W
03B6A:  SUBLW  0D
03B6C:  BZ    3B78
03B6E:  MOVF   x0D,F
03B70:  BNZ   3B78
03B72:  MOVF   x0C,W
03B74:  SUBLW  20
03B76:  BC    3BB8
....................                {
....................                   write_eeprom(0x5D+i,0x0D);
03B78:  MOVLW  5D
03B7A:  ADDWF  x0A,W
03B7C:  MOVWF  x10
03B7E:  MOVLW  00
03B80:  ADDWFC x0B,W
03B82:  MOVWF  x11
03B84:  MOVF   FF2,W
03B86:  MOVWF  00
03B88:  BCF    FF2.7
03B8A:  MOVFF  711,FAA
03B8E:  MOVFF  710,FA9
03B92:  MOVLW  0D
03B94:  MOVWF  FA8
03B96:  BCF    FA6.6
03B98:  BCF    FA6.7
03B9A:  BSF    FA6.2
03B9C:  MOVLB  F
03B9E:  MOVLW  55
03BA0:  MOVWF  FA7
03BA2:  MOVLW  AA
03BA4:  MOVWF  FA7
03BA6:  BSF    FA6.1
03BA8:  BTFSC  FA6.1
03BAA:  BRA    3BA8
03BAC:  BCF    FA6.2
03BAE:  MOVF   00,W
03BB0:  IORWF  FF2,F
....................                   break;
03BB2:  BRA    3C42
....................                }
03BB4:  BRA    3C2A
03BB6:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage1[j] = RxD_Buff[i];
03BB8:  MOVLW  98
03BBA:  ADDWF  x0C,W
03BBC:  MOVWF  01
03BBE:  MOVLW  05
03BC0:  ADDWFC x0D,W
03BC2:  MOVWF  03
03BC4:  MOVLW  7A
03BC6:  ADDWF  x0A,W
03BC8:  MOVWF  FE9
03BCA:  MOVLW  01
03BCC:  ADDWFC x0B,W
03BCE:  MOVWF  FEA
03BD0:  MOVFF  FEF,712
03BD4:  MOVFF  03,FEA
03BD8:  MOVFF  01,FE9
03BDC:  MOVFF  712,FEF
....................                   
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03BE0:  MOVLW  5D
03BE2:  ADDWF  x0A,W
03BE4:  MOVWF  x10
03BE6:  MOVLW  00
03BE8:  ADDWFC x0B,W
03BEA:  MOVWF  x11
03BEC:  MOVLW  7A
03BEE:  ADDWF  x0A,W
03BF0:  MOVWF  FE9
03BF2:  MOVLW  01
03BF4:  ADDWFC x0B,W
03BF6:  MOVWF  FEA
03BF8:  MOVFF  FEF,712
03BFC:  MOVF   FF2,W
03BFE:  MOVWF  00
03C00:  BCF    FF2.7
03C02:  MOVFF  711,FAA
03C06:  MOVFF  710,FA9
03C0A:  MOVFF  712,FA8
03C0E:  BCF    FA6.6
03C10:  BCF    FA6.7
03C12:  BSF    FA6.2
03C14:  MOVLB  F
03C16:  MOVLW  55
03C18:  MOVWF  FA7
03C1A:  MOVLW  AA
03C1C:  MOVWF  FA7
03C1E:  BSF    FA6.1
03C20:  BTFSC  FA6.1
03C22:  BRA    3C20
03C24:  BCF    FA6.2
03C26:  MOVF   00,W
03C28:  IORWF  FF2,F
....................                }
03C2A:  MOVLB  7
03C2C:  MOVFF  70B,03
03C30:  MOVF   x0A,W
03C32:  INCF   x0A,F
03C34:  BTFSC  FD8.2
03C36:  INCF   x0B,F
03C38:  INCF   x0C,F
03C3A:  BTFSC  FD8.2
03C3C:  INCF   x0D,F
03C3E:  BRA    3B5A
03C40:  MOVLB  F
....................             }
....................             SMS_Massage1[j] = '\0' ; // end string
03C42:  MOVLW  98
03C44:  MOVLB  7
03C46:  ADDWF  x0C,W
03C48:  MOVWF  FE9
03C4A:  MOVLW  05
03C4C:  ADDWFC x0D,W
03C4E:  MOVWF  FEA
03C50:  CLRF   FEF
....................             
....................             j=0;
03C52:  CLRF   x0D
03C54:  CLRF   x0C
....................             i++;
03C56:  INCF   x0A,F
03C58:  BTFSC  FD8.2
03C5A:  INCF   x0B,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03C5C:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 32))
03C5E:  MOVLW  7A
03C60:  ADDWF  x0A,W
03C62:  MOVWF  FE9
03C64:  MOVLW  01
03C66:  ADDWFC x0B,W
03C68:  MOVWF  FEA
03C6A:  MOVF   FEF,W
03C6C:  SUBLW  0D
03C6E:  BZ    3C7A
03C70:  MOVF   x0D,F
03C72:  BNZ   3C7A
03C74:  MOVF   x0C,W
03C76:  SUBLW  20
03C78:  BC    3CBA
....................                {  
....................                   write_eeprom(0x5D+i,0x0D);
03C7A:  MOVLW  5D
03C7C:  ADDWF  x0A,W
03C7E:  MOVWF  x10
03C80:  MOVLW  00
03C82:  ADDWFC x0B,W
03C84:  MOVWF  x11
03C86:  MOVF   FF2,W
03C88:  MOVWF  00
03C8A:  BCF    FF2.7
03C8C:  MOVFF  711,FAA
03C90:  MOVFF  710,FA9
03C94:  MOVLW  0D
03C96:  MOVWF  FA8
03C98:  BCF    FA6.6
03C9A:  BCF    FA6.7
03C9C:  BSF    FA6.2
03C9E:  MOVLB  F
03CA0:  MOVLW  55
03CA2:  MOVWF  FA7
03CA4:  MOVLW  AA
03CA6:  MOVWF  FA7
03CA8:  BSF    FA6.1
03CAA:  BTFSC  FA6.1
03CAC:  BRA    3CAA
03CAE:  BCF    FA6.2
03CB0:  MOVF   00,W
03CB2:  IORWF  FF2,F
....................                   break;
03CB4:  BRA    3D44
....................                }
03CB6:  BRA    3D2C
03CB8:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage2[j] = RxD_Buff[i];
03CBA:  MOVLW  B8
03CBC:  ADDWF  x0C,W
03CBE:  MOVWF  01
03CC0:  MOVLW  05
03CC2:  ADDWFC x0D,W
03CC4:  MOVWF  03
03CC6:  MOVLW  7A
03CC8:  ADDWF  x0A,W
03CCA:  MOVWF  FE9
03CCC:  MOVLW  01
03CCE:  ADDWFC x0B,W
03CD0:  MOVWF  FEA
03CD2:  MOVFF  FEF,712
03CD6:  MOVFF  03,FEA
03CDA:  MOVFF  01,FE9
03CDE:  MOVFF  712,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03CE2:  MOVLW  5D
03CE4:  ADDWF  x0A,W
03CE6:  MOVWF  x10
03CE8:  MOVLW  00
03CEA:  ADDWFC x0B,W
03CEC:  MOVWF  x11
03CEE:  MOVLW  7A
03CF0:  ADDWF  x0A,W
03CF2:  MOVWF  FE9
03CF4:  MOVLW  01
03CF6:  ADDWFC x0B,W
03CF8:  MOVWF  FEA
03CFA:  MOVFF  FEF,712
03CFE:  MOVF   FF2,W
03D00:  MOVWF  00
03D02:  BCF    FF2.7
03D04:  MOVFF  711,FAA
03D08:  MOVFF  710,FA9
03D0C:  MOVFF  712,FA8
03D10:  BCF    FA6.6
03D12:  BCF    FA6.7
03D14:  BSF    FA6.2
03D16:  MOVLB  F
03D18:  MOVLW  55
03D1A:  MOVWF  FA7
03D1C:  MOVLW  AA
03D1E:  MOVWF  FA7
03D20:  BSF    FA6.1
03D22:  BTFSC  FA6.1
03D24:  BRA    3D22
03D26:  BCF    FA6.2
03D28:  MOVF   00,W
03D2A:  IORWF  FF2,F
....................                }
03D2C:  MOVLB  7
03D2E:  MOVFF  70B,03
03D32:  MOVF   x0A,W
03D34:  INCF   x0A,F
03D36:  BTFSC  FD8.2
03D38:  INCF   x0B,F
03D3A:  INCF   x0C,F
03D3C:  BTFSC  FD8.2
03D3E:  INCF   x0D,F
03D40:  BRA    3C5C
03D42:  MOVLB  F
....................             }
....................             SMS_Massage2[j] = '\0' ; // end string
03D44:  MOVLW  B8
03D46:  MOVLB  7
03D48:  ADDWF  x0C,W
03D4A:  MOVWF  FE9
03D4C:  MOVLW  05
03D4E:  ADDWFC x0D,W
03D50:  MOVWF  FEA
03D52:  CLRF   FEF
....................             
....................             j=0;
03D54:  CLRF   x0D
03D56:  CLRF   x0C
....................             i++;
03D58:  INCF   x0A,F
03D5A:  BTFSC  FD8.2
03D5C:  INCF   x0B,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03D5E:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 32))
03D60:  MOVLW  7A
03D62:  ADDWF  x0A,W
03D64:  MOVWF  FE9
03D66:  MOVLW  01
03D68:  ADDWFC x0B,W
03D6A:  MOVWF  FEA
03D6C:  MOVF   FEF,W
03D6E:  SUBLW  0D
03D70:  BZ    3D7C
03D72:  MOVF   x0D,F
03D74:  BNZ   3D7C
03D76:  MOVF   x0C,W
03D78:  SUBLW  20
03D7A:  BC    3DBC
....................                {
....................                   write_eeprom(0x5D+i,0x0D);
03D7C:  MOVLW  5D
03D7E:  ADDWF  x0A,W
03D80:  MOVWF  x10
03D82:  MOVLW  00
03D84:  ADDWFC x0B,W
03D86:  MOVWF  x11
03D88:  MOVF   FF2,W
03D8A:  MOVWF  00
03D8C:  BCF    FF2.7
03D8E:  MOVFF  711,FAA
03D92:  MOVFF  710,FA9
03D96:  MOVLW  0D
03D98:  MOVWF  FA8
03D9A:  BCF    FA6.6
03D9C:  BCF    FA6.7
03D9E:  BSF    FA6.2
03DA0:  MOVLB  F
03DA2:  MOVLW  55
03DA4:  MOVWF  FA7
03DA6:  MOVLW  AA
03DA8:  MOVWF  FA7
03DAA:  BSF    FA6.1
03DAC:  BTFSC  FA6.1
03DAE:  BRA    3DAC
03DB0:  BCF    FA6.2
03DB2:  MOVF   00,W
03DB4:  IORWF  FF2,F
....................                   break;
03DB6:  BRA    3E46
....................                }
03DB8:  BRA    3E2E
03DBA:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage3[j] = RxD_Buff[i];
03DBC:  MOVLW  D8
03DBE:  ADDWF  x0C,W
03DC0:  MOVWF  01
03DC2:  MOVLW  05
03DC4:  ADDWFC x0D,W
03DC6:  MOVWF  03
03DC8:  MOVLW  7A
03DCA:  ADDWF  x0A,W
03DCC:  MOVWF  FE9
03DCE:  MOVLW  01
03DD0:  ADDWFC x0B,W
03DD2:  MOVWF  FEA
03DD4:  MOVFF  FEF,712
03DD8:  MOVFF  03,FEA
03DDC:  MOVFF  01,FE9
03DE0:  MOVFF  712,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03DE4:  MOVLW  5D
03DE6:  ADDWF  x0A,W
03DE8:  MOVWF  x10
03DEA:  MOVLW  00
03DEC:  ADDWFC x0B,W
03DEE:  MOVWF  x11
03DF0:  MOVLW  7A
03DF2:  ADDWF  x0A,W
03DF4:  MOVWF  FE9
03DF6:  MOVLW  01
03DF8:  ADDWFC x0B,W
03DFA:  MOVWF  FEA
03DFC:  MOVFF  FEF,712
03E00:  MOVF   FF2,W
03E02:  MOVWF  00
03E04:  BCF    FF2.7
03E06:  MOVFF  711,FAA
03E0A:  MOVFF  710,FA9
03E0E:  MOVFF  712,FA8
03E12:  BCF    FA6.6
03E14:  BCF    FA6.7
03E16:  BSF    FA6.2
03E18:  MOVLB  F
03E1A:  MOVLW  55
03E1C:  MOVWF  FA7
03E1E:  MOVLW  AA
03E20:  MOVWF  FA7
03E22:  BSF    FA6.1
03E24:  BTFSC  FA6.1
03E26:  BRA    3E24
03E28:  BCF    FA6.2
03E2A:  MOVF   00,W
03E2C:  IORWF  FF2,F
....................                }
03E2E:  MOVLB  7
03E30:  MOVFF  70B,03
03E34:  MOVF   x0A,W
03E36:  INCF   x0A,F
03E38:  BTFSC  FD8.2
03E3A:  INCF   x0B,F
03E3C:  INCF   x0C,F
03E3E:  BTFSC  FD8.2
03E40:  INCF   x0D,F
03E42:  BRA    3D5E
03E44:  MOVLB  F
....................             }
....................             SMS_Massage3[j] = '\0' ; // end string
03E46:  MOVLW  D8
03E48:  MOVLB  7
03E4A:  ADDWF  x0C,W
03E4C:  MOVWF  FE9
03E4E:  MOVLW  05
03E50:  ADDWFC x0D,W
03E52:  MOVWF  FEA
03E54:  CLRF   FEF
....................             
....................             j=0;
03E56:  CLRF   x0D
03E58:  CLRF   x0C
....................             i++;
03E5A:  INCF   x0A,F
03E5C:  BTFSC  FD8.2
03E5E:  INCF   x0B,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03E60:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 32))
03E62:  MOVLW  7A
03E64:  ADDWF  x0A,W
03E66:  MOVWF  FE9
03E68:  MOVLW  01
03E6A:  ADDWFC x0B,W
03E6C:  MOVWF  FEA
03E6E:  MOVF   FEF,W
03E70:  SUBLW  0D
03E72:  BZ    3E7E
03E74:  MOVF   x0D,F
03E76:  BNZ   3E7E
03E78:  MOVF   x0C,W
03E7A:  SUBLW  20
03E7C:  BC    3EBE
....................                {
....................                   write_eeprom(0x5D+i,0x0D);
03E7E:  MOVLW  5D
03E80:  ADDWF  x0A,W
03E82:  MOVWF  x10
03E84:  MOVLW  00
03E86:  ADDWFC x0B,W
03E88:  MOVWF  x11
03E8A:  MOVF   FF2,W
03E8C:  MOVWF  00
03E8E:  BCF    FF2.7
03E90:  MOVFF  711,FAA
03E94:  MOVFF  710,FA9
03E98:  MOVLW  0D
03E9A:  MOVWF  FA8
03E9C:  BCF    FA6.6
03E9E:  BCF    FA6.7
03EA0:  BSF    FA6.2
03EA2:  MOVLB  F
03EA4:  MOVLW  55
03EA6:  MOVWF  FA7
03EA8:  MOVLW  AA
03EAA:  MOVWF  FA7
03EAC:  BSF    FA6.1
03EAE:  BTFSC  FA6.1
03EB0:  BRA    3EAE
03EB2:  BCF    FA6.2
03EB4:  MOVF   00,W
03EB6:  IORWF  FF2,F
....................                   break;
03EB8:  BRA    3F48
....................                }
03EBA:  BRA    3F30
03EBC:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage4[j] = RxD_Buff[i];
03EBE:  MOVLW  F8
03EC0:  ADDWF  x0C,W
03EC2:  MOVWF  01
03EC4:  MOVLW  05
03EC6:  ADDWFC x0D,W
03EC8:  MOVWF  03
03ECA:  MOVLW  7A
03ECC:  ADDWF  x0A,W
03ECE:  MOVWF  FE9
03ED0:  MOVLW  01
03ED2:  ADDWFC x0B,W
03ED4:  MOVWF  FEA
03ED6:  MOVFF  FEF,712
03EDA:  MOVFF  03,FEA
03EDE:  MOVFF  01,FE9
03EE2:  MOVFF  712,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03EE6:  MOVLW  5D
03EE8:  ADDWF  x0A,W
03EEA:  MOVWF  x10
03EEC:  MOVLW  00
03EEE:  ADDWFC x0B,W
03EF0:  MOVWF  x11
03EF2:  MOVLW  7A
03EF4:  ADDWF  x0A,W
03EF6:  MOVWF  FE9
03EF8:  MOVLW  01
03EFA:  ADDWFC x0B,W
03EFC:  MOVWF  FEA
03EFE:  MOVFF  FEF,712
03F02:  MOVF   FF2,W
03F04:  MOVWF  00
03F06:  BCF    FF2.7
03F08:  MOVFF  711,FAA
03F0C:  MOVFF  710,FA9
03F10:  MOVFF  712,FA8
03F14:  BCF    FA6.6
03F16:  BCF    FA6.7
03F18:  BSF    FA6.2
03F1A:  MOVLB  F
03F1C:  MOVLW  55
03F1E:  MOVWF  FA7
03F20:  MOVLW  AA
03F22:  MOVWF  FA7
03F24:  BSF    FA6.1
03F26:  BTFSC  FA6.1
03F28:  BRA    3F26
03F2A:  BCF    FA6.2
03F2C:  MOVF   00,W
03F2E:  IORWF  FF2,F
....................                }
03F30:  MOVLB  7
03F32:  MOVFF  70B,03
03F36:  MOVF   x0A,W
03F38:  INCF   x0A,F
03F3A:  BTFSC  FD8.2
03F3C:  INCF   x0B,F
03F3E:  INCF   x0C,F
03F40:  BTFSC  FD8.2
03F42:  INCF   x0D,F
03F44:  BRA    3E60
03F46:  MOVLB  F
....................             }
....................             SMS_Massage4[j] = '\0' ; // end string
03F48:  MOVLW  F8
03F4A:  MOVLB  7
03F4C:  ADDWF  x0C,W
03F4E:  MOVWF  FE9
03F50:  MOVLW  05
03F52:  ADDWFC x0D,W
03F54:  MOVWF  FEA
03F56:  CLRF   FEF
....................             
....................             j=0;
03F58:  CLRF   x0D
03F5A:  CLRF   x0C
....................             i++;
03F5C:  INCF   x0A,F
03F5E:  BTFSC  FD8.2
03F60:  INCF   x0B,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03F62:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 32))
03F64:  MOVLW  7A
03F66:  ADDWF  x0A,W
03F68:  MOVWF  FE9
03F6A:  MOVLW  01
03F6C:  ADDWFC x0B,W
03F6E:  MOVWF  FEA
03F70:  MOVF   FEF,W
03F72:  SUBLW  0D
03F74:  BZ    3F80
03F76:  MOVF   x0D,F
03F78:  BNZ   3F80
03F7A:  MOVF   x0C,W
03F7C:  SUBLW  20
03F7E:  BC    3FC0
....................                {
....................                   write_eeprom(0x5D+i,0x0D);
03F80:  MOVLW  5D
03F82:  ADDWF  x0A,W
03F84:  MOVWF  x10
03F86:  MOVLW  00
03F88:  ADDWFC x0B,W
03F8A:  MOVWF  x11
03F8C:  MOVF   FF2,W
03F8E:  MOVWF  00
03F90:  BCF    FF2.7
03F92:  MOVFF  711,FAA
03F96:  MOVFF  710,FA9
03F9A:  MOVLW  0D
03F9C:  MOVWF  FA8
03F9E:  BCF    FA6.6
03FA0:  BCF    FA6.7
03FA2:  BSF    FA6.2
03FA4:  MOVLB  F
03FA6:  MOVLW  55
03FA8:  MOVWF  FA7
03FAA:  MOVLW  AA
03FAC:  MOVWF  FA7
03FAE:  BSF    FA6.1
03FB0:  BTFSC  FA6.1
03FB2:  BRA    3FB0
03FB4:  BCF    FA6.2
03FB6:  MOVF   00,W
03FB8:  IORWF  FF2,F
....................                   break;
03FBA:  BRA    404A
....................                }
03FBC:  BRA    4032
03FBE:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage5[j] = RxD_Buff[i];
03FC0:  MOVLW  18
03FC2:  ADDWF  x0C,W
03FC4:  MOVWF  01
03FC6:  MOVLW  06
03FC8:  ADDWFC x0D,W
03FCA:  MOVWF  03
03FCC:  MOVLW  7A
03FCE:  ADDWF  x0A,W
03FD0:  MOVWF  FE9
03FD2:  MOVLW  01
03FD4:  ADDWFC x0B,W
03FD6:  MOVWF  FEA
03FD8:  MOVFF  FEF,712
03FDC:  MOVFF  03,FEA
03FE0:  MOVFF  01,FE9
03FE4:  MOVFF  712,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03FE8:  MOVLW  5D
03FEA:  ADDWF  x0A,W
03FEC:  MOVWF  x10
03FEE:  MOVLW  00
03FF0:  ADDWFC x0B,W
03FF2:  MOVWF  x11
03FF4:  MOVLW  7A
03FF6:  ADDWF  x0A,W
03FF8:  MOVWF  FE9
03FFA:  MOVLW  01
03FFC:  ADDWFC x0B,W
03FFE:  MOVWF  FEA
04000:  MOVFF  FEF,712
04004:  MOVF   FF2,W
04006:  MOVWF  00
04008:  BCF    FF2.7
0400A:  MOVFF  711,FAA
0400E:  MOVFF  710,FA9
04012:  MOVFF  712,FA8
04016:  BCF    FA6.6
04018:  BCF    FA6.7
0401A:  BSF    FA6.2
0401C:  MOVLB  F
0401E:  MOVLW  55
04020:  MOVWF  FA7
04022:  MOVLW  AA
04024:  MOVWF  FA7
04026:  BSF    FA6.1
04028:  BTFSC  FA6.1
0402A:  BRA    4028
0402C:  BCF    FA6.2
0402E:  MOVF   00,W
04030:  IORWF  FF2,F
....................                }
04032:  MOVLB  7
04034:  MOVFF  70B,03
04038:  MOVF   x0A,W
0403A:  INCF   x0A,F
0403C:  BTFSC  FD8.2
0403E:  INCF   x0B,F
04040:  INCF   x0C,F
04042:  BTFSC  FD8.2
04044:  INCF   x0D,F
04046:  BRA    3F62
04048:  MOVLB  F
....................             }
....................             SMS_Massage5[j] = '\0' ; // end string
0404A:  MOVLW  18
0404C:  MOVLB  7
0404E:  ADDWF  x0C,W
04050:  MOVWF  FE9
04052:  MOVLW  06
04054:  ADDWFC x0D,W
04056:  MOVWF  FEA
04058:  CLRF   FEF
....................             
....................             j=0;
0405A:  CLRF   x0D
0405C:  CLRF   x0C
....................             i++;
0405E:  INCF   x0A,F
04060:  BTFSC  FD8.2
04062:  INCF   x0B,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04064:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 32))
04066:  MOVLW  7A
04068:  ADDWF  x0A,W
0406A:  MOVWF  FE9
0406C:  MOVLW  01
0406E:  ADDWFC x0B,W
04070:  MOVWF  FEA
04072:  MOVF   FEF,W
04074:  SUBLW  0D
04076:  BZ    4082
04078:  MOVF   x0D,F
0407A:  BNZ   4082
0407C:  MOVF   x0C,W
0407E:  SUBLW  20
04080:  BC    40C2
....................                {
....................                   write_eeprom(0x5D+i,0x0D);
04082:  MOVLW  5D
04084:  ADDWF  x0A,W
04086:  MOVWF  x10
04088:  MOVLW  00
0408A:  ADDWFC x0B,W
0408C:  MOVWF  x11
0408E:  MOVF   FF2,W
04090:  MOVWF  00
04092:  BCF    FF2.7
04094:  MOVFF  711,FAA
04098:  MOVFF  710,FA9
0409C:  MOVLW  0D
0409E:  MOVWF  FA8
040A0:  BCF    FA6.6
040A2:  BCF    FA6.7
040A4:  BSF    FA6.2
040A6:  MOVLB  F
040A8:  MOVLW  55
040AA:  MOVWF  FA7
040AC:  MOVLW  AA
040AE:  MOVWF  FA7
040B0:  BSF    FA6.1
040B2:  BTFSC  FA6.1
040B4:  BRA    40B2
040B6:  BCF    FA6.2
040B8:  MOVF   00,W
040BA:  IORWF  FF2,F
....................                   break;
040BC:  BRA    4150
....................                }
040BE:  BRA    4138
040C0:  MOVLB  7
....................                else
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
040C2:  MOVLW  5D
040C4:  ADDWF  x0A,W
040C6:  MOVWF  x10
040C8:  MOVLW  00
040CA:  ADDWFC x0B,W
040CC:  MOVWF  x11
040CE:  MOVLW  7A
040D0:  ADDWF  x0A,W
040D2:  MOVWF  FE9
040D4:  MOVLW  01
040D6:  ADDWFC x0B,W
040D8:  MOVWF  FEA
040DA:  MOVFF  FEF,712
040DE:  MOVF   FF2,W
040E0:  MOVWF  00
040E2:  BCF    FF2.7
040E4:  MOVFF  711,FAA
040E8:  MOVFF  710,FA9
040EC:  MOVFF  712,FA8
040F0:  BCF    FA6.6
040F2:  BCF    FA6.7
040F4:  BSF    FA6.2
040F6:  MOVLB  F
040F8:  MOVLW  55
040FA:  MOVWF  FA7
040FC:  MOVLW  AA
040FE:  MOVWF  FA7
04100:  BSF    FA6.1
04102:  BTFSC  FA6.1
04104:  BRA    4102
04106:  BCF    FA6.2
04108:  MOVF   00,W
0410A:  IORWF  FF2,F
....................                   SMS_Massage6[j] = RxD_Buff[i];
0410C:  MOVLW  38
0410E:  MOVLB  7
04110:  ADDWF  x0C,W
04112:  MOVWF  01
04114:  MOVLW  06
04116:  ADDWFC x0D,W
04118:  MOVWF  03
0411A:  MOVLW  7A
0411C:  ADDWF  x0A,W
0411E:  MOVWF  FE9
04120:  MOVLW  01
04122:  ADDWFC x0B,W
04124:  MOVWF  FEA
04126:  MOVFF  FEF,712
0412A:  MOVFF  03,FEA
0412E:  MOVFF  01,FE9
04132:  MOVFF  712,FEF
04136:  MOVLB  F
....................                }
04138:  MOVLB  7
0413A:  MOVFF  70B,03
0413E:  MOVF   x0A,W
04140:  INCF   x0A,F
04142:  BTFSC  FD8.2
04144:  INCF   x0B,F
04146:  INCF   x0C,F
04148:  BTFSC  FD8.2
0414A:  INCF   x0D,F
0414C:  BRA    4064
0414E:  MOVLB  F
....................             }
....................             SMS_Massage6[j] = '\0' ; // end string
04150:  MOVLW  38
04152:  MOVLB  7
04154:  ADDWF  x0C,W
04156:  MOVWF  FE9
04158:  MOVLW  06
0415A:  ADDWFC x0D,W
0415C:  MOVWF  FEA
0415E:  CLRF   FEF
....................             
....................             j=0;
04160:  CLRF   x0D
04162:  CLRF   x0C
....................             i++;
04164:  INCF   x0A,F
04166:  BTFSC  FD8.2
04168:  INCF   x0B,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0416A:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 32))
0416C:  MOVLW  7A
0416E:  ADDWF  x0A,W
04170:  MOVWF  FE9
04172:  MOVLW  01
04174:  ADDWFC x0B,W
04176:  MOVWF  FEA
04178:  MOVF   FEF,W
0417A:  SUBLW  0D
0417C:  BZ    4188
0417E:  MOVF   x0D,F
04180:  BNZ   4188
04182:  MOVF   x0C,W
04184:  SUBLW  20
04186:  BC    41C8
....................                {
....................                   write_eeprom(0x5D+i,0x0D);
04188:  MOVLW  5D
0418A:  ADDWF  x0A,W
0418C:  MOVWF  x10
0418E:  MOVLW  00
04190:  ADDWFC x0B,W
04192:  MOVWF  x11
04194:  MOVF   FF2,W
04196:  MOVWF  00
04198:  BCF    FF2.7
0419A:  MOVFF  711,FAA
0419E:  MOVFF  710,FA9
041A2:  MOVLW  0D
041A4:  MOVWF  FA8
041A6:  BCF    FA6.6
041A8:  BCF    FA6.7
041AA:  BSF    FA6.2
041AC:  MOVLB  F
041AE:  MOVLW  55
041B0:  MOVWF  FA7
041B2:  MOVLW  AA
041B4:  MOVWF  FA7
041B6:  BSF    FA6.1
041B8:  BTFSC  FA6.1
041BA:  BRA    41B8
041BC:  BCF    FA6.2
041BE:  MOVF   00,W
041C0:  IORWF  FF2,F
....................                   break;
041C2:  BRA    4252
....................                }
041C4:  BRA    423A
041C6:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage7[j] = RxD_Buff[i];
041C8:  MOVLW  58
041CA:  ADDWF  x0C,W
041CC:  MOVWF  01
041CE:  MOVLW  06
041D0:  ADDWFC x0D,W
041D2:  MOVWF  03
041D4:  MOVLW  7A
041D6:  ADDWF  x0A,W
041D8:  MOVWF  FE9
041DA:  MOVLW  01
041DC:  ADDWFC x0B,W
041DE:  MOVWF  FEA
041E0:  MOVFF  FEF,712
041E4:  MOVFF  03,FEA
041E8:  MOVFF  01,FE9
041EC:  MOVFF  712,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
041F0:  MOVLW  5D
041F2:  ADDWF  x0A,W
041F4:  MOVWF  x10
041F6:  MOVLW  00
041F8:  ADDWFC x0B,W
041FA:  MOVWF  x11
041FC:  MOVLW  7A
041FE:  ADDWF  x0A,W
04200:  MOVWF  FE9
04202:  MOVLW  01
04204:  ADDWFC x0B,W
04206:  MOVWF  FEA
04208:  MOVFF  FEF,712
0420C:  MOVF   FF2,W
0420E:  MOVWF  00
04210:  BCF    FF2.7
04212:  MOVFF  711,FAA
04216:  MOVFF  710,FA9
0421A:  MOVFF  712,FA8
0421E:  BCF    FA6.6
04220:  BCF    FA6.7
04222:  BSF    FA6.2
04224:  MOVLB  F
04226:  MOVLW  55
04228:  MOVWF  FA7
0422A:  MOVLW  AA
0422C:  MOVWF  FA7
0422E:  BSF    FA6.1
04230:  BTFSC  FA6.1
04232:  BRA    4230
04234:  BCF    FA6.2
04236:  MOVF   00,W
04238:  IORWF  FF2,F
....................                }
0423A:  MOVLB  7
0423C:  MOVFF  70B,03
04240:  MOVF   x0A,W
04242:  INCF   x0A,F
04244:  BTFSC  FD8.2
04246:  INCF   x0B,F
04248:  INCF   x0C,F
0424A:  BTFSC  FD8.2
0424C:  INCF   x0D,F
0424E:  BRA    416A
04250:  MOVLB  F
....................             }
....................             SMS_Massage7[j] = '\0' ; // end string
04252:  MOVLW  58
04254:  MOVLB  7
04256:  ADDWF  x0C,W
04258:  MOVWF  FE9
0425A:  MOVLW  06
0425C:  ADDWFC x0D,W
0425E:  MOVWF  FEA
04260:  CLRF   FEF
....................             
....................             j=0;
04262:  CLRF   x0D
04264:  CLRF   x0C
....................             i++;
04266:  INCF   x0A,F
04268:  BTFSC  FD8.2
0426A:  INCF   x0B,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0426C:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 32))
0426E:  MOVLW  7A
04270:  ADDWF  x0A,W
04272:  MOVWF  FE9
04274:  MOVLW  01
04276:  ADDWFC x0B,W
04278:  MOVWF  FEA
0427A:  MOVF   FEF,W
0427C:  SUBLW  0D
0427E:  BZ    428A
04280:  MOVF   x0D,F
04282:  BNZ   428A
04284:  MOVF   x0C,W
04286:  SUBLW  20
04288:  BC    42CA
....................                {
....................                   write_eeprom(0x5D+i,0x0D);
0428A:  MOVLW  5D
0428C:  ADDWF  x0A,W
0428E:  MOVWF  x10
04290:  MOVLW  00
04292:  ADDWFC x0B,W
04294:  MOVWF  x11
04296:  MOVF   FF2,W
04298:  MOVWF  00
0429A:  BCF    FF2.7
0429C:  MOVFF  711,FAA
042A0:  MOVFF  710,FA9
042A4:  MOVLW  0D
042A6:  MOVWF  FA8
042A8:  BCF    FA6.6
042AA:  BCF    FA6.7
042AC:  BSF    FA6.2
042AE:  MOVLB  F
042B0:  MOVLW  55
042B2:  MOVWF  FA7
042B4:  MOVLW  AA
042B6:  MOVWF  FA7
042B8:  BSF    FA6.1
042BA:  BTFSC  FA6.1
042BC:  BRA    42BA
042BE:  BCF    FA6.2
042C0:  MOVF   00,W
042C2:  IORWF  FF2,F
....................                   break;
042C4:  BRA    4354
....................                }
042C6:  BRA    433C
042C8:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage8[j] = RxD_Buff[i];
042CA:  MOVLW  78
042CC:  ADDWF  x0C,W
042CE:  MOVWF  01
042D0:  MOVLW  06
042D2:  ADDWFC x0D,W
042D4:  MOVWF  03
042D6:  MOVLW  7A
042D8:  ADDWF  x0A,W
042DA:  MOVWF  FE9
042DC:  MOVLW  01
042DE:  ADDWFC x0B,W
042E0:  MOVWF  FEA
042E2:  MOVFF  FEF,712
042E6:  MOVFF  03,FEA
042EA:  MOVFF  01,FE9
042EE:  MOVFF  712,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
042F2:  MOVLW  5D
042F4:  ADDWF  x0A,W
042F6:  MOVWF  x10
042F8:  MOVLW  00
042FA:  ADDWFC x0B,W
042FC:  MOVWF  x11
042FE:  MOVLW  7A
04300:  ADDWF  x0A,W
04302:  MOVWF  FE9
04304:  MOVLW  01
04306:  ADDWFC x0B,W
04308:  MOVWF  FEA
0430A:  MOVFF  FEF,712
0430E:  MOVF   FF2,W
04310:  MOVWF  00
04312:  BCF    FF2.7
04314:  MOVFF  711,FAA
04318:  MOVFF  710,FA9
0431C:  MOVFF  712,FA8
04320:  BCF    FA6.6
04322:  BCF    FA6.7
04324:  BSF    FA6.2
04326:  MOVLB  F
04328:  MOVLW  55
0432A:  MOVWF  FA7
0432C:  MOVLW  AA
0432E:  MOVWF  FA7
04330:  BSF    FA6.1
04332:  BTFSC  FA6.1
04334:  BRA    4332
04336:  BCF    FA6.2
04338:  MOVF   00,W
0433A:  IORWF  FF2,F
....................                }
0433C:  MOVLB  7
0433E:  MOVFF  70B,03
04342:  MOVF   x0A,W
04344:  INCF   x0A,F
04346:  BTFSC  FD8.2
04348:  INCF   x0B,F
0434A:  INCF   x0C,F
0434C:  BTFSC  FD8.2
0434E:  INCF   x0D,F
04350:  BRA    426C
04352:  MOVLB  F
....................             }
....................             SMS_Massage8[j] = '\0' ; // end string
04354:  MOVLW  78
04356:  MOVLB  7
04358:  ADDWF  x0C,W
0435A:  MOVWF  FE9
0435C:  MOVLW  06
0435E:  ADDWFC x0D,W
04360:  MOVWF  FEA
04362:  CLRF   FEF
....................             
....................          
....................             TxD_Buff[0] = Address ;         //Address
04364:  MOVFF  79,7B
....................             TxD_Buff[1] = 0x22 ;            //return function code
04368:  MOVLW  22
0436A:  MOVLB  0
0436C:  MOVWF  x7C
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
0436E:  MOVLB  7
04370:  CLRF   x12
04372:  MOVLW  7B
04374:  MOVWF  x11
04376:  MOVLW  02
04378:  MOVWF  x13
0437A:  MOVLB  0
0437C:  CALL   1FB8
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
04380:  MOVFF  37B,7D
....................             TxD_Buff[3] = CRC_Lo ;
04384:  MOVFF  37A,7E
.................... 
....................             output_bit(P485ctrl,1);
04388:  BSF    F8A.3
0438A:  BCF    F93.3
....................             delay_ms(10);
0438C:  MOVLW  0A
0438E:  MOVLB  7
04390:  MOVWF  x10
04392:  MOVLB  0
04394:  CALL   07CC
.................... 
....................             putc(Txd_Buff[0]);
04398:  MOVF   x7B,W
0439A:  CALL   200E
....................             putc(Txd_Buff[1]);
0439E:  MOVF   x7C,W
043A0:  CALL   200E
....................             putc(Txd_Buff[2]);
043A4:  MOVF   x7D,W
043A6:  CALL   200E
....................             putc(Txd_Buff[3]);
043AA:  MOVF   x7E,W
043AC:  CALL   200E
.................... 
....................             delay_ms(3);
043B0:  MOVLW  03
043B2:  MOVLB  7
043B4:  MOVWF  x10
043B6:  MOVLB  0
043B8:  CALL   07CC
....................             output_bit(P485ctrl,0);
043BC:  BCF    F8A.3
043BE:  BCF    F93.3
043C0:  MOVLB  3
....................          }
.................... 
....................          if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
043C2:  MOVLB  1
043C4:  MOVF   x7B,W
043C6:  SUBLW  03
043C8:  BNZ   4456
....................          {
.................... 
....................             Data_Buff[0] = 0x00;// dummy data
043CA:  MOVLB  3
043CC:  CLRF   x83
....................             Data_Buff[1] = Input1_8;
043CE:  MOVFF  49,384
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
043D2:  MOVFF  79,7B
....................             TxD_Buff[1] = 0x03 ;           //Function Code
043D6:  MOVLW  03
043D8:  MOVLB  0
043DA:  MOVWF  x7C
....................             TxD_Buff[2] = 0x02 ;          //Byte Count
043DC:  MOVLW  02
043DE:  MOVWF  x7D
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
043E0:  MOVFF  383,7E
....................             TxD_Buff[4] = Data_Buff[1];   //first byte Data
043E4:  MOVFF  384,7F
.................... 
....................             CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
043E8:  MOVLB  7
043EA:  CLRF   x12
043EC:  MOVLW  7B
043EE:  MOVWF  x11
043F0:  MOVLW  05
043F2:  MOVWF  x13
043F4:  MOVLB  0
043F6:  CALL   1FB8
.................... 
....................             TxD_Buff[5] = CRC_Hi ;
043FA:  MOVFF  37B,80
....................             TxD_Buff[6] = CRC_Lo ;
043FE:  MOVFF  37A,81
.................... 
.................... 
....................             output_bit(P485ctrl,1);
04402:  BSF    F8A.3
04404:  BCF    F93.3
....................             restart_wdt();
04406:  CLRWDT
....................             delay_ms(4);
04408:  MOVLW  04
0440A:  MOVLB  7
0440C:  MOVWF  x10
0440E:  MOVLB  0
04410:  CALL   07CC
....................             restart_wdt();
04414:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
04416:  MOVF   x7B,W
04418:  CALL   200E
....................             putc(TxD_Buff[1]) ;               //Function Code
0441C:  MOVF   x7C,W
0441E:  CALL   200E
....................             putc(TxD_Buff[2]) ;               //Byte Count
04422:  MOVF   x7D,W
04424:  CALL   200E
....................             putc(TxD_Buff[3]) ;
04428:  MOVF   x7E,W
0442A:  CALL   200E
....................             putc(TxD_Buff[4]) ;
0442E:  MOVF   x7F,W
04430:  CALL   200E
....................             putc(TxD_Buff[5]) ;
04434:  MOVF   x80,W
04436:  CALL   200E
....................             putc(TxD_Buff[6]) ;
0443A:  MOVF   x81,W
0443C:  CALL   200E
.................... 
....................             restart_wdt();
04440:  CLRWDT
....................             delay_ms(3);
04442:  MOVLW  03
04444:  MOVLB  7
04446:  MOVWF  x10
04448:  MOVLB  0
0444A:  CALL   07CC
....................             restart_wdt();
0444E:  CLRWDT
....................             output_bit(P485ctrl,0);
04450:  BCF    F8A.3
04452:  BCF    F93.3
04454:  MOVLB  1
.................... 
....................          }
....................        
.................... 
....................       }  //if(RxD_Buff[1] == address)
.................... 
....................       Send_check_Time = 500; //5 Second
04456:  MOVLW  01
04458:  MOVLB  3
0445A:  MOVWF  x7D
0445C:  MOVLW  F4
0445E:  MOVWF  x7C
....................    } // if crc
.................... 
....................    recieve_completed = 0 ;
04460:  BCF    30.5
....................    sequence = end_sq ;
04462:  MOVFF  6F,78
....................    T_timeout = 0x00;
04466:  MOVLB  5
04468:  CLRF   x85
....................    RxD_DataLen = 0x00 ;
0446A:  MOVLB  0
0446C:  CLRF   x7A
....................    output_bit(P485ctrl,0);
0446E:  BCF    F8A.3
04470:  BCF    F93.3
04472:  GOTO   6AA2 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
01648:  MOVLW  02
0164A:  MOVLB  7
0164C:  MOVWF  x11
0164E:  MOVLB  0
01650:  BRA    1512
01652:  MOVFF  01,583
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01656:  BTFSS  1A.4
01658:  BRA    1660
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
0165A:  MOVLB  5
0165C:  COMF   x83,F
0165E:  MOVLB  0
....................          
....................       }
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
01660:  BCF    FD8.0
01662:  MOVLB  5
01664:  RRCF   x83,W
01666:  MOVLB  6
01668:  BCF    xAA.1
0166A:  BTFSC  FE8.0
0166C:  BSF    xAA.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
0166E:  MOVLB  5
01670:  RRCF   x83,W
01672:  MOVWF  00
01674:  RRCF   00,F
01676:  MOVLW  3F
01678:  ANDWF  00,F
0167A:  MOVLB  6
0167C:  BCF    xAA.2
0167E:  BTFSC  00.0
01680:  BSF    xAA.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
01682:  MOVLB  5
01684:  RRCF   x83,W
01686:  MOVWF  00
01688:  RRCF   00,F
0168A:  RRCF   00,F
0168C:  MOVLW  1F
0168E:  ANDWF  00,F
01690:  MOVLB  6
01692:  BCF    xAA.3
01694:  BTFSC  00.0
01696:  BSF    xAA.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
01698:  MOVLB  5
0169A:  SWAPF  x83,W
0169C:  MOVWF  00
0169E:  MOVLW  0F
016A0:  ANDWF  00,F
016A2:  MOVLB  6
016A4:  BCF    xAA.4
016A6:  BTFSC  00.0
016A8:  BSF    xAA.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
016AA:  MOVLB  5
016AC:  SWAPF  x83,W
016AE:  MOVWF  00
016B0:  RRCF   00,F
016B2:  MOVLW  07
016B4:  ANDWF  00,F
016B6:  MOVLB  6
016B8:  BCF    xAA.5
016BA:  BTFSC  00.0
016BC:  BSF    xAA.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
016BE:  MOVLB  5
016C0:  SWAPF  x83,W
016C2:  MOVWF  00
016C4:  RRCF   00,F
016C6:  RRCF   00,F
016C8:  MOVLW  03
016CA:  ANDWF  00,F
016CC:  MOVLB  6
016CE:  BCF    xAA.6
016D0:  BTFSC  00.0
016D2:  BSF    xAA.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
016D4:  CLRF   00
016D6:  MOVLB  5
016D8:  BTFSC  x83.7
016DA:  BSF    00.0
016DC:  MOVLB  6
016DE:  BCF    xAA.7
016E0:  BTFSC  00.0
016E2:  BSF    xAA.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
016E4:  MOVLW  02
016E6:  MOVLB  7
016E8:  MOVWF  x11
016EA:  MOVLB  0
016EC:  BRA    1530
016EE:  MOVFF  01,583
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
016F2:  BTFSS  1A.4
016F4:  BRA    16FC
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
016F6:  MOVLB  5
016F8:  COMF   x83,F
016FA:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
016FC:  MOVLB  6
016FE:  BCF    xAB.0
01700:  MOVLB  5
01702:  BTFSS  x83.0
01704:  BRA    170C
01706:  MOVLB  6
01708:  BSF    xAB.0
0170A:  MOVLB  5
....................       
.................... 
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=8; i++)
0170C:  MOVLW  01
0170E:  MOVLB  7
01710:  MOVWF  x10
01712:  MOVF   x10,W
01714:  SUBLW  08
01716:  BTFSS  FD8.0
01718:  BRA    1C02
....................       {
....................          if(FaultNCNO[i] ==NO)
0171A:  MOVFF  710,714
0171E:  MOVLW  06
01720:  MOVWF  x16
01722:  MOVLW  FE
01724:  MOVWF  x15
01726:  MOVLB  0
01728:  RCALL  154E
0172A:  MOVF   01,W
0172C:  ANDLW  01
0172E:  SUBLW  01
01730:  BTFSS  FD8.2
01732:  BRA    198A
....................          {
....................              if(FaultNow[i]==0)
01734:  MOVFF  710,714
01738:  MOVLW  06
0173A:  MOVLB  7
0173C:  MOVWF  x16
0173E:  MOVLW  AA
01740:  MOVWF  x15
01742:  MOVLB  0
01744:  RCALL  154E
01746:  MOVF   01,W
01748:  ANDLW  01
0174A:  BTFSS  FD8.2
0174C:  BRA    186C
....................              {   
....................                if(FaultAgo[i]==0)
0174E:  MOVFF  710,714
01752:  MOVLW  06
01754:  MOVLB  7
01756:  MOVWF  x16
01758:  MOVLW  A7
0175A:  MOVWF  x15
0175C:  MOVLB  0
0175E:  RCALL  154E
01760:  MOVF   01,W
01762:  ANDLW  01
01764:  BTFSS  FD8.2
01766:  BRA    1850
....................                {
....................                    ReleaseTime[i]++;
01768:  BCF    FD8.0
0176A:  MOVLB  7
0176C:  RLCF   x10,W
0176E:  CLRF   03
01770:  ADDLW  AD
01772:  MOVWF  FE9
01774:  MOVLW  06
01776:  ADDWFC 03,W
01778:  MOVWF  FEA
0177A:  MOVLW  01
0177C:  ADDWF  FEE,F
0177E:  BNC   1782
01780:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01782:  BCF    FD8.0
01784:  RLCF   x10,W
01786:  CLRF   03
01788:  ADDLW  AD
0178A:  MOVWF  FE9
0178C:  MOVLW  06
0178E:  ADDWFC 03,W
01790:  MOVWF  FEA
01792:  MOVFF  FEC,712
01796:  MOVF   FED,F
01798:  MOVFF  FEF,711
0179C:  BCF    FD8.0
0179E:  RLCF   x10,W
017A0:  CLRF   03
017A2:  ADDLW  D5
017A4:  MOVWF  FE9
017A6:  MOVLW  06
017A8:  ADDWFC 03,W
017AA:  MOVWF  FEA
017AC:  MOVFF  FEC,716
017B0:  MOVF   FED,F
017B2:  MOVFF  FEF,715
017B6:  CLRF   x18
017B8:  MOVLW  4B
017BA:  MOVWF  x17
017BC:  MOVLB  0
017BE:  RCALL  1584
017C0:  MOVFF  02,714
017C4:  MOVFF  01,713
017C8:  MOVLW  0F
017CA:  MOVLB  7
017CC:  ADDWF  01,W
017CE:  MOVWF  01
017D0:  MOVLW  00
017D2:  ADDWFC 02,W
017D4:  MOVWF  03
017D6:  MOVF   03,W
017D8:  SUBWF  x12,W
017DA:  BNC   184C
017DC:  BNZ   17E4
017DE:  MOVF   01,W
017E0:  SUBWF  x11,W
017E2:  BNC   184C
....................                    {   
....................                      ReleaseTime[i] = 0;
017E4:  BCF    FD8.0
017E6:  RLCF   x10,W
017E8:  CLRF   03
017EA:  ADDLW  AD
017EC:  MOVWF  FE9
017EE:  MOVLW  06
017F0:  ADDWFC 03,W
017F2:  MOVWF  FEA
017F4:  CLRF   FEC
017F6:  MOVF   FED,F
017F8:  CLRF   FEF
....................                      switch(i)
017FA:  MOVLW  01
017FC:  SUBWF  x10,W
017FE:  ADDLW  F8
01800:  BC    184C
01802:  ADDLW  08
01804:  MOVLB  0
01806:  GOTO   1CA4
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
0180A:  MOVLB  6
0180C:  BCF    x98.0
....................                         break;
0180E:  MOVLB  7
01810:  BRA    184C
....................                         case 2:
....................                            Inputt.B2 = 0; 
01812:  MOVLB  6
01814:  BCF    x98.1
....................                         break;
01816:  MOVLB  7
01818:  BRA    184C
....................                         case 3:
....................                            Inputt.B3 = 0; 
0181A:  MOVLB  6
0181C:  BCF    x98.2
....................                         break;
0181E:  MOVLB  7
01820:  BRA    184C
....................                         case 4:
....................                            Inputt.B4 = 0; 
01822:  MOVLB  6
01824:  BCF    x98.3
....................                         break;
01826:  MOVLB  7
01828:  BRA    184C
....................                         case 5:
....................                            Inputt.B5 = 0; 
0182A:  MOVLB  6
0182C:  BCF    x98.4
....................                         break;
0182E:  MOVLB  7
01830:  BRA    184C
....................                         case 6:
....................                            Inputt.B6 = 0; 
01832:  MOVLB  6
01834:  BCF    x98.5
....................                         break;
01836:  MOVLB  7
01838:  BRA    184C
....................                         case 7:
....................                            Inputt.B7 = 0; 
0183A:  MOVLB  6
0183C:  BCF    x98.6
....................                          break;
0183E:  MOVLB  7
01840:  BRA    184C
....................                          case 8:
....................                            Inputt.B8 = 0; 
01842:  MOVLB  6
01844:  BCF    x98.7
....................                         break;
01846:  MOVLB  7
01848:  BRA    184C
0184A:  MOVLB  7
....................            
....................                      }                 
....................                    }
....................                }
0184C:  BRA    1868
0184E:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01850:  BCF    FD8.0
01852:  MOVLB  7
01854:  RLCF   x10,W
01856:  CLRF   03
01858:  ADDLW  AD
0185A:  MOVWF  FE9
0185C:  MOVLW  06
0185E:  ADDWFC 03,W
01860:  MOVWF  FEA
01862:  CLRF   FEC
01864:  MOVF   FED,F
01866:  CLRF   FEF
....................                }
....................              }
01868:  BRA    1988
0186A:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
0186C:  MOVFF  710,714
01870:  MOVLW  06
01872:  MOVLB  7
01874:  MOVWF  x16
01876:  MOVLW  A7
01878:  MOVWF  x15
0187A:  MOVLB  0
0187C:  RCALL  154E
0187E:  MOVF   01,W
01880:  ANDLW  01
01882:  SUBLW  01
01884:  BTFSS  FD8.2
01886:  BRA    1970
....................                {
....................                    ReleaseTime[i]++;
01888:  BCF    FD8.0
0188A:  MOVLB  7
0188C:  RLCF   x10,W
0188E:  CLRF   03
01890:  ADDLW  AD
01892:  MOVWF  FE9
01894:  MOVLW  06
01896:  ADDWFC 03,W
01898:  MOVWF  FEA
0189A:  MOVLW  01
0189C:  ADDWF  FEE,F
0189E:  BNC   18A2
018A0:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
018A2:  BCF    FD8.0
018A4:  RLCF   x10,W
018A6:  CLRF   03
018A8:  ADDLW  AD
018AA:  MOVWF  FE9
018AC:  MOVLW  06
018AE:  ADDWFC 03,W
018B0:  MOVWF  FEA
018B2:  MOVFF  FEC,712
018B6:  MOVF   FED,F
018B8:  MOVFF  FEF,711
018BC:  BCF    FD8.0
018BE:  RLCF   x10,W
018C0:  CLRF   03
018C2:  ADDLW  D5
018C4:  MOVWF  FE9
018C6:  MOVLW  06
018C8:  ADDWFC 03,W
018CA:  MOVWF  FEA
018CC:  MOVFF  FEC,716
018D0:  MOVF   FED,F
018D2:  MOVFF  FEF,715
018D6:  CLRF   x18
018D8:  MOVLW  4B
018DA:  MOVWF  x17
018DC:  MOVLB  0
018DE:  RCALL  1584
018E0:  MOVFF  02,714
018E4:  MOVFF  01,713
018E8:  MOVLW  0F
018EA:  MOVLB  7
018EC:  ADDWF  01,W
018EE:  MOVWF  01
018F0:  MOVLW  00
018F2:  ADDWFC 02,W
018F4:  MOVWF  03
018F6:  MOVF   03,W
018F8:  SUBWF  x12,W
018FA:  BNC   196C
018FC:  BNZ   1904
018FE:  MOVF   01,W
01900:  SUBWF  x11,W
01902:  BNC   196C
....................                    {   
....................                      ReleaseTime[i] = 1;
01904:  BCF    FD8.0
01906:  RLCF   x10,W
01908:  CLRF   03
0190A:  ADDLW  AD
0190C:  MOVWF  FE9
0190E:  MOVLW  06
01910:  ADDWFC 03,W
01912:  MOVWF  FEA
01914:  CLRF   FEC
01916:  MOVF   FED,F
01918:  MOVLW  01
0191A:  MOVWF  FEF
....................                      switch(i)
0191C:  SUBWF  x10,W
0191E:  ADDLW  F8
01920:  BC    196C
01922:  ADDLW  08
01924:  MOVLB  0
01926:  GOTO   1CCE
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
0192A:  MOVLB  6
0192C:  BSF    x98.0
....................                         break;
0192E:  MOVLB  7
01930:  BRA    196C
....................                         case 2:
....................                            Inputt.B2 = 1; 
01932:  MOVLB  6
01934:  BSF    x98.1
....................                         break;
01936:  MOVLB  7
01938:  BRA    196C
....................                         case 3:
....................                            Inputt.B3 = 1; 
0193A:  MOVLB  6
0193C:  BSF    x98.2
....................                         break;
0193E:  MOVLB  7
01940:  BRA    196C
....................                         case 4:
....................                            Inputt.B4 = 1; 
01942:  MOVLB  6
01944:  BSF    x98.3
....................                         break;
01946:  MOVLB  7
01948:  BRA    196C
....................                         case 5:
....................                            Inputt.B5 = 1; 
0194A:  MOVLB  6
0194C:  BSF    x98.4
....................                         break;
0194E:  MOVLB  7
01950:  BRA    196C
....................                         case 6:
....................                            Inputt.B6 = 1; 
01952:  MOVLB  6
01954:  BSF    x98.5
....................                         break;
01956:  MOVLB  7
01958:  BRA    196C
....................                         case 7:
....................                            Inputt.B7 = 1; 
0195A:  MOVLB  6
0195C:  BSF    x98.6
....................                          break;
0195E:  MOVLB  7
01960:  BRA    196C
....................                          case 8:
....................                            Inputt.B8 = 1; 
01962:  MOVLB  6
01964:  BSF    x98.7
....................                         break;
01966:  MOVLB  7
01968:  BRA    196C
0196A:  MOVLB  7
....................          
....................                      }                 
....................                    }
....................                }
0196C:  BRA    1988
0196E:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01970:  BCF    FD8.0
01972:  MOVLB  7
01974:  RLCF   x10,W
01976:  CLRF   03
01978:  ADDLW  AD
0197A:  MOVWF  FE9
0197C:  MOVLW  06
0197E:  ADDWFC 03,W
01980:  MOVWF  FEA
01982:  CLRF   FEC
01984:  MOVF   FED,F
01986:  CLRF   FEF
....................                }
....................              
.................... 
....................              }
....................           }
01988:  BRA    1BFA
....................           else if(FaultNCNO[i] ==NC)
0198A:  MOVFF  710,714
0198E:  MOVLW  06
01990:  MOVLB  7
01992:  MOVWF  x16
01994:  MOVLW  FE
01996:  MOVWF  x15
01998:  MOVLB  0
0199A:  RCALL  154E
0199C:  MOVF   01,W
0199E:  ANDLW  01
019A0:  BTFSS  FD8.2
019A2:  BRA    1BFC
....................           {
....................              if(FaultNow[i]==1)
019A4:  MOVFF  710,714
019A8:  MOVLW  06
019AA:  MOVLB  7
019AC:  MOVWF  x16
019AE:  MOVLW  AA
019B0:  MOVWF  x15
019B2:  MOVLB  0
019B4:  RCALL  154E
019B6:  MOVF   01,W
019B8:  ANDLW  01
019BA:  SUBLW  01
019BC:  BTFSS  FD8.2
019BE:  BRA    1AE0
....................              {
....................                if(FaultAgo[i]==1)
019C0:  MOVFF  710,714
019C4:  MOVLW  06
019C6:  MOVLB  7
019C8:  MOVWF  x16
019CA:  MOVLW  A7
019CC:  MOVWF  x15
019CE:  MOVLB  0
019D0:  RCALL  154E
019D2:  MOVF   01,W
019D4:  ANDLW  01
019D6:  SUBLW  01
019D8:  BTFSS  FD8.2
019DA:  BRA    1AC4
....................                {
....................                    ReleaseTime[i]++;
019DC:  BCF    FD8.0
019DE:  MOVLB  7
019E0:  RLCF   x10,W
019E2:  CLRF   03
019E4:  ADDLW  AD
019E6:  MOVWF  FE9
019E8:  MOVLW  06
019EA:  ADDWFC 03,W
019EC:  MOVWF  FEA
019EE:  MOVLW  01
019F0:  ADDWF  FEE,F
019F2:  BNC   19F6
019F4:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
019F6:  BCF    FD8.0
019F8:  RLCF   x10,W
019FA:  CLRF   03
019FC:  ADDLW  AD
019FE:  MOVWF  FE9
01A00:  MOVLW  06
01A02:  ADDWFC 03,W
01A04:  MOVWF  FEA
01A06:  MOVFF  FEC,712
01A0A:  MOVF   FED,F
01A0C:  MOVFF  FEF,711
01A10:  BCF    FD8.0
01A12:  RLCF   x10,W
01A14:  CLRF   03
01A16:  ADDLW  D5
01A18:  MOVWF  FE9
01A1A:  MOVLW  06
01A1C:  ADDWFC 03,W
01A1E:  MOVWF  FEA
01A20:  MOVFF  FEC,716
01A24:  MOVF   FED,F
01A26:  MOVFF  FEF,715
01A2A:  CLRF   x18
01A2C:  MOVLW  4B
01A2E:  MOVWF  x17
01A30:  MOVLB  0
01A32:  RCALL  1584
01A34:  MOVFF  02,714
01A38:  MOVFF  01,713
01A3C:  MOVLW  0F
01A3E:  MOVLB  7
01A40:  ADDWF  01,W
01A42:  MOVWF  01
01A44:  MOVLW  00
01A46:  ADDWFC 02,W
01A48:  MOVWF  03
01A4A:  MOVF   03,W
01A4C:  SUBWF  x12,W
01A4E:  BNC   1AC0
01A50:  BNZ   1A58
01A52:  MOVF   01,W
01A54:  SUBWF  x11,W
01A56:  BNC   1AC0
....................                    {   
....................                      ReleaseTime[i] = 0;
01A58:  BCF    FD8.0
01A5A:  RLCF   x10,W
01A5C:  CLRF   03
01A5E:  ADDLW  AD
01A60:  MOVWF  FE9
01A62:  MOVLW  06
01A64:  ADDWFC 03,W
01A66:  MOVWF  FEA
01A68:  CLRF   FEC
01A6A:  MOVF   FED,F
01A6C:  CLRF   FEF
....................                      switch(i)
01A6E:  MOVLW  01
01A70:  SUBWF  x10,W
01A72:  ADDLW  F8
01A74:  BC    1AC0
01A76:  ADDLW  08
01A78:  MOVLB  0
01A7A:  GOTO   1CF8
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
01A7E:  MOVLB  6
01A80:  BSF    x98.0
....................                         break;
01A82:  MOVLB  7
01A84:  BRA    1AC0
....................                         case 2:
....................                            Inputt.B2 = 1; 
01A86:  MOVLB  6
01A88:  BSF    x98.1
....................                         break;
01A8A:  MOVLB  7
01A8C:  BRA    1AC0
....................                         case 3:
....................                            Inputt.B3 = 1; 
01A8E:  MOVLB  6
01A90:  BSF    x98.2
....................                         break;
01A92:  MOVLB  7
01A94:  BRA    1AC0
....................                         case 4:
....................                            Inputt.B4 = 1; 
01A96:  MOVLB  6
01A98:  BSF    x98.3
....................                         break;
01A9A:  MOVLB  7
01A9C:  BRA    1AC0
....................                         case 5:
....................                            Inputt.B5 = 1; 
01A9E:  MOVLB  6
01AA0:  BSF    x98.4
....................                         break;
01AA2:  MOVLB  7
01AA4:  BRA    1AC0
....................                         case 6:
....................                            Inputt.B6 = 1; 
01AA6:  MOVLB  6
01AA8:  BSF    x98.5
....................                         break;
01AAA:  MOVLB  7
01AAC:  BRA    1AC0
....................                         case 7:
....................                            Inputt.B7 = 1; 
01AAE:  MOVLB  6
01AB0:  BSF    x98.6
....................                          break;
01AB2:  MOVLB  7
01AB4:  BRA    1AC0
....................                          case 8:
....................                            Inputt.B8 = 1; 
01AB6:  MOVLB  6
01AB8:  BSF    x98.7
....................                         break;
01ABA:  MOVLB  7
01ABC:  BRA    1AC0
01ABE:  MOVLB  7
....................                                            
....................                      }                 
....................                   }
....................                }
01AC0:  BRA    1ADC
01AC2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01AC4:  BCF    FD8.0
01AC6:  MOVLB  7
01AC8:  RLCF   x10,W
01ACA:  CLRF   03
01ACC:  ADDLW  AD
01ACE:  MOVWF  FE9
01AD0:  MOVLW  06
01AD2:  ADDWFC 03,W
01AD4:  MOVWF  FEA
01AD6:  CLRF   FEC
01AD8:  MOVF   FED,F
01ADA:  CLRF   FEF
....................                }
....................              }
01ADC:  BRA    1BFA
01ADE:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
01AE0:  MOVFF  710,714
01AE4:  MOVLW  06
01AE6:  MOVLB  7
01AE8:  MOVWF  x16
01AEA:  MOVLW  A7
01AEC:  MOVWF  x15
01AEE:  MOVLB  0
01AF0:  RCALL  154E
01AF2:  MOVF   01,W
01AF4:  ANDLW  01
01AF6:  BTFSS  FD8.2
01AF8:  BRA    1BE2
....................                {
....................                    ReleaseTime[i]++;
01AFA:  BCF    FD8.0
01AFC:  MOVLB  7
01AFE:  RLCF   x10,W
01B00:  CLRF   03
01B02:  ADDLW  AD
01B04:  MOVWF  FE9
01B06:  MOVLW  06
01B08:  ADDWFC 03,W
01B0A:  MOVWF  FEA
01B0C:  MOVLW  01
01B0E:  ADDWF  FEE,F
01B10:  BNC   1B14
01B12:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01B14:  BCF    FD8.0
01B16:  RLCF   x10,W
01B18:  CLRF   03
01B1A:  ADDLW  AD
01B1C:  MOVWF  FE9
01B1E:  MOVLW  06
01B20:  ADDWFC 03,W
01B22:  MOVWF  FEA
01B24:  MOVFF  FEC,712
01B28:  MOVF   FED,F
01B2A:  MOVFF  FEF,711
01B2E:  BCF    FD8.0
01B30:  RLCF   x10,W
01B32:  CLRF   03
01B34:  ADDLW  D5
01B36:  MOVWF  FE9
01B38:  MOVLW  06
01B3A:  ADDWFC 03,W
01B3C:  MOVWF  FEA
01B3E:  MOVFF  FEC,716
01B42:  MOVF   FED,F
01B44:  MOVFF  FEF,715
01B48:  CLRF   x18
01B4A:  MOVLW  4B
01B4C:  MOVWF  x17
01B4E:  MOVLB  0
01B50:  RCALL  1584
01B52:  MOVFF  02,714
01B56:  MOVFF  01,713
01B5A:  MOVLW  0F
01B5C:  MOVLB  7
01B5E:  ADDWF  01,W
01B60:  MOVWF  01
01B62:  MOVLW  00
01B64:  ADDWFC 02,W
01B66:  MOVWF  03
01B68:  MOVF   03,W
01B6A:  SUBWF  x12,W
01B6C:  BNC   1BDE
01B6E:  BNZ   1B76
01B70:  MOVF   01,W
01B72:  SUBWF  x11,W
01B74:  BNC   1BDE
....................                    {   
....................                      ReleaseTime[i] = 0;
01B76:  BCF    FD8.0
01B78:  RLCF   x10,W
01B7A:  CLRF   03
01B7C:  ADDLW  AD
01B7E:  MOVWF  FE9
01B80:  MOVLW  06
01B82:  ADDWFC 03,W
01B84:  MOVWF  FEA
01B86:  CLRF   FEC
01B88:  MOVF   FED,F
01B8A:  CLRF   FEF
....................                      switch(i)
01B8C:  MOVLW  01
01B8E:  SUBWF  x10,W
01B90:  ADDLW  F8
01B92:  BC    1BDE
01B94:  ADDLW  08
01B96:  MOVLB  0
01B98:  GOTO   1D22
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01B9C:  MOVLB  6
01B9E:  BCF    x98.0
....................                         break;
01BA0:  MOVLB  7
01BA2:  BRA    1BDE
....................                         case 2:
....................                            Inputt.B2 = 0; 
01BA4:  MOVLB  6
01BA6:  BCF    x98.1
....................                         break;
01BA8:  MOVLB  7
01BAA:  BRA    1BDE
....................                         case 3:
....................                            Inputt.B3 = 0; 
01BAC:  MOVLB  6
01BAE:  BCF    x98.2
....................                         break;
01BB0:  MOVLB  7
01BB2:  BRA    1BDE
....................                         case 4:
....................                            Inputt.B4 = 0; 
01BB4:  MOVLB  6
01BB6:  BCF    x98.3
....................                         break;
01BB8:  MOVLB  7
01BBA:  BRA    1BDE
....................                         case 5:
....................                            Inputt.B5 = 0; 
01BBC:  MOVLB  6
01BBE:  BCF    x98.4
....................                         break;
01BC0:  MOVLB  7
01BC2:  BRA    1BDE
....................                         case 6:
....................                            Inputt.B6 = 0; 
01BC4:  MOVLB  6
01BC6:  BCF    x98.5
....................                         break;
01BC8:  MOVLB  7
01BCA:  BRA    1BDE
....................                         case 7:
....................                            Inputt.B7 = 0; 
01BCC:  MOVLB  6
01BCE:  BCF    x98.6
....................                          break;
01BD0:  MOVLB  7
01BD2:  BRA    1BDE
....................                          case 8:
....................                            Inputt.B8 = 0; 
01BD4:  MOVLB  6
01BD6:  BCF    x98.7
....................                         break;
01BD8:  MOVLB  7
01BDA:  BRA    1BDE
01BDC:  MOVLB  7
....................               
....................                      }                 
....................                    }
....................                }
01BDE:  BRA    1BFA
01BE0:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01BE2:  BCF    FD8.0
01BE4:  MOVLB  7
01BE6:  RLCF   x10,W
01BE8:  CLRF   03
01BEA:  ADDLW  AD
01BEC:  MOVWF  FE9
01BEE:  MOVLW  06
01BF0:  ADDWFC 03,W
01BF2:  MOVWF  FEA
01BF4:  CLRF   FEC
01BF6:  MOVF   FED,F
01BF8:  CLRF   FEF
01BFA:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
01BFC:  MOVLB  7
01BFE:  INCF   x10,F
01C00:  BRA    1712
....................       }
....................       
....................       StoreReleaseFault();
01C02:  MOVLB  0
01C04:  BRA    15EA
.................... 
....................    
....................       Input1_8 = 0x00;
01C06:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
01C08:  MOVLW  00
01C0A:  MOVLB  6
01C0C:  BTFSS  x98.7
01C0E:  MOVLW  01
01C10:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
01C12:  BCF    FD8.0
01C14:  RLCF   49,W
01C16:  MOVLB  7
01C18:  MOVWF  x11
01C1A:  MOVLW  00
01C1C:  MOVLB  6
01C1E:  BTFSS  x98.6
01C20:  MOVLW  01
01C22:  MOVLB  7
01C24:  IORWF  x11,W
01C26:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
01C28:  BCF    FD8.0
01C2A:  RLCF   49,W
01C2C:  MOVWF  x11
01C2E:  MOVLW  00
01C30:  MOVLB  6
01C32:  BTFSS  x98.5
01C34:  MOVLW  01
01C36:  MOVLB  7
01C38:  IORWF  x11,W
01C3A:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
01C3C:  BCF    FD8.0
01C3E:  RLCF   49,W
01C40:  MOVWF  x11
01C42:  MOVLW  00
01C44:  MOVLB  6
01C46:  BTFSS  x98.4
01C48:  MOVLW  01
01C4A:  MOVLB  7
01C4C:  IORWF  x11,W
01C4E:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
01C50:  BCF    FD8.0
01C52:  RLCF   49,W
01C54:  MOVWF  x11
01C56:  MOVLW  00
01C58:  MOVLB  6
01C5A:  BTFSS  x98.3
01C5C:  MOVLW  01
01C5E:  MOVLB  7
01C60:  IORWF  x11,W
01C62:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
01C64:  BCF    FD8.0
01C66:  RLCF   49,W
01C68:  MOVWF  x11
01C6A:  MOVLW  00
01C6C:  MOVLB  6
01C6E:  BTFSS  x98.2
01C70:  MOVLW  01
01C72:  MOVLB  7
01C74:  IORWF  x11,W
01C76:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
01C78:  BCF    FD8.0
01C7A:  RLCF   49,W
01C7C:  MOVWF  x11
01C7E:  MOVLW  00
01C80:  MOVLB  6
01C82:  BTFSS  x98.1
01C84:  MOVLW  01
01C86:  MOVLB  7
01C88:  IORWF  x11,W
01C8A:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
01C8C:  BCF    FD8.0
01C8E:  RLCF   49,W
01C90:  MOVWF  x11
01C92:  MOVLW  00
01C94:  MOVLB  6
01C96:  BTFSS  x98.0
01C98:  MOVLW  01
01C9A:  MOVLB  7
01C9C:  IORWF  x11,W
01C9E:  MOVWF  49
01CA0:  MOVLB  0
01CA2:  RETURN 0
....................     
.................... 
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Inputt type 1-8
*
008EA:  MOVFF  FF2,711
008EE:  BCF    FF2.7
008F0:  CLRF   FAA
008F2:  MOVLW  01
008F4:  MOVWF  FA9
008F6:  BCF    FA6.6
008F8:  BCF    FA6.7
008FA:  BSF    FA6.0
008FC:  MOVF   FA8,W
008FE:  MOVLB  7
00900:  BTFSC  x11.7
00902:  BSF    FF2.7
00904:  MOVWF  39
....................    InputType1_8 = EEpDat;
00906:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
0090A:  MOVLB  6
0090C:  BCF    x9A.0
0090E:  BTFSC  39.0
00910:  BSF    x9A.0
....................    InputType.B2 = EEpDat >> 1;
00912:  BCF    FD8.0
00914:  RRCF   39,W
00916:  BCF    x9A.1
00918:  BTFSC  FE8.0
0091A:  BSF    x9A.1
....................    InputType.B3 = EEpDat >> 2;
0091C:  RRCF   39,W
0091E:  MOVWF  00
00920:  RRCF   00,F
00922:  MOVLW  3F
00924:  ANDWF  00,F
00926:  BCF    x9A.2
00928:  BTFSC  00.0
0092A:  BSF    x9A.2
....................    InputType.B4 = EEpDat >> 3;
0092C:  RRCF   39,W
0092E:  MOVWF  00
00930:  RRCF   00,F
00932:  RRCF   00,F
00934:  MOVLW  1F
00936:  ANDWF  00,F
00938:  BCF    x9A.3
0093A:  BTFSC  00.0
0093C:  BSF    x9A.3
....................    InputType.B5 = EEpDat >> 4;
0093E:  SWAPF  39,W
00940:  MOVWF  00
00942:  MOVLW  0F
00944:  ANDWF  00,F
00946:  BCF    x9A.4
00948:  BTFSC  00.0
0094A:  BSF    x9A.4
....................    InputType.B6 = EEpDat >> 5;
0094C:  SWAPF  39,W
0094E:  MOVWF  00
00950:  RRCF   00,F
00952:  MOVLW  07
00954:  ANDWF  00,F
00956:  BCF    x9A.5
00958:  BTFSC  00.0
0095A:  BSF    x9A.5
....................    InputType.B7 = EEpDat >> 6;
0095C:  SWAPF  39,W
0095E:  MOVWF  00
00960:  RRCF   00,F
00962:  RRCF   00,F
00964:  MOVLW  03
00966:  ANDWF  00,F
00968:  BCF    x9A.6
0096A:  BTFSC  00.0
0096C:  BSF    x9A.6
....................    InputType.B8 = EEpDat >> 7;
0096E:  CLRF   00
00970:  BTFSC  39.7
00972:  BSF    00.0
00974:  BCF    x9A.7
00976:  BTFSC  00.0
00978:  BSF    x9A.7
.................... 
....................    FaultNCNO[1] = InputType.B1;
0097A:  BCF    xFE.1
0097C:  BTFSC  x9A.0
0097E:  BSF    xFE.1
....................    FaultNCNO[2] = InputType.B2;
00980:  BCF    xFE.2
00982:  BTFSC  x9A.1
00984:  BSF    xFE.2
....................    FaultNCNO[3] = InputType.B3;
00986:  BCF    xFE.3
00988:  BTFSC  x9A.2
0098A:  BSF    xFE.3
....................    FaultNCNO[4] = InputType.B4;
0098C:  BCF    xFE.4
0098E:  BTFSC  x9A.3
00990:  BSF    xFE.4
....................    FaultNCNO[5] = InputType.B5;
00992:  BCF    xFE.5
00994:  BTFSC  x9A.4
00996:  BSF    xFE.5
....................    FaultNCNO[6] = InputType.B6;
00998:  BCF    xFE.6
0099A:  BTFSC  x9A.5
0099C:  BSF    xFE.6
....................    FaultNCNO[7] = InputType.B7;
0099E:  BCF    xFE.7
009A0:  BTFSC  x9A.6
009A2:  BSF    xFE.7
....................    FaultNCNO[8] = InputType.B8;
009A4:  BCF    xFF.0
009A6:  BTFSC  x9A.7
009A8:  BSF    xFF.0
....................   
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
009AA:  MOVFF  FF2,711
009AE:  BCF    FF2.7
009B0:  CLRF   FAA
009B2:  MOVLW  04
009B4:  MOVWF  FA9
009B6:  BCF    FA6.6
009B8:  BCF    FA6.7
009BA:  BSF    FA6.0
009BC:  MOVF   FA8,W
009BE:  MOVLB  7
009C0:  BTFSC  x11.7
009C2:  BSF    FF2.7
009C4:  MOVWF  39
....................    FaultType1_8 = EEpDat;
009C6:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
009CA:  MOVLB  6
009CC:  BCF    x9B.0
009CE:  BTFSC  39.0
009D0:  BSF    x9B.0
....................    FaultType.B2 = EEpDat >> 1;
009D2:  BCF    FD8.0
009D4:  RRCF   39,W
009D6:  BCF    x9B.1
009D8:  BTFSC  FE8.0
009DA:  BSF    x9B.1
....................    FaultType.B3 = EEpDat >> 2;
009DC:  RRCF   39,W
009DE:  MOVWF  00
009E0:  RRCF   00,F
009E2:  MOVLW  3F
009E4:  ANDWF  00,F
009E6:  BCF    x9B.2
009E8:  BTFSC  00.0
009EA:  BSF    x9B.2
....................    FaultType.B4 = EEpDat >> 3;
009EC:  RRCF   39,W
009EE:  MOVWF  00
009F0:  RRCF   00,F
009F2:  RRCF   00,F
009F4:  MOVLW  1F
009F6:  ANDWF  00,F
009F8:  BCF    x9B.3
009FA:  BTFSC  00.0
009FC:  BSF    x9B.3
....................    FaultType.B5 = EEpDat >> 4;
009FE:  SWAPF  39,W
00A00:  MOVWF  00
00A02:  MOVLW  0F
00A04:  ANDWF  00,F
00A06:  BCF    x9B.4
00A08:  BTFSC  00.0
00A0A:  BSF    x9B.4
....................    FaultType.B6 = EEpDat >> 5;
00A0C:  SWAPF  39,W
00A0E:  MOVWF  00
00A10:  RRCF   00,F
00A12:  MOVLW  07
00A14:  ANDWF  00,F
00A16:  BCF    x9B.5
00A18:  BTFSC  00.0
00A1A:  BSF    x9B.5
....................    FaultType.B7 = EEpDat >> 6;
00A1C:  SWAPF  39,W
00A1E:  MOVWF  00
00A20:  RRCF   00,F
00A22:  RRCF   00,F
00A24:  MOVLW  03
00A26:  ANDWF  00,F
00A28:  BCF    x9B.6
00A2A:  BTFSC  00.0
00A2C:  BSF    x9B.6
....................    FaultType.B8 = EEpDat >> 7;
00A2E:  CLRF   00
00A30:  BTFSC  39.7
00A32:  BSF    00.0
00A34:  BCF    x9B.7
00A36:  BTFSC  00.0
00A38:  BSF    x9B.7
.................... 
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00A3A:  MOVFF  FF2,711
00A3E:  BCF    FF2.7
00A40:  CLRF   FAA
00A42:  MOVLW  07
00A44:  MOVWF  FA9
00A46:  BCF    FA6.6
00A48:  BCF    FA6.7
00A4A:  BSF    FA6.0
00A4C:  MOVF   FA8,W
00A4E:  MOVLB  7
00A50:  BTFSC  x11.7
00A52:  BSF    FF2.7
00A54:  MOVWF  39
....................    OutputType1_8 = EEpDat;
00A56:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00A5A:  MOVLB  6
00A5C:  BCF    x9C.0
00A5E:  BTFSC  39.0
00A60:  BSF    x9C.0
....................    OutputType.B2 = EEpDat >> 1;
00A62:  BCF    FD8.0
00A64:  RRCF   39,W
00A66:  BCF    x9C.1
00A68:  BTFSC  FE8.0
00A6A:  BSF    x9C.1
....................    OutputType.B3 = EEpDat >> 2;
00A6C:  RRCF   39,W
00A6E:  MOVWF  00
00A70:  RRCF   00,F
00A72:  MOVLW  3F
00A74:  ANDWF  00,F
00A76:  BCF    x9C.2
00A78:  BTFSC  00.0
00A7A:  BSF    x9C.2
....................    OutputType.B4 = EEpDat >> 3;
00A7C:  RRCF   39,W
00A7E:  MOVWF  00
00A80:  RRCF   00,F
00A82:  RRCF   00,F
00A84:  MOVLW  1F
00A86:  ANDWF  00,F
00A88:  BCF    x9C.3
00A8A:  BTFSC  00.0
00A8C:  BSF    x9C.3
....................    OutputType.B5 = EEpDat >> 4;
00A8E:  SWAPF  39,W
00A90:  MOVWF  00
00A92:  MOVLW  0F
00A94:  ANDWF  00,F
00A96:  BCF    x9C.4
00A98:  BTFSC  00.0
00A9A:  BSF    x9C.4
....................    OutputType.B6 = EEpDat >> 5;
00A9C:  SWAPF  39,W
00A9E:  MOVWF  00
00AA0:  RRCF   00,F
00AA2:  MOVLW  07
00AA4:  ANDWF  00,F
00AA6:  BCF    x9C.5
00AA8:  BTFSC  00.0
00AAA:  BSF    x9C.5
....................    OutputType.B7 = EEpDat >> 6;
00AAC:  SWAPF  39,W
00AAE:  MOVWF  00
00AB0:  RRCF   00,F
00AB2:  RRCF   00,F
00AB4:  MOVLW  03
00AB6:  ANDWF  00,F
00AB8:  BCF    x9C.6
00ABA:  BTFSC  00.0
00ABC:  BSF    x9C.6
....................    OutputType.B8 = EEpDat >> 7;
00ABE:  CLRF   00
00AC0:  BTFSC  39.7
00AC2:  BSF    00.0
00AC4:  BCF    x9C.7
00AC6:  BTFSC  00.0
00AC8:  BSF    x9C.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00ACA:  MOVFF  FF2,711
00ACE:  BCF    FF2.7
00AD0:  CLRF   FAA
00AD2:  MOVLW  0A
00AD4:  MOVWF  FA9
00AD6:  BCF    FA6.6
00AD8:  BCF    FA6.7
00ADA:  BSF    FA6.0
00ADC:  MOVF   FA8,W
00ADE:  MOVLB  7
00AE0:  BTFSC  x11.7
00AE2:  BSF    FF2.7
00AE4:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
00AE6:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
00AEA:  MOVLB  6
00AEC:  BCF    x9D.0
00AEE:  BTFSC  39.0
00AF0:  BSF    x9D.0
....................    OutputBoth.B2 = EEpDat >> 1;
00AF2:  BCF    FD8.0
00AF4:  RRCF   39,W
00AF6:  BCF    x9D.1
00AF8:  BTFSC  FE8.0
00AFA:  BSF    x9D.1
....................    OutputBoth.B3 = EEpDat >> 2;
00AFC:  RRCF   39,W
00AFE:  MOVWF  00
00B00:  RRCF   00,F
00B02:  MOVLW  3F
00B04:  ANDWF  00,F
00B06:  BCF    x9D.2
00B08:  BTFSC  00.0
00B0A:  BSF    x9D.2
....................    OutputBoth.B4 = EEpDat >> 3;
00B0C:  RRCF   39,W
00B0E:  MOVWF  00
00B10:  RRCF   00,F
00B12:  RRCF   00,F
00B14:  MOVLW  1F
00B16:  ANDWF  00,F
00B18:  BCF    x9D.3
00B1A:  BTFSC  00.0
00B1C:  BSF    x9D.3
....................    OutputBoth.B5 = EEpDat >> 4;
00B1E:  SWAPF  39,W
00B20:  MOVWF  00
00B22:  MOVLW  0F
00B24:  ANDWF  00,F
00B26:  BCF    x9D.4
00B28:  BTFSC  00.0
00B2A:  BSF    x9D.4
....................    OutputBoth.B6 = EEpDat >> 5;
00B2C:  SWAPF  39,W
00B2E:  MOVWF  00
00B30:  RRCF   00,F
00B32:  MOVLW  07
00B34:  ANDWF  00,F
00B36:  BCF    x9D.5
00B38:  BTFSC  00.0
00B3A:  BSF    x9D.5
....................    OutputBoth.B7 = EEpDat >> 6;
00B3C:  SWAPF  39,W
00B3E:  MOVWF  00
00B40:  RRCF   00,F
00B42:  RRCF   00,F
00B44:  MOVLW  03
00B46:  ANDWF  00,F
00B48:  BCF    x9D.6
00B4A:  BTFSC  00.0
00B4C:  BSF    x9D.6
....................    OutputBoth.B8 = EEpDat >> 7;
00B4E:  CLRF   00
00B50:  BTFSC  39.7
00B52:  BSF    00.0
00B54:  BCF    x9D.7
00B56:  BTFSC  00.0
00B58:  BSF    x9D.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00B5A:  MOVFF  FF2,711
00B5E:  BCF    FF2.7
00B60:  CLRF   FAA
00B62:  MOVLW  0D
00B64:  MOVWF  FA9
00B66:  BCF    FA6.6
00B68:  BCF    FA6.7
00B6A:  BSF    FA6.0
00B6C:  MOVF   FA8,W
00B6E:  MOVLB  7
00B70:  BTFSC  x11.7
00B72:  BSF    FF2.7
00B74:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
00B76:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00B7A:  MOVLB  6
00B7C:  BCF    x9E.0
00B7E:  BTFSC  39.0
00B80:  BSF    x9E.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00B82:  BCF    FD8.0
00B84:  RRCF   39,W
00B86:  BCF    x9E.1
00B88:  BTFSC  FE8.0
00B8A:  BSF    x9E.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00B8C:  RRCF   39,W
00B8E:  MOVWF  00
00B90:  RRCF   00,F
00B92:  MOVLW  3F
00B94:  ANDWF  00,F
00B96:  BCF    x9E.2
00B98:  BTFSC  00.0
00B9A:  BSF    x9E.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00B9C:  RRCF   39,W
00B9E:  MOVWF  00
00BA0:  RRCF   00,F
00BA2:  RRCF   00,F
00BA4:  MOVLW  1F
00BA6:  ANDWF  00,F
00BA8:  BCF    x9E.3
00BAA:  BTFSC  00.0
00BAC:  BSF    x9E.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00BAE:  SWAPF  39,W
00BB0:  MOVWF  00
00BB2:  MOVLW  0F
00BB4:  ANDWF  00,F
00BB6:  BCF    x9E.4
00BB8:  BTFSC  00.0
00BBA:  BSF    x9E.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00BBC:  SWAPF  39,W
00BBE:  MOVWF  00
00BC0:  RRCF   00,F
00BC2:  MOVLW  07
00BC4:  ANDWF  00,F
00BC6:  BCF    x9E.5
00BC8:  BTFSC  00.0
00BCA:  BSF    x9E.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00BCC:  SWAPF  39,W
00BCE:  MOVWF  00
00BD0:  RRCF   00,F
00BD2:  RRCF   00,F
00BD4:  MOVLW  03
00BD6:  ANDWF  00,F
00BD8:  BCF    x9E.6
00BDA:  BTFSC  00.0
00BDC:  BSF    x9E.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00BDE:  CLRF   00
00BE0:  BTFSC  39.7
00BE2:  BSF    00.0
00BE4:  BCF    x9E.7
00BE6:  BTFSC  00.0
00BE8:  BSF    x9E.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00BEA:  MOVFF  FF2,711
00BEE:  BCF    FF2.7
00BF0:  CLRF   FAA
00BF2:  MOVLW  10
00BF4:  MOVWF  FA9
00BF6:  BCF    FA6.6
00BF8:  BCF    FA6.7
00BFA:  BSF    FA6.0
00BFC:  MOVF   FA8,W
00BFE:  MOVLB  7
00C00:  BTFSC  x11.7
00C02:  BSF    FF2.7
00C04:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00C06:  MOVLB  6
00C08:  BCF    xA4.0
00C0A:  BTFSC  39.0
00C0C:  BSF    xA4.0
....................    RED_Colour.B2 = EEpDat >> 1;
00C0E:  BCF    FD8.0
00C10:  RRCF   39,W
00C12:  BCF    xA4.1
00C14:  BTFSC  FE8.0
00C16:  BSF    xA4.1
....................    RED_Colour.B3 = EEpDat >> 2;
00C18:  RRCF   39,W
00C1A:  MOVWF  00
00C1C:  RRCF   00,F
00C1E:  MOVLW  3F
00C20:  ANDWF  00,F
00C22:  BCF    xA4.2
00C24:  BTFSC  00.0
00C26:  BSF    xA4.2
....................    RED_Colour.B4 = EEpDat >> 3;
00C28:  RRCF   39,W
00C2A:  MOVWF  00
00C2C:  RRCF   00,F
00C2E:  RRCF   00,F
00C30:  MOVLW  1F
00C32:  ANDWF  00,F
00C34:  BCF    xA4.3
00C36:  BTFSC  00.0
00C38:  BSF    xA4.3
....................    RED_Colour.B5 = EEpDat >> 4;
00C3A:  SWAPF  39,W
00C3C:  MOVWF  00
00C3E:  MOVLW  0F
00C40:  ANDWF  00,F
00C42:  BCF    xA4.4
00C44:  BTFSC  00.0
00C46:  BSF    xA4.4
....................    RED_Colour.B6 = EEpDat >> 5;
00C48:  SWAPF  39,W
00C4A:  MOVWF  00
00C4C:  RRCF   00,F
00C4E:  MOVLW  07
00C50:  ANDWF  00,F
00C52:  BCF    xA4.5
00C54:  BTFSC  00.0
00C56:  BSF    xA4.5
....................    RED_Colour.B7 = EEpDat >> 6;
00C58:  SWAPF  39,W
00C5A:  MOVWF  00
00C5C:  RRCF   00,F
00C5E:  RRCF   00,F
00C60:  MOVLW  03
00C62:  ANDWF  00,F
00C64:  BCF    xA4.6
00C66:  BTFSC  00.0
00C68:  BSF    xA4.6
....................    RED_Colour.B8 = EEpDat >> 7;
00C6A:  CLRF   00
00C6C:  BTFSC  39.7
00C6E:  BSF    00.0
00C70:  BCF    xA4.7
00C72:  BTFSC  00.0
00C74:  BSF    xA4.7
....................     
....................    EEpDat = read_eeprom(0x14);
00C76:  MOVFF  FF2,711
00C7A:  BCF    FF2.7
00C7C:  CLRF   FAA
00C7E:  MOVLW  14
00C80:  MOVWF  FA9
00C82:  BCF    FA6.6
00C84:  BCF    FA6.7
00C86:  BSF    FA6.0
00C88:  MOVF   FA8,W
00C8A:  MOVLB  7
00C8C:  BTFSC  x11.7
00C8E:  BSF    FF2.7
00C90:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00C92:  MOVLB  6
00C94:  BCF    xA5.0
00C96:  BTFSC  39.0
00C98:  BSF    xA5.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00C9A:  BCF    FD8.0
00C9C:  RRCF   39,W
00C9E:  BCF    xA5.1
00CA0:  BTFSC  FE8.0
00CA2:  BSF    xA5.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00CA4:  RRCF   39,W
00CA6:  MOVWF  00
00CA8:  RRCF   00,F
00CAA:  MOVLW  3F
00CAC:  ANDWF  00,F
00CAE:  BCF    xA5.2
00CB0:  BTFSC  00.0
00CB2:  BSF    xA5.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00CB4:  RRCF   39,W
00CB6:  MOVWF  00
00CB8:  RRCF   00,F
00CBA:  RRCF   00,F
00CBC:  MOVLW  1F
00CBE:  ANDWF  00,F
00CC0:  BCF    xA5.3
00CC2:  BTFSC  00.0
00CC4:  BSF    xA5.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00CC6:  SWAPF  39,W
00CC8:  MOVWF  00
00CCA:  MOVLW  0F
00CCC:  ANDWF  00,F
00CCE:  BCF    xA5.4
00CD0:  BTFSC  00.0
00CD2:  BSF    xA5.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00CD4:  SWAPF  39,W
00CD6:  MOVWF  00
00CD8:  RRCF   00,F
00CDA:  MOVLW  07
00CDC:  ANDWF  00,F
00CDE:  BCF    xA5.5
00CE0:  BTFSC  00.0
00CE2:  BSF    xA5.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00CE4:  SWAPF  39,W
00CE6:  MOVWF  00
00CE8:  RRCF   00,F
00CEA:  RRCF   00,F
00CEC:  MOVLW  03
00CEE:  ANDWF  00,F
00CF0:  BCF    xA5.6
00CF2:  BTFSC  00.0
00CF4:  BSF    xA5.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00CF6:  CLRF   00
00CF8:  BTFSC  39.7
00CFA:  BSF    00.0
00CFC:  BCF    xA5.7
00CFE:  BTFSC  00.0
00D00:  BSF    xA5.7
.................... 
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00D02:  MOVFF  FF2,711
00D06:  BCF    FF2.7
00D08:  CLRF   FAA
00D0A:  MOVLW  18
00D0C:  MOVWF  FA9
00D0E:  BCF    FA6.6
00D10:  BCF    FA6.7
00D12:  BSF    FA6.0
00D14:  MOVF   FA8,W
00D16:  MOVLB  7
00D18:  BTFSC  x11.7
00D1A:  BSF    FF2.7
00D1C:  MOVLB  0
00D1E:  MOVWF  x6A
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00D20:  MOVFF  FF2,711
00D24:  BCF    FF2.7
00D26:  CLRF   FAA
00D28:  MOVLW  19
00D2A:  MOVWF  FA9
00D2C:  BCF    FA6.6
00D2E:  BCF    FA6.7
00D30:  BSF    FA6.0
00D32:  MOVF   FA8,W
00D34:  MOVLB  7
00D36:  BTFSC  x11.7
00D38:  BSF    FF2.7
00D3A:  MOVLB  0
00D3C:  MOVWF  x6B
....................    FlashingRateTime = FlashingRate = read_eeprom(0x1A); // Flashing rate
00D3E:  MOVFF  FF2,711
00D42:  BCF    FF2.7
00D44:  CLRF   FAA
00D46:  MOVLW  1A
00D48:  MOVWF  FA9
00D4A:  BCF    FA6.6
00D4C:  BCF    FA6.7
00D4E:  BSF    FA6.0
00D50:  MOVF   FA8,W
00D52:  MOVLB  7
00D54:  BTFSC  x11.7
00D56:  BSF    FF2.7
00D58:  MOVLB  0
00D5A:  MOVWF  x6C
00D5C:  MOVFF  6C,1B
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00D60:  MOVFF  FF2,711
00D64:  BCF    FF2.7
00D66:  CLRF   FAA
00D68:  MOVLW  1B
00D6A:  MOVWF  FA9
00D6C:  BCF    FA6.6
00D6E:  BCF    FA6.7
00D70:  BSF    FA6.0
00D72:  MOVF   FA8,W
00D74:  MOVLB  7
00D76:  BTFSC  x11.7
00D78:  BSF    FF2.7
00D7A:  MOVLB  0
00D7C:  MOVWF  x6D
....................    AllFaultDelayTime = read_eeprom(0x1C);  // Master or slave sync(flashing)
00D7E:  MOVFF  FF2,711
00D82:  BCF    FF2.7
00D84:  CLRF   FAA
00D86:  MOVLW  1C
00D88:  MOVWF  FA9
00D8A:  BCF    FA6.6
00D8C:  BCF    FA6.7
00D8E:  BSF    FA6.0
00D90:  MOVF   FA8,W
00D92:  MOVLB  7
00D94:  BTFSC  x11.7
00D96:  BSF    FF2.7
00D98:  MOVLB  6
00D9A:  MOVWF  xFD
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
00D9C:  MOVFF  FF2,711
00DA0:  BCF    FF2.7
00DA2:  CLRF   FAA
00DA4:  MOVLW  1D
00DA6:  MOVWF  FA9
00DA8:  BCF    FA6.6
00DAA:  BCF    FA6.7
00DAC:  BSF    FA6.0
00DAE:  MOVF   FA8,W
00DB0:  MOVLB  7
00DB2:  BTFSC  x11.7
00DB4:  BSF    FF2.7
00DB6:  MOVLB  0
00DB8:  MOVWF  x79
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
00DBA:  MOVFF  FF2,711
00DBE:  BCF    FF2.7
00DC0:  CLRF   FAA
00DC2:  MOVLW  1E
00DC4:  MOVWF  FA9
00DC6:  BCF    FA6.6
00DC8:  BCF    FA6.7
00DCA:  BSF    FA6.0
00DCC:  MOVF   FA8,W
00DCE:  MOVLB  7
00DD0:  BTFSC  x11.7
00DD2:  BSF    FF2.7
00DD4:  MOVLB  6
00DD6:  CLRF   xD8
00DD8:  MOVWF  xD7
....................    FaultDelayTime[2] = read_eeprom(0x1F);
00DDA:  MOVFF  FF2,711
00DDE:  BCF    FF2.7
00DE0:  CLRF   FAA
00DE2:  MOVLW  1F
00DE4:  MOVWF  FA9
00DE6:  BCF    FA6.6
00DE8:  BCF    FA6.7
00DEA:  BSF    FA6.0
00DEC:  MOVF   FA8,W
00DEE:  MOVLB  7
00DF0:  BTFSC  x11.7
00DF2:  BSF    FF2.7
00DF4:  MOVLB  6
00DF6:  CLRF   xDA
00DF8:  MOVWF  xD9
....................    FaultDelayTime[3] = read_eeprom(0x20);
00DFA:  MOVFF  FF2,711
00DFE:  BCF    FF2.7
00E00:  CLRF   FAA
00E02:  MOVLW  20
00E04:  MOVWF  FA9
00E06:  BCF    FA6.6
00E08:  BCF    FA6.7
00E0A:  BSF    FA6.0
00E0C:  MOVF   FA8,W
00E0E:  MOVLB  7
00E10:  BTFSC  x11.7
00E12:  BSF    FF2.7
00E14:  MOVLB  6
00E16:  CLRF   xDC
00E18:  MOVWF  xDB
....................    FaultDelayTime[4] = read_eeprom(0x21);
00E1A:  MOVFF  FF2,711
00E1E:  BCF    FF2.7
00E20:  CLRF   FAA
00E22:  MOVLW  21
00E24:  MOVWF  FA9
00E26:  BCF    FA6.6
00E28:  BCF    FA6.7
00E2A:  BSF    FA6.0
00E2C:  MOVF   FA8,W
00E2E:  MOVLB  7
00E30:  BTFSC  x11.7
00E32:  BSF    FF2.7
00E34:  MOVLB  6
00E36:  CLRF   xDE
00E38:  MOVWF  xDD
....................    FaultDelayTime[5] = read_eeprom(0x22);
00E3A:  MOVFF  FF2,711
00E3E:  BCF    FF2.7
00E40:  CLRF   FAA
00E42:  MOVLW  22
00E44:  MOVWF  FA9
00E46:  BCF    FA6.6
00E48:  BCF    FA6.7
00E4A:  BSF    FA6.0
00E4C:  MOVF   FA8,W
00E4E:  MOVLB  7
00E50:  BTFSC  x11.7
00E52:  BSF    FF2.7
00E54:  MOVLB  6
00E56:  CLRF   xE0
00E58:  MOVWF  xDF
....................    FaultDelayTime[6] = read_eeprom(0x23);
00E5A:  MOVFF  FF2,711
00E5E:  BCF    FF2.7
00E60:  CLRF   FAA
00E62:  MOVLW  23
00E64:  MOVWF  FA9
00E66:  BCF    FA6.6
00E68:  BCF    FA6.7
00E6A:  BSF    FA6.0
00E6C:  MOVF   FA8,W
00E6E:  MOVLB  7
00E70:  BTFSC  x11.7
00E72:  BSF    FF2.7
00E74:  MOVLB  6
00E76:  CLRF   xE2
00E78:  MOVWF  xE1
....................    FaultDelayTime[7] = read_eeprom(0x24);
00E7A:  MOVFF  FF2,711
00E7E:  BCF    FF2.7
00E80:  CLRF   FAA
00E82:  MOVLW  24
00E84:  MOVWF  FA9
00E86:  BCF    FA6.6
00E88:  BCF    FA6.7
00E8A:  BSF    FA6.0
00E8C:  MOVF   FA8,W
00E8E:  MOVLB  7
00E90:  BTFSC  x11.7
00E92:  BSF    FF2.7
00E94:  MOVLB  6
00E96:  CLRF   xE4
00E98:  MOVWF  xE3
....................    FaultDelayTime[8] = read_eeprom(0x25);
00E9A:  MOVFF  FF2,711
00E9E:  BCF    FF2.7
00EA0:  CLRF   FAA
00EA2:  MOVLW  25
00EA4:  MOVWF  FA9
00EA6:  BCF    FA6.6
00EA8:  BCF    FA6.7
00EAA:  BSF    FA6.0
00EAC:  MOVF   FA8,W
00EAE:  MOVLB  7
00EB0:  BTFSC  x11.7
00EB2:  BSF    FF2.7
00EB4:  MOVLB  6
00EB6:  CLRF   xE6
00EB8:  MOVWF  xE5
....................    FaultDelayTime[9] = read_eeprom(0x26);
00EBA:  MOVFF  FF2,711
00EBE:  BCF    FF2.7
00EC0:  CLRF   FAA
00EC2:  MOVLW  26
00EC4:  MOVWF  FA9
00EC6:  BCF    FA6.6
00EC8:  BCF    FA6.7
00ECA:  BSF    FA6.0
00ECC:  MOVF   FA8,W
00ECE:  MOVLB  7
00ED0:  BTFSC  x11.7
00ED2:  BSF    FF2.7
00ED4:  MOVLB  6
00ED6:  CLRF   xE8
00ED8:  MOVWF  xE7
....................    FaultDelayTime[10] = read_eeprom(0x27);
00EDA:  MOVFF  FF2,711
00EDE:  BCF    FF2.7
00EE0:  CLRF   FAA
00EE2:  MOVLW  27
00EE4:  MOVWF  FA9
00EE6:  BCF    FA6.6
00EE8:  BCF    FA6.7
00EEA:  BSF    FA6.0
00EEC:  MOVF   FA8,W
00EEE:  MOVLB  7
00EF0:  BTFSC  x11.7
00EF2:  BSF    FF2.7
00EF4:  MOVLB  6
00EF6:  CLRF   xEA
00EF8:  MOVWF  xE9
....................    FaultDelayTime[11] = read_eeprom(0x28);
00EFA:  MOVFF  FF2,711
00EFE:  BCF    FF2.7
00F00:  CLRF   FAA
00F02:  MOVLW  28
00F04:  MOVWF  FA9
00F06:  BCF    FA6.6
00F08:  BCF    FA6.7
00F0A:  BSF    FA6.0
00F0C:  MOVF   FA8,W
00F0E:  MOVLB  7
00F10:  BTFSC  x11.7
00F12:  BSF    FF2.7
00F14:  MOVLB  6
00F16:  CLRF   xEC
00F18:  MOVWF  xEB
....................    FaultDelayTime[12] = read_eeprom(0x29);
00F1A:  MOVFF  FF2,711
00F1E:  BCF    FF2.7
00F20:  CLRF   FAA
00F22:  MOVLW  29
00F24:  MOVWF  FA9
00F26:  BCF    FA6.6
00F28:  BCF    FA6.7
00F2A:  BSF    FA6.0
00F2C:  MOVF   FA8,W
00F2E:  MOVLB  7
00F30:  BTFSC  x11.7
00F32:  BSF    FF2.7
00F34:  MOVLB  6
00F36:  CLRF   xEE
00F38:  MOVWF  xED
....................    FaultDelayTime[13] = read_eeprom(0x2A);
00F3A:  MOVFF  FF2,711
00F3E:  BCF    FF2.7
00F40:  CLRF   FAA
00F42:  MOVLW  2A
00F44:  MOVWF  FA9
00F46:  BCF    FA6.6
00F48:  BCF    FA6.7
00F4A:  BSF    FA6.0
00F4C:  MOVF   FA8,W
00F4E:  MOVLB  7
00F50:  BTFSC  x11.7
00F52:  BSF    FF2.7
00F54:  MOVLB  6
00F56:  CLRF   xF0
00F58:  MOVWF  xEF
....................    FaultDelayTime[14] = read_eeprom(0x2B);
00F5A:  MOVFF  FF2,711
00F5E:  BCF    FF2.7
00F60:  CLRF   FAA
00F62:  MOVLW  2B
00F64:  MOVWF  FA9
00F66:  BCF    FA6.6
00F68:  BCF    FA6.7
00F6A:  BSF    FA6.0
00F6C:  MOVF   FA8,W
00F6E:  MOVLB  7
00F70:  BTFSC  x11.7
00F72:  BSF    FF2.7
00F74:  MOVLB  6
00F76:  CLRF   xF2
00F78:  MOVWF  xF1
....................    FaultDelayTime[15] = read_eeprom(0x2C);
00F7A:  MOVFF  FF2,711
00F7E:  BCF    FF2.7
00F80:  CLRF   FAA
00F82:  MOVLW  2C
00F84:  MOVWF  FA9
00F86:  BCF    FA6.6
00F88:  BCF    FA6.7
00F8A:  BSF    FA6.0
00F8C:  MOVF   FA8,W
00F8E:  MOVLB  7
00F90:  BTFSC  x11.7
00F92:  BSF    FF2.7
00F94:  MOVLB  6
00F96:  CLRF   xF4
00F98:  MOVWF  xF3
....................    FaultDelayTime[16] = read_eeprom(0x2D);
00F9A:  MOVFF  FF2,711
00F9E:  BCF    FF2.7
00FA0:  CLRF   FAA
00FA2:  MOVLW  2D
00FA4:  MOVWF  FA9
00FA6:  BCF    FA6.6
00FA8:  BCF    FA6.7
00FAA:  BSF    FA6.0
00FAC:  MOVF   FA8,W
00FAE:  MOVLB  7
00FB0:  BTFSC  x11.7
00FB2:  BSF    FF2.7
00FB4:  MOVLB  6
00FB6:  CLRF   xF6
00FB8:  MOVWF  xF5
....................    FaultDelayTime[17] = read_eeprom(0x2E);
00FBA:  MOVFF  FF2,711
00FBE:  BCF    FF2.7
00FC0:  CLRF   FAA
00FC2:  MOVLW  2E
00FC4:  MOVWF  FA9
00FC6:  BCF    FA6.6
00FC8:  BCF    FA6.7
00FCA:  BSF    FA6.0
00FCC:  MOVF   FA8,W
00FCE:  MOVLB  7
00FD0:  BTFSC  x11.7
00FD2:  BSF    FF2.7
00FD4:  MOVLB  6
00FD6:  CLRF   xF8
00FD8:  MOVWF  xF7
....................    FaultDelayTime[18] = read_eeprom(0x2F);
00FDA:  MOVFF  FF2,711
00FDE:  BCF    FF2.7
00FE0:  CLRF   FAA
00FE2:  MOVLW  2F
00FE4:  MOVWF  FA9
00FE6:  BCF    FA6.6
00FE8:  BCF    FA6.7
00FEA:  BSF    FA6.0
00FEC:  MOVF   FA8,W
00FEE:  MOVLB  7
00FF0:  BTFSC  x11.7
00FF2:  BSF    FF2.7
00FF4:  MOVLB  6
00FF6:  CLRF   xFA
00FF8:  MOVWF  xF9
....................    FaultDelayTime[19] = read_eeprom(0x30);
00FFA:  MOVFF  FF2,711
00FFE:  BCF    FF2.7
01000:  CLRF   FAA
01002:  MOVLW  30
01004:  MOVWF  FA9
01006:  BCF    FA6.6
01008:  BCF    FA6.7
0100A:  BSF    FA6.0
0100C:  MOVF   FA8,W
0100E:  MOVLB  7
01010:  BTFSC  x11.7
01012:  BSF    FF2.7
01014:  MOVLB  6
01016:  CLRF   xFC
01018:  MOVWF  xFB
....................    FaultDelayTime[20] = read_eeprom(0x31);
0101A:  MOVFF  FF2,711
0101E:  BCF    FF2.7
01020:  CLRF   FAA
01022:  MOVLW  31
01024:  MOVWF  FA9
01026:  BCF    FA6.6
01028:  BCF    FA6.7
0102A:  BSF    FA6.0
0102C:  MOVF   FA8,W
0102E:  MOVLB  7
01030:  BTFSC  x11.7
01032:  BSF    FF2.7
01034:  MOVLB  6
01036:  CLRF   xFE
01038:  MOVWF  xFD
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
0103A:  MOVLB  7
0103C:  CLRF   x07
....................    for(; ; a++)
....................    {
....................       restart_wdt();
0103E:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
01040:  MOVLW  32
01042:  ADDWF  x07,W
01044:  MOVWF  x11
01046:  MOVFF  FF2,712
0104A:  BCF    FF2.7
0104C:  CLRF   FAA
0104E:  MOVFF  711,FA9
01052:  BCF    FA6.6
01054:  BCF    FA6.7
01056:  BSF    FA6.0
01058:  MOVF   FA8,W
0105A:  BTFSC  x12.7
0105C:  BSF    FF2.7
0105E:  MOVWF  x08
....................       if((phonenum == 0x0D) || (a > 15))
01060:  MOVF   x08,W
01062:  SUBLW  0D
01064:  BZ    106C
01066:  MOVF   x07,W
01068:  SUBLW  0F
0106A:  BC    10B4
....................       {
....................          sms_phonenumber[a] =  '\0';
0106C:  CLRF   03
0106E:  MOVF   x07,W
01070:  ADDLW  89
01072:  MOVWF  FE9
01074:  MOVLW  05
01076:  ADDWFC 03,W
01078:  MOVWF  FEA
0107A:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
0107C:  MOVLW  32
0107E:  ADDWF  x07,W
01080:  MOVWF  x11
01082:  MOVF   FF2,W
01084:  MOVWF  00
01086:  BCF    FF2.7
01088:  CLRF   FAA
0108A:  MOVFF  711,FA9
0108E:  MOVFF  708,FA8
01092:  BCF    FA6.6
01094:  BCF    FA6.7
01096:  BSF    FA6.2
01098:  MOVLB  F
0109A:  MOVLW  55
0109C:  MOVWF  FA7
0109E:  MOVLW  AA
010A0:  MOVWF  FA7
010A2:  BSF    FA6.1
010A4:  BTFSC  FA6.1
010A6:  BRA    10A4
010A8:  BCF    FA6.2
010AA:  MOVF   00,W
010AC:  IORWF  FF2,F
....................          break;
010AE:  BRA    10D0
....................       }
010B0:  BRA    10C8
010B2:  MOVLB  7
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
010B4:  CLRF   03
010B6:  MOVF   x07,W
010B8:  ADDLW  89
010BA:  MOVWF  FE9
010BC:  MOVLW  05
010BE:  ADDWFC 03,W
010C0:  MOVWF  FEA
010C2:  MOVFF  708,FEF
010C6:  MOVLB  F
....................       }
010C8:  MOVLB  7
010CA:  INCF   x07,F
010CC:  BRA    103E
010CE:  MOVLB  F
....................    }
....................    
....................    int16  i =3,j=0,k=0 , buff;
010D0:  MOVLB  7
010D2:  CLRF   x0A
010D4:  MOVLW  03
010D6:  MOVWF  x09
010D8:  CLRF   x0C
010DA:  CLRF   x0B
010DC:  CLRF   x0E
010DE:  CLRF   x0D
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
010E0:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
010E2:  MOVLW  5D
010E4:  ADDWF  x09,W
010E6:  MOVWF  x11
010E8:  MOVLW  00
010EA:  ADDWFC x0A,W
010EC:  MOVWF  x12
010EE:  MOVFF  FF2,713
010F2:  BCF    FF2.7
010F4:  MOVFF  712,FAA
010F8:  MOVFF  711,FA9
010FC:  BCF    FA6.6
010FE:  BCF    FA6.7
01100:  BSF    FA6.0
01102:  MOVF   FA8,W
01104:  BTFSC  x13.7
01106:  BSF    FF2.7
01108:  CLRF   x10
0110A:  MOVWF  x0F
....................       
....................       if((buff == 0x0D)|| (j>41))
0110C:  MOVF   x0F,W
0110E:  SUBLW  0D
01110:  BNZ   1116
01112:  MOVF   x10,F
01114:  BZ    1120
01116:  MOVF   x0C,F
01118:  BNZ   1120
0111A:  MOVF   x0B,W
0111C:  SUBLW  29
0111E:  BC    1132
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
01120:  MOVLW  98
01122:  ADDWF  x0B,W
01124:  MOVWF  FE9
01126:  MOVLW  05
01128:  ADDWFC x0C,W
0112A:  MOVWF  FEA
0112C:  CLRF   FEF
....................          break;
0112E:  BRA    1156
....................       }
01130:  BRA    1142
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
01132:  MOVLW  98
01134:  ADDWF  x0B,W
01136:  MOVWF  FE9
01138:  MOVLW  05
0113A:  ADDWFC x0C,W
0113C:  MOVWF  FEA
0113E:  MOVFF  70F,FEF
....................       }
01142:  MOVFF  70A,03
01146:  MOVF   x09,W
01148:  INCF   x09,F
0114A:  BTFSC  FD8.2
0114C:  INCF   x0A,F
0114E:  INCF   x0B,F
01150:  BTFSC  FD8.2
01152:  INCF   x0C,F
01154:  BRA    10E0
....................    }
....................    
....................    i++;
01156:  INCF   x09,F
01158:  BTFSC  FD8.2
0115A:  INCF   x0A,F
....................    j=0;
0115C:  CLRF   x0C
0115E:  CLRF   x0B
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01160:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01162:  MOVLW  5D
01164:  ADDWF  x09,W
01166:  MOVWF  x11
01168:  MOVLW  00
0116A:  ADDWFC x0A,W
0116C:  MOVWF  x12
0116E:  MOVFF  FF2,713
01172:  BCF    FF2.7
01174:  MOVFF  712,FAA
01178:  MOVFF  711,FA9
0117C:  BCF    FA6.6
0117E:  BCF    FA6.7
01180:  BSF    FA6.0
01182:  MOVF   FA8,W
01184:  BTFSC  x13.7
01186:  BSF    FF2.7
01188:  CLRF   x10
0118A:  MOVWF  x0F
....................       
....................       if((buff == 0x0D) || (j>41))
0118C:  MOVF   x0F,W
0118E:  SUBLW  0D
01190:  BNZ   1196
01192:  MOVF   x10,F
01194:  BZ    11A0
01196:  MOVF   x0C,F
01198:  BNZ   11A0
0119A:  MOVF   x0B,W
0119C:  SUBLW  29
0119E:  BC    11B2
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
011A0:  MOVLW  B8
011A2:  ADDWF  x0B,W
011A4:  MOVWF  FE9
011A6:  MOVLW  05
011A8:  ADDWFC x0C,W
011AA:  MOVWF  FEA
011AC:  CLRF   FEF
....................          break;
011AE:  BRA    11D6
....................       }
011B0:  BRA    11C2
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
011B2:  MOVLW  B8
011B4:  ADDWF  x0B,W
011B6:  MOVWF  FE9
011B8:  MOVLW  05
011BA:  ADDWFC x0C,W
011BC:  MOVWF  FEA
011BE:  MOVFF  70F,FEF
....................          
....................       }
011C2:  MOVFF  70A,03
011C6:  MOVF   x09,W
011C8:  INCF   x09,F
011CA:  BTFSC  FD8.2
011CC:  INCF   x0A,F
011CE:  INCF   x0B,F
011D0:  BTFSC  FD8.2
011D2:  INCF   x0C,F
011D4:  BRA    1160
....................    }
....................    
....................    i++;
011D6:  INCF   x09,F
011D8:  BTFSC  FD8.2
011DA:  INCF   x0A,F
....................    j=0;
011DC:  CLRF   x0C
011DE:  CLRF   x0B
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
011E0:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
011E2:  MOVLW  5D
011E4:  ADDWF  x09,W
011E6:  MOVWF  x11
011E8:  MOVLW  00
011EA:  ADDWFC x0A,W
011EC:  MOVWF  x12
011EE:  MOVFF  FF2,713
011F2:  BCF    FF2.7
011F4:  MOVFF  712,FAA
011F8:  MOVFF  711,FA9
011FC:  BCF    FA6.6
011FE:  BCF    FA6.7
01200:  BSF    FA6.0
01202:  MOVF   FA8,W
01204:  BTFSC  x13.7
01206:  BSF    FF2.7
01208:  CLRF   x10
0120A:  MOVWF  x0F
....................       
....................       if((buff == 0x0D) || (j>41))
0120C:  MOVF   x0F,W
0120E:  SUBLW  0D
01210:  BNZ   1216
01212:  MOVF   x10,F
01214:  BZ    1220
01216:  MOVF   x0C,F
01218:  BNZ   1220
0121A:  MOVF   x0B,W
0121C:  SUBLW  29
0121E:  BC    1232
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
01220:  MOVLW  D8
01222:  ADDWF  x0B,W
01224:  MOVWF  FE9
01226:  MOVLW  05
01228:  ADDWFC x0C,W
0122A:  MOVWF  FEA
0122C:  CLRF   FEF
....................          break;
0122E:  BRA    1256
....................       }
01230:  BRA    1242
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
01232:  MOVLW  D8
01234:  ADDWF  x0B,W
01236:  MOVWF  FE9
01238:  MOVLW  05
0123A:  ADDWFC x0C,W
0123C:  MOVWF  FEA
0123E:  MOVFF  70F,FEF
....................          
....................       }
01242:  MOVFF  70A,03
01246:  MOVF   x09,W
01248:  INCF   x09,F
0124A:  BTFSC  FD8.2
0124C:  INCF   x0A,F
0124E:  INCF   x0B,F
01250:  BTFSC  FD8.2
01252:  INCF   x0C,F
01254:  BRA    11E0
....................    }
....................    
....................    i++;
01256:  INCF   x09,F
01258:  BTFSC  FD8.2
0125A:  INCF   x0A,F
....................    j=0;
0125C:  CLRF   x0C
0125E:  CLRF   x0B
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01260:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01262:  MOVLW  5D
01264:  ADDWF  x09,W
01266:  MOVWF  x11
01268:  MOVLW  00
0126A:  ADDWFC x0A,W
0126C:  MOVWF  x12
0126E:  MOVFF  FF2,713
01272:  BCF    FF2.7
01274:  MOVFF  712,FAA
01278:  MOVFF  711,FA9
0127C:  BCF    FA6.6
0127E:  BCF    FA6.7
01280:  BSF    FA6.0
01282:  MOVF   FA8,W
01284:  BTFSC  x13.7
01286:  BSF    FF2.7
01288:  CLRF   x10
0128A:  MOVWF  x0F
....................       
....................       if((buff == 0x0D) || (j>41))
0128C:  MOVF   x0F,W
0128E:  SUBLW  0D
01290:  BNZ   1296
01292:  MOVF   x10,F
01294:  BZ    12A0
01296:  MOVF   x0C,F
01298:  BNZ   12A0
0129A:  MOVF   x0B,W
0129C:  SUBLW  29
0129E:  BC    12B2
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
012A0:  MOVLW  F8
012A2:  ADDWF  x0B,W
012A4:  MOVWF  FE9
012A6:  MOVLW  05
012A8:  ADDWFC x0C,W
012AA:  MOVWF  FEA
012AC:  CLRF   FEF
....................          break;
012AE:  BRA    12D6
....................       }
012B0:  BRA    12C2
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
012B2:  MOVLW  F8
012B4:  ADDWF  x0B,W
012B6:  MOVWF  FE9
012B8:  MOVLW  05
012BA:  ADDWFC x0C,W
012BC:  MOVWF  FEA
012BE:  MOVFF  70F,FEF
....................          
....................       }
012C2:  MOVFF  70A,03
012C6:  MOVF   x09,W
012C8:  INCF   x09,F
012CA:  BTFSC  FD8.2
012CC:  INCF   x0A,F
012CE:  INCF   x0B,F
012D0:  BTFSC  FD8.2
012D2:  INCF   x0C,F
012D4:  BRA    1260
....................    }
....................    
....................    i++;
012D6:  INCF   x09,F
012D8:  BTFSC  FD8.2
012DA:  INCF   x0A,F
....................    j=0;
012DC:  CLRF   x0C
012DE:  CLRF   x0B
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
012E0:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
012E2:  MOVLW  5D
012E4:  ADDWF  x09,W
012E6:  MOVWF  x11
012E8:  MOVLW  00
012EA:  ADDWFC x0A,W
012EC:  MOVWF  x12
012EE:  MOVFF  FF2,713
012F2:  BCF    FF2.7
012F4:  MOVFF  712,FAA
012F8:  MOVFF  711,FA9
012FC:  BCF    FA6.6
012FE:  BCF    FA6.7
01300:  BSF    FA6.0
01302:  MOVF   FA8,W
01304:  BTFSC  x13.7
01306:  BSF    FF2.7
01308:  CLRF   x10
0130A:  MOVWF  x0F
....................       
....................       if((buff == 0x0D) || (j>41))
0130C:  MOVF   x0F,W
0130E:  SUBLW  0D
01310:  BNZ   1316
01312:  MOVF   x10,F
01314:  BZ    1320
01316:  MOVF   x0C,F
01318:  BNZ   1320
0131A:  MOVF   x0B,W
0131C:  SUBLW  29
0131E:  BC    1332
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
01320:  MOVLW  18
01322:  ADDWF  x0B,W
01324:  MOVWF  FE9
01326:  MOVLW  06
01328:  ADDWFC x0C,W
0132A:  MOVWF  FEA
0132C:  CLRF   FEF
....................          break;
0132E:  BRA    1356
....................       }
01330:  BRA    1342
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
01332:  MOVLW  18
01334:  ADDWF  x0B,W
01336:  MOVWF  FE9
01338:  MOVLW  06
0133A:  ADDWFC x0C,W
0133C:  MOVWF  FEA
0133E:  MOVFF  70F,FEF
....................          
....................       }
01342:  MOVFF  70A,03
01346:  MOVF   x09,W
01348:  INCF   x09,F
0134A:  BTFSC  FD8.2
0134C:  INCF   x0A,F
0134E:  INCF   x0B,F
01350:  BTFSC  FD8.2
01352:  INCF   x0C,F
01354:  BRA    12E0
....................    }
....................    
....................    i++;
01356:  INCF   x09,F
01358:  BTFSC  FD8.2
0135A:  INCF   x0A,F
....................    j=0;
0135C:  CLRF   x0C
0135E:  CLRF   x0B
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01360:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01362:  MOVLW  5D
01364:  ADDWF  x09,W
01366:  MOVWF  x11
01368:  MOVLW  00
0136A:  ADDWFC x0A,W
0136C:  MOVWF  x12
0136E:  MOVFF  FF2,713
01372:  BCF    FF2.7
01374:  MOVFF  712,FAA
01378:  MOVFF  711,FA9
0137C:  BCF    FA6.6
0137E:  BCF    FA6.7
01380:  BSF    FA6.0
01382:  MOVF   FA8,W
01384:  BTFSC  x13.7
01386:  BSF    FF2.7
01388:  CLRF   x10
0138A:  MOVWF  x0F
....................       
....................       if((buff == 0x0D) || (j>41))
0138C:  MOVF   x0F,W
0138E:  SUBLW  0D
01390:  BNZ   1396
01392:  MOVF   x10,F
01394:  BZ    13A0
01396:  MOVF   x0C,F
01398:  BNZ   13A0
0139A:  MOVF   x0B,W
0139C:  SUBLW  29
0139E:  BC    13B2
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
013A0:  MOVLW  38
013A2:  ADDWF  x0B,W
013A4:  MOVWF  FE9
013A6:  MOVLW  06
013A8:  ADDWFC x0C,W
013AA:  MOVWF  FEA
013AC:  CLRF   FEF
....................          break;
013AE:  BRA    13D6
....................       }
013B0:  BRA    13C2
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
013B2:  MOVLW  38
013B4:  ADDWF  x0B,W
013B6:  MOVWF  FE9
013B8:  MOVLW  06
013BA:  ADDWFC x0C,W
013BC:  MOVWF  FEA
013BE:  MOVFF  70F,FEF
....................          
....................       }
013C2:  MOVFF  70A,03
013C6:  MOVF   x09,W
013C8:  INCF   x09,F
013CA:  BTFSC  FD8.2
013CC:  INCF   x0A,F
013CE:  INCF   x0B,F
013D0:  BTFSC  FD8.2
013D2:  INCF   x0C,F
013D4:  BRA    1360
....................    }
....................    
....................    i++;
013D6:  INCF   x09,F
013D8:  BTFSC  FD8.2
013DA:  INCF   x0A,F
....................    j=0;
013DC:  CLRF   x0C
013DE:  CLRF   x0B
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
013E0:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
013E2:  MOVLW  5D
013E4:  ADDWF  x09,W
013E6:  MOVWF  x11
013E8:  MOVLW  00
013EA:  ADDWFC x0A,W
013EC:  MOVWF  x12
013EE:  MOVFF  FF2,713
013F2:  BCF    FF2.7
013F4:  MOVFF  712,FAA
013F8:  MOVFF  711,FA9
013FC:  BCF    FA6.6
013FE:  BCF    FA6.7
01400:  BSF    FA6.0
01402:  MOVF   FA8,W
01404:  BTFSC  x13.7
01406:  BSF    FF2.7
01408:  CLRF   x10
0140A:  MOVWF  x0F
....................       
....................       if((buff == 0x0D) || (j>41))
0140C:  MOVF   x0F,W
0140E:  SUBLW  0D
01410:  BNZ   1416
01412:  MOVF   x10,F
01414:  BZ    1420
01416:  MOVF   x0C,F
01418:  BNZ   1420
0141A:  MOVF   x0B,W
0141C:  SUBLW  29
0141E:  BC    1432
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01420:  MOVLW  58
01422:  ADDWF  x0B,W
01424:  MOVWF  FE9
01426:  MOVLW  06
01428:  ADDWFC x0C,W
0142A:  MOVWF  FEA
0142C:  CLRF   FEF
....................          break;
0142E:  BRA    1456
....................       }
01430:  BRA    1442
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
01432:  MOVLW  58
01434:  ADDWF  x0B,W
01436:  MOVWF  FE9
01438:  MOVLW  06
0143A:  ADDWFC x0C,W
0143C:  MOVWF  FEA
0143E:  MOVFF  70F,FEF
....................          
....................       }
01442:  MOVFF  70A,03
01446:  MOVF   x09,W
01448:  INCF   x09,F
0144A:  BTFSC  FD8.2
0144C:  INCF   x0A,F
0144E:  INCF   x0B,F
01450:  BTFSC  FD8.2
01452:  INCF   x0C,F
01454:  BRA    13E0
....................    }
....................    
....................    i++;
01456:  INCF   x09,F
01458:  BTFSC  FD8.2
0145A:  INCF   x0A,F
....................    j=0;
0145C:  CLRF   x0C
0145E:  CLRF   x0B
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01460:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01462:  MOVLW  5D
01464:  ADDWF  x09,W
01466:  MOVWF  x11
01468:  MOVLW  00
0146A:  ADDWFC x0A,W
0146C:  MOVWF  x12
0146E:  MOVFF  FF2,713
01472:  BCF    FF2.7
01474:  MOVFF  712,FAA
01478:  MOVFF  711,FA9
0147C:  BCF    FA6.6
0147E:  BCF    FA6.7
01480:  BSF    FA6.0
01482:  MOVF   FA8,W
01484:  BTFSC  x13.7
01486:  BSF    FF2.7
01488:  CLRF   x10
0148A:  MOVWF  x0F
....................       
....................       if((buff == 0x0D) || (j>41))
0148C:  MOVF   x0F,W
0148E:  SUBLW  0D
01490:  BNZ   1496
01492:  MOVF   x10,F
01494:  BZ    14A0
01496:  MOVF   x0C,F
01498:  BNZ   14A0
0149A:  MOVF   x0B,W
0149C:  SUBLW  29
0149E:  BC    14B2
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
014A0:  MOVLW  78
014A2:  ADDWF  x0B,W
014A4:  MOVWF  FE9
014A6:  MOVLW  06
014A8:  ADDWFC x0C,W
014AA:  MOVWF  FEA
014AC:  CLRF   FEF
....................          break;
014AE:  BRA    14D6
....................       }
014B0:  BRA    14C2
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
014B2:  MOVLW  78
014B4:  ADDWF  x0B,W
014B6:  MOVWF  FE9
014B8:  MOVLW  06
014BA:  ADDWFC x0C,W
014BC:  MOVWF  FEA
014BE:  MOVFF  70F,FEF
....................          
....................       }
014C2:  MOVFF  70A,03
014C6:  MOVF   x09,W
014C8:  INCF   x09,F
014CA:  BTFSC  FD8.2
014CC:  INCF   x0A,F
014CE:  INCF   x0B,F
014D0:  BTFSC  FD8.2
014D2:  INCF   x0C,F
014D4:  BRA    1460
....................    } 
014D6:  MOVLB  0
014D8:  RETURN 0
....................   
....................    
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
....................    SBUF = getc();
*
0058A:  BTFSS  F9E.5
0058C:  BRA    058A
0058E:  MOVFF  FAE,2E
....................    checkCommand();
00592:  BRA    02DA
.................... }
.................... 
00594:  BCF    F9E.5
00596:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
0059A:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
0059C:  MOVLB  5
0059E:  MOVF   x85,F
005A0:  BZ    05B8
....................    {
....................       T_timeout--;
005A2:  DECF   x85,F
....................       if(T_timeout == 0)
005A4:  MOVF   x85,F
005A6:  BNZ   05B8
....................       {
....................           RxD_DataLen = 0x00;
005A8:  MOVLB  0
005AA:  CLRF   x7A
....................           sequence = end_sq;
005AC:  MOVFF  6F,78
....................           T_timeout = 0x00; 
005B0:  MOVLB  5
005B2:  CLRF   x85
....................           output_bit(P485ctrl,0);
005B4:  BCF    F8A.3
005B6:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
005B8:  MOVF   1C,F
005BA:  BZ    05D4
....................    {
....................       TimeBase1s--;
005BC:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
005BE:  MOVF   1C,F
005C0:  BNZ   05D4
....................       {
....................          if(AutoAckDelayTime != 0x00)
005C2:  MOVF   1D,F
005C4:  BZ    05CE
....................          {
....................             AutoAckDelayTime--;
005C6:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
005C8:  MOVF   1D,F
005CA:  BNZ   05CE
....................             {
....................                AutoAckFlag = 1 ;
005CC:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005CE:  BSF    30.4
....................          TimeBase1s = 100;
005D0:  MOVLW  64
005D2:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
005D4:  MOVF   19,W
005D6:  SUBLW  32
005D8:  BNZ   0604
....................    {
....................       StatusTime = 0;
005DA:  CLRF   19
....................       if(HearthbeatInd == 0)
005DC:  BTFSC  1A.0
005DE:  BRA    05E8
....................       {
....................          HearthbeatInd = 1;
005E0:  BSF    1A.0
....................          output_bit(Pled,1);
005E2:  BSF    F8A.5
005E4:  BCF    F93.5
....................       }
005E6:  BRA    05EE
....................       else
....................       {
....................          HearthbeatInd = 0;
005E8:  BCF    1A.0
....................          output_bit(Pled,0);
005EA:  BCF    F8A.5
005EC:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
005EE:  BTFSS  1A.6
005F0:  BRA    0602
....................       {
....................              if(T_test > 0x00) T_test --;
005F2:  MOVF   2F,F
005F4:  BZ    05F8
005F6:  DECF   2F,F
....................              if(T_test == 0x00)
005F8:  MOVF   2F,F
005FA:  BNZ   0600
....................              {
....................                Test_fault = 1;
005FC:  BSF    1A.5
....................                functointest_f = 1;
005FE:  BSF    30.1
....................              }
....................        }
00600:  BRA    0604
....................        else
....................        {
....................           //Test = 0;
....................           T_test = 0x00;
00602:  CLRF   2F
....................        }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
00604:  MOVF   1B,F
00606:  BZ    062A
....................    {
....................       FlashingRateTime--;
00608:  DECF   1B,F
....................       if(FlashingRateTime == 0)
0060A:  MOVF   1B,F
0060C:  BNZ   061E
....................       {
....................          outmcp23 = 0xff;
0060E:  SETF   x88
....................          
....................          //if(SyncStatus == 0)
....................          //{
....................             if(FlashingFlag)
00610:  BTFSS  1A.1
00612:  BRA    0618
....................             {
....................                FlashingFlag = 0;
00614:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
00616:  BRA    061A
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
00618:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          //}
....................          FlashingRateTime = FlashingRate;      //reload value
0061A:  MOVFF  6C,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
0061E:  MOVF   31,F
00620:  BZ    062A
....................       {
....................          Synctimer--;
00622:  DECF   31,F
....................          if(Synctimer == 0x00)
00624:  MOVF   31,F
00626:  BNZ   062A
....................          {
....................             SyncStatus = 0;
00628:  BCF    30.2
....................          }
....................       }
.................... 
....................    } 
0062A:  BCF    F9E.1
0062C:  MOVLB  0
0062E:  GOTO   006C
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
049BC:  MOVLB  6
049BE:  BTFSS  x9E.0
049C0:  BRA    4AD4
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
049C2:  MOVLW  00
049C4:  BTFSC  x98.0
049C6:  MOVLW  01
049C8:  MOVLB  7
049CA:  MOVWF  x10
049CC:  MOVLW  00
049CE:  MOVLB  6
049D0:  BTFSC  x9A.0
049D2:  MOVLW  01
049D4:  MOVLB  7
049D6:  XORWF  x10,W
049D8:  SUBLW  01
049DA:  BNZ   49E2
049DC:  MOVLB  6
049DE:  BTFSC  x9B.0
049E0:  BRA    49E8
049E2:  MOVLB  6
049E4:  BTFSS  xA0.0
049E6:  BRA    4ACC
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
049E8:  BTFSC  x9F.0
049EA:  BRA    4ACA
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
049EC:  BTFSC  xA0.0
049EE:  BRA    4A08
049F0:  MOVLB  0
049F2:  MOVF   x6A,W
049F4:  SUBLW  0F
049F6:  BTFSC  FD8.2
049F8:  BRA    49FE
049FA:  MOVLB  6
049FC:  BRA    4A08
....................             {
....................                TimeBase1s = 100 ;            //reload again
049FE:  MOVLW  64
04A00:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04A02:  MOVFF  6B,1D
04A06:  MOVLB  6
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
04A08:  BSF    xA0.0
....................             if(FlashingFlag == 0)
04A0A:  BTFSC  1A.1
04A0C:  BRA    4A12
....................             {
....................                Output.B1 = 0;           //Flash output1
04A0E:  BCF    x99.0
....................             }
04A10:  BRA    4A14
....................             else
....................             {
....................                Output.B1 = 1;
04A12:  BSF    x99.0
....................             }
....................             if (~AutoTestFlag)
04A14:  BTFSC  1A.4
04A16:  BRA    4A34
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
04A18:  BTFSC  x9D.0
04A1A:  BRA    4A26
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04A1C:  BCF    F89.4
04A1E:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04A20:  BCF    F89.3
04A22:  BCF    F92.3
....................                }
04A24:  BRA    4A34
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,0);     //Buzzer
04A26:  BTFSS  x9C.0
04A28:  BRA    4A30
04A2A:  BCF    F89.4
04A2C:  BCF    F92.4
04A2E:  BRA    4A34
....................                   else output_bit(Pbell,0);                          //Bell
04A30:  BCF    F89.3
04A32:  BCF    F92.3
....................                }    
....................             }  
....................             // SMS Sending   
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04A34:  BTFSC  xA6.0
04A36:  BRA    4ACA
04A38:  BTFSC  30.1
04A3A:  BRA    4ACA
04A3C:  BTFSC  x9F.0
04A3E:  BRA    4ACA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04A40:  MOVLW  32
04A42:  MOVWF  FF6
04A44:  MOVLW  06
04A46:  MOVWF  FF7
04A48:  MOVLB  0
04A4A:  CALL   1F98
....................                putc('\n',CH2);
04A4E:  MOVLW  0A
04A50:  MOVLB  7
04A52:  MOVWF  x11
04A54:  MOVLB  0
04A56:  CALL   1F52
....................                delay_ms(10);
04A5A:  MOVLW  0A
04A5C:  MOVLB  7
04A5E:  MOVWF  x10
04A60:  MOVLB  0
04A62:  CALL   07CC
....................             
....................                SendSMS.B1 =1;
04A66:  MOVLB  6
04A68:  BSF    xA6.0
....................                fprintf(CH2,"AT+CMGS=\"");
04A6A:  MOVLW  3C
04A6C:  MOVWF  FF6
04A6E:  MOVLW  06
04A70:  MOVWF  FF7
04A72:  MOVLB  0
04A74:  CALL   1F98
....................                fprintf(CH2,sms_phonenumber);
04A78:  MOVLW  05
04A7A:  MOVWF  FEA
04A7C:  MOVLW  89
04A7E:  MOVWF  FE9
04A80:  RCALL  448E
....................                
....................                fprintf(CH2,"\"");
04A82:  MOVLW  22
04A84:  MOVLB  7
04A86:  MOVWF  x11
04A88:  MOVLB  0
04A8A:  CALL   1F52
....................                putc('\n',CH2);
04A8E:  MOVLW  0A
04A90:  MOVLB  7
04A92:  MOVWF  x11
04A94:  MOVLB  0
04A96:  CALL   1F52
....................                delay_ms(50);
04A9A:  MOVLW  32
04A9C:  MOVLB  7
04A9E:  MOVWF  x10
04AA0:  MOVLB  0
04AA2:  CALL   07CC
....................               
....................               fprintf(CH2,SMS_Massage1);
04AA6:  MOVLW  05
04AA8:  MOVWF  FEA
04AAA:  MOVLW  98
04AAC:  MOVWF  FE9
04AAE:  RCALL  448E
....................               putc('\n',CH2);
04AB0:  MOVLW  0A
04AB2:  MOVLB  7
04AB4:  MOVWF  x11
04AB6:  MOVLB  0
04AB8:  CALL   1F52
....................               putc(26,CH2);
04ABC:  MOVLW  1A
04ABE:  MOVLB  7
04AC0:  MOVWF  x11
04AC2:  MOVLB  0
04AC4:  CALL   1F52
04AC8:  MOVLB  6
....................             }
....................             
....................         }
....................       }
04ACA:  BRA    4AD2
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
04ACC:  BTFSS  x9B.0
04ACE:  BRA    4AD2
04AD0:  BCF    x9F.0
....................    }
04AD2:  BRA    4B94
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
04AD4:  MOVLW  00
04AD6:  BTFSC  x98.0
04AD8:  MOVLW  01
04ADA:  MOVLB  7
04ADC:  MOVWF  x10
04ADE:  MOVLW  00
04AE0:  MOVLB  6
04AE2:  BTFSC  x9A.0
04AE4:  MOVLW  01
04AE6:  MOVLB  7
04AE8:  XORWF  x10,W
04AEA:  SUBLW  01
04AEC:  BNZ   4B8C
....................       {
....................          Output.B1 = 0;
04AEE:  MOVLB  6
04AF0:  BCF    x99.0
....................          
....................          
....................          // SMS Sending   
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04AF2:  BTFSC  xA6.0
04AF4:  BRA    4B88
04AF6:  BTFSC  30.1
04AF8:  BRA    4B88
04AFA:  BTFSC  x9F.0
04AFC:  BRA    4B88
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04AFE:  MOVLW  46
04B00:  MOVWF  FF6
04B02:  MOVLW  06
04B04:  MOVWF  FF7
04B06:  MOVLB  0
04B08:  CALL   1F98
....................             putc('\n',CH2);
04B0C:  MOVLW  0A
04B0E:  MOVLB  7
04B10:  MOVWF  x11
04B12:  MOVLB  0
04B14:  CALL   1F52
....................             delay_ms(10);
04B18:  MOVLW  0A
04B1A:  MOVLB  7
04B1C:  MOVWF  x10
04B1E:  MOVLB  0
04B20:  CALL   07CC
....................             
....................             SendSMS.B1 =1;
04B24:  MOVLB  6
04B26:  BSF    xA6.0
....................             fprintf(CH2,"AT+CMGS=\"");
04B28:  MOVLW  50
04B2A:  MOVWF  FF6
04B2C:  MOVLW  06
04B2E:  MOVWF  FF7
04B30:  MOVLB  0
04B32:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
04B36:  MOVLW  05
04B38:  MOVWF  FEA
04B3A:  MOVLW  89
04B3C:  MOVWF  FE9
04B3E:  RCALL  448E
....................             
....................             fprintf(CH2,"\"");
04B40:  MOVLW  22
04B42:  MOVLB  7
04B44:  MOVWF  x11
04B46:  MOVLB  0
04B48:  CALL   1F52
....................             putc('\n',CH2);
04B4C:  MOVLW  0A
04B4E:  MOVLB  7
04B50:  MOVWF  x11
04B52:  MOVLB  0
04B54:  CALL   1F52
....................             delay_ms(50);
04B58:  MOVLW  32
04B5A:  MOVLB  7
04B5C:  MOVWF  x10
04B5E:  MOVLB  0
04B60:  CALL   07CC
....................            
....................            fprintf(CH2,SMS_Massage1);
04B64:  MOVLW  05
04B66:  MOVWF  FEA
04B68:  MOVLW  98
04B6A:  MOVWF  FE9
04B6C:  RCALL  448E
....................            putc('\n',CH2);
04B6E:  MOVLW  0A
04B70:  MOVLB  7
04B72:  MOVWF  x11
04B74:  MOVLB  0
04B76:  CALL   1F52
....................           putc(26,CH2);
04B7A:  MOVLW  1A
04B7C:  MOVLB  7
04B7E:  MOVWF  x11
04B80:  MOVLB  0
04B82:  CALL   1F52
04B86:  MOVLB  6
....................          }
....................          
....................       }
04B88:  BRA    4B94
04B8A:  MOVLB  7
....................       else
....................       {
....................          Output.B1 = 1;
04B8C:  MOVLB  6
04B8E:  BSF    x99.0
....................          
....................          SendSMS.B1 =0;
04B90:  BCF    xA6.0
....................          functointest_f =0;
04B92:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
04B94:  BTFSS  x9E.1
04B96:  BRA    4CAA
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
04B98:  MOVLW  00
04B9A:  BTFSC  x98.1
04B9C:  MOVLW  01
04B9E:  MOVLB  7
04BA0:  MOVWF  x10
04BA2:  MOVLW  00
04BA4:  MOVLB  6
04BA6:  BTFSC  x9A.1
04BA8:  MOVLW  01
04BAA:  MOVLB  7
04BAC:  XORWF  x10,W
04BAE:  SUBLW  01
04BB0:  BNZ   4BB8
04BB2:  MOVLB  6
04BB4:  BTFSC  x9B.1
04BB6:  BRA    4BBE
04BB8:  MOVLB  6
04BBA:  BTFSS  xA0.1
04BBC:  BRA    4CA2
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
04BBE:  BTFSC  x9F.1
04BC0:  BRA    4C0A
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04BC2:  BTFSC  xA0.1
04BC4:  BRA    4BDE
04BC6:  MOVLB  0
04BC8:  MOVF   x6A,W
04BCA:  SUBLW  0F
04BCC:  BTFSC  FD8.2
04BCE:  BRA    4BD4
04BD0:  MOVLB  6
04BD2:  BRA    4BDE
....................             {
....................                TimeBase1s = 100 ;            //reload again
04BD4:  MOVLW  64
04BD6:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04BD8:  MOVFF  6B,1D
04BDC:  MOVLB  6
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
04BDE:  BSF    xA0.1
....................             if(FlashingFlag == 0)
04BE0:  BTFSC  1A.1
04BE2:  BRA    4BE8
....................             {
....................                Output.B2 = 0;           //Flash output1
04BE4:  BCF    x99.1
....................             }
04BE6:  BRA    4BEA
....................             else
....................             {
....................                Output.B2 = 1;
04BE8:  BSF    x99.1
....................             }
.................... 
....................             if (~AutoTestFlag)
04BEA:  BTFSC  1A.4
04BEC:  BRA    4C0A
....................             {
....................                
....................                if(OutputBoth.B2 == 0)                  //Both output
04BEE:  BTFSC  x9D.1
04BF0:  BRA    4BFC
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04BF2:  BCF    F89.4
04BF4:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04BF6:  BCF    F89.3
04BF8:  BCF    F92.3
....................                }
04BFA:  BRA    4C0A
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,0);     //Buzzer
04BFC:  BTFSS  x9C.1
04BFE:  BRA    4C06
04C00:  BCF    F89.4
04C02:  BCF    F92.4
04C04:  BRA    4C0A
....................                   else output_bit(Pbell,0);                          //Bell
04C06:  BCF    F89.3
04C08:  BCF    F92.3
....................                }
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04C0A:  BTFSC  xA6.1
04C0C:  BRA    4CA0
04C0E:  BTFSC  30.1
04C10:  BRA    4CA0
04C12:  BTFSC  x9F.1
04C14:  BRA    4CA0
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04C16:  MOVLW  5A
04C18:  MOVWF  FF6
04C1A:  MOVLW  06
04C1C:  MOVWF  FF7
04C1E:  MOVLB  0
04C20:  CALL   1F98
....................                putc('\n',CH2);
04C24:  MOVLW  0A
04C26:  MOVLB  7
04C28:  MOVWF  x11
04C2A:  MOVLB  0
04C2C:  CALL   1F52
....................                delay_ms(10);
04C30:  MOVLW  0A
04C32:  MOVLB  7
04C34:  MOVWF  x10
04C36:  MOVLB  0
04C38:  CALL   07CC
....................                 
....................                SendSMS.B2 =1;
04C3C:  MOVLB  6
04C3E:  BSF    xA6.1
....................                fprintf(CH2,"AT+CMGS=\"");
04C40:  MOVLW  64
04C42:  MOVWF  FF6
04C44:  MOVLW  06
04C46:  MOVWF  FF7
04C48:  MOVLB  0
04C4A:  CALL   1F98
....................                fprintf(CH2,sms_phonenumber);
04C4E:  MOVLW  05
04C50:  MOVWF  FEA
04C52:  MOVLW  89
04C54:  MOVWF  FE9
04C56:  RCALL  448E
....................                
....................                fprintf(CH2,"\"");
04C58:  MOVLW  22
04C5A:  MOVLB  7
04C5C:  MOVWF  x11
04C5E:  MOVLB  0
04C60:  CALL   1F52
....................                putc('\n',CH2);
04C64:  MOVLW  0A
04C66:  MOVLB  7
04C68:  MOVWF  x11
04C6A:  MOVLB  0
04C6C:  CALL   1F52
....................                delay_ms(50);
04C70:  MOVLW  32
04C72:  MOVLB  7
04C74:  MOVWF  x10
04C76:  MOVLB  0
04C78:  CALL   07CC
....................                
....................               fprintf(CH2,SMS_Massage2);
04C7C:  MOVLW  05
04C7E:  MOVWF  FEA
04C80:  MOVLW  B8
04C82:  MOVWF  FE9
04C84:  RCALL  448E
....................               putc('\n',CH2);
04C86:  MOVLW  0A
04C88:  MOVLB  7
04C8A:  MOVWF  x11
04C8C:  MOVLB  0
04C8E:  CALL   1F52
....................              putc(26,CH2);
04C92:  MOVLW  1A
04C94:  MOVLB  7
04C96:  MOVWF  x11
04C98:  MOVLB  0
04C9A:  CALL   1F52
04C9E:  MOVLB  6
....................             }  
.................... 
....................       }
04CA0:  BRA    4CA8
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
04CA2:  BTFSS  x9B.1
04CA4:  BRA    4CA8
04CA6:  BCF    x9F.1
....................    }
04CA8:  BRA    4D6E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
04CAA:  MOVLW  00
04CAC:  BTFSC  x98.1
04CAE:  MOVLW  01
04CB0:  MOVLB  7
04CB2:  MOVWF  x10
04CB4:  MOVLW  00
04CB6:  MOVLB  6
04CB8:  BTFSC  x9A.1
04CBA:  MOVLW  01
04CBC:  MOVLB  7
04CBE:  XORWF  x10,W
04CC0:  SUBLW  01
04CC2:  BNZ   4D66
....................       {
....................          Output.B2 = 0;
04CC4:  MOVLB  6
04CC6:  BCF    x99.1
....................           // SMS Sending   
....................          if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04CC8:  BTFSC  xA6.1
04CCA:  BRA    4D62
04CCC:  BTFSC  30.1
04CCE:  BRA    4D62
04CD0:  BTFSC  x9F.1
04CD2:  BRA    4D62
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04CD4:  MOVLW  6E
04CD6:  MOVWF  FF6
04CD8:  MOVLW  06
04CDA:  MOVWF  FF7
04CDC:  MOVLB  0
04CDE:  CALL   1F98
....................             putc('\n',CH2);
04CE2:  MOVLW  0A
04CE4:  MOVLB  7
04CE6:  MOVWF  x11
04CE8:  MOVLB  0
04CEA:  CALL   1F52
....................             delay_ms(10);
04CEE:  MOVLW  0A
04CF0:  MOVLB  7
04CF2:  MOVWF  x10
04CF4:  MOVLB  0
04CF6:  CALL   07CC
....................             
....................             SendSMS.B2 =1;
04CFA:  MOVLB  6
04CFC:  BSF    xA6.1
....................             fprintf(CH2,"AT+CMGS=\"");
04CFE:  MOVLW  78
04D00:  MOVWF  FF6
04D02:  MOVLW  06
04D04:  MOVWF  FF7
04D06:  MOVLB  0
04D08:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
04D0C:  MOVLW  05
04D0E:  MOVWF  FEA
04D10:  MOVLW  89
04D12:  MOVWF  FE9
04D14:  CALL   448E
....................             
....................             printf("\"");
04D18:  MOVLW  22
04D1A:  MOVLB  7
04D1C:  MOVWF  x11
04D1E:  MOVLB  0
04D20:  CALL   1F52
....................             putc('\n',CH2);
04D24:  MOVLW  0A
04D26:  MOVLB  7
04D28:  MOVWF  x11
04D2A:  MOVLB  0
04D2C:  CALL   1F52
....................             delay_ms(50);
04D30:  MOVLW  32
04D32:  MOVLB  7
04D34:  MOVWF  x10
04D36:  MOVLB  0
04D38:  CALL   07CC
....................            
....................            fprintf(CH2,SMS_Massage1);
04D3C:  MOVLW  05
04D3E:  MOVWF  FEA
04D40:  MOVLW  98
04D42:  MOVWF  FE9
04D44:  CALL   448E
....................            putc('\n',CH2);
04D48:  MOVLW  0A
04D4A:  MOVLB  7
04D4C:  MOVWF  x11
04D4E:  MOVLB  0
04D50:  CALL   1F52
....................            putc(26,CH2);
04D54:  MOVLW  1A
04D56:  MOVLB  7
04D58:  MOVWF  x11
04D5A:  MOVLB  0
04D5C:  CALL   1F52
04D60:  MOVLB  6
....................          }  
....................       }
04D62:  BRA    4D6E
04D64:  MOVLB  7
....................       else
....................       {
....................          Output.B2 = 1;
04D66:  MOVLB  6
04D68:  BSF    x99.1
....................          SendSMS.B2 =0;
04D6A:  BCF    xA6.1
....................          functointest_f =0;
04D6C:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
04D6E:  BTFSS  x9E.2
04D70:  BRA    4E88
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
04D72:  MOVLW  00
04D74:  BTFSC  x98.2
04D76:  MOVLW  01
04D78:  MOVLB  7
04D7A:  MOVWF  x10
04D7C:  MOVLW  00
04D7E:  MOVLB  6
04D80:  BTFSC  x9A.2
04D82:  MOVLW  01
04D84:  MOVLB  7
04D86:  XORWF  x10,W
04D88:  SUBLW  01
04D8A:  BNZ   4D92
04D8C:  MOVLB  6
04D8E:  BTFSC  x9B.2
04D90:  BRA    4D98
04D92:  MOVLB  6
04D94:  BTFSS  xA0.2
04D96:  BRA    4E80
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
04D98:  BTFSC  x9F.2
04D9A:  BRA    4DE4
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04D9C:  BTFSC  xA0.2
04D9E:  BRA    4DB8
04DA0:  MOVLB  0
04DA2:  MOVF   x6A,W
04DA4:  SUBLW  0F
04DA6:  BTFSC  FD8.2
04DA8:  BRA    4DAE
04DAA:  MOVLB  6
04DAC:  BRA    4DB8
....................             {
....................                TimeBase1s = 100 ;            //reload again
04DAE:  MOVLW  64
04DB0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04DB2:  MOVFF  6B,1D
04DB6:  MOVLB  6
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
04DB8:  BSF    xA0.2
....................             if(FlashingFlag == 0)
04DBA:  BTFSC  1A.1
04DBC:  BRA    4DC2
....................             {
....................                Output.B3 = 0;           //Flash output1
04DBE:  BCF    x99.2
....................             }
04DC0:  BRA    4DC4
....................             else
....................             {
....................                Output.B3 = 1;
04DC2:  BSF    x99.2
....................             }
.................... 
....................             if (~AutoTestFlag)
04DC4:  BTFSC  1A.4
04DC6:  BRA    4DE4
....................             {
....................                
....................                if(OutputBoth.B3 == 0)                  //Both output
04DC8:  BTFSC  x9D.2
04DCA:  BRA    4DD6
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04DCC:  BCF    F89.4
04DCE:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04DD0:  BCF    F89.3
04DD2:  BCF    F92.3
....................                }
04DD4:  BRA    4DE4
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,0);     //Buzzer
04DD6:  BTFSS  x9C.2
04DD8:  BRA    4DE0
04DDA:  BCF    F89.4
04DDC:  BCF    F92.4
04DDE:  BRA    4DE4
....................                   else output_bit(Pbell,0);                          //Bell
04DE0:  BCF    F89.3
04DE2:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
04DE4:  BTFSC  xA6.2
04DE6:  BRA    4E7E
04DE8:  BTFSC  30.1
04DEA:  BRA    4E7E
04DEC:  BTFSC  x9F.2
04DEE:  BRA    4E7E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04DF0:  MOVLW  82
04DF2:  MOVWF  FF6
04DF4:  MOVLW  06
04DF6:  MOVWF  FF7
04DF8:  MOVLB  0
04DFA:  CALL   1F98
....................                putc('\n',CH2);
04DFE:  MOVLW  0A
04E00:  MOVLB  7
04E02:  MOVWF  x11
04E04:  MOVLB  0
04E06:  CALL   1F52
....................                delay_ms(10);
04E0A:  MOVLW  0A
04E0C:  MOVLB  7
04E0E:  MOVWF  x10
04E10:  MOVLB  0
04E12:  CALL   07CC
....................                
....................                SendSMS.B3 =1;
04E16:  MOVLB  6
04E18:  BSF    xA6.2
....................                fprintf(CH2,"AT+CMGS=\"");
04E1A:  MOVLW  8C
04E1C:  MOVWF  FF6
04E1E:  MOVLW  06
04E20:  MOVWF  FF7
04E22:  MOVLB  0
04E24:  CALL   1F98
....................                fprintf(CH2,sms_phonenumber);
04E28:  MOVLW  05
04E2A:  MOVWF  FEA
04E2C:  MOVLW  89
04E2E:  MOVWF  FE9
04E30:  CALL   448E
....................                
....................                fprintf(CH2,"\"");
04E34:  MOVLW  22
04E36:  MOVLB  7
04E38:  MOVWF  x11
04E3A:  MOVLB  0
04E3C:  CALL   1F52
....................                putc('\n',CH2);
04E40:  MOVLW  0A
04E42:  MOVLB  7
04E44:  MOVWF  x11
04E46:  MOVLB  0
04E48:  CALL   1F52
....................                delay_ms(50);
04E4C:  MOVLW  32
04E4E:  MOVLB  7
04E50:  MOVWF  x10
04E52:  MOVLB  0
04E54:  CALL   07CC
....................               
....................               fprintf(CH2,SMS_Massage3);
04E58:  MOVLW  05
04E5A:  MOVWF  FEA
04E5C:  MOVLW  D8
04E5E:  MOVWF  FE9
04E60:  CALL   448E
....................               putc('\n',CH2);
04E64:  MOVLW  0A
04E66:  MOVLB  7
04E68:  MOVWF  x11
04E6A:  MOVLB  0
04E6C:  CALL   1F52
....................              putc(26,CH2);
04E70:  MOVLW  1A
04E72:  MOVLB  7
04E74:  MOVWF  x11
04E76:  MOVLB  0
04E78:  CALL   1F52
04E7C:  MOVLB  6
....................             }
.................... 
....................       }
04E7E:  BRA    4E86
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
04E80:  BTFSS  x9B.2
04E82:  BRA    4E86
04E84:  BCF    x9F.2
....................    }
04E86:  BRA    4F4C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
04E88:  MOVLW  00
04E8A:  BTFSC  x98.2
04E8C:  MOVLW  01
04E8E:  MOVLB  7
04E90:  MOVWF  x10
04E92:  MOVLW  00
04E94:  MOVLB  6
04E96:  BTFSC  x9A.2
04E98:  MOVLW  01
04E9A:  MOVLB  7
04E9C:  XORWF  x10,W
04E9E:  SUBLW  01
04EA0:  BNZ   4F44
....................       {
....................          Output.B3 = 0;
04EA2:  MOVLB  6
04EA4:  BCF    x99.2
....................          // SMS Sending   
....................          if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
04EA6:  BTFSC  xA6.2
04EA8:  BRA    4F40
04EAA:  BTFSC  30.1
04EAC:  BRA    4F40
04EAE:  BTFSC  x9F.2
04EB0:  BRA    4F40
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04EB2:  MOVLW  96
04EB4:  MOVWF  FF6
04EB6:  MOVLW  06
04EB8:  MOVWF  FF7
04EBA:  MOVLB  0
04EBC:  CALL   1F98
....................             putc('\n',CH2);
04EC0:  MOVLW  0A
04EC2:  MOVLB  7
04EC4:  MOVWF  x11
04EC6:  MOVLB  0
04EC8:  CALL   1F52
....................             delay_ms(10);
04ECC:  MOVLW  0A
04ECE:  MOVLB  7
04ED0:  MOVWF  x10
04ED2:  MOVLB  0
04ED4:  CALL   07CC
....................             
....................             SendSMS.B3 =1;
04ED8:  MOVLB  6
04EDA:  BSF    xA6.2
....................             fprintf(CH2,"AT+CMGS=\"");
04EDC:  MOVLW  A0
04EDE:  MOVWF  FF6
04EE0:  MOVLW  06
04EE2:  MOVWF  FF7
04EE4:  MOVLB  0
04EE6:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
04EEA:  MOVLW  05
04EEC:  MOVWF  FEA
04EEE:  MOVLW  89
04EF0:  MOVWF  FE9
04EF2:  CALL   448E
....................             
....................             fprintf(CH2,"\"");
04EF6:  MOVLW  22
04EF8:  MOVLB  7
04EFA:  MOVWF  x11
04EFC:  MOVLB  0
04EFE:  CALL   1F52
....................             putc('\n',CH2);
04F02:  MOVLW  0A
04F04:  MOVLB  7
04F06:  MOVWF  x11
04F08:  MOVLB  0
04F0A:  CALL   1F52
....................             delay_ms(50);
04F0E:  MOVLW  32
04F10:  MOVLB  7
04F12:  MOVWF  x10
04F14:  MOVLB  0
04F16:  CALL   07CC
....................            
....................            fprintf(CH2,SMS_Massage3);
04F1A:  MOVLW  05
04F1C:  MOVWF  FEA
04F1E:  MOVLW  D8
04F20:  MOVWF  FE9
04F22:  CALL   448E
....................            putc('\n',CH2);
04F26:  MOVLW  0A
04F28:  MOVLB  7
04F2A:  MOVWF  x11
04F2C:  MOVLB  0
04F2E:  CALL   1F52
....................           putc(26,CH2);
04F32:  MOVLW  1A
04F34:  MOVLB  7
04F36:  MOVWF  x11
04F38:  MOVLB  0
04F3A:  CALL   1F52
04F3E:  MOVLB  6
....................          }
....................       }
04F40:  BRA    4F4C
04F42:  MOVLB  7
....................       else
....................       {
....................          Output.B3 = 1;
04F44:  MOVLB  6
04F46:  BSF    x99.2
....................          SendSMS.B3 =0;
04F48:  BCF    xA6.2
....................        functointest_f =0;
04F4A:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
04F4C:  BTFSS  x9E.3
04F4E:  BRA    5066
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
04F50:  MOVLW  00
04F52:  BTFSC  x98.3
04F54:  MOVLW  01
04F56:  MOVLB  7
04F58:  MOVWF  x10
04F5A:  MOVLW  00
04F5C:  MOVLB  6
04F5E:  BTFSC  x9A.3
04F60:  MOVLW  01
04F62:  MOVLB  7
04F64:  XORWF  x10,W
04F66:  SUBLW  01
04F68:  BNZ   4F70
04F6A:  MOVLB  6
04F6C:  BTFSC  x9B.3
04F6E:  BRA    4F76
04F70:  MOVLB  6
04F72:  BTFSS  xA0.3
04F74:  BRA    505E
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
04F76:  BTFSC  x9F.3
04F78:  BRA    4FC2
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04F7A:  BTFSC  xA0.3
04F7C:  BRA    4F96
04F7E:  MOVLB  0
04F80:  MOVF   x6A,W
04F82:  SUBLW  0F
04F84:  BTFSC  FD8.2
04F86:  BRA    4F8C
04F88:  MOVLB  6
04F8A:  BRA    4F96
....................             {
....................                TimeBase1s = 100 ;            //reload again
04F8C:  MOVLW  64
04F8E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04F90:  MOVFF  6B,1D
04F94:  MOVLB  6
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
04F96:  BSF    xA0.3
....................             if(FlashingFlag == 0)
04F98:  BTFSC  1A.1
04F9A:  BRA    4FA0
....................             {
....................                Output.B4 = 0;           //Flash output1
04F9C:  BCF    x99.3
....................             }
04F9E:  BRA    4FA2
....................             else
....................             {
....................                Output.B4 = 1;
04FA0:  BSF    x99.3
....................             }
.................... 
....................             if (~AutoTestFlag)
04FA2:  BTFSC  1A.4
04FA4:  BRA    4FC2
....................             {
....................                
....................                if(OutputBoth.B4 == 0)                  //Both output
04FA6:  BTFSC  x9D.3
04FA8:  BRA    4FB4
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04FAA:  BCF    F89.4
04FAC:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04FAE:  BCF    F89.3
04FB0:  BCF    F92.3
....................                }
04FB2:  BRA    4FC2
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,0);     //Buzzer
04FB4:  BTFSS  x9C.3
04FB6:  BRA    4FBE
04FB8:  BCF    F89.4
04FBA:  BCF    F92.4
04FBC:  BRA    4FC2
....................                   else output_bit(Pbell,0);                          //Bell
04FBE:  BCF    F89.3
04FC0:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
04FC2:  BTFSC  xA6.3
04FC4:  BRA    505C
04FC6:  BTFSC  30.1
04FC8:  BRA    505C
04FCA:  BTFSC  x9F.3
04FCC:  BRA    505C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04FCE:  MOVLW  AA
04FD0:  MOVWF  FF6
04FD2:  MOVLW  06
04FD4:  MOVWF  FF7
04FD6:  MOVLB  0
04FD8:  CALL   1F98
....................                putc('\n',CH2);
04FDC:  MOVLW  0A
04FDE:  MOVLB  7
04FE0:  MOVWF  x11
04FE2:  MOVLB  0
04FE4:  CALL   1F52
....................                delay_ms(10);
04FE8:  MOVLW  0A
04FEA:  MOVLB  7
04FEC:  MOVWF  x10
04FEE:  MOVLB  0
04FF0:  CALL   07CC
....................                
....................                SendSMS.B4 =1;
04FF4:  MOVLB  6
04FF6:  BSF    xA6.3
....................                fprintf(CH2,"AT+CMGS=\"");
04FF8:  MOVLW  B4
04FFA:  MOVWF  FF6
04FFC:  MOVLW  06
04FFE:  MOVWF  FF7
05000:  MOVLB  0
05002:  CALL   1F98
....................                fprintf(CH2,sms_phonenumber);
05006:  MOVLW  05
05008:  MOVWF  FEA
0500A:  MOVLW  89
0500C:  MOVWF  FE9
0500E:  CALL   448E
....................             
....................                fprintf(CH2,"\"");
05012:  MOVLW  22
05014:  MOVLB  7
05016:  MOVWF  x11
05018:  MOVLB  0
0501A:  CALL   1F52
....................                putc('\n',CH2);
0501E:  MOVLW  0A
05020:  MOVLB  7
05022:  MOVWF  x11
05024:  MOVLB  0
05026:  CALL   1F52
....................                delay_ms(50);
0502A:  MOVLW  32
0502C:  MOVLB  7
0502E:  MOVWF  x10
05030:  MOVLB  0
05032:  CALL   07CC
....................               
....................               fprintf(CH2,SMS_Massage4);
05036:  MOVLW  05
05038:  MOVWF  FEA
0503A:  MOVLW  F8
0503C:  MOVWF  FE9
0503E:  CALL   448E
....................               putc('\n',CH2);
05042:  MOVLW  0A
05044:  MOVLB  7
05046:  MOVWF  x11
05048:  MOVLB  0
0504A:  CALL   1F52
....................              putc(26,CH2);
0504E:  MOVLW  1A
05050:  MOVLB  7
05052:  MOVWF  x11
05054:  MOVLB  0
05056:  CALL   1F52
0505A:  MOVLB  6
....................             }
.................... 
....................       }
0505C:  BRA    5064
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
0505E:  BTFSS  x9B.3
05060:  BRA    5064
05062:  BCF    x9F.3
....................    }
05064:  BRA    512A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
05066:  MOVLW  00
05068:  BTFSC  x98.3
0506A:  MOVLW  01
0506C:  MOVLB  7
0506E:  MOVWF  x10
05070:  MOVLW  00
05072:  MOVLB  6
05074:  BTFSC  x9A.3
05076:  MOVLW  01
05078:  MOVLB  7
0507A:  XORWF  x10,W
0507C:  SUBLW  01
0507E:  BNZ   5122
....................       {
....................          Output.B4 = 0;
05080:  MOVLB  6
05082:  BCF    x99.3
....................          
....................          // SMS Sending   
....................          if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
05084:  BTFSC  xA6.3
05086:  BRA    511E
05088:  BTFSC  30.1
0508A:  BRA    511E
0508C:  BTFSC  x9F.3
0508E:  BRA    511E
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05090:  MOVLW  BE
05092:  MOVWF  FF6
05094:  MOVLW  06
05096:  MOVWF  FF7
05098:  MOVLB  0
0509A:  CALL   1F98
....................             putc('\n',CH2);
0509E:  MOVLW  0A
050A0:  MOVLB  7
050A2:  MOVWF  x11
050A4:  MOVLB  0
050A6:  CALL   1F52
....................             delay_ms(10);
050AA:  MOVLW  0A
050AC:  MOVLB  7
050AE:  MOVWF  x10
050B0:  MOVLB  0
050B2:  CALL   07CC
....................             
....................             SendSMS.B4 =1;
050B6:  MOVLB  6
050B8:  BSF    xA6.3
....................             fprintf(CH2,"AT+CMGS=\"");
050BA:  MOVLW  C8
050BC:  MOVWF  FF6
050BE:  MOVLW  06
050C0:  MOVWF  FF7
050C2:  MOVLB  0
050C4:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
050C8:  MOVLW  05
050CA:  MOVWF  FEA
050CC:  MOVLW  89
050CE:  MOVWF  FE9
050D0:  CALL   448E
....................          
....................             fprintf(CH2,"\"");
050D4:  MOVLW  22
050D6:  MOVLB  7
050D8:  MOVWF  x11
050DA:  MOVLB  0
050DC:  CALL   1F52
....................             putc('\n',CH2);
050E0:  MOVLW  0A
050E2:  MOVLB  7
050E4:  MOVWF  x11
050E6:  MOVLB  0
050E8:  CALL   1F52
....................             delay_ms(50);
050EC:  MOVLW  32
050EE:  MOVLB  7
050F0:  MOVWF  x10
050F2:  MOVLB  0
050F4:  CALL   07CC
....................            
....................            fprintf(CH2,SMS_Massage4);
050F8:  MOVLW  05
050FA:  MOVWF  FEA
050FC:  MOVLW  F8
050FE:  MOVWF  FE9
05100:  CALL   448E
....................            putc('\n',CH2);
05104:  MOVLW  0A
05106:  MOVLB  7
05108:  MOVWF  x11
0510A:  MOVLB  0
0510C:  CALL   1F52
....................           putc(26,CH2);
05110:  MOVLW  1A
05112:  MOVLB  7
05114:  MOVWF  x11
05116:  MOVLB  0
05118:  CALL   1F52
0511C:  MOVLB  6
....................          }
....................       }
0511E:  BRA    512A
05120:  MOVLB  7
....................       else
....................       {
....................          Output.B4 = 1;
05122:  MOVLB  6
05124:  BSF    x99.3
....................          SendSMS.B4 =0;
05126:  BCF    xA6.3
....................        functointest_f =0;
05128:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
0512A:  BTFSS  x9E.4
0512C:  BRA    5244
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
0512E:  MOVLW  00
05130:  BTFSC  x98.4
05132:  MOVLW  01
05134:  MOVLB  7
05136:  MOVWF  x10
05138:  MOVLW  00
0513A:  MOVLB  6
0513C:  BTFSC  x9A.4
0513E:  MOVLW  01
05140:  MOVLB  7
05142:  XORWF  x10,W
05144:  SUBLW  01
05146:  BNZ   514E
05148:  MOVLB  6
0514A:  BTFSC  x9B.4
0514C:  BRA    5154
0514E:  MOVLB  6
05150:  BTFSS  xA0.4
05152:  BRA    523C
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
05154:  BTFSC  x9F.4
05156:  BRA    51A0
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05158:  BTFSC  xA0.4
0515A:  BRA    5174
0515C:  MOVLB  0
0515E:  MOVF   x6A,W
05160:  SUBLW  0F
05162:  BTFSC  FD8.2
05164:  BRA    516A
05166:  MOVLB  6
05168:  BRA    5174
....................             {
....................                TimeBase1s = 100 ;            //reload again
0516A:  MOVLW  64
0516C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0516E:  MOVFF  6B,1D
05172:  MOVLB  6
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
05174:  BSF    xA0.4
....................             if(FlashingFlag == 0)
05176:  BTFSC  1A.1
05178:  BRA    517E
....................             {
....................                Output.B5 = 0;           //Flash output1
0517A:  BCF    x99.4
....................             }
0517C:  BRA    5180
....................             else
....................             {
....................                Output.B5 = 1;
0517E:  BSF    x99.4
....................             }
.................... 
....................             if (~AutoTestFlag)
05180:  BTFSC  1A.4
05182:  BRA    51A0
....................             {
....................                
....................                if(OutputBoth.B5 == 0)                  //Both output
05184:  BTFSC  x9D.4
05186:  BRA    5192
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05188:  BCF    F89.4
0518A:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
0518C:  BCF    F89.3
0518E:  BCF    F92.3
....................                }
05190:  BRA    51A0
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,0);     //Buzzer
05192:  BTFSS  x9C.4
05194:  BRA    519C
05196:  BCF    F89.4
05198:  BCF    F92.4
0519A:  BRA    51A0
....................                   else output_bit(Pbell,0);                          //Bell
0519C:  BCF    F89.3
0519E:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
051A0:  BTFSC  xA6.4
051A2:  BRA    523A
051A4:  BTFSC  30.1
051A6:  BRA    523A
051A8:  BTFSC  x9F.4
051AA:  BRA    523A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
051AC:  MOVLW  D2
051AE:  MOVWF  FF6
051B0:  MOVLW  06
051B2:  MOVWF  FF7
051B4:  MOVLB  0
051B6:  CALL   1F98
....................                putc('\n',CH2);
051BA:  MOVLW  0A
051BC:  MOVLB  7
051BE:  MOVWF  x11
051C0:  MOVLB  0
051C2:  CALL   1F52
....................                delay_ms(10);
051C6:  MOVLW  0A
051C8:  MOVLB  7
051CA:  MOVWF  x10
051CC:  MOVLB  0
051CE:  CALL   07CC
....................                
....................                SendSMS.B5 =1;
051D2:  MOVLB  6
051D4:  BSF    xA6.4
....................                fprintf(CH2,"AT+CMGS=\"");
051D6:  MOVLW  DC
051D8:  MOVWF  FF6
051DA:  MOVLW  06
051DC:  MOVWF  FF7
051DE:  MOVLB  0
051E0:  CALL   1F98
....................                fprintf(CH2,sms_phonenumber);
051E4:  MOVLW  05
051E6:  MOVWF  FEA
051E8:  MOVLW  89
051EA:  MOVWF  FE9
051EC:  CALL   448E
....................                
....................                fprintf(CH2,"\"");
051F0:  MOVLW  22
051F2:  MOVLB  7
051F4:  MOVWF  x11
051F6:  MOVLB  0
051F8:  CALL   1F52
....................                putc('\n',CH2);
051FC:  MOVLW  0A
051FE:  MOVLB  7
05200:  MOVWF  x11
05202:  MOVLB  0
05204:  CALL   1F52
....................                delay_ms(50);
05208:  MOVLW  32
0520A:  MOVLB  7
0520C:  MOVWF  x10
0520E:  MOVLB  0
05210:  CALL   07CC
....................               
....................               fprintf(CH2,SMS_Massage5);
05214:  MOVLW  06
05216:  MOVWF  FEA
05218:  MOVLW  18
0521A:  MOVWF  FE9
0521C:  CALL   448E
....................               putc('\n',CH2);
05220:  MOVLW  0A
05222:  MOVLB  7
05224:  MOVWF  x11
05226:  MOVLB  0
05228:  CALL   1F52
....................              putc(26,CH2);
0522C:  MOVLW  1A
0522E:  MOVLB  7
05230:  MOVWF  x11
05232:  MOVLB  0
05234:  CALL   1F52
05238:  MOVLB  6
....................             }
.................... 
....................       }
0523A:  BRA    5242
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
0523C:  BTFSS  x9B.4
0523E:  BRA    5242
05240:  BCF    x9F.4
....................    }
05242:  BRA    5308
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
05244:  MOVLW  00
05246:  BTFSC  x98.4
05248:  MOVLW  01
0524A:  MOVLB  7
0524C:  MOVWF  x10
0524E:  MOVLW  00
05250:  MOVLB  6
05252:  BTFSC  x9A.4
05254:  MOVLW  01
05256:  MOVLB  7
05258:  XORWF  x10,W
0525A:  SUBLW  01
0525C:  BNZ   5300
....................       {
....................          Output.B5 = 0;
0525E:  MOVLB  6
05260:  BCF    x99.4
....................          // SMS Sending   
....................          if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05262:  BTFSC  xA6.4
05264:  BRA    52FC
05266:  BTFSC  30.1
05268:  BRA    52FC
0526A:  BTFSC  x9F.4
0526C:  BRA    52FC
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0526E:  MOVLW  E6
05270:  MOVWF  FF6
05272:  MOVLW  06
05274:  MOVWF  FF7
05276:  MOVLB  0
05278:  CALL   1F98
....................             putc('\n',CH2);
0527C:  MOVLW  0A
0527E:  MOVLB  7
05280:  MOVWF  x11
05282:  MOVLB  0
05284:  CALL   1F52
....................             delay_ms(10);
05288:  MOVLW  0A
0528A:  MOVLB  7
0528C:  MOVWF  x10
0528E:  MOVLB  0
05290:  CALL   07CC
....................             
....................             SendSMS.B5 =1;
05294:  MOVLB  6
05296:  BSF    xA6.4
....................             fprintf(CH2,"AT+CMGS=\"");
05298:  MOVLW  F0
0529A:  MOVWF  FF6
0529C:  MOVLW  06
0529E:  MOVWF  FF7
052A0:  MOVLB  0
052A2:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
052A6:  MOVLW  05
052A8:  MOVWF  FEA
052AA:  MOVLW  89
052AC:  MOVWF  FE9
052AE:  CALL   448E
....................             
....................             fprintf(CH2,"\"");
052B2:  MOVLW  22
052B4:  MOVLB  7
052B6:  MOVWF  x11
052B8:  MOVLB  0
052BA:  CALL   1F52
....................             putc('\n',CH2);
052BE:  MOVLW  0A
052C0:  MOVLB  7
052C2:  MOVWF  x11
052C4:  MOVLB  0
052C6:  CALL   1F52
....................             delay_ms(50);
052CA:  MOVLW  32
052CC:  MOVLB  7
052CE:  MOVWF  x10
052D0:  MOVLB  0
052D2:  CALL   07CC
....................            
....................            fprintf(CH2,SMS_Massage5);  
052D6:  MOVLW  06
052D8:  MOVWF  FEA
052DA:  MOVLW  18
052DC:  MOVWF  FE9
052DE:  CALL   448E
....................            putc('\n',CH2);
052E2:  MOVLW  0A
052E4:  MOVLB  7
052E6:  MOVWF  x11
052E8:  MOVLB  0
052EA:  CALL   1F52
....................           putc(26,CH2);
052EE:  MOVLW  1A
052F0:  MOVLB  7
052F2:  MOVWF  x11
052F4:  MOVLB  0
052F6:  CALL   1F52
052FA:  MOVLB  6
....................          }
....................       }
052FC:  BRA    5308
052FE:  MOVLB  7
....................       else
....................       {
....................          Output.B5 = 1;
05300:  MOVLB  6
05302:  BSF    x99.4
....................          SendSMS.B5 =0;
05304:  BCF    xA6.4
....................        functointest_f =0;
05306:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
05308:  BTFSS  x9E.5
0530A:  BRA    5422
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
0530C:  MOVLW  00
0530E:  BTFSC  x98.5
05310:  MOVLW  01
05312:  MOVLB  7
05314:  MOVWF  x10
05316:  MOVLW  00
05318:  MOVLB  6
0531A:  BTFSC  x9A.5
0531C:  MOVLW  01
0531E:  MOVLB  7
05320:  XORWF  x10,W
05322:  SUBLW  01
05324:  BNZ   532C
05326:  MOVLB  6
05328:  BTFSC  x9B.5
0532A:  BRA    5332
0532C:  MOVLB  6
0532E:  BTFSS  xA0.5
05330:  BRA    541A
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
05332:  BTFSC  x9F.5
05334:  BRA    537E
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05336:  BTFSC  xA0.5
05338:  BRA    5352
0533A:  MOVLB  0
0533C:  MOVF   x6A,W
0533E:  SUBLW  0F
05340:  BTFSC  FD8.2
05342:  BRA    5348
05344:  MOVLB  6
05346:  BRA    5352
....................             {
....................                TimeBase1s = 100 ;            //reload again
05348:  MOVLW  64
0534A:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0534C:  MOVFF  6B,1D
05350:  MOVLB  6
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
05352:  BSF    xA0.5
....................             if(FlashingFlag == 0)
05354:  BTFSC  1A.1
05356:  BRA    535C
....................             {
....................                Output.B6 = 0;           //Flash output1
05358:  BCF    x99.5
....................             }
0535A:  BRA    535E
....................             else
....................             {
....................                Output.B6 = 1;
0535C:  BSF    x99.5
....................             }
.................... 
....................             if (~AutoTestFlag)
0535E:  BTFSC  1A.4
05360:  BRA    537E
....................             {
....................                
....................                if(OutputBoth.B6 == 0)                  //Both output
05362:  BTFSC  x9D.5
05364:  BRA    5370
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05366:  BCF    F89.4
05368:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
0536A:  BCF    F89.3
0536C:  BCF    F92.3
....................                }
0536E:  BRA    537E
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,0);     //Buzzer
05370:  BTFSS  x9C.5
05372:  BRA    537A
05374:  BCF    F89.4
05376:  BCF    F92.4
05378:  BRA    537E
....................                   else output_bit(Pbell,0);                          //Bell
0537A:  BCF    F89.3
0537C:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0537E:  BTFSC  xA6.5
05380:  BRA    5418
05382:  BTFSC  30.1
05384:  BRA    5418
05386:  BTFSC  x9F.5
05388:  BRA    5418
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0538A:  MOVLW  FA
0538C:  MOVWF  FF6
0538E:  MOVLW  06
05390:  MOVWF  FF7
05392:  MOVLB  0
05394:  CALL   1F98
....................                putc('\n',CH2);
05398:  MOVLW  0A
0539A:  MOVLB  7
0539C:  MOVWF  x11
0539E:  MOVLB  0
053A0:  CALL   1F52
....................                delay_ms(10);
053A4:  MOVLW  0A
053A6:  MOVLB  7
053A8:  MOVWF  x10
053AA:  MOVLB  0
053AC:  CALL   07CC
....................                
....................                SendSMS.B6 =1;
053B0:  MOVLB  6
053B2:  BSF    xA6.5
....................                fprintf(CH2,"AT+CMGS=\"");
053B4:  MOVLW  04
053B6:  MOVWF  FF6
053B8:  MOVLW  07
053BA:  MOVWF  FF7
053BC:  MOVLB  0
053BE:  CALL   1F98
....................                fprintf(CH2,sms_phonenumber);
053C2:  MOVLW  05
053C4:  MOVWF  FEA
053C6:  MOVLW  89
053C8:  MOVWF  FE9
053CA:  CALL   448E
....................                
....................                fprintf(CH2,"\"");
053CE:  MOVLW  22
053D0:  MOVLB  7
053D2:  MOVWF  x11
053D4:  MOVLB  0
053D6:  CALL   1F52
....................                putc('\n',CH2);
053DA:  MOVLW  0A
053DC:  MOVLB  7
053DE:  MOVWF  x11
053E0:  MOVLB  0
053E2:  CALL   1F52
....................                delay_ms(50);
053E6:  MOVLW  32
053E8:  MOVLB  7
053EA:  MOVWF  x10
053EC:  MOVLB  0
053EE:  CALL   07CC
....................               
....................               fprintf(CH2,SMS_Massage6);
053F2:  MOVLW  06
053F4:  MOVWF  FEA
053F6:  MOVLW  38
053F8:  MOVWF  FE9
053FA:  CALL   448E
....................               putc('\n',CH2);
053FE:  MOVLW  0A
05400:  MOVLB  7
05402:  MOVWF  x11
05404:  MOVLB  0
05406:  CALL   1F52
....................              putc(26,CH2);
0540A:  MOVLW  1A
0540C:  MOVLB  7
0540E:  MOVWF  x11
05410:  MOVLB  0
05412:  CALL   1F52
05416:  MOVLB  6
....................             }
.................... 
....................       }
05418:  BRA    5420
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
0541A:  BTFSS  x9B.5
0541C:  BRA    5420
0541E:  BCF    x9F.5
....................    }
05420:  BRA    54E6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
05422:  MOVLW  00
05424:  BTFSC  x98.5
05426:  MOVLW  01
05428:  MOVLB  7
0542A:  MOVWF  x10
0542C:  MOVLW  00
0542E:  MOVLB  6
05430:  BTFSC  x9A.5
05432:  MOVLW  01
05434:  MOVLB  7
05436:  XORWF  x10,W
05438:  SUBLW  01
0543A:  BNZ   54DE
....................       {
....................          Output.B6 = 0;
0543C:  MOVLB  6
0543E:  BCF    x99.5
....................          // SMS Sending   
....................          if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
05440:  BTFSC  xA6.5
05442:  BRA    54DA
05444:  BTFSC  30.1
05446:  BRA    54DA
05448:  BTFSC  x9F.5
0544A:  BRA    54DA
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0544C:  MOVLW  0E
0544E:  MOVWF  FF6
05450:  MOVLW  07
05452:  MOVWF  FF7
05454:  MOVLB  0
05456:  CALL   1F98
....................             putc('\n',CH2);
0545A:  MOVLW  0A
0545C:  MOVLB  7
0545E:  MOVWF  x11
05460:  MOVLB  0
05462:  CALL   1F52
....................             delay_ms(10);
05466:  MOVLW  0A
05468:  MOVLB  7
0546A:  MOVWF  x10
0546C:  MOVLB  0
0546E:  CALL   07CC
....................             
....................             SendSMS.B6 =1;
05472:  MOVLB  6
05474:  BSF    xA6.5
....................             fprintf(CH2,"AT+CMGS=\"");
05476:  MOVLW  18
05478:  MOVWF  FF6
0547A:  MOVLW  07
0547C:  MOVWF  FF7
0547E:  MOVLB  0
05480:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
05484:  MOVLW  05
05486:  MOVWF  FEA
05488:  MOVLW  89
0548A:  MOVWF  FE9
0548C:  CALL   448E
....................             
....................             fprintf(CH2,"\"");
05490:  MOVLW  22
05492:  MOVLB  7
05494:  MOVWF  x11
05496:  MOVLB  0
05498:  CALL   1F52
....................             putc('\n',CH2);
0549C:  MOVLW  0A
0549E:  MOVLB  7
054A0:  MOVWF  x11
054A2:  MOVLB  0
054A4:  CALL   1F52
....................             delay_ms(50);
054A8:  MOVLW  32
054AA:  MOVLB  7
054AC:  MOVWF  x10
054AE:  MOVLB  0
054B0:  CALL   07CC
....................            
....................            fprintf(CH2,SMS_Massage6);  
054B4:  MOVLW  06
054B6:  MOVWF  FEA
054B8:  MOVLW  38
054BA:  MOVWF  FE9
054BC:  CALL   448E
....................            putc('\n',CH2);
054C0:  MOVLW  0A
054C2:  MOVLB  7
054C4:  MOVWF  x11
054C6:  MOVLB  0
054C8:  CALL   1F52
....................           putc(26,CH2);
054CC:  MOVLW  1A
054CE:  MOVLB  7
054D0:  MOVWF  x11
054D2:  MOVLB  0
054D4:  CALL   1F52
054D8:  MOVLB  6
....................          }
....................       }
054DA:  BRA    54E6
054DC:  MOVLB  7
....................       else
....................       {
....................          Output.B6 = 1;
054DE:  MOVLB  6
054E0:  BSF    x99.5
....................          SendSMS.B6 =0;
054E2:  BCF    xA6.5
....................        functointest_f =0;
054E4:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
054E6:  BTFSS  x9E.6
054E8:  BRA    5600
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
054EA:  MOVLW  00
054EC:  BTFSC  x98.6
054EE:  MOVLW  01
054F0:  MOVLB  7
054F2:  MOVWF  x10
054F4:  MOVLW  00
054F6:  MOVLB  6
054F8:  BTFSC  x9A.6
054FA:  MOVLW  01
054FC:  MOVLB  7
054FE:  XORWF  x10,W
05500:  SUBLW  01
05502:  BNZ   550A
05504:  MOVLB  6
05506:  BTFSC  x9B.6
05508:  BRA    5510
0550A:  MOVLB  6
0550C:  BTFSS  xA0.6
0550E:  BRA    55F8
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
05510:  BTFSC  x9F.6
05512:  BRA    555C
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05514:  BTFSC  xA0.6
05516:  BRA    5530
05518:  MOVLB  0
0551A:  MOVF   x6A,W
0551C:  SUBLW  0F
0551E:  BTFSC  FD8.2
05520:  BRA    5526
05522:  MOVLB  6
05524:  BRA    5530
....................             {
....................                TimeBase1s = 100 ;            //reload again
05526:  MOVLW  64
05528:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0552A:  MOVFF  6B,1D
0552E:  MOVLB  6
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
05530:  BSF    xA0.6
....................             if(FlashingFlag == 0)
05532:  BTFSC  1A.1
05534:  BRA    553A
....................             {
....................                Output.B7 = 0;           //Flash output1
05536:  BCF    x99.6
....................             }
05538:  BRA    553C
....................             else
....................             {
....................                Output.B7 = 1;
0553A:  BSF    x99.6
....................             }
.................... 
....................             if (~AutoTestFlag)
0553C:  BTFSC  1A.4
0553E:  BRA    555C
....................             {
....................                
....................                if(OutputBoth.B7 == 0)                  //Both output
05540:  BTFSC  x9D.6
05542:  BRA    554E
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05544:  BCF    F89.4
05546:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05548:  BCF    F89.3
0554A:  BCF    F92.3
....................                }
0554C:  BRA    555C
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,0);     //Buzzer
0554E:  BTFSS  x9C.6
05550:  BRA    5558
05552:  BCF    F89.4
05554:  BCF    F92.4
05556:  BRA    555C
....................                   else output_bit(Pbell,0);                          //Bell
05558:  BCF    F89.3
0555A:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0555C:  BTFSC  xA6.6
0555E:  BRA    55F6
05560:  BTFSC  30.1
05562:  BRA    55F6
05564:  BTFSC  x9F.6
05566:  BRA    55F6
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05568:  MOVLW  22
0556A:  MOVWF  FF6
0556C:  MOVLW  07
0556E:  MOVWF  FF7
05570:  MOVLB  0
05572:  CALL   1F98
....................                putc('\n',CH2);
05576:  MOVLW  0A
05578:  MOVLB  7
0557A:  MOVWF  x11
0557C:  MOVLB  0
0557E:  CALL   1F52
....................                delay_ms(10);
05582:  MOVLW  0A
05584:  MOVLB  7
05586:  MOVWF  x10
05588:  MOVLB  0
0558A:  CALL   07CC
....................                
....................                SendSMS.B7 =1;
0558E:  MOVLB  6
05590:  BSF    xA6.6
....................                fprintf(CH2,"AT+CMGS=\"");
05592:  MOVLW  2C
05594:  MOVWF  FF6
05596:  MOVLW  07
05598:  MOVWF  FF7
0559A:  MOVLB  0
0559C:  CALL   1F98
....................                fprintf(CH2,sms_phonenumber);
055A0:  MOVLW  05
055A2:  MOVWF  FEA
055A4:  MOVLW  89
055A6:  MOVWF  FE9
055A8:  CALL   448E
....................                
....................                fprintf(CH2,"\"");
055AC:  MOVLW  22
055AE:  MOVLB  7
055B0:  MOVWF  x11
055B2:  MOVLB  0
055B4:  CALL   1F52
....................                putc('\n',CH2);
055B8:  MOVLW  0A
055BA:  MOVLB  7
055BC:  MOVWF  x11
055BE:  MOVLB  0
055C0:  CALL   1F52
....................                delay_ms(50);
055C4:  MOVLW  32
055C6:  MOVLB  7
055C8:  MOVWF  x10
055CA:  MOVLB  0
055CC:  CALL   07CC
....................               
....................               fprintf(CH2,SMS_Massage7);  
055D0:  MOVLW  06
055D2:  MOVWF  FEA
055D4:  MOVLW  58
055D6:  MOVWF  FE9
055D8:  CALL   448E
....................               putc('\n',CH2);
055DC:  MOVLW  0A
055DE:  MOVLB  7
055E0:  MOVWF  x11
055E2:  MOVLB  0
055E4:  CALL   1F52
....................              putc(26,CH2);
055E8:  MOVLW  1A
055EA:  MOVLB  7
055EC:  MOVWF  x11
055EE:  MOVLB  0
055F0:  CALL   1F52
055F4:  MOVLB  6
....................             }
.................... 
....................       }
055F6:  BRA    55FE
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
055F8:  BTFSS  x9B.6
055FA:  BRA    55FE
055FC:  BCF    x9F.6
....................    }
055FE:  BRA    56C4
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
05600:  MOVLW  00
05602:  BTFSC  x98.6
05604:  MOVLW  01
05606:  MOVLB  7
05608:  MOVWF  x10
0560A:  MOVLW  00
0560C:  MOVLB  6
0560E:  BTFSC  x9A.6
05610:  MOVLW  01
05612:  MOVLB  7
05614:  XORWF  x10,W
05616:  SUBLW  01
05618:  BNZ   56BC
....................       {
....................          Output.B7 = 0;
0561A:  MOVLB  6
0561C:  BCF    x99.6
....................          // SMS Sending   
....................          if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0561E:  BTFSC  xA6.6
05620:  BRA    56B8
05622:  BTFSC  30.1
05624:  BRA    56B8
05626:  BTFSC  x9F.6
05628:  BRA    56B8
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0562A:  MOVLW  36
0562C:  MOVWF  FF6
0562E:  MOVLW  07
05630:  MOVWF  FF7
05632:  MOVLB  0
05634:  CALL   1F98
....................             putc('\n',CH2);
05638:  MOVLW  0A
0563A:  MOVLB  7
0563C:  MOVWF  x11
0563E:  MOVLB  0
05640:  CALL   1F52
....................             delay_ms(10);
05644:  MOVLW  0A
05646:  MOVLB  7
05648:  MOVWF  x10
0564A:  MOVLB  0
0564C:  CALL   07CC
....................             
....................             SendSMS.B7 =1;
05650:  MOVLB  6
05652:  BSF    xA6.6
....................             fprintf(CH2,"AT+CMGS=\"");
05654:  MOVLW  40
05656:  MOVWF  FF6
05658:  MOVLW  07
0565A:  MOVWF  FF7
0565C:  MOVLB  0
0565E:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
05662:  MOVLW  05
05664:  MOVWF  FEA
05666:  MOVLW  89
05668:  MOVWF  FE9
0566A:  CALL   448E
....................             
....................             fprintf(CH2,"\"");
0566E:  MOVLW  22
05670:  MOVLB  7
05672:  MOVWF  x11
05674:  MOVLB  0
05676:  CALL   1F52
....................             putc('\n',CH2);
0567A:  MOVLW  0A
0567C:  MOVLB  7
0567E:  MOVWF  x11
05680:  MOVLB  0
05682:  CALL   1F52
....................             delay_ms(50);
05686:  MOVLW  32
05688:  MOVLB  7
0568A:  MOVWF  x10
0568C:  MOVLB  0
0568E:  CALL   07CC
....................            
....................            fprintf(CH2,SMS_Massage7); 
05692:  MOVLW  06
05694:  MOVWF  FEA
05696:  MOVLW  58
05698:  MOVWF  FE9
0569A:  CALL   448E
....................            putc('\n',CH2);
0569E:  MOVLW  0A
056A0:  MOVLB  7
056A2:  MOVWF  x11
056A4:  MOVLB  0
056A6:  CALL   1F52
....................           putc(26,CH2);
056AA:  MOVLW  1A
056AC:  MOVLB  7
056AE:  MOVWF  x11
056B0:  MOVLB  0
056B2:  CALL   1F52
056B6:  MOVLB  6
....................          }
....................       }
056B8:  BRA    56C4
056BA:  MOVLB  7
....................       else
....................       {
....................          Output.B7 = 1;
056BC:  MOVLB  6
056BE:  BSF    x99.6
....................          SendSMS.B7 =0;
056C0:  BCF    xA6.6
....................        functointest_f =0;
056C2:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
056C4:  BTFSS  x9E.7
056C6:  BRA    57DE
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
056C8:  MOVLW  00
056CA:  BTFSC  x98.7
056CC:  MOVLW  01
056CE:  MOVLB  7
056D0:  MOVWF  x10
056D2:  MOVLW  00
056D4:  MOVLB  6
056D6:  BTFSC  x9A.7
056D8:  MOVLW  01
056DA:  MOVLB  7
056DC:  XORWF  x10,W
056DE:  SUBLW  01
056E0:  BNZ   56E8
056E2:  MOVLB  6
056E4:  BTFSC  x9B.7
056E6:  BRA    56EE
056E8:  MOVLB  6
056EA:  BTFSS  xA0.7
056EC:  BRA    57D6
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
056EE:  BTFSC  x9F.7
056F0:  BRA    573A
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
056F2:  BTFSC  xA0.7
056F4:  BRA    570E
056F6:  MOVLB  0
056F8:  MOVF   x6A,W
056FA:  SUBLW  0F
056FC:  BTFSC  FD8.2
056FE:  BRA    5704
05700:  MOVLB  6
05702:  BRA    570E
....................             {
....................                TimeBase1s = 100 ;            //reload again
05704:  MOVLW  64
05706:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05708:  MOVFF  6B,1D
0570C:  MOVLB  6
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
0570E:  BSF    xA0.7
....................             if(FlashingFlag == 0)
05710:  BTFSC  1A.1
05712:  BRA    5718
....................             {
....................                Output.B8 = 0;           //Flash output1
05714:  BCF    x99.7
....................             }
05716:  BRA    571A
....................             else
....................             {
....................                Output.B8 = 1;
05718:  BSF    x99.7
....................             }
.................... 
....................             if (~AutoTestFlag)
0571A:  BTFSC  1A.4
0571C:  BRA    573A
....................             {
....................                
....................                if(OutputBoth.B8 == 0)                  //Both output
0571E:  BTFSC  x9D.7
05720:  BRA    572C
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05722:  BCF    F89.4
05724:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05726:  BCF    F89.3
05728:  BCF    F92.3
....................                }
0572A:  BRA    573A
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,0);     //Buzzer
0572C:  BTFSS  x9C.7
0572E:  BRA    5736
05730:  BCF    F89.4
05732:  BCF    F92.4
05734:  BRA    573A
....................                   else output_bit(Pbell,0);                          //Bell
05736:  BCF    F89.3
05738:  BCF    F92.3
....................                }
....................                
....................             }
....................        }
....................      
....................        // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
0573A:  BTFSC  xA6.7
0573C:  BRA    57D4
0573E:  BTFSC  30.1
05740:  BRA    57D4
05742:  BTFSC  x9F.7
05744:  BRA    57D4
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05746:  MOVLW  4A
05748:  MOVWF  FF6
0574A:  MOVLW  07
0574C:  MOVWF  FF7
0574E:  MOVLB  0
05750:  CALL   1F98
....................             putc('\n',CH2);
05754:  MOVLW  0A
05756:  MOVLB  7
05758:  MOVWF  x11
0575A:  MOVLB  0
0575C:  CALL   1F52
....................             delay_ms(10);
05760:  MOVLW  0A
05762:  MOVLB  7
05764:  MOVWF  x10
05766:  MOVLB  0
05768:  CALL   07CC
....................             
....................             SendSMS.B8 =1;
0576C:  MOVLB  6
0576E:  BSF    xA6.7
....................             fprintf(CH2,"AT+CMGS=\"");
05770:  MOVLW  54
05772:  MOVWF  FF6
05774:  MOVLW  07
05776:  MOVWF  FF7
05778:  MOVLB  0
0577A:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
0577E:  MOVLW  05
05780:  MOVWF  FEA
05782:  MOVLW  89
05784:  MOVWF  FE9
05786:  CALL   448E
....................             
....................             fprintf(CH2,"\"");
0578A:  MOVLW  22
0578C:  MOVLB  7
0578E:  MOVWF  x11
05790:  MOVLB  0
05792:  CALL   1F52
....................             putc('\n',CH2);
05796:  MOVLW  0A
05798:  MOVLB  7
0579A:  MOVWF  x11
0579C:  MOVLB  0
0579E:  CALL   1F52
....................             delay_ms(50);
057A2:  MOVLW  32
057A4:  MOVLB  7
057A6:  MOVWF  x10
057A8:  MOVLB  0
057AA:  CALL   07CC
....................            
....................            printf(SMS_Massage8);  
057AE:  MOVLW  06
057B0:  MOVWF  FEA
057B2:  MOVLW  78
057B4:  MOVWF  FE9
057B6:  CALL   448E
....................            putc('\n',CH2);
057BA:  MOVLW  0A
057BC:  MOVLB  7
057BE:  MOVWF  x11
057C0:  MOVLB  0
057C2:  CALL   1F52
....................           putc(26,CH2);
057C6:  MOVLW  1A
057C8:  MOVLB  7
057CA:  MOVWF  x11
057CC:  MOVLB  0
057CE:  CALL   1F52
057D2:  MOVLB  6
....................          }
.................... 
....................       }
057D4:  BRA    57DC
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
057D6:  BTFSS  x9B.7
057D8:  BRA    57DC
057DA:  BCF    x9F.7
....................    }
057DC:  BRA    58A2
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
057DE:  MOVLW  00
057E0:  BTFSC  x98.7
057E2:  MOVLW  01
057E4:  MOVLB  7
057E6:  MOVWF  x10
057E8:  MOVLW  00
057EA:  MOVLB  6
057EC:  BTFSC  x9A.7
057EE:  MOVLW  01
057F0:  MOVLB  7
057F2:  XORWF  x10,W
057F4:  SUBLW  01
057F6:  BNZ   589A
....................       {
....................          Output.B8 = 0;
057F8:  MOVLB  6
057FA:  BCF    x99.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
057FC:  BTFSC  xA6.7
057FE:  BRA    5896
05800:  BTFSC  30.1
05802:  BRA    5896
05804:  BTFSC  x9F.7
05806:  BRA    5896
....................          {
....................             printf("AT+CMGF=1"); 
05808:  MOVLW  5E
0580A:  MOVWF  FF6
0580C:  MOVLW  07
0580E:  MOVWF  FF7
05810:  MOVLB  0
05812:  CALL   1F98
....................             putc('\n',CH2);
05816:  MOVLW  0A
05818:  MOVLB  7
0581A:  MOVWF  x11
0581C:  MOVLB  0
0581E:  CALL   1F52
....................             delay_ms(10);
05822:  MOVLW  0A
05824:  MOVLB  7
05826:  MOVWF  x10
05828:  MOVLB  0
0582A:  CALL   07CC
....................             
....................             SendSMS.B8 =1;
0582E:  MOVLB  6
05830:  BSF    xA6.7
....................             fprintf(CH2,"AT+CMGS=\"");
05832:  MOVLW  68
05834:  MOVWF  FF6
05836:  MOVLW  07
05838:  MOVWF  FF7
0583A:  MOVLB  0
0583C:  CALL   1F98
....................             fprintf(CH2,sms_phonenumber);
05840:  MOVLW  05
05842:  MOVWF  FEA
05844:  MOVLW  89
05846:  MOVWF  FE9
05848:  CALL   448E
....................             
....................             fprintf(CH2,"\"");
0584C:  MOVLW  22
0584E:  MOVLB  7
05850:  MOVWF  x11
05852:  MOVLB  0
05854:  CALL   1F52
....................             putc('\n',CH2);
05858:  MOVLW  0A
0585A:  MOVLB  7
0585C:  MOVWF  x11
0585E:  MOVLB  0
05860:  CALL   1F52
....................             delay_ms(50);
05864:  MOVLW  32
05866:  MOVLB  7
05868:  MOVWF  x10
0586A:  MOVLB  0
0586C:  CALL   07CC
....................            
....................            fprintf(CH2,SMS_Massage8);  
05870:  MOVLW  06
05872:  MOVWF  FEA
05874:  MOVLW  78
05876:  MOVWF  FE9
05878:  CALL   448E
....................            putc('\n',CH2);
0587C:  MOVLW  0A
0587E:  MOVLB  7
05880:  MOVWF  x11
05882:  MOVLB  0
05884:  CALL   1F52
....................           putc(26,CH2);
05888:  MOVLW  1A
0588A:  MOVLB  7
0588C:  MOVWF  x11
0588E:  MOVLB  0
05890:  CALL   1F52
05894:  MOVLB  6
....................          }
....................       }
05896:  BRA    58A2
05898:  MOVLB  7
....................       else
....................       {
....................          Output.B8 = 1;
0589A:  MOVLB  6
0589C:  BSF    x99.7
....................          SendSMS.B8 =0;
0589E:  BCF    xA6.7
....................        functointest_f =0;
058A0:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
058A2:  MOVLW  00
058A4:  BTFSC  x98.0
058A6:  MOVLW  01
058A8:  MOVLB  7
058AA:  MOVWF  x10
058AC:  MOVLW  00
058AE:  MOVLB  6
058B0:  BTFSC  x9A.0
058B2:  MOVLW  01
058B4:  MOVLB  7
058B6:  XORWF  x10,W
058B8:  SUBLW  01
058BA:  BNZ   58C4
058BC:  MOVLB  6
058BE:  BTFSS  x9B.0
058C0:  BRA    58CA
058C2:  MOVLB  7
058C4:  BTFSS  1A.5
058C6:  BRA    599A
058C8:  MOVLB  6
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
058CA:  BTFSC  xA1.0
058CC:  BRA    58EA
058CE:  MOVLB  0
058D0:  MOVF   x6A,W
058D2:  SUBLW  0F
058D4:  BTFSC  FD8.2
058D6:  BRA    58DC
058D8:  MOVLB  6
058DA:  BRA    58EA
058DC:  MOVLB  6
058DE:  BTFSC  x9F.0
058E0:  BRA    58EA
....................       {
....................             TimeBase1s = 100 ;            //reload again
058E2:  MOVLW  64
058E4:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
058E6:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B1 = 1;
058EA:  BSF    xA1.0
....................       if(Ack.B1 == 0)
058EC:  BTFSC  x9F.0
058EE:  BRA    591E
....................       {
....................          if(FlashingFlag == 0)
058F0:  BTFSC  1A.1
058F2:  BRA    58F8
....................             {
....................                Output.B1 = 0;           //Flash output1
058F4:  BCF    x99.0
....................             }
058F6:  BRA    58FA
....................             else
....................             {
....................                Output.B1 = 1;
058F8:  BSF    x99.0
....................             }
....................          if(~AutoTestFlag)
058FA:  BTFSC  1A.4
058FC:  BRA    591E
....................          {
....................             if(AlarmIndicator.B1 == 1){
058FE:  BTFSS  x9E.0
05900:  BRA    591E
....................                 if(OutputBoth.B1 == 0)        //Both output
05902:  BTFSC  x9D.0
05904:  BRA    5910
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05906:  BCF    F89.4
05908:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
0590A:  BCF    F89.3
0590C:  BCF    F92.3
....................                 }
0590E:  BRA    591E
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,0);     //Buzzer
05910:  BTFSS  x9C.0
05912:  BRA    591A
05914:  BCF    F89.4
05916:  BCF    F92.4
05918:  BRA    591E
....................                   else output_bit(Pbell,0);                          //Bell
0591A:  BCF    F89.3
0591C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0591E:  MOVLW  01
05920:  MOVLB  7
05922:  MOVWF  x04
....................       
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
05924:  MOVLB  6
05926:  BTFSC  xA6.0
05928:  BRA    5998
0592A:  BTFSC  30.1
0592C:  BRA    5998
0592E:  BTFSC  x9F.0
05930:  BRA    5998
....................       {
....................          SendSMS.B1 =1;
05932:  BSF    xA6.0
....................          fprintf(CH2,"AT+CMGS=\"");
05934:  MOVLW  72
05936:  MOVWF  FF6
05938:  MOVLW  07
0593A:  MOVWF  FF7
0593C:  MOVLB  0
0593E:  CALL   1F98
....................          fprintf(CH2,sms_phonenumber);
05942:  MOVLW  05
05944:  MOVWF  FEA
05946:  MOVLW  89
05948:  MOVWF  FE9
0594A:  CALL   448E
....................          
....................          fprintf(CH2,"\"");
0594E:  MOVLW  22
05950:  MOVLB  7
05952:  MOVWF  x11
05954:  MOVLB  0
05956:  CALL   1F52
....................          putc('\n',CH2);
0595A:  MOVLW  0A
0595C:  MOVLB  7
0595E:  MOVWF  x11
05960:  MOVLB  0
05962:  CALL   1F52
....................          delay_ms(50);
05966:  MOVLW  32
05968:  MOVLB  7
0596A:  MOVWF  x10
0596C:  MOVLB  0
0596E:  CALL   07CC
....................         
....................         fprintf(CH2,SMS_Massage1);   
05972:  MOVLW  05
05974:  MOVWF  FEA
05976:  MOVLW  98
05978:  MOVWF  FE9
0597A:  CALL   448E
....................         putc('\n',CH2);
0597E:  MOVLW  0A
05980:  MOVLB  7
05982:  MOVWF  x11
05984:  MOVLB  0
05986:  CALL   1F52
....................        putc(26,CH2);
0598A:  MOVLW  1A
0598C:  MOVLB  7
0598E:  MOVWF  x11
05990:  MOVLB  0
05992:  CALL   1F52
05996:  MOVLB  6
....................       }
....................    }
05998:  BRA    5A24
....................    else if(FaultType.B1 == 0)
0599A:  MOVLB  6
0599C:  BTFSC  x9B.0
0599E:  BRA    5A24
....................    {
....................       In2.B1 = 0;
059A0:  BCF    xA1.0
....................       Ack.B1 = 0;
059A2:  BCF    x9F.0
....................       Output.B1 = 1;      //Off LED
059A4:  BSF    x99.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
059A6:  BCF    xA6.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
059A8:  BTFSC  x9C.0
059AA:  BRA    59B0
059AC:  BTFSC  x9D.0
059AE:  BRA    59D2
059B0:  MOVLB  7
059B2:  MOVF   x04,F
059B4:  BTFSC  FD8.2
059B6:  BRA    59BC
059B8:  MOVLB  6
059BA:  BRA    59D2
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
059BC:  MOVLW  01
059BE:  MOVWF  x0F
059C0:  MOVLB  0
059C2:  CALL   44B4
059C6:  DECFSZ 01,W
059C8:  BRA    59CC
059CA:  BRA    59D0
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
059CC:  BSF    F89.4
059CE:  BCF    F92.4
059D0:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
059D2:  BTFSS  x9C.0
059D4:  BRA    59DA
059D6:  BTFSC  x9D.0
059D8:  BRA    59FC
059DA:  MOVLB  7
059DC:  MOVF   x04,F
059DE:  BTFSC  FD8.2
059E0:  BRA    59E6
059E2:  MOVLB  6
059E4:  BRA    59FC
....................       {
....................          if(CheckAutoReset(0x02) == 1);
059E6:  MOVLW  02
059E8:  MOVWF  x0F
059EA:  MOVLB  0
059EC:  CALL   44B4
059F0:  DECFSZ 01,W
059F2:  BRA    59F6
059F4:  BRA    59FA
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
059F6:  BSF    F89.3
059F8:  BCF    F92.3
059FA:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
059FC:  BTFSC  xA1.0
059FE:  BRA    5A24
05A00:  BTFSC  xA1.1
05A02:  BRA    5A24
05A04:  BTFSC  xA1.2
05A06:  BRA    5A24
05A08:  BTFSC  xA1.3
05A0A:  BRA    5A24
05A0C:  BTFSC  xA1.4
05A0E:  BRA    5A24
05A10:  BTFSC  xA1.5
05A12:  BRA    5A24
05A14:  BTFSC  xA1.6
05A16:  BRA    5A24
05A18:  BTFSC  xA1.7
05A1A:  BRA    5A24
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05A1C:  BSF    F89.3
05A1E:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05A20:  BSF    F89.4
05A22:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05A24:  MOVLW  00
05A26:  BTFSC  x98.1
05A28:  MOVLW  01
05A2A:  MOVLB  7
05A2C:  MOVWF  x10
05A2E:  MOVLW  00
05A30:  MOVLB  6
05A32:  BTFSC  x9A.1
05A34:  MOVLW  01
05A36:  MOVLB  7
05A38:  XORWF  x10,W
05A3A:  SUBLW  01
05A3C:  BNZ   5A46
05A3E:  MOVLB  6
05A40:  BTFSS  x9B.1
05A42:  BRA    5A4C
05A44:  MOVLB  7
05A46:  BTFSS  1A.5
05A48:  BRA    5B1C
05A4A:  MOVLB  6
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
05A4C:  BTFSC  xA1.1
05A4E:  BRA    5A6C
05A50:  MOVLB  0
05A52:  MOVF   x6A,W
05A54:  SUBLW  0F
05A56:  BTFSC  FD8.2
05A58:  BRA    5A5E
05A5A:  MOVLB  6
05A5C:  BRA    5A6C
05A5E:  MOVLB  6
05A60:  BTFSC  x9F.1
05A62:  BRA    5A6C
....................       {
....................             TimeBase1s = 100 ;            //reload again
05A64:  MOVLW  64
05A66:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05A68:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B2 = 1;
05A6C:  BSF    xA1.1
....................       if(Ack.B2 == 0)
05A6E:  BTFSC  x9F.1
05A70:  BRA    5AA0
....................       {
....................          if(FlashingFlag == 0)
05A72:  BTFSC  1A.1
05A74:  BRA    5A7A
....................             {
....................                Output.B2 = 0;           //Flash output1
05A76:  BCF    x99.1
....................             }
05A78:  BRA    5A7C
....................             else
....................             {
....................                Output.B2 = 1;
05A7A:  BSF    x99.1
....................             }
....................          if (~AutoTestFlag)
05A7C:  BTFSC  1A.4
05A7E:  BRA    5AA0
....................          {
....................            if(AlarmIndicator.B2 == 1){
05A80:  BTFSS  x9E.1
05A82:  BRA    5AA0
....................              if(OutputBoth.B2 == 0)        //Both output
05A84:  BTFSC  x9D.1
05A86:  BRA    5A92
....................              {
....................                output_bit(Pbuzzer,0);   //Buzzer
05A88:  BCF    F89.4
05A8A:  BCF    F92.4
....................                output_bit(Pbell,0);     //Bell
05A8C:  BCF    F89.3
05A8E:  BCF    F92.3
....................              }
05A90:  BRA    5AA0
....................              else
....................              {
....................                if(OutputType.B2 == 1) output_bit(Pbuzzer,0);     //Buzzer
05A92:  BTFSS  x9C.1
05A94:  BRA    5A9C
05A96:  BCF    F89.4
05A98:  BCF    F92.4
05A9A:  BRA    5AA0
....................                else output_bit(Pbell,0);                          //Bell
05A9C:  BCF    F89.3
05A9E:  BCF    F92.3
....................              }
....................            }
....................          }
....................        }
....................       inputflag =1;
05AA0:  MOVLW  01
05AA2:  MOVLB  7
05AA4:  MOVWF  x04
....................       
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
05AA6:  MOVLB  6
05AA8:  BTFSC  xA6.1
05AAA:  BRA    5B1A
05AAC:  BTFSC  30.1
05AAE:  BRA    5B1A
05AB0:  BTFSC  x9F.1
05AB2:  BRA    5B1A
....................       {
....................          SendSMS.B2 =1;
05AB4:  BSF    xA6.1
....................          fprintf(CH2,"AT+CMGS=\"");
05AB6:  MOVLW  7C
05AB8:  MOVWF  FF6
05ABA:  MOVLW  07
05ABC:  MOVWF  FF7
05ABE:  MOVLB  0
05AC0:  CALL   1F98
....................          fprintf(CH2,sms_phonenumber);
05AC4:  MOVLW  05
05AC6:  MOVWF  FEA
05AC8:  MOVLW  89
05ACA:  MOVWF  FE9
05ACC:  CALL   448E
....................          
....................          fprintf(CH2,"\"");
05AD0:  MOVLW  22
05AD2:  MOVLB  7
05AD4:  MOVWF  x11
05AD6:  MOVLB  0
05AD8:  CALL   1F52
....................          putc('\n',CH2);
05ADC:  MOVLW  0A
05ADE:  MOVLB  7
05AE0:  MOVWF  x11
05AE2:  MOVLB  0
05AE4:  CALL   1F52
....................          delay_ms(50);
05AE8:  MOVLW  32
05AEA:  MOVLB  7
05AEC:  MOVWF  x10
05AEE:  MOVLB  0
05AF0:  CALL   07CC
....................         
....................         fprintf(CH2,SMS_Massage2); 
05AF4:  MOVLW  05
05AF6:  MOVWF  FEA
05AF8:  MOVLW  B8
05AFA:  MOVWF  FE9
05AFC:  CALL   448E
....................         putc('\n',CH2);
05B00:  MOVLW  0A
05B02:  MOVLB  7
05B04:  MOVWF  x11
05B06:  MOVLB  0
05B08:  CALL   1F52
....................        putc(26,CH2);
05B0C:  MOVLW  1A
05B0E:  MOVLB  7
05B10:  MOVWF  x11
05B12:  MOVLB  0
05B14:  CALL   1F52
05B18:  MOVLB  6
....................       }
....................    }
05B1A:  BRA    5BA6
....................    else if(FaultType.B2 == 0)
05B1C:  MOVLB  6
05B1E:  BTFSC  x9B.1
05B20:  BRA    5BA6
....................    {
....................       In2.B2 = 0x00;
05B22:  BCF    xA1.1
....................       Ack.B2 = 0;
05B24:  BCF    x9F.1
....................       Output.B2 = 1;      //Off LED
05B26:  BSF    x99.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
05B28:  BCF    xA6.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
05B2A:  BTFSC  x9C.1
05B2C:  BRA    5B32
05B2E:  BTFSC  x9D.1
05B30:  BRA    5B54
05B32:  MOVLB  7
05B34:  MOVF   x04,F
05B36:  BTFSC  FD8.2
05B38:  BRA    5B3E
05B3A:  MOVLB  6
05B3C:  BRA    5B54
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05B3E:  MOVLW  01
05B40:  MOVWF  x0F
05B42:  MOVLB  0
05B44:  CALL   44B4
05B48:  DECFSZ 01,W
05B4A:  BRA    5B4E
05B4C:  BRA    5B52
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05B4E:  BSF    F89.4
05B50:  BCF    F92.4
05B52:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
05B54:  BTFSS  x9C.1
05B56:  BRA    5B5C
05B58:  BTFSC  x9D.1
05B5A:  BRA    5B7E
05B5C:  MOVLB  7
05B5E:  MOVF   x04,F
05B60:  BTFSC  FD8.2
05B62:  BRA    5B68
05B64:  MOVLB  6
05B66:  BRA    5B7E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05B68:  MOVLW  02
05B6A:  MOVWF  x0F
05B6C:  MOVLB  0
05B6E:  CALL   44B4
05B72:  DECFSZ 01,W
05B74:  BRA    5B78
05B76:  BRA    5B7C
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05B78:  BSF    F89.3
05B7A:  BCF    F92.3
05B7C:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05B7E:  BTFSC  xA1.0
05B80:  BRA    5BA6
05B82:  BTFSC  xA1.1
05B84:  BRA    5BA6
05B86:  BTFSC  xA1.2
05B88:  BRA    5BA6
05B8A:  BTFSC  xA1.3
05B8C:  BRA    5BA6
05B8E:  BTFSC  xA1.4
05B90:  BRA    5BA6
05B92:  BTFSC  xA1.5
05B94:  BRA    5BA6
05B96:  BTFSC  xA1.6
05B98:  BRA    5BA6
05B9A:  BTFSC  xA1.7
05B9C:  BRA    5BA6
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05B9E:  BSF    F89.3
05BA0:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05BA2:  BSF    F89.4
05BA4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
05BA6:  MOVLW  00
05BA8:  BTFSC  x98.2
05BAA:  MOVLW  01
05BAC:  MOVLB  7
05BAE:  MOVWF  x10
05BB0:  MOVLW  00
05BB2:  MOVLB  6
05BB4:  BTFSC  x9A.2
05BB6:  MOVLW  01
05BB8:  MOVLB  7
05BBA:  XORWF  x10,W
05BBC:  SUBLW  01
05BBE:  BNZ   5BC8
05BC0:  MOVLB  6
05BC2:  BTFSS  x9B.2
05BC4:  BRA    5BCE
05BC6:  MOVLB  7
05BC8:  BTFSS  1A.5
05BCA:  BRA    5C9E
05BCC:  MOVLB  6
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
05BCE:  BTFSC  xA1.2
05BD0:  BRA    5BEE
05BD2:  MOVLB  0
05BD4:  MOVF   x6A,W
05BD6:  SUBLW  0F
05BD8:  BTFSC  FD8.2
05BDA:  BRA    5BE0
05BDC:  MOVLB  6
05BDE:  BRA    5BEE
05BE0:  MOVLB  6
05BE2:  BTFSC  x9F.2
05BE4:  BRA    5BEE
....................       {
....................             TimeBase1s = 100 ;            //reload again
05BE6:  MOVLW  64
05BE8:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05BEA:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B3 = 1;
05BEE:  BSF    xA1.2
....................       if(Ack.B3 == 0)
05BF0:  BTFSC  x9F.2
05BF2:  BRA    5C22
....................       {
....................          if(FlashingFlag == 0)
05BF4:  BTFSC  1A.1
05BF6:  BRA    5BFC
....................             {
....................                Output.B3 = 0;           //Flash output1
05BF8:  BCF    x99.2
....................             }
05BFA:  BRA    5BFE
....................             else
....................             {
....................                Output.B3 = 1;
05BFC:  BSF    x99.2
....................             }
....................          if (~AutoTestFlag)
05BFE:  BTFSC  1A.4
05C00:  BRA    5C22
....................          {
....................             if(AlarmIndicator.B3 == 1){
05C02:  BTFSS  x9E.2
05C04:  BRA    5C22
....................                 if(OutputBoth.B3 == 0)        //Both output
05C06:  BTFSC  x9D.2
05C08:  BRA    5C14
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05C0A:  BCF    F89.4
05C0C:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05C0E:  BCF    F89.3
05C10:  BCF    F92.3
....................                 }
05C12:  BRA    5C22
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,0);     //Buzzer
05C14:  BTFSS  x9C.2
05C16:  BRA    5C1E
05C18:  BCF    F89.4
05C1A:  BCF    F92.4
05C1C:  BRA    5C22
....................                   else output_bit(Pbell,0);                          //Bell
05C1E:  BCF    F89.3
05C20:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05C22:  MOVLW  01
05C24:  MOVLB  7
05C26:  MOVWF  x04
....................       
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
05C28:  MOVLB  6
05C2A:  BTFSC  xA6.2
05C2C:  BRA    5C9C
05C2E:  BTFSC  30.1
05C30:  BRA    5C9C
05C32:  BTFSC  x9F.2
05C34:  BRA    5C9C
....................       {
....................          SendSMS.B3 =1;
05C36:  BSF    xA6.2
....................          fprintf(CH2,"AT+CMGS=\"");
05C38:  MOVLW  86
05C3A:  MOVWF  FF6
05C3C:  MOVLW  07
05C3E:  MOVWF  FF7
05C40:  MOVLB  0
05C42:  CALL   1F98
....................          fprintf(CH2,sms_phonenumber);
05C46:  MOVLW  05
05C48:  MOVWF  FEA
05C4A:  MOVLW  89
05C4C:  MOVWF  FE9
05C4E:  CALL   448E
....................          
....................          fprintf(CH2,"\"");
05C52:  MOVLW  22
05C54:  MOVLB  7
05C56:  MOVWF  x11
05C58:  MOVLB  0
05C5A:  CALL   1F52
....................          putc('\n',CH2);
05C5E:  MOVLW  0A
05C60:  MOVLB  7
05C62:  MOVWF  x11
05C64:  MOVLB  0
05C66:  CALL   1F52
....................          delay_ms(50);
05C6A:  MOVLW  32
05C6C:  MOVLB  7
05C6E:  MOVWF  x10
05C70:  MOVLB  0
05C72:  CALL   07CC
....................         
....................         fprintf(CH2,SMS_Massage3); 
05C76:  MOVLW  05
05C78:  MOVWF  FEA
05C7A:  MOVLW  D8
05C7C:  MOVWF  FE9
05C7E:  CALL   448E
....................         putc('\n',CH2);
05C82:  MOVLW  0A
05C84:  MOVLB  7
05C86:  MOVWF  x11
05C88:  MOVLB  0
05C8A:  CALL   1F52
....................        putc(26,CH2);
05C8E:  MOVLW  1A
05C90:  MOVLB  7
05C92:  MOVWF  x11
05C94:  MOVLB  0
05C96:  CALL   1F52
05C9A:  MOVLB  6
....................       }
....................    }
05C9C:  BRA    5D28
....................    else if(FaultType.B3 == 0)
05C9E:  MOVLB  6
05CA0:  BTFSC  x9B.2
05CA2:  BRA    5D28
....................    {
....................       In2.B3 = 0x00;
05CA4:  BCF    xA1.2
....................       Ack.B3 = 0;
05CA6:  BCF    x9F.2
....................       Output.B3 = 1;      //Off LED
05CA8:  BSF    x99.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
05CAA:  BCF    xA6.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
05CAC:  BTFSC  x9C.2
05CAE:  BRA    5CB4
05CB0:  BTFSC  x9D.2
05CB2:  BRA    5CD6
05CB4:  MOVLB  7
05CB6:  MOVF   x04,F
05CB8:  BTFSC  FD8.2
05CBA:  BRA    5CC0
05CBC:  MOVLB  6
05CBE:  BRA    5CD6
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05CC0:  MOVLW  01
05CC2:  MOVWF  x0F
05CC4:  MOVLB  0
05CC6:  CALL   44B4
05CCA:  DECFSZ 01,W
05CCC:  BRA    5CD0
05CCE:  BRA    5CD4
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05CD0:  BSF    F89.4
05CD2:  BCF    F92.4
05CD4:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
05CD6:  BTFSS  x9C.2
05CD8:  BRA    5CDE
05CDA:  BTFSC  x9D.2
05CDC:  BRA    5D00
05CDE:  MOVLB  7
05CE0:  MOVF   x04,F
05CE2:  BTFSC  FD8.2
05CE4:  BRA    5CEA
05CE6:  MOVLB  6
05CE8:  BRA    5D00
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05CEA:  MOVLW  02
05CEC:  MOVWF  x0F
05CEE:  MOVLB  0
05CF0:  CALL   44B4
05CF4:  DECFSZ 01,W
05CF6:  BRA    5CFA
05CF8:  BRA    5CFE
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05CFA:  BSF    F89.3
05CFC:  BCF    F92.3
05CFE:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05D00:  BTFSC  xA1.0
05D02:  BRA    5D28
05D04:  BTFSC  xA1.1
05D06:  BRA    5D28
05D08:  BTFSC  xA1.2
05D0A:  BRA    5D28
05D0C:  BTFSC  xA1.3
05D0E:  BRA    5D28
05D10:  BTFSC  xA1.4
05D12:  BRA    5D28
05D14:  BTFSC  xA1.5
05D16:  BRA    5D28
05D18:  BTFSC  xA1.6
05D1A:  BRA    5D28
05D1C:  BTFSC  xA1.7
05D1E:  BRA    5D28
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05D20:  BSF    F89.3
05D22:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05D24:  BSF    F89.4
05D26:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05D28:  MOVLW  00
05D2A:  BTFSC  x98.3
05D2C:  MOVLW  01
05D2E:  MOVLB  7
05D30:  MOVWF  x10
05D32:  MOVLW  00
05D34:  MOVLB  6
05D36:  BTFSC  x9A.3
05D38:  MOVLW  01
05D3A:  MOVLB  7
05D3C:  XORWF  x10,W
05D3E:  SUBLW  01
05D40:  BNZ   5D4A
05D42:  MOVLB  6
05D44:  BTFSS  x9B.3
05D46:  BRA    5D50
05D48:  MOVLB  7
05D4A:  BTFSS  1A.5
05D4C:  BRA    5E20
05D4E:  MOVLB  6
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
05D50:  BTFSC  xA1.3
05D52:  BRA    5D70
05D54:  MOVLB  0
05D56:  MOVF   x6A,W
05D58:  SUBLW  0F
05D5A:  BTFSC  FD8.2
05D5C:  BRA    5D62
05D5E:  MOVLB  6
05D60:  BRA    5D70
05D62:  MOVLB  6
05D64:  BTFSC  x9F.3
05D66:  BRA    5D70
....................       {
....................             TimeBase1s = 100 ;            //reload again
05D68:  MOVLW  64
05D6A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05D6C:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B4 = 1;
05D70:  BSF    xA1.3
....................       if(Ack.B4 == 0)
05D72:  BTFSC  x9F.3
05D74:  BRA    5DA4
....................       {
....................          if(FlashingFlag == 0)
05D76:  BTFSC  1A.1
05D78:  BRA    5D7E
....................             {
....................                Output.B4 = 0;           //Flash output1
05D7A:  BCF    x99.3
....................             }
05D7C:  BRA    5D80
....................             else
....................             {
....................                Output.B4 = 1;
05D7E:  BSF    x99.3
....................             }
....................          if (~AutoTestFlag)
05D80:  BTFSC  1A.4
05D82:  BRA    5DA4
....................          {
....................             if(AlarmIndicator.B4 == 1){
05D84:  BTFSS  x9E.3
05D86:  BRA    5DA4
....................                 if(OutputBoth.B4 == 0)        //Both output
05D88:  BTFSC  x9D.3
05D8A:  BRA    5D96
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05D8C:  BCF    F89.4
05D8E:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05D90:  BCF    F89.3
05D92:  BCF    F92.3
....................                 }
05D94:  BRA    5DA4
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,0);     //Buzzer
05D96:  BTFSS  x9C.3
05D98:  BRA    5DA0
05D9A:  BCF    F89.4
05D9C:  BCF    F92.4
05D9E:  BRA    5DA4
....................                   else output_bit(Pbell,0);                          //Bell
05DA0:  BCF    F89.3
05DA2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05DA4:  MOVLW  01
05DA6:  MOVLB  7
05DA8:  MOVWF  x04
....................       
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
05DAA:  MOVLB  6
05DAC:  BTFSC  xA6.3
05DAE:  BRA    5E1E
05DB0:  BTFSC  30.1
05DB2:  BRA    5E1E
05DB4:  BTFSC  x9F.3
05DB6:  BRA    5E1E
....................       {
....................          SendSMS.B4 =1;
05DB8:  BSF    xA6.3
....................          fprintf(CH2,"AT+CMGS=\"");
05DBA:  MOVLW  90
05DBC:  MOVWF  FF6
05DBE:  MOVLW  07
05DC0:  MOVWF  FF7
05DC2:  MOVLB  0
05DC4:  CALL   1F98
....................          fprintf(CH2,sms_phonenumber);
05DC8:  MOVLW  05
05DCA:  MOVWF  FEA
05DCC:  MOVLW  89
05DCE:  MOVWF  FE9
05DD0:  CALL   448E
....................          
....................          fprintf(CH2,"\"");
05DD4:  MOVLW  22
05DD6:  MOVLB  7
05DD8:  MOVWF  x11
05DDA:  MOVLB  0
05DDC:  CALL   1F52
....................          putc('\n',CH2);
05DE0:  MOVLW  0A
05DE2:  MOVLB  7
05DE4:  MOVWF  x11
05DE6:  MOVLB  0
05DE8:  CALL   1F52
....................          delay_ms(50);
05DEC:  MOVLW  32
05DEE:  MOVLB  7
05DF0:  MOVWF  x10
05DF2:  MOVLB  0
05DF4:  CALL   07CC
....................         
....................         fprintf(CH2,SMS_Massage4); 
05DF8:  MOVLW  05
05DFA:  MOVWF  FEA
05DFC:  MOVLW  F8
05DFE:  MOVWF  FE9
05E00:  CALL   448E
....................         putc('\n',CH2);
05E04:  MOVLW  0A
05E06:  MOVLB  7
05E08:  MOVWF  x11
05E0A:  MOVLB  0
05E0C:  CALL   1F52
....................        putc(26,CH2);
05E10:  MOVLW  1A
05E12:  MOVLB  7
05E14:  MOVWF  x11
05E16:  MOVLB  0
05E18:  CALL   1F52
05E1C:  MOVLB  6
....................       }
....................    }
05E1E:  BRA    5EAA
....................    else if(FaultType.B4 == 0)
05E20:  MOVLB  6
05E22:  BTFSC  x9B.3
05E24:  BRA    5EAA
....................    {
....................       In2.B4 = 0x00;
05E26:  BCF    xA1.3
....................       Ack.B4 = 0;
05E28:  BCF    x9F.3
....................       Output.B4 = 1;      //Off LED
05E2A:  BSF    x99.3
....................       
....................       SendSMS.B4 =0;// Clear SMS
05E2C:  BCF    xA6.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
05E2E:  BTFSC  x9C.3
05E30:  BRA    5E36
05E32:  BTFSC  x9D.3
05E34:  BRA    5E58
05E36:  MOVLB  7
05E38:  MOVF   x04,F
05E3A:  BTFSC  FD8.2
05E3C:  BRA    5E42
05E3E:  MOVLB  6
05E40:  BRA    5E58
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05E42:  MOVLW  01
05E44:  MOVWF  x0F
05E46:  MOVLB  0
05E48:  CALL   44B4
05E4C:  DECFSZ 01,W
05E4E:  BRA    5E52
05E50:  BRA    5E56
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05E52:  BSF    F89.4
05E54:  BCF    F92.4
05E56:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
05E58:  BTFSS  x9C.3
05E5A:  BRA    5E60
05E5C:  BTFSC  x9D.3
05E5E:  BRA    5E82
05E60:  MOVLB  7
05E62:  MOVF   x04,F
05E64:  BTFSC  FD8.2
05E66:  BRA    5E6C
05E68:  MOVLB  6
05E6A:  BRA    5E82
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05E6C:  MOVLW  02
05E6E:  MOVWF  x0F
05E70:  MOVLB  0
05E72:  CALL   44B4
05E76:  DECFSZ 01,W
05E78:  BRA    5E7C
05E7A:  BRA    5E80
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05E7C:  BSF    F89.3
05E7E:  BCF    F92.3
05E80:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
05E82:  BTFSC  xA1.0
05E84:  BRA    5EAA
05E86:  BTFSC  xA1.1
05E88:  BRA    5EAA
05E8A:  BTFSC  xA1.2
05E8C:  BRA    5EAA
05E8E:  BTFSC  xA1.3
05E90:  BRA    5EAA
05E92:  BTFSC  xA1.4
05E94:  BRA    5EAA
05E96:  BTFSC  xA1.5
05E98:  BRA    5EAA
05E9A:  BTFSC  xA1.6
05E9C:  BRA    5EAA
05E9E:  BTFSC  xA1.7
05EA0:  BRA    5EAA
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05EA2:  BSF    F89.3
05EA4:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05EA6:  BSF    F89.4
05EA8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05EAA:  MOVLW  00
05EAC:  BTFSC  x98.4
05EAE:  MOVLW  01
05EB0:  MOVLB  7
05EB2:  MOVWF  x10
05EB4:  MOVLW  00
05EB6:  MOVLB  6
05EB8:  BTFSC  x9A.4
05EBA:  MOVLW  01
05EBC:  MOVLB  7
05EBE:  XORWF  x10,W
05EC0:  SUBLW  01
05EC2:  BNZ   5ECC
05EC4:  MOVLB  6
05EC6:  BTFSS  x9B.4
05EC8:  BRA    5ED2
05ECA:  MOVLB  7
05ECC:  BTFSS  1A.5
05ECE:  BRA    5FA2
05ED0:  MOVLB  6
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
05ED2:  BTFSC  xA1.4
05ED4:  BRA    5EF2
05ED6:  MOVLB  0
05ED8:  MOVF   x6A,W
05EDA:  SUBLW  0F
05EDC:  BTFSC  FD8.2
05EDE:  BRA    5EE4
05EE0:  MOVLB  6
05EE2:  BRA    5EF2
05EE4:  MOVLB  6
05EE6:  BTFSC  x9F.4
05EE8:  BRA    5EF2
....................       {
....................             TimeBase1s = 100 ;            //reload again
05EEA:  MOVLW  64
05EEC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05EEE:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B5 = 1;
05EF2:  BSF    xA1.4
....................       if(Ack.B5 == 0)
05EF4:  BTFSC  x9F.4
05EF6:  BRA    5F26
....................       {
....................          if(FlashingFlag == 0)
05EF8:  BTFSC  1A.1
05EFA:  BRA    5F00
....................             {
....................                Output.B5 = 0;           //Flash output1
05EFC:  BCF    x99.4
....................             }
05EFE:  BRA    5F02
....................             else
....................             {
....................                Output.B5 = 1;
05F00:  BSF    x99.4
....................             }
....................          if (~AutoTestFlag)
05F02:  BTFSC  1A.4
05F04:  BRA    5F26
....................          {
....................             if(AlarmIndicator.B5 == 1){
05F06:  BTFSS  x9E.4
05F08:  BRA    5F26
....................                 if(OutputBoth.B5 == 0)        //Both output
05F0A:  BTFSC  x9D.4
05F0C:  BRA    5F18
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05F0E:  BCF    F89.4
05F10:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05F12:  BCF    F89.3
05F14:  BCF    F92.3
....................                 }
05F16:  BRA    5F26
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,0);     //Buzzer
05F18:  BTFSS  x9C.4
05F1A:  BRA    5F22
05F1C:  BCF    F89.4
05F1E:  BCF    F92.4
05F20:  BRA    5F26
....................                   else output_bit(Pbell,0);                          //Bell
05F22:  BCF    F89.3
05F24:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05F26:  MOVLW  01
05F28:  MOVLB  7
05F2A:  MOVWF  x04
....................       
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05F2C:  MOVLB  6
05F2E:  BTFSC  xA6.4
05F30:  BRA    5FA0
05F32:  BTFSC  30.1
05F34:  BRA    5FA0
05F36:  BTFSC  x9F.4
05F38:  BRA    5FA0
....................       {
....................          SendSMS.B5 =1;
05F3A:  BSF    xA6.4
....................          fprintf(CH2,"AT+CMGS=\"");
05F3C:  MOVLW  9A
05F3E:  MOVWF  FF6
05F40:  MOVLW  07
05F42:  MOVWF  FF7
05F44:  MOVLB  0
05F46:  CALL   1F98
....................          fprintf(CH2,sms_phonenumber);
05F4A:  MOVLW  05
05F4C:  MOVWF  FEA
05F4E:  MOVLW  89
05F50:  MOVWF  FE9
05F52:  CALL   448E
....................          
....................          fprintf(CH2,"\"");
05F56:  MOVLW  22
05F58:  MOVLB  7
05F5A:  MOVWF  x11
05F5C:  MOVLB  0
05F5E:  CALL   1F52
....................          putc('\n',CH2);
05F62:  MOVLW  0A
05F64:  MOVLB  7
05F66:  MOVWF  x11
05F68:  MOVLB  0
05F6A:  CALL   1F52
....................          delay_ms(50);
05F6E:  MOVLW  32
05F70:  MOVLB  7
05F72:  MOVWF  x10
05F74:  MOVLB  0
05F76:  CALL   07CC
....................         
....................         fprintf(CH2,SMS_Massage5); 
05F7A:  MOVLW  06
05F7C:  MOVWF  FEA
05F7E:  MOVLW  18
05F80:  MOVWF  FE9
05F82:  CALL   448E
....................         putc('\n',CH2);
05F86:  MOVLW  0A
05F88:  MOVLB  7
05F8A:  MOVWF  x11
05F8C:  MOVLB  0
05F8E:  CALL   1F52
....................        putc(26,CH2);
05F92:  MOVLW  1A
05F94:  MOVLB  7
05F96:  MOVWF  x11
05F98:  MOVLB  0
05F9A:  CALL   1F52
05F9E:  MOVLB  6
....................       }
....................    }
05FA0:  BRA    602C
....................    else if(FaultType.B5 == 0)
05FA2:  MOVLB  6
05FA4:  BTFSC  x9B.4
05FA6:  BRA    602C
....................    {
....................       In2.B5 = 0x00;
05FA8:  BCF    xA1.4
....................       Ack.B5 = 0;
05FAA:  BCF    x9F.4
....................       Output.B5 = 1;      //Off LED
05FAC:  BSF    x99.4
....................       
....................       SendSMS.B5 =0;// Clear SMS
05FAE:  BCF    xA6.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
05FB0:  BTFSC  x9C.4
05FB2:  BRA    5FB8
05FB4:  BTFSC  x9D.4
05FB6:  BRA    5FDA
05FB8:  MOVLB  7
05FBA:  MOVF   x04,F
05FBC:  BTFSC  FD8.2
05FBE:  BRA    5FC4
05FC0:  MOVLB  6
05FC2:  BRA    5FDA
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05FC4:  MOVLW  01
05FC6:  MOVWF  x0F
05FC8:  MOVLB  0
05FCA:  CALL   44B4
05FCE:  DECFSZ 01,W
05FD0:  BRA    5FD4
05FD2:  BRA    5FD8
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05FD4:  BSF    F89.4
05FD6:  BCF    F92.4
05FD8:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
05FDA:  BTFSS  x9C.4
05FDC:  BRA    5FE2
05FDE:  BTFSC  x9D.4
05FE0:  BRA    6004
05FE2:  MOVLB  7
05FE4:  MOVF   x04,F
05FE6:  BTFSC  FD8.2
05FE8:  BRA    5FEE
05FEA:  MOVLB  6
05FEC:  BRA    6004
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05FEE:  MOVLW  02
05FF0:  MOVWF  x0F
05FF2:  MOVLB  0
05FF4:  CALL   44B4
05FF8:  DECFSZ 01,W
05FFA:  BRA    5FFE
05FFC:  BRA    6002
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05FFE:  BSF    F89.3
06000:  BCF    F92.3
06002:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06004:  BTFSC  xA1.0
06006:  BRA    602C
06008:  BTFSC  xA1.1
0600A:  BRA    602C
0600C:  BTFSC  xA1.2
0600E:  BRA    602C
06010:  BTFSC  xA1.3
06012:  BRA    602C
06014:  BTFSC  xA1.4
06016:  BRA    602C
06018:  BTFSC  xA1.5
0601A:  BRA    602C
0601C:  BTFSC  xA1.6
0601E:  BRA    602C
06020:  BTFSC  xA1.7
06022:  BRA    602C
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
06024:  BSF    F89.3
06026:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
06028:  BSF    F89.4
0602A:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0602C:  MOVLW  00
0602E:  BTFSC  x98.5
06030:  MOVLW  01
06032:  MOVLB  7
06034:  MOVWF  x10
06036:  MOVLW  00
06038:  MOVLB  6
0603A:  BTFSC  x9A.5
0603C:  MOVLW  01
0603E:  MOVLB  7
06040:  XORWF  x10,W
06042:  SUBLW  01
06044:  BNZ   604E
06046:  MOVLB  6
06048:  BTFSS  x9B.5
0604A:  BRA    6054
0604C:  MOVLB  7
0604E:  BTFSS  1A.5
06050:  BRA    6124
06052:  MOVLB  6
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
06054:  BTFSC  xA1.5
06056:  BRA    6074
06058:  MOVLB  0
0605A:  MOVF   x6A,W
0605C:  SUBLW  0F
0605E:  BTFSC  FD8.2
06060:  BRA    6066
06062:  MOVLB  6
06064:  BRA    6074
06066:  MOVLB  6
06068:  BTFSC  x9F.5
0606A:  BRA    6074
....................       {
....................             TimeBase1s = 100 ;            //reload again
0606C:  MOVLW  64
0606E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06070:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B6 = 1;
06074:  BSF    xA1.5
....................       if(Ack.B6 == 0)
06076:  BTFSC  x9F.5
06078:  BRA    60A8
....................       {
....................          if(FlashingFlag == 0)
0607A:  BTFSC  1A.1
0607C:  BRA    6082
....................             {
....................                Output.B6 = 0;           //Flash output1
0607E:  BCF    x99.5
....................             }
06080:  BRA    6084
....................             else
....................             {
....................                Output.B6 = 1;
06082:  BSF    x99.5
....................             }
....................          if (~AutoTestFlag)
06084:  BTFSC  1A.4
06086:  BRA    60A8
....................          {
....................             if(AlarmIndicator.B6 == 1){
06088:  BTFSS  x9E.5
0608A:  BRA    60A8
....................                 if(OutputBoth.B6 == 0)        //Both output
0608C:  BTFSC  x9D.5
0608E:  BRA    609A
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
06090:  BCF    F89.4
06092:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
06094:  BCF    F89.3
06096:  BCF    F92.3
....................                 }
06098:  BRA    60A8
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,0);     //Buzzer
0609A:  BTFSS  x9C.5
0609C:  BRA    60A4
0609E:  BCF    F89.4
060A0:  BCF    F92.4
060A2:  BRA    60A8
....................                   else output_bit(Pbell,0);                          //Bell
060A4:  BCF    F89.3
060A6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
060A8:  MOVLW  01
060AA:  MOVLB  7
060AC:  MOVWF  x04
....................       
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
060AE:  MOVLB  6
060B0:  BTFSC  xA6.5
060B2:  BRA    6122
060B4:  BTFSC  30.1
060B6:  BRA    6122
060B8:  BTFSC  x9F.5
060BA:  BRA    6122
....................       {
....................          SendSMS.B6 =1;
060BC:  BSF    xA6.5
....................          fprintf(CH2,"AT+CMGS=\"");
060BE:  MOVLW  A4
060C0:  MOVWF  FF6
060C2:  MOVLW  07
060C4:  MOVWF  FF7
060C6:  MOVLB  0
060C8:  CALL   1F98
....................          fprintf(CH2,sms_phonenumber);
060CC:  MOVLW  05
060CE:  MOVWF  FEA
060D0:  MOVLW  89
060D2:  MOVWF  FE9
060D4:  CALL   448E
....................          
....................          fprintf(CH2,"\"");
060D8:  MOVLW  22
060DA:  MOVLB  7
060DC:  MOVWF  x11
060DE:  MOVLB  0
060E0:  CALL   1F52
....................          putc('\n',CH2);
060E4:  MOVLW  0A
060E6:  MOVLB  7
060E8:  MOVWF  x11
060EA:  MOVLB  0
060EC:  CALL   1F52
....................          delay_ms(50);
060F0:  MOVLW  32
060F2:  MOVLB  7
060F4:  MOVWF  x10
060F6:  MOVLB  0
060F8:  CALL   07CC
....................         
....................         fprintf(CH2,SMS_Massage6);  
060FC:  MOVLW  06
060FE:  MOVWF  FEA
06100:  MOVLW  38
06102:  MOVWF  FE9
06104:  CALL   448E
....................         putc('\n',CH2);
06108:  MOVLW  0A
0610A:  MOVLB  7
0610C:  MOVWF  x11
0610E:  MOVLB  0
06110:  CALL   1F52
....................        putc(26,CH2);
06114:  MOVLW  1A
06116:  MOVLB  7
06118:  MOVWF  x11
0611A:  MOVLB  0
0611C:  CALL   1F52
06120:  MOVLB  6
....................       }
....................    }
06122:  BRA    61AE
....................    else if(FaultType.B6 == 0)
06124:  MOVLB  6
06126:  BTFSC  x9B.5
06128:  BRA    61AE
....................    {
....................       In2.B6 = 0x00;
0612A:  BCF    xA1.5
....................       Ack.B6 = 0;
0612C:  BCF    x9F.5
....................       Output.B6 = 1;      //Off LED
0612E:  BSF    x99.5
....................       
....................       SendSMS.B6 =0;// Clear SMS
06130:  BCF    xA6.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
06132:  BTFSC  x9C.5
06134:  BRA    613A
06136:  BTFSC  x9D.5
06138:  BRA    615C
0613A:  MOVLB  7
0613C:  MOVF   x04,F
0613E:  BTFSC  FD8.2
06140:  BRA    6146
06142:  MOVLB  6
06144:  BRA    615C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
06146:  MOVLW  01
06148:  MOVWF  x0F
0614A:  MOVLB  0
0614C:  CALL   44B4
06150:  DECFSZ 01,W
06152:  BRA    6156
06154:  BRA    615A
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06156:  BSF    F89.4
06158:  BCF    F92.4
0615A:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
0615C:  BTFSS  x9C.5
0615E:  BRA    6164
06160:  BTFSC  x9D.5
06162:  BRA    6186
06164:  MOVLB  7
06166:  MOVF   x04,F
06168:  BTFSC  FD8.2
0616A:  BRA    6170
0616C:  MOVLB  6
0616E:  BRA    6186
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06170:  MOVLW  02
06172:  MOVWF  x0F
06174:  MOVLB  0
06176:  CALL   44B4
0617A:  DECFSZ 01,W
0617C:  BRA    6180
0617E:  BRA    6184
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
06180:  BSF    F89.3
06182:  BCF    F92.3
06184:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06186:  BTFSC  xA1.0
06188:  BRA    61AE
0618A:  BTFSC  xA1.1
0618C:  BRA    61AE
0618E:  BTFSC  xA1.2
06190:  BRA    61AE
06192:  BTFSC  xA1.3
06194:  BRA    61AE
06196:  BTFSC  xA1.4
06198:  BRA    61AE
0619A:  BTFSC  xA1.5
0619C:  BRA    61AE
0619E:  BTFSC  xA1.6
061A0:  BRA    61AE
061A2:  BTFSC  xA1.7
061A4:  BRA    61AE
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
061A6:  BSF    F89.3
061A8:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
061AA:  BSF    F89.4
061AC:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
061AE:  MOVLW  00
061B0:  BTFSC  x98.6
061B2:  MOVLW  01
061B4:  MOVLB  7
061B6:  MOVWF  x10
061B8:  MOVLW  00
061BA:  MOVLB  6
061BC:  BTFSC  x9A.6
061BE:  MOVLW  01
061C0:  MOVLB  7
061C2:  XORWF  x10,W
061C4:  SUBLW  01
061C6:  BNZ   61D0
061C8:  MOVLB  6
061CA:  BTFSS  x9B.6
061CC:  BRA    61D6
061CE:  MOVLB  7
061D0:  BTFSS  1A.5
061D2:  BRA    62A6
061D4:  MOVLB  6
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
061D6:  BTFSC  xA1.6
061D8:  BRA    61F6
061DA:  MOVLB  0
061DC:  MOVF   x6A,W
061DE:  SUBLW  0F
061E0:  BTFSC  FD8.2
061E2:  BRA    61E8
061E4:  MOVLB  6
061E6:  BRA    61F6
061E8:  MOVLB  6
061EA:  BTFSC  x9F.6
061EC:  BRA    61F6
....................       {
....................             TimeBase1s = 100 ;            //reload again
061EE:  MOVLW  64
061F0:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
061F2:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B7 = 1;
061F6:  BSF    xA1.6
....................       if(Ack.B7 == 0)
061F8:  BTFSC  x9F.6
061FA:  BRA    622A
....................       {
....................          if(FlashingFlag == 0)
061FC:  BTFSC  1A.1
061FE:  BRA    6204
....................             {
....................                Output.B7 = 0;           //Flash output1
06200:  BCF    x99.6
....................             }
06202:  BRA    6206
....................             else
....................             {
....................                Output.B7 = 1;
06204:  BSF    x99.6
....................             }
....................          if (~AutoTestFlag)
06206:  BTFSC  1A.4
06208:  BRA    622A
....................          {
....................             if(AlarmIndicator.B7 == 1){
0620A:  BTFSS  x9E.6
0620C:  BRA    622A
....................                 if(OutputBoth.B7 == 0)        //Both output
0620E:  BTFSC  x9D.6
06210:  BRA    621C
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
06212:  BCF    F89.4
06214:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
06216:  BCF    F89.3
06218:  BCF    F92.3
....................                 }
0621A:  BRA    622A
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,0);     //Buzzer
0621C:  BTFSS  x9C.6
0621E:  BRA    6226
06220:  BCF    F89.4
06222:  BCF    F92.4
06224:  BRA    622A
....................                   else output_bit(Pbell,0);                          //Bell
06226:  BCF    F89.3
06228:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0622A:  MOVLW  01
0622C:  MOVLB  7
0622E:  MOVWF  x04
....................       
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
06230:  MOVLB  6
06232:  BTFSC  xA6.6
06234:  BRA    62A4
06236:  BTFSC  30.1
06238:  BRA    62A4
0623A:  BTFSC  x9F.6
0623C:  BRA    62A4
....................       {
....................          SendSMS.B7 =1;
0623E:  BSF    xA6.6
....................          fprintf(CH2,"AT+CMGS=\"");
06240:  MOVLW  AE
06242:  MOVWF  FF6
06244:  MOVLW  07
06246:  MOVWF  FF7
06248:  MOVLB  0
0624A:  CALL   1F98
....................          fprintf(CH2,sms_phonenumber);
0624E:  MOVLW  05
06250:  MOVWF  FEA
06252:  MOVLW  89
06254:  MOVWF  FE9
06256:  CALL   448E
....................          
....................          fprintf(CH2,"\"");
0625A:  MOVLW  22
0625C:  MOVLB  7
0625E:  MOVWF  x11
06260:  MOVLB  0
06262:  CALL   1F52
....................          putc('\n',CH2);
06266:  MOVLW  0A
06268:  MOVLB  7
0626A:  MOVWF  x11
0626C:  MOVLB  0
0626E:  CALL   1F52
....................          delay_ms(50);
06272:  MOVLW  32
06274:  MOVLB  7
06276:  MOVWF  x10
06278:  MOVLB  0
0627A:  CALL   07CC
....................         
....................         fprintf(CH2,SMS_Massage7);  
0627E:  MOVLW  06
06280:  MOVWF  FEA
06282:  MOVLW  58
06284:  MOVWF  FE9
06286:  CALL   448E
....................         putc('\n',CH2);
0628A:  MOVLW  0A
0628C:  MOVLB  7
0628E:  MOVWF  x11
06290:  MOVLB  0
06292:  CALL   1F52
....................        putc(26,CH2);
06296:  MOVLW  1A
06298:  MOVLB  7
0629A:  MOVWF  x11
0629C:  MOVLB  0
0629E:  CALL   1F52
062A2:  MOVLB  6
....................       }
....................    }
062A4:  BRA    6330
....................    else if(FaultType.B7 == 0)
062A6:  MOVLB  6
062A8:  BTFSC  x9B.6
062AA:  BRA    6330
....................    {
....................       In2.B7 = 0x00;
062AC:  BCF    xA1.6
....................       Ack.B7 = 0;
062AE:  BCF    x9F.6
....................       Output.B7 = 1;      //Off LED
062B0:  BSF    x99.6
....................       
....................       SendSMS.B7 =0;// Clear SMS
062B2:  BCF    xA6.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
062B4:  BTFSC  x9C.6
062B6:  BRA    62BC
062B8:  BTFSC  x9D.6
062BA:  BRA    62DE
062BC:  MOVLB  7
062BE:  MOVF   x04,F
062C0:  BTFSC  FD8.2
062C2:  BRA    62C8
062C4:  MOVLB  6
062C6:  BRA    62DE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
062C8:  MOVLW  01
062CA:  MOVWF  x0F
062CC:  MOVLB  0
062CE:  CALL   44B4
062D2:  DECFSZ 01,W
062D4:  BRA    62D8
062D6:  BRA    62DC
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
062D8:  BSF    F89.4
062DA:  BCF    F92.4
062DC:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
062DE:  BTFSS  x9C.6
062E0:  BRA    62E6
062E2:  BTFSC  x9D.6
062E4:  BRA    6308
062E6:  MOVLB  7
062E8:  MOVF   x04,F
062EA:  BTFSC  FD8.2
062EC:  BRA    62F2
062EE:  MOVLB  6
062F0:  BRA    6308
....................       {
....................          if(CheckAutoReset(0x02) == 1);
062F2:  MOVLW  02
062F4:  MOVWF  x0F
062F6:  MOVLB  0
062F8:  CALL   44B4
062FC:  DECFSZ 01,W
062FE:  BRA    6302
06300:  BRA    6306
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
06302:  BSF    F89.3
06304:  BCF    F92.3
06306:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06308:  BTFSC  xA1.0
0630A:  BRA    6330
0630C:  BTFSC  xA1.1
0630E:  BRA    6330
06310:  BTFSC  xA1.2
06312:  BRA    6330
06314:  BTFSC  xA1.3
06316:  BRA    6330
06318:  BTFSC  xA1.4
0631A:  BRA    6330
0631C:  BTFSC  xA1.5
0631E:  BRA    6330
06320:  BTFSC  xA1.6
06322:  BRA    6330
06324:  BTFSC  xA1.7
06326:  BRA    6330
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
06328:  BSF    F89.3
0632A:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
0632C:  BSF    F89.4
0632E:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
06330:  MOVLW  00
06332:  BTFSC  x98.7
06334:  MOVLW  01
06336:  MOVLB  7
06338:  MOVWF  x10
0633A:  MOVLW  00
0633C:  MOVLB  6
0633E:  BTFSC  x9A.7
06340:  MOVLW  01
06342:  MOVLB  7
06344:  XORWF  x10,W
06346:  SUBLW  01
06348:  BNZ   6352
0634A:  MOVLB  6
0634C:  BTFSS  x9B.7
0634E:  BRA    6358
06350:  MOVLB  7
06352:  BTFSS  1A.5
06354:  BRA    6428
06356:  MOVLB  6
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
06358:  BTFSC  xA1.7
0635A:  BRA    6378
0635C:  MOVLB  0
0635E:  MOVF   x6A,W
06360:  SUBLW  0F
06362:  BTFSC  FD8.2
06364:  BRA    636A
06366:  MOVLB  6
06368:  BRA    6378
0636A:  MOVLB  6
0636C:  BTFSC  x9F.7
0636E:  BRA    6378
....................       {
....................             TimeBase1s = 100 ;            //reload again
06370:  MOVLW  64
06372:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06374:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B8 = 1;
06378:  BSF    xA1.7
....................       if(Ack.B8 == 0)
0637A:  BTFSC  x9F.7
0637C:  BRA    63AC
....................       {
....................          if(FlashingFlag == 0)
0637E:  BTFSC  1A.1
06380:  BRA    6386
....................             {
....................                Output.B8 = 0;           //Flash output1
06382:  BCF    x99.7
....................             }
06384:  BRA    6388
....................             else
....................             {
....................                Output.B8 = 1;
06386:  BSF    x99.7
....................             }
....................          if (~AutoTestFlag)
06388:  BTFSC  1A.4
0638A:  BRA    63AC
....................          {
....................             if(AlarmIndicator.B8 == 1){
0638C:  BTFSS  x9E.7
0638E:  BRA    63AC
....................                 if(OutputBoth.B8 == 0)        //Both output
06390:  BTFSC  x9D.7
06392:  BRA    639E
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
06394:  BCF    F89.4
06396:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
06398:  BCF    F89.3
0639A:  BCF    F92.3
....................                 }
0639C:  BRA    63AC
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,0);     //Buzzer
0639E:  BTFSS  x9C.7
063A0:  BRA    63A8
063A2:  BCF    F89.4
063A4:  BCF    F92.4
063A6:  BRA    63AC
....................                   else output_bit(Pbell,0);                          //Bell
063A8:  BCF    F89.3
063AA:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
063AC:  MOVLW  01
063AE:  MOVLB  7
063B0:  MOVWF  x04
....................       
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
063B2:  MOVLB  6
063B4:  BTFSC  xA6.7
063B6:  BRA    6426
063B8:  BTFSC  30.1
063BA:  BRA    6426
063BC:  BTFSC  x9F.7
063BE:  BRA    6426
....................       {
....................          SendSMS.B8 =1;
063C0:  BSF    xA6.7
....................          fprintf(CH2,"AT+CMGS=\"");
063C2:  MOVLW  B8
063C4:  MOVWF  FF6
063C6:  MOVLW  07
063C8:  MOVWF  FF7
063CA:  MOVLB  0
063CC:  CALL   1F98
....................          fprintf(CH2,sms_phonenumber);
063D0:  MOVLW  05
063D2:  MOVWF  FEA
063D4:  MOVLW  89
063D6:  MOVWF  FE9
063D8:  CALL   448E
....................          
....................          fprintf(CH2,"\"");
063DC:  MOVLW  22
063DE:  MOVLB  7
063E0:  MOVWF  x11
063E2:  MOVLB  0
063E4:  CALL   1F52
....................          putc('\n',CH2);
063E8:  MOVLW  0A
063EA:  MOVLB  7
063EC:  MOVWF  x11
063EE:  MOVLB  0
063F0:  CALL   1F52
....................          delay_ms(50);
063F4:  MOVLW  32
063F6:  MOVLB  7
063F8:  MOVWF  x10
063FA:  MOVLB  0
063FC:  CALL   07CC
....................         
....................         fprintf(CH2,SMS_Massage8);   
06400:  MOVLW  06
06402:  MOVWF  FEA
06404:  MOVLW  78
06406:  MOVWF  FE9
06408:  CALL   448E
....................         putc('\n',CH2);
0640C:  MOVLW  0A
0640E:  MOVLB  7
06410:  MOVWF  x11
06412:  MOVLB  0
06414:  CALL   1F52
....................         putc(26,CH2);
06418:  MOVLW  1A
0641A:  MOVLB  7
0641C:  MOVWF  x11
0641E:  MOVLB  0
06420:  CALL   1F52
06424:  MOVLB  6
....................       }
....................    }
06426:  BRA    64B2
....................    else if(FaultType.B8 == 0)
06428:  MOVLB  6
0642A:  BTFSC  x9B.7
0642C:  BRA    64B2
....................    {
....................       In2.B8 = 0x00;
0642E:  BCF    xA1.7
....................       Ack.B8 = 0;
06430:  BCF    x9F.7
....................       Output.B8 = 1;      //Off LED
06432:  BSF    x99.7
....................       
....................       SendSMS.B8 =0;// Clear SMS
06434:  BCF    xA6.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
06436:  BTFSC  x9C.7
06438:  BRA    643E
0643A:  BTFSC  x9D.7
0643C:  BRA    6460
0643E:  MOVLB  7
06440:  MOVF   x04,F
06442:  BTFSC  FD8.2
06444:  BRA    644A
06446:  MOVLB  6
06448:  BRA    6460
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0644A:  MOVLW  01
0644C:  MOVWF  x0F
0644E:  MOVLB  0
06450:  CALL   44B4
06454:  DECFSZ 01,W
06456:  BRA    645A
06458:  BRA    645E
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
0645A:  BSF    F89.4
0645C:  BCF    F92.4
0645E:  MOVLB  6
....................          }
....................       }
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
06460:  BTFSS  x9C.7
06462:  BRA    6468
06464:  BTFSC  x9D.7
06466:  BRA    648A
06468:  MOVLB  7
0646A:  MOVF   x04,F
0646C:  BTFSC  FD8.2
0646E:  BRA    6474
06470:  MOVLB  6
06472:  BRA    648A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06474:  MOVLW  02
06476:  MOVWF  x0F
06478:  MOVLB  0
0647A:  CALL   44B4
0647E:  DECFSZ 01,W
06480:  BRA    6484
06482:  BRA    6488
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
06484:  BSF    F89.3
06486:  BCF    F92.3
06488:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
0648A:  BTFSC  xA1.0
0648C:  BRA    64B2
0648E:  BTFSC  xA1.1
06490:  BRA    64B2
06492:  BTFSC  xA1.2
06494:  BRA    64B2
06496:  BTFSC  xA1.3
06498:  BRA    64B2
0649A:  BTFSC  xA1.4
0649C:  BRA    64B2
0649E:  BTFSC  xA1.5
064A0:  BRA    64B2
064A2:  BTFSC  xA1.6
064A4:  BRA    64B2
064A6:  BTFSC  xA1.7
064A8:  BRA    64B2
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
064AA:  BSF    F89.3
064AC:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
064AE:  BSF    F89.4
064B0:  BCF    F92.4
....................       }
....................    }
064B2:  MOVLB  0
064B4:  RETURN 0
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////   
....................    
.................... 
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
01D78:  CLRF   4E
....................     Red8_8 = 0;
01D7A:  CLRF   4F
....................     //Red9_15 = 0;
....................     //Red16_16 = 0;
.................... 
....................     Green1_7 = 0;
01D7C:  CLRF   52
....................     Green8_8 = 0;
01D7E:  CLRF   53
....................     //Green9_15 = 0;
....................     //Green16_16 = 0;
.................... 
....................    if(T_test == 0x00)
01D80:  MOVF   2F,F
01D82:  BTFSS  FD8.2
01D84:  BRA    1F50
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
01D86:  MOVLB  6
01D88:  BTFSS  x99.0
01D8A:  BRA    1D92
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
01D8C:  BCF    4E.1
01D8E:  BCF    52.1
....................            }
01D90:  BRA    1DBA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
01D92:  BTFSS  xA4.0
01D94:  BRA    1DA0
01D96:  BTFSC  xA5.0
01D98:  BRA    1DA0
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
01D9A:  BSF    4E.1
01D9C:  BCF    52.1
....................              }
01D9E:  BRA    1DBA
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
01DA0:  BTFSC  xA4.0
01DA2:  BRA    1DAE
01DA4:  BTFSS  xA5.0
01DA6:  BRA    1DAE
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
01DA8:  BCF    4E.1
01DAA:  BSF    52.1
....................              }
01DAC:  BRA    1DBA
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
01DAE:  BTFSS  xA4.0
01DB0:  BRA    1DBA
01DB2:  BTFSS  xA5.0
01DB4:  BRA    1DBA
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
01DB6:  BSF    4E.1
01DB8:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
01DBA:  BTFSS  x99.1
01DBC:  BRA    1DC4
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
01DBE:  BCF    4E.2
01DC0:  BCF    52.2
....................            }
01DC2:  BRA    1DEC
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
01DC4:  BTFSS  xA4.1
01DC6:  BRA    1DD2
01DC8:  BTFSC  xA5.1
01DCA:  BRA    1DD2
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
01DCC:  BSF    4E.2
01DCE:  BCF    52.2
....................              }
01DD0:  BRA    1DEC
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
01DD2:  BTFSC  xA4.1
01DD4:  BRA    1DE0
01DD6:  BTFSS  xA5.1
01DD8:  BRA    1DE0
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
01DDA:  BCF    4E.2
01DDC:  BSF    52.2
....................              }
01DDE:  BRA    1DEC
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
01DE0:  BTFSS  xA4.1
01DE2:  BRA    1DEC
01DE4:  BTFSS  xA5.1
01DE6:  BRA    1DEC
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
01DE8:  BSF    4E.2
01DEA:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
01DEC:  BTFSS  x99.2
01DEE:  BRA    1DF6
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
01DF0:  BCF    4E.3
01DF2:  BCF    52.3
....................            }
01DF4:  BRA    1E1E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
01DF6:  BTFSS  xA4.2
01DF8:  BRA    1E04
01DFA:  BTFSC  xA5.2
01DFC:  BRA    1E04
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
01DFE:  BSF    4E.3
01E00:  BCF    52.3
....................              }
01E02:  BRA    1E1E
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
01E04:  BTFSC  xA4.2
01E06:  BRA    1E12
01E08:  BTFSS  xA5.2
01E0A:  BRA    1E12
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
01E0C:  BCF    4E.3
01E0E:  BSF    52.3
....................              }
01E10:  BRA    1E1E
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
01E12:  BTFSS  xA4.2
01E14:  BRA    1E1E
01E16:  BTFSS  xA5.2
01E18:  BRA    1E1E
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
01E1A:  BSF    4E.3
01E1C:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
01E1E:  BTFSS  x99.3
01E20:  BRA    1E28
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
01E22:  BCF    4E.4
01E24:  BCF    52.4
....................            }
01E26:  BRA    1E50
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
01E28:  BTFSS  xA4.3
01E2A:  BRA    1E36
01E2C:  BTFSC  xA5.3
01E2E:  BRA    1E36
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
01E30:  BSF    4E.4
01E32:  BCF    52.4
....................              }
01E34:  BRA    1E50
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
01E36:  BTFSC  xA4.3
01E38:  BRA    1E44
01E3A:  BTFSS  xA5.3
01E3C:  BRA    1E44
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
01E3E:  BCF    4E.4
01E40:  BSF    52.4
....................              }
01E42:  BRA    1E50
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
01E44:  BTFSS  xA4.3
01E46:  BRA    1E50
01E48:  BTFSS  xA5.3
01E4A:  BRA    1E50
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
01E4C:  BSF    4E.4
01E4E:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
01E50:  BTFSS  x99.4
01E52:  BRA    1E5A
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
01E54:  BCF    4E.5
01E56:  BCF    52.5
....................            }
01E58:  BRA    1E82
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
01E5A:  BTFSS  xA4.4
01E5C:  BRA    1E68
01E5E:  BTFSC  xA5.4
01E60:  BRA    1E68
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
01E62:  BSF    4E.5
01E64:  BCF    52.5
....................              }
01E66:  BRA    1E82
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
01E68:  BTFSC  xA4.4
01E6A:  BRA    1E76
01E6C:  BTFSS  xA5.4
01E6E:  BRA    1E76
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
01E70:  BCF    4E.5
01E72:  BSF    52.5
....................              }
01E74:  BRA    1E82
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
01E76:  BTFSS  xA4.4
01E78:  BRA    1E82
01E7A:  BTFSS  xA5.4
01E7C:  BRA    1E82
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
01E7E:  BSF    4E.5
01E80:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
01E82:  BTFSS  x99.5
01E84:  BRA    1E8C
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
01E86:  BCF    4E.6
01E88:  BCF    52.6
....................            }
01E8A:  BRA    1EB4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
01E8C:  BTFSS  xA4.5
01E8E:  BRA    1E9A
01E90:  BTFSC  xA5.5
01E92:  BRA    1E9A
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
01E94:  BSF    4E.6
01E96:  BCF    52.6
....................              }
01E98:  BRA    1EB4
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
01E9A:  BTFSC  xA4.5
01E9C:  BRA    1EA8
01E9E:  BTFSS  xA5.5
01EA0:  BRA    1EA8
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
01EA2:  BCF    4E.6
01EA4:  BSF    52.6
....................              }
01EA6:  BRA    1EB4
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
01EA8:  BTFSS  xA4.5
01EAA:  BRA    1EB4
01EAC:  BTFSS  xA5.5
01EAE:  BRA    1EB4
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
01EB0:  BSF    4E.6
01EB2:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
01EB4:  BTFSS  x99.6
01EB6:  BRA    1EBE
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
01EB8:  BCF    4E.7
01EBA:  BCF    52.7
....................            }
01EBC:  BRA    1EE6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
01EBE:  BTFSS  xA4.6
01EC0:  BRA    1ECC
01EC2:  BTFSC  xA5.6
01EC4:  BRA    1ECC
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
01EC6:  BSF    4E.7
01EC8:  BCF    52.7
....................              }
01ECA:  BRA    1EE6
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
01ECC:  BTFSC  xA4.6
01ECE:  BRA    1EDA
01ED0:  BTFSS  xA5.6
01ED2:  BRA    1EDA
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
01ED4:  BCF    4E.7
01ED6:  BSF    52.7
....................              }
01ED8:  BRA    1EE6
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
01EDA:  BTFSS  xA4.6
01EDC:  BRA    1EE6
01EDE:  BTFSS  xA5.6
01EE0:  BRA    1EE6
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
01EE2:  BSF    4E.7
01EE4:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
01EE6:  BTFSS  x99.7
01EE8:  BRA    1EF0
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
01EEA:  BCF    4F.0
01EEC:  BCF    53.0
....................            }
01EEE:  BRA    1F18
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
01EF0:  BTFSS  xA4.7
01EF2:  BRA    1EFE
01EF4:  BTFSC  xA5.7
01EF6:  BRA    1EFE
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
01EF8:  BSF    4F.0
01EFA:  BCF    53.0
....................              }
01EFC:  BRA    1F18
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
01EFE:  BTFSC  xA4.7
01F00:  BRA    1F0C
01F02:  BTFSS  xA5.7
01F04:  BRA    1F0C
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
01F06:  BCF    4F.0
01F08:  BSF    53.0
....................              }
01F0A:  BRA    1F18
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
01F0C:  BTFSS  xA4.7
01F0E:  BRA    1F18
01F10:  BTFSS  xA5.7
01F12:  BRA    1F18
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
01F14:  BSF    4F.0
01F16:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
.................... 
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
01F18:  MOVLW  04
01F1A:  MOVLB  7
01F1C:  MOVWF  x0F
01F1E:  MOVFF  4E,710
01F22:  MOVLB  0
01F24:  RCALL  1D4C
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
01F26:  MOVLW  04
01F28:  MOVLB  7
01F2A:  MOVWF  x0F
01F2C:  MOVFF  4F,710
01F30:  MOVLB  0
01F32:  RCALL  1D62
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
01F34:  MOVLW  06
01F36:  MOVLB  7
01F38:  MOVWF  x0F
01F3A:  MOVFF  52,710
01F3E:  MOVLB  0
01F40:  RCALL  1D4C
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
01F42:  MOVLW  06
01F44:  MOVLB  7
01F46:  MOVWF  x0F
01F48:  MOVFF  53,710
01F4C:  MOVLB  0
01F4E:  RCALL  1D62
....................            
.................... 
....................                                            
....................            
....................    }
01F50:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    In.B1 = 1;
*
04476:  MOVLB  6
04478:  BSF    xA0.0
....................    In.B2 = 1;
0447A:  BSF    xA0.1
....................    In.B3 = 1;
0447C:  BSF    xA0.2
....................    In.B4 = 1;
0447E:  BSF    xA0.3
....................    In.B5 = 1;
04480:  BSF    xA0.4
....................    In.B6 = 1;
04482:  BSF    xA0.5
....................    In.B7 = 1;
04484:  BSF    xA0.6
....................    In.B8 = 1;
04486:  BSF    xA0.7
04488:  MOVLB  0
0448A:  GOTO   6554 (RETURN)
....................       /*
....................       Inputt.B1 = ~InputType.B1;
....................       Inputt.B2 = ~InputType.B2;
....................       Inputt.B3 = ~InputType.B3;
....................       Inputt.B4 = ~InputType.B4;
....................       Inputt.B5 = ~InputType.B5;
....................       Inputt.B6 = ~InputType.B6;
....................       Inputt.B7 = ~InputType.B7;
....................       Inputt.B8 = ~InputType.B8;
....................       Ack.B1 = 0;
....................       Ack.B2 = 0;
....................       Ack.B3 = 0;
....................       Ack.B4 = 0;
....................       Ack.B5 = 0;
....................       Ack.B6 = 0;
....................       Ack.B7 = 0;
....................       Ack.B8 = 0;
....................       */
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
064B6:  MOVFF  32,707
....................    output_temp[1] = output9_16;
064BA:  MOVFF  33,708
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
064BE:  BSF    F94.2
064C0:  BTFSC  F82.2
064C2:  BRA    64C8
064C4:  BTFSS  1A.6
064C6:  BRA    64CC
064C8:  BTFSS  1A.4
064CA:  BRA    64D8
064CC:  MOVLW  32
064CE:  MOVLB  7
064D0:  MOVWF  x10
064D2:  MOVLB  0
064D4:  CALL   07CC
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
064D8:  BSF    F94.2
064DA:  BTFSC  F82.2
064DC:  BRA    64E2
064DE:  BTFSS  1A.6
064E0:  BRA    64E6
064E2:  BTFSS  1A.4
064E4:  BRA    653A
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
064E6:  BSF    F94.2
064E8:  BTFSC  F82.2
064EA:  BRA    64F0
064EC:  BTFSS  1A.6
064EE:  BRA    64F4
064F0:  BTFSS  1A.4
064F2:  BRA    6538
....................            {
....................              restart_wdt();
064F4:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
064F6:  MOVF   2F,F
064F8:  BNZ   64FE
064FA:  MOVLW  06
064FC:  MOVWF  2F
....................               Test = 1;
064FE:  BSF    1A.6
....................         
....................           IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
06500:  MOVLW  04
06502:  MOVLB  7
06504:  MOVWF  x0F
06506:  SETF   x10
06508:  MOVLB  0
0650A:  CALL   1D4C
....................           IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
0650E:  MOVLW  04
06510:  MOVLB  7
06512:  MOVWF  x0F
06514:  SETF   x10
06516:  MOVLB  0
06518:  CALL   1D62
....................                   
....................           IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
0651C:  MOVLW  06
0651E:  MOVLB  7
06520:  MOVWF  x0F
06522:  SETF   x10
06524:  MOVLB  0
06526:  CALL   1D4C
....................           IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
0652A:  MOVLW  06
0652C:  MOVLB  7
0652E:  MOVWF  x0F
06530:  SETF   x10
06532:  MOVLB  0
06534:  CALL   1D62
....................              
....................            }
....................          
....................        }
06538:  BRA    654A
....................        else if(input(Ptest) == 1 && Test == 1)
0653A:  BSF    F94.2
0653C:  BTFSS  F82.2
0653E:  BRA    654A
06540:  BTFSS  1A.6
06542:  BRA    654A
....................        {
....................            T_test = 0x00;
06544:  CLRF   2F
....................            Test = 0;
06546:  BCF    1A.6
....................            Test_fault = 0;
06548:  BCF    1A.5
....................        }
....................        if(Test_fault == 1)
0654A:  BTFSS  1A.5
0654C:  BRA    6562
....................        {
....................           functointest_f = 1;
0654E:  BSF    30.1
....................           ForceAllAlarm();
06550:  GOTO   4476
....................           Anal_Function();
06554:  CALL   49BC
....................           if(Input(Ptest) == 1)
06558:  BSF    F94.2
0655A:  BTFSS  F82.2
0655C:  BRA    6560
....................           {
....................             Test_fault = 0;
0655E:  BCF    1A.5
....................           }
....................        }
06560:  BRA    6578
....................        else if(input(Ptest) == 1 && Test == 1)
06562:  BSF    F94.2
06564:  BTFSS  F82.2
06566:  BRA    6578
06568:  BTFSS  1A.6
0656A:  BRA    6578
....................        {
....................           if(NoOfPoint >= 16)
0656C:  MOVF   x6D,W
0656E:  SUBLW  0F
06570:  BC    6572
....................           {
.................... 
....................           }
....................           
.................... 
....................           T_test = 0x00;
06572:  CLRF   2F
....................           Test = 0;
06574:  BCF    1A.6
....................           Test_fault = 0;
06576:  BCF    1A.5
....................        }
06578:  GOTO   6AAE (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
021C0:  BSF    F94.0
021C2:  BTFSC  F82.0
021C4:  BRA    21CA
021C6:  BTFSS  1A.7
021C8:  BRA    21CE
021CA:  BTFSS  1A.2
021CC:  BRA    21DA
021CE:  MOVLW  32
021D0:  MOVLB  7
021D2:  MOVWF  x10
021D4:  MOVLB  0
021D6:  CALL   07CC
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
021DA:  BSF    F94.0
021DC:  BTFSC  F82.0
021DE:  BRA    21E4
021E0:  BTFSS  1A.7
021E2:  BRA    21E8
021E4:  BTFSS  1A.2
021E6:  BRA    2292
....................    {
....................             AutoAckFlag = 0;
021E8:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
021EA:  CLRF   1D
.................... 
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
021EC:  MOVLB  6
021EE:  BTFSC  xA0.0
021F0:  BRA    21F6
021F2:  BTFSS  xA1.0
021F4:  BRA    2200
....................            {
....................              Ack.B1 = 1;
021F6:  BSF    x9F.0
....................              In.B1 = 0;
021F8:  BCF    xA0.0
....................              In2.B1 = 0;      //for auto reset
021FA:  BCF    xA1.0
....................              Output.B1 = 0;
021FC:  BCF    x99.0
....................              SendSMS.B1 =0;
021FE:  BCF    xA6.0
....................            }
.................... 
....................            if((In.B2 == 1)||(In2.B2 == 1))
02200:  BTFSC  xA0.1
02202:  BRA    2208
02204:  BTFSS  xA1.1
02206:  BRA    2212
....................            {
....................              Ack.B2 = 1;
02208:  BSF    x9F.1
....................              In.B2 = 0;
0220A:  BCF    xA0.1
....................              In2.B2 = 0;      //for auto reset
0220C:  BCF    xA1.1
....................              Output.B2 = 0;
0220E:  BCF    x99.1
....................              SendSMS.B2 =0;
02210:  BCF    xA6.1
....................            }
.................... 
....................            if((In.B3 == 1)||(In2.B3 == 1))
02212:  BTFSC  xA0.2
02214:  BRA    221A
02216:  BTFSS  xA1.2
02218:  BRA    2224
....................            {
....................              Ack.B3 = 1;
0221A:  BSF    x9F.2
....................              In.B3 = 0;
0221C:  BCF    xA0.2
....................              In2.B3 = 0;      //for auto reset
0221E:  BCF    xA1.2
....................              Output.B3 = 0;
02220:  BCF    x99.2
....................              SendSMS.B3 =0;
02222:  BCF    xA6.2
....................            }
.................... 
....................            if((In.B4 == 1)||(In2.B4 == 1))
02224:  BTFSC  xA0.3
02226:  BRA    222C
02228:  BTFSS  xA1.3
0222A:  BRA    2236
....................            {
....................              Ack.B4 = 1;
0222C:  BSF    x9F.3
....................              In.B4 = 0;
0222E:  BCF    xA0.3
....................              In2.B4 = 0;      //for auto reset
02230:  BCF    xA1.3
....................              Output.B4 = 0;
02232:  BCF    x99.3
....................              SendSMS.B4 =0;
02234:  BCF    xA6.3
....................            }
.................... 
....................            if((In.B5 == 1)||(In2.B5 == 1))
02236:  BTFSC  xA0.4
02238:  BRA    223E
0223A:  BTFSS  xA1.4
0223C:  BRA    2248
....................            {
....................              Ack.B5 = 1;
0223E:  BSF    x9F.4
....................              In.B5 = 0;
02240:  BCF    xA0.4
....................              In2.B5 = 0;      //for auto reset
02242:  BCF    xA1.4
....................              Output.B5 = 0;
02244:  BCF    x99.4
....................              SendSMS.B5 =0;
02246:  BCF    xA6.4
....................            }
.................... 
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
02248:  BTFSC  xA0.5
0224A:  BRA    2250
0224C:  BTFSS  xA1.5
0224E:  BRA    225A
....................            {
....................              Ack.B6 = 1;
02250:  BSF    x9F.5
....................              In.B6 = 0;
02252:  BCF    xA0.5
....................              In2.B6 = 0;      //for auto reset
02254:  BCF    xA1.5
....................              Output.B6 = 0;
02256:  BCF    x99.5
....................              SendSMS.B6 =0;
02258:  BCF    xA6.5
....................            }
.................... 
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
0225A:  BTFSC  xA0.6
0225C:  BRA    2262
0225E:  BTFSS  xA1.6
02260:  BRA    226C
....................            {
....................              Ack.B7 = 1;
02262:  BSF    x9F.6
....................              In.B7 = 0;
02264:  BCF    xA0.6
....................              In2.B7 = 0;      //for auto reset
02266:  BCF    xA1.6
....................              Output.B7 = 0;
02268:  BCF    x99.6
....................              SendSMS.B7 =0;
0226A:  BCF    xA6.6
....................            }
.................... 
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
0226C:  BTFSC  xA0.7
0226E:  BRA    2274
02270:  BTFSS  xA1.7
02272:  BRA    227E
....................            {
....................              Ack.B8 = 1;
02274:  BSF    x9F.7
....................              In.B8 = 0;
02276:  BCF    xA0.7
....................              In2.B8 = 0;      //for auto reset
02278:  BCF    xA1.7
....................              Output.B8 = 0;
0227A:  BCF    x99.7
....................              SendSMS.B8 =0;
0227C:  BCF    xA6.7
....................            }
....................       
....................             if(functointest_f){
0227E:  BTFSS  30.1
02280:  BRA    2284
....................                functointest_f = 0;
02282:  BCF    30.1
....................             }
....................             Ack_F = 1;
02284:  BSF    1A.7
....................             output_bit(Pbuzzer,1);   //Buzzer
02286:  BSF    F89.4
02288:  BCF    F92.4
....................             output_bit(Pbell,1);     //Bell
0228A:  BSF    F89.3
0228C:  BCF    F92.3
....................    }
0228E:  BRA    22A0
02290:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
02292:  BSF    F94.0
02294:  BTFSS  F82.0
02296:  BRA    229E
02298:  BTFSS  1A.7
0229A:  BRA    229E
....................    {
....................       Ack_F = 0;
0229C:  BCF    1A.7
0229E:  MOVLB  6
....................    }
022A0:  MOVLB  0
022A2:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
022A4:  BSF    F94.1
022A6:  BTFSC  F82.1
022A8:  BRA    22AE
022AA:  BTFSS  30.0
022AC:  BRA    22B2
022AE:  BTFSS  1A.3
022B0:  BRA    22BE
022B2:  MOVLW  32
022B4:  MOVLB  7
022B6:  MOVWF  x10
022B8:  MOVLB  0
022BA:  CALL   07CC
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
022BE:  BSF    F94.1
022C0:  BTFSC  F82.1
022C2:  BRA    22C8
022C4:  BTFSS  30.0
022C6:  BRA    22CC
022C8:  BTFSS  1A.3
022CA:  BRA    2414
....................     {
....................        AutoResetFlag = 0;
022CC:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
022CE:  MOVLW  00
022D0:  MOVLB  6
022D2:  BTFSC  x98.0
022D4:  MOVLW  01
022D6:  MOVLB  7
022D8:  MOVWF  x11
022DA:  MOVLW  00
022DC:  MOVLB  6
022DE:  BTFSC  x9A.0
022E0:  MOVLW  01
022E2:  MOVLB  7
022E4:  XORWF  x11,W
022E6:  BNZ   22F6
022E8:  MOVLB  6
022EA:  BTFSS  xA0.0
022EC:  BRA    22F2
022EE:  MOVLB  7
022F0:  BRA    22F6
022F2:  BSF    x99.0
022F4:  MOVLB  7
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
022F6:  MOVLW  00
022F8:  MOVLB  6
022FA:  BTFSC  x98.1
022FC:  MOVLW  01
022FE:  MOVLB  7
02300:  MOVWF  x11
02302:  MOVLW  00
02304:  MOVLB  6
02306:  BTFSC  x9A.1
02308:  MOVLW  01
0230A:  MOVLB  7
0230C:  XORWF  x11,W
0230E:  BNZ   231E
02310:  MOVLB  6
02312:  BTFSS  xA0.1
02314:  BRA    231A
02316:  MOVLB  7
02318:  BRA    231E
0231A:  BSF    x99.1
0231C:  MOVLB  7
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
0231E:  MOVLW  00
02320:  MOVLB  6
02322:  BTFSC  x98.2
02324:  MOVLW  01
02326:  MOVLB  7
02328:  MOVWF  x11
0232A:  MOVLW  00
0232C:  MOVLB  6
0232E:  BTFSC  x9A.2
02330:  MOVLW  01
02332:  MOVLB  7
02334:  XORWF  x11,W
02336:  BNZ   2346
02338:  MOVLB  6
0233A:  BTFSS  xA0.2
0233C:  BRA    2342
0233E:  MOVLB  7
02340:  BRA    2346
02342:  BSF    x99.2
02344:  MOVLB  7
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
02346:  MOVLW  00
02348:  MOVLB  6
0234A:  BTFSC  x98.3
0234C:  MOVLW  01
0234E:  MOVLB  7
02350:  MOVWF  x11
02352:  MOVLW  00
02354:  MOVLB  6
02356:  BTFSC  x9A.3
02358:  MOVLW  01
0235A:  MOVLB  7
0235C:  XORWF  x11,W
0235E:  BNZ   236E
02360:  MOVLB  6
02362:  BTFSS  xA0.3
02364:  BRA    236A
02366:  MOVLB  7
02368:  BRA    236E
0236A:  BSF    x99.3
0236C:  MOVLB  7
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
0236E:  MOVLW  00
02370:  MOVLB  6
02372:  BTFSC  x98.4
02374:  MOVLW  01
02376:  MOVLB  7
02378:  MOVWF  x11
0237A:  MOVLW  00
0237C:  MOVLB  6
0237E:  BTFSC  x9A.4
02380:  MOVLW  01
02382:  MOVLB  7
02384:  XORWF  x11,W
02386:  BNZ   2396
02388:  MOVLB  6
0238A:  BTFSS  xA0.4
0238C:  BRA    2392
0238E:  MOVLB  7
02390:  BRA    2396
02392:  BSF    x99.4
02394:  MOVLB  7
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
02396:  MOVLW  00
02398:  MOVLB  6
0239A:  BTFSC  x98.5
0239C:  MOVLW  01
0239E:  MOVLB  7
023A0:  MOVWF  x11
023A2:  MOVLW  00
023A4:  MOVLB  6
023A6:  BTFSC  x9A.5
023A8:  MOVLW  01
023AA:  MOVLB  7
023AC:  XORWF  x11,W
023AE:  BNZ   23BE
023B0:  MOVLB  6
023B2:  BTFSS  xA0.5
023B4:  BRA    23BA
023B6:  MOVLB  7
023B8:  BRA    23BE
023BA:  BSF    x99.5
023BC:  MOVLB  7
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
023BE:  MOVLW  00
023C0:  MOVLB  6
023C2:  BTFSC  x98.6
023C4:  MOVLW  01
023C6:  MOVLB  7
023C8:  MOVWF  x11
023CA:  MOVLW  00
023CC:  MOVLB  6
023CE:  BTFSC  x9A.6
023D0:  MOVLW  01
023D2:  MOVLB  7
023D4:  XORWF  x11,W
023D6:  BNZ   23E6
023D8:  MOVLB  6
023DA:  BTFSS  xA0.6
023DC:  BRA    23E2
023DE:  MOVLB  7
023E0:  BRA    23E6
023E2:  BSF    x99.6
023E4:  MOVLB  7
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
023E6:  MOVLW  00
023E8:  MOVLB  6
023EA:  BTFSC  x98.7
023EC:  MOVLW  01
023EE:  MOVLB  7
023F0:  MOVWF  x11
023F2:  MOVLW  00
023F4:  MOVLB  6
023F6:  BTFSC  x9A.7
023F8:  MOVLW  01
023FA:  MOVLB  7
023FC:  XORWF  x11,W
023FE:  BNZ   240E
02400:  MOVLB  6
02402:  BTFSS  xA0.7
02404:  BRA    240A
02406:  MOVLB  7
02408:  BRA    240E
0240A:  BSF    x99.7
0240C:  MOVLB  7
.................... 
.................... 
....................        Reset_F = 1;
0240E:  BSF    30.0
....................        
....................        
.................... 
....................        
....................     }
02410:  BRA    2422
02412:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
02414:  BSF    F94.1
02416:  BTFSS  F82.1
02418:  BRA    2420
0241A:  BTFSS  30.0
0241C:  BRA    2420
....................     {
....................        Reset_F = 0;
0241E:  BCF    30.0
02420:  MOVLB  7
....................     }
02422:  MOVLB  0
02424:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
044B4:  MOVLB  7
044B6:  DECFSZ x0F,W
044B8:  BRA    4732
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
044BA:  MOVLW  00
044BC:  MOVLB  6
044BE:  BTFSC  xA0.0
044C0:  MOVLW  01
044C2:  MOVLB  7
044C4:  MOVWF  x12
044C6:  MOVLW  00
044C8:  MOVLB  6
044CA:  BTFSC  xA1.0
044CC:  MOVLW  01
044CE:  MOVLB  7
044D0:  IORWF  x12,W
044D2:  MOVWF  x11
044D4:  MOVLW  00
044D6:  MOVLB  6
044D8:  BTFSS  x9F.0
044DA:  MOVLW  01
044DC:  MOVLB  7
044DE:  ANDWF  x11,F
044E0:  MOVLW  00
044E2:  MOVLB  6
044E4:  BTFSC  x9C.0
044E6:  MOVLW  01
044E8:  MOVLB  7
044EA:  MOVWF  x14
044EC:  MOVLW  00
044EE:  MOVLB  6
044F0:  BTFSC  x9D.0
044F2:  MOVLW  01
044F4:  MOVLB  7
044F6:  IORWF  x14,W
044F8:  ANDWF  x11,W
044FA:  BCF    x10.0
044FC:  BTFSC  FE8.0
044FE:  BSF    x10.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
04500:  MOVLW  00
04502:  BTFSC  x10.0
04504:  MOVLW  01
04506:  MOVWF  x11
04508:  MOVLW  00
0450A:  MOVLB  6
0450C:  BTFSC  xA0.1
0450E:  MOVLW  01
04510:  MOVLB  7
04512:  MOVWF  x13
04514:  MOVLW  00
04516:  MOVLB  6
04518:  BTFSC  xA1.1
0451A:  MOVLW  01
0451C:  MOVLB  7
0451E:  IORWF  x13,W
04520:  MOVWF  x12
04522:  MOVLW  00
04524:  MOVLB  6
04526:  BTFSS  x9F.1
04528:  MOVLW  01
0452A:  MOVLB  7
0452C:  ANDWF  x12,F
0452E:  MOVLW  00
04530:  MOVLB  6
04532:  BTFSC  x9C.1
04534:  MOVLW  01
04536:  MOVLB  7
04538:  MOVWF  x15
0453A:  MOVLW  00
0453C:  MOVLB  6
0453E:  BTFSC  x9D.1
04540:  MOVLW  01
04542:  MOVLB  7
04544:  IORWF  x15,W
04546:  ANDWF  x12,W
04548:  IORWF  x11,W
0454A:  BCF    x10.0
0454C:  BTFSC  FE8.0
0454E:  BSF    x10.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
04550:  MOVLW  00
04552:  BTFSC  x10.0
04554:  MOVLW  01
04556:  MOVWF  x11
04558:  MOVLW  00
0455A:  MOVLB  6
0455C:  BTFSC  xA0.2
0455E:  MOVLW  01
04560:  MOVLB  7
04562:  MOVWF  x13
04564:  MOVLW  00
04566:  MOVLB  6
04568:  BTFSC  xA1.2
0456A:  MOVLW  01
0456C:  MOVLB  7
0456E:  IORWF  x13,W
04570:  MOVWF  x12
04572:  MOVLW  00
04574:  MOVLB  6
04576:  BTFSS  x9F.2
04578:  MOVLW  01
0457A:  MOVLB  7
0457C:  ANDWF  x12,F
0457E:  MOVLW  00
04580:  MOVLB  6
04582:  BTFSC  x9C.2
04584:  MOVLW  01
04586:  MOVLB  7
04588:  MOVWF  x15
0458A:  MOVLW  00
0458C:  MOVLB  6
0458E:  BTFSC  x9D.2
04590:  MOVLW  01
04592:  MOVLB  7
04594:  IORWF  x15,W
04596:  ANDWF  x12,W
04598:  IORWF  x11,W
0459A:  BCF    x10.0
0459C:  BTFSC  FE8.0
0459E:  BSF    x10.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
045A0:  MOVLW  00
045A2:  BTFSC  x10.0
045A4:  MOVLW  01
045A6:  MOVWF  x11
045A8:  MOVLW  00
045AA:  MOVLB  6
045AC:  BTFSC  xA0.3
045AE:  MOVLW  01
045B0:  MOVLB  7
045B2:  MOVWF  x13
045B4:  MOVLW  00
045B6:  MOVLB  6
045B8:  BTFSC  xA1.3
045BA:  MOVLW  01
045BC:  MOVLB  7
045BE:  IORWF  x13,W
045C0:  MOVWF  x12
045C2:  MOVLW  00
045C4:  MOVLB  6
045C6:  BTFSS  x9F.3
045C8:  MOVLW  01
045CA:  MOVLB  7
045CC:  ANDWF  x12,F
045CE:  MOVLW  00
045D0:  MOVLB  6
045D2:  BTFSC  x9C.3
045D4:  MOVLW  01
045D6:  MOVLB  7
045D8:  MOVWF  x15
045DA:  MOVLW  00
045DC:  MOVLB  6
045DE:  BTFSC  x9D.3
045E0:  MOVLW  01
045E2:  MOVLB  7
045E4:  IORWF  x15,W
045E6:  ANDWF  x12,W
045E8:  IORWF  x11,W
045EA:  BCF    x10.0
045EC:  BTFSC  FE8.0
045EE:  BSF    x10.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
045F0:  MOVLW  00
045F2:  BTFSC  x10.0
045F4:  MOVLW  01
045F6:  MOVWF  x11
045F8:  MOVLW  00
045FA:  MOVLB  6
045FC:  BTFSC  xA0.4
045FE:  MOVLW  01
04600:  MOVLB  7
04602:  MOVWF  x13
04604:  MOVLW  00
04606:  MOVLB  6
04608:  BTFSC  xA1.4
0460A:  MOVLW  01
0460C:  MOVLB  7
0460E:  IORWF  x13,W
04610:  MOVWF  x12
04612:  MOVLW  00
04614:  MOVLB  6
04616:  BTFSS  x9F.4
04618:  MOVLW  01
0461A:  MOVLB  7
0461C:  ANDWF  x12,F
0461E:  MOVLW  00
04620:  MOVLB  6
04622:  BTFSC  x9C.4
04624:  MOVLW  01
04626:  MOVLB  7
04628:  MOVWF  x15
0462A:  MOVLW  00
0462C:  MOVLB  6
0462E:  BTFSC  x9D.4
04630:  MOVLW  01
04632:  MOVLB  7
04634:  IORWF  x15,W
04636:  ANDWF  x12,W
04638:  IORWF  x11,W
0463A:  BCF    x10.0
0463C:  BTFSC  FE8.0
0463E:  BSF    x10.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
04640:  MOVLW  00
04642:  BTFSC  x10.0
04644:  MOVLW  01
04646:  MOVWF  x11
04648:  MOVLW  00
0464A:  MOVLB  6
0464C:  BTFSC  xA0.5
0464E:  MOVLW  01
04650:  MOVLB  7
04652:  MOVWF  x13
04654:  MOVLW  00
04656:  MOVLB  6
04658:  BTFSC  xA1.5
0465A:  MOVLW  01
0465C:  MOVLB  7
0465E:  IORWF  x13,W
04660:  MOVWF  x12
04662:  MOVLW  00
04664:  MOVLB  6
04666:  BTFSS  x9F.5
04668:  MOVLW  01
0466A:  MOVLB  7
0466C:  ANDWF  x12,F
0466E:  MOVLW  00
04670:  MOVLB  6
04672:  BTFSC  x9C.5
04674:  MOVLW  01
04676:  MOVLB  7
04678:  MOVWF  x15
0467A:  MOVLW  00
0467C:  MOVLB  6
0467E:  BTFSC  x9D.5
04680:  MOVLW  01
04682:  MOVLB  7
04684:  IORWF  x15,W
04686:  ANDWF  x12,W
04688:  IORWF  x11,W
0468A:  BCF    x10.0
0468C:  BTFSC  FE8.0
0468E:  BSF    x10.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
04690:  MOVLW  00
04692:  BTFSC  x10.0
04694:  MOVLW  01
04696:  MOVWF  x11
04698:  MOVLW  00
0469A:  MOVLB  6
0469C:  BTFSC  xA0.6
0469E:  MOVLW  01
046A0:  MOVLB  7
046A2:  MOVWF  x13
046A4:  MOVLW  00
046A6:  MOVLB  6
046A8:  BTFSC  xA1.6
046AA:  MOVLW  01
046AC:  MOVLB  7
046AE:  IORWF  x13,W
046B0:  MOVWF  x12
046B2:  MOVLW  00
046B4:  MOVLB  6
046B6:  BTFSS  x9F.6
046B8:  MOVLW  01
046BA:  MOVLB  7
046BC:  ANDWF  x12,F
046BE:  MOVLW  00
046C0:  MOVLB  6
046C2:  BTFSC  x9C.6
046C4:  MOVLW  01
046C6:  MOVLB  7
046C8:  MOVWF  x15
046CA:  MOVLW  00
046CC:  MOVLB  6
046CE:  BTFSC  x9D.6
046D0:  MOVLW  01
046D2:  MOVLB  7
046D4:  IORWF  x15,W
046D6:  ANDWF  x12,W
046D8:  IORWF  x11,W
046DA:  BCF    x10.0
046DC:  BTFSC  FE8.0
046DE:  BSF    x10.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
046E0:  MOVLW  00
046E2:  BTFSC  x10.0
046E4:  MOVLW  01
046E6:  MOVWF  x11
046E8:  MOVLW  00
046EA:  MOVLB  6
046EC:  BTFSC  xA0.7
046EE:  MOVLW  01
046F0:  MOVLB  7
046F2:  MOVWF  x13
046F4:  MOVLW  00
046F6:  MOVLB  6
046F8:  BTFSC  xA1.7
046FA:  MOVLW  01
046FC:  MOVLB  7
046FE:  IORWF  x13,W
04700:  MOVWF  x12
04702:  MOVLW  00
04704:  MOVLB  6
04706:  BTFSS  x9F.7
04708:  MOVLW  01
0470A:  MOVLB  7
0470C:  ANDWF  x12,F
0470E:  MOVLW  00
04710:  MOVLB  6
04712:  BTFSC  x9C.7
04714:  MOVLW  01
04716:  MOVLB  7
04718:  MOVWF  x15
0471A:  MOVLW  00
0471C:  MOVLB  6
0471E:  BTFSC  x9D.7
04720:  MOVLW  01
04722:  MOVLB  7
04724:  IORWF  x15,W
04726:  ANDWF  x12,W
04728:  IORWF  x11,W
0472A:  BCF    x10.0
0472C:  BTFSC  FE8.0
0472E:  BSF    x10.0
.................... 
....................      
....................    }
04730:  BRA    49B0
....................    else if(DatType == 0x02)             //Bell
04732:  MOVF   x0F,W
04734:  SUBLW  02
04736:  BTFSS  FD8.2
04738:  BRA    49B0
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
0473A:  MOVLW  00
0473C:  MOVLB  6
0473E:  BTFSC  xA0.0
04740:  MOVLW  01
04742:  MOVLB  7
04744:  MOVWF  x12
04746:  MOVLW  00
04748:  MOVLB  6
0474A:  BTFSC  xA1.0
0474C:  MOVLW  01
0474E:  MOVLB  7
04750:  IORWF  x12,W
04752:  MOVWF  x11
04754:  MOVLW  00
04756:  MOVLB  6
04758:  BTFSS  x9F.0
0475A:  MOVLW  01
0475C:  MOVLB  7
0475E:  ANDWF  x11,F
04760:  MOVLW  00
04762:  MOVLB  6
04764:  BTFSS  x9C.0
04766:  MOVLW  01
04768:  MOVLB  7
0476A:  MOVWF  x14
0476C:  MOVLW  00
0476E:  MOVLB  6
04770:  BTFSC  x9D.0
04772:  MOVLW  01
04774:  MOVLB  7
04776:  IORWF  x14,W
04778:  ANDWF  x11,W
0477A:  BCF    x10.0
0477C:  BTFSC  FE8.0
0477E:  BSF    x10.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
04780:  MOVLW  00
04782:  BTFSC  x10.0
04784:  MOVLW  01
04786:  MOVWF  x11
04788:  MOVLW  00
0478A:  MOVLB  6
0478C:  BTFSC  xA0.1
0478E:  MOVLW  01
04790:  MOVLB  7
04792:  MOVWF  x13
04794:  MOVLW  00
04796:  MOVLB  6
04798:  BTFSC  xA1.1
0479A:  MOVLW  01
0479C:  MOVLB  7
0479E:  IORWF  x13,W
047A0:  MOVWF  x12
047A2:  MOVLW  00
047A4:  MOVLB  6
047A6:  BTFSS  x9F.1
047A8:  MOVLW  01
047AA:  MOVLB  7
047AC:  ANDWF  x12,F
047AE:  MOVLW  00
047B0:  MOVLB  6
047B2:  BTFSS  x9C.1
047B4:  MOVLW  01
047B6:  MOVLB  7
047B8:  MOVWF  x15
047BA:  MOVLW  00
047BC:  MOVLB  6
047BE:  BTFSC  x9D.1
047C0:  MOVLW  01
047C2:  MOVLB  7
047C4:  IORWF  x15,W
047C6:  ANDWF  x12,W
047C8:  IORWF  x11,W
047CA:  BCF    x10.0
047CC:  BTFSC  FE8.0
047CE:  BSF    x10.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
047D0:  MOVLW  00
047D2:  BTFSC  x10.0
047D4:  MOVLW  01
047D6:  MOVWF  x11
047D8:  MOVLW  00
047DA:  MOVLB  6
047DC:  BTFSC  xA0.2
047DE:  MOVLW  01
047E0:  MOVLB  7
047E2:  MOVWF  x13
047E4:  MOVLW  00
047E6:  MOVLB  6
047E8:  BTFSC  xA1.2
047EA:  MOVLW  01
047EC:  MOVLB  7
047EE:  IORWF  x13,W
047F0:  MOVWF  x12
047F2:  MOVLW  00
047F4:  MOVLB  6
047F6:  BTFSS  x9F.2
047F8:  MOVLW  01
047FA:  MOVLB  7
047FC:  ANDWF  x12,F
047FE:  MOVLW  00
04800:  MOVLB  6
04802:  BTFSS  x9C.2
04804:  MOVLW  01
04806:  MOVLB  7
04808:  MOVWF  x15
0480A:  MOVLW  00
0480C:  MOVLB  6
0480E:  BTFSC  x9D.2
04810:  MOVLW  01
04812:  MOVLB  7
04814:  IORWF  x15,W
04816:  ANDWF  x12,W
04818:  IORWF  x11,W
0481A:  BCF    x10.0
0481C:  BTFSC  FE8.0
0481E:  BSF    x10.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
04820:  MOVLW  00
04822:  BTFSC  x10.0
04824:  MOVLW  01
04826:  MOVWF  x11
04828:  MOVLW  00
0482A:  MOVLB  6
0482C:  BTFSC  xA0.3
0482E:  MOVLW  01
04830:  MOVLB  7
04832:  MOVWF  x13
04834:  MOVLW  00
04836:  MOVLB  6
04838:  BTFSC  xA1.3
0483A:  MOVLW  01
0483C:  MOVLB  7
0483E:  IORWF  x13,W
04840:  MOVWF  x12
04842:  MOVLW  00
04844:  MOVLB  6
04846:  BTFSS  x9F.3
04848:  MOVLW  01
0484A:  MOVLB  7
0484C:  ANDWF  x12,F
0484E:  MOVLW  00
04850:  MOVLB  6
04852:  BTFSS  x9C.3
04854:  MOVLW  01
04856:  MOVLB  7
04858:  MOVWF  x15
0485A:  MOVLW  00
0485C:  MOVLB  6
0485E:  BTFSC  x9D.3
04860:  MOVLW  01
04862:  MOVLB  7
04864:  IORWF  x15,W
04866:  ANDWF  x12,W
04868:  IORWF  x11,W
0486A:  BCF    x10.0
0486C:  BTFSC  FE8.0
0486E:  BSF    x10.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
04870:  MOVLW  00
04872:  BTFSC  x10.0
04874:  MOVLW  01
04876:  MOVWF  x11
04878:  MOVLW  00
0487A:  MOVLB  6
0487C:  BTFSC  xA0.4
0487E:  MOVLW  01
04880:  MOVLB  7
04882:  MOVWF  x13
04884:  MOVLW  00
04886:  MOVLB  6
04888:  BTFSC  xA1.4
0488A:  MOVLW  01
0488C:  MOVLB  7
0488E:  IORWF  x13,W
04890:  MOVWF  x12
04892:  MOVLW  00
04894:  MOVLB  6
04896:  BTFSS  x9F.4
04898:  MOVLW  01
0489A:  MOVLB  7
0489C:  ANDWF  x12,F
0489E:  MOVLW  00
048A0:  MOVLB  6
048A2:  BTFSS  x9C.4
048A4:  MOVLW  01
048A6:  MOVLB  7
048A8:  MOVWF  x15
048AA:  MOVLW  00
048AC:  MOVLB  6
048AE:  BTFSC  x9D.4
048B0:  MOVLW  01
048B2:  MOVLB  7
048B4:  IORWF  x15,W
048B6:  ANDWF  x12,W
048B8:  IORWF  x11,W
048BA:  BCF    x10.0
048BC:  BTFSC  FE8.0
048BE:  BSF    x10.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
048C0:  MOVLW  00
048C2:  BTFSC  x10.0
048C4:  MOVLW  01
048C6:  MOVWF  x11
048C8:  MOVLW  00
048CA:  MOVLB  6
048CC:  BTFSC  xA0.5
048CE:  MOVLW  01
048D0:  MOVLB  7
048D2:  MOVWF  x13
048D4:  MOVLW  00
048D6:  MOVLB  6
048D8:  BTFSC  xA1.5
048DA:  MOVLW  01
048DC:  MOVLB  7
048DE:  IORWF  x13,W
048E0:  MOVWF  x12
048E2:  MOVLW  00
048E4:  MOVLB  6
048E6:  BTFSS  x9F.5
048E8:  MOVLW  01
048EA:  MOVLB  7
048EC:  ANDWF  x12,F
048EE:  MOVLW  00
048F0:  MOVLB  6
048F2:  BTFSS  x9C.5
048F4:  MOVLW  01
048F6:  MOVLB  7
048F8:  MOVWF  x15
048FA:  MOVLW  00
048FC:  MOVLB  6
048FE:  BTFSC  x9D.5
04900:  MOVLW  01
04902:  MOVLB  7
04904:  IORWF  x15,W
04906:  ANDWF  x12,W
04908:  IORWF  x11,W
0490A:  BCF    x10.0
0490C:  BTFSC  FE8.0
0490E:  BSF    x10.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
04910:  MOVLW  00
04912:  BTFSC  x10.0
04914:  MOVLW  01
04916:  MOVWF  x11
04918:  MOVLW  00
0491A:  MOVLB  6
0491C:  BTFSC  xA0.6
0491E:  MOVLW  01
04920:  MOVLB  7
04922:  MOVWF  x13
04924:  MOVLW  00
04926:  MOVLB  6
04928:  BTFSC  xA1.6
0492A:  MOVLW  01
0492C:  MOVLB  7
0492E:  IORWF  x13,W
04930:  MOVWF  x12
04932:  MOVLW  00
04934:  MOVLB  6
04936:  BTFSS  x9F.6
04938:  MOVLW  01
0493A:  MOVLB  7
0493C:  ANDWF  x12,F
0493E:  MOVLW  00
04940:  MOVLB  6
04942:  BTFSS  x9C.6
04944:  MOVLW  01
04946:  MOVLB  7
04948:  MOVWF  x15
0494A:  MOVLW  00
0494C:  MOVLB  6
0494E:  BTFSC  x9D.6
04950:  MOVLW  01
04952:  MOVLB  7
04954:  IORWF  x15,W
04956:  ANDWF  x12,W
04958:  IORWF  x11,W
0495A:  BCF    x10.0
0495C:  BTFSC  FE8.0
0495E:  BSF    x10.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
04960:  MOVLW  00
04962:  BTFSC  x10.0
04964:  MOVLW  01
04966:  MOVWF  x11
04968:  MOVLW  00
0496A:  MOVLB  6
0496C:  BTFSC  xA0.7
0496E:  MOVLW  01
04970:  MOVLB  7
04972:  MOVWF  x13
04974:  MOVLW  00
04976:  MOVLB  6
04978:  BTFSC  xA1.7
0497A:  MOVLW  01
0497C:  MOVLB  7
0497E:  IORWF  x13,W
04980:  MOVWF  x12
04982:  MOVLW  00
04984:  MOVLB  6
04986:  BTFSS  x9F.7
04988:  MOVLW  01
0498A:  MOVLB  7
0498C:  ANDWF  x12,F
0498E:  MOVLW  00
04990:  MOVLB  6
04992:  BTFSS  x9C.7
04994:  MOVLW  01
04996:  MOVLB  7
04998:  MOVWF  x15
0499A:  MOVLW  00
0499C:  MOVLB  6
0499E:  BTFSC  x9D.7
049A0:  MOVLW  01
049A2:  MOVLB  7
049A4:  IORWF  x15,W
049A6:  ANDWF  x12,W
049A8:  IORWF  x11,W
049AA:  BCF    x10.0
049AC:  BTFSC  FE8.0
049AE:  BSF    x10.0
.................... 
.................... 
....................    }
....................    return(check);
049B0:  MOVLW  00
049B2:  BTFSC  x10.0
049B4:  MOVLW  01
049B6:  MOVWF  01
049B8:  MOVLB  0
049BA:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
0657C:  CLRF   FF8
0657E:  BCF    FD0.7
06580:  BSF    07.7
06582:  MOVLW  70
06584:  MOVWF  FD3
06586:  BCF    F9B.6
06588:  BCF    F9B.7
0658A:  BSF    FB8.3
0658C:  MOVLW  A0
0658E:  MOVWF  FAF
06590:  MOVLW  01
06592:  MOVWF  FB0
06594:  MOVLW  A6
06596:  MOVWF  FAC
06598:  MOVLW  90
0659A:  MOVWF  FAB
0659C:  BCF    F93.0
0659E:  BSF    F8A.0
065A0:  CLRF   19
065A2:  BCF    1A.0
065A4:  MOVLW  19
065A6:  MOVWF  1B
065A8:  BCF    1A.1
065AA:  MOVLW  64
065AC:  MOVWF  1C
065AE:  CLRF   1D
065B0:  BCF    1A.2
065B2:  BCF    1A.3
065B4:  BCF    1A.4
065B6:  CLRF   2E
065B8:  BCF    1A.5
065BA:  CLRF   2F
065BC:  BCF    1A.6
065BE:  BCF    1A.7
065C0:  BCF    30.0
065C2:  BCF    30.1
065C4:  BCF    30.2
065C6:  BCF    30.3
065C8:  CLRF   31
065CA:  BCF    30.4
065CC:  MOVLW  11
065CE:  MOVWF  x6F
065D0:  MOVLW  12
065D2:  MOVWF  x70
065D4:  MOVLW  13
065D6:  MOVWF  x71
065D8:  MOVLW  14
065DA:  MOVWF  x72
065DC:  MOVLW  16
065DE:  MOVWF  x73
065E0:  MOVLW  17
065E2:  MOVWF  x74
065E4:  MOVLW  18
065E6:  MOVWF  x75
065E8:  MOVLW  19
065EA:  MOVWF  x76
065EC:  MOVLW  20
065EE:  MOVWF  x77
065F0:  BCF    30.5
065F2:  CLRF   x7A
065F4:  MOVLW  01
065F6:  MOVLB  3
065F8:  MOVWF  x7D
065FA:  MOVLW  F4
065FC:  MOVWF  x7C
065FE:  CLRF   x7F
06600:  CLRF   x7E
06602:  CLRF   x81
06604:  CLRF   x80
06606:  CLRF   x82
06608:  MOVLB  5
0660A:  CLRF   x87
0660C:  CLRF   x86
0660E:  CLRF   x88
06610:  MOVLB  7
06612:  CLRF   x01
06614:  CLRF   x03
06616:  CLRF   x02
06618:  MOVLB  F
0661A:  CLRF   x38
0661C:  CLRF   x39
0661E:  CLRF   x3A
06620:  CLRF   F77
06622:  CLRF   F78
06624:  CLRF   F79
06626:  MOVLB  7
06628:  CLRF   x04
.................... {
....................    
....................    
....................    delay_ms(50);
0662A:  MOVLW  32
0662C:  MOVWF  x10
0662E:  MOVLB  0
06630:  CALL   07CC
....................    output_bit(Pled,0);   //power on watchdog signal
06634:  BCF    F8A.5
06636:  BCF    F93.5
.................... 
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD);
06638:  MOVF   FC1,W
0663A:  ANDLW  F0
0663C:  MOVWF  FC1
0663E:  MOVLW  00
06640:  MOVLB  F
06642:  MOVWF  x38
06644:  MOVWF  x39
06646:  MOVWF  x3A
....................    setup_adc(ADC_OFF|ADC_TAD_MUL_0);
06648:  BCF    FC2.0
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
0664A:  MOVLW  80
0664C:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
0664E:  MOVLW  78
06650:  IORLW  06
06652:  MOVWF  FBA
06654:  MOVLW  C4
06656:  MOVWF  FBB
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................    enable_interrupts(INT_TIMER2);
06658:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
0665A:  BSF    F9D.5
....................      
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1
0665C:  BCF    FC6.5
0665E:  BCF    F94.5
06660:  BSF    F94.4
06662:  BCF    F94.3
06664:  MOVLW  20
06666:  MOVWF  FC6
06668:  MOVLW  40
0666A:  MOVWF  FC7
.................... 
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
0666C:  MOVLB  0
0666E:  GOTO   082E
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
06672:  MOVLB  7
06674:  CLRF   x07
06676:  SETF   x08
06678:  MOVLB  0
0667A:  CALL   08C4
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
0667E:  MOVLB  7
06680:  CLRF   x07
06682:  SETF   x08
06684:  MOVLB  0
06686:  CALL   08D6
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
0668A:  MOVLW  02
0668C:  MOVLB  7
0668E:  MOVWF  x07
06690:  SETF   x08
06692:  MOVLB  0
06694:  CALL   08C4
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt 
06698:  MOVLW  02
0669A:  MOVLB  7
0669C:  MOVWF  x07
0669E:  SETF   x08
066A0:  MOVLB  0
066A2:  CALL   08D6
....................    
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
066A6:  MOVLB  7
066A8:  CLRF   x11
066AA:  MOVLW  06
066AC:  MOVWF  x12
066AE:  SETF   x13
066B0:  MOVLB  0
066B2:  CALL   07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
066B6:  MOVLB  7
066B8:  CLRF   x11
066BA:  MOVLW  16
066BC:  MOVWF  x12
066BE:  SETF   x13
066C0:  MOVLB  0
066C2:  CALL   07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
066C6:  MOVLW  02
066C8:  MOVLB  7
066CA:  MOVWF  x11
066CC:  MOVLW  06
066CE:  MOVWF  x12
066D0:  SETF   x13
066D2:  MOVLB  0
066D4:  CALL   07FC
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
066D8:  MOVLW  02
066DA:  MOVLB  7
066DC:  MOVWF  x11
066DE:  MOVLW  16
066E0:  MOVWF  x12
066E2:  SETF   x13
066E4:  MOVLB  0
066E6:  CALL   07FC
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
066EA:  MOVLW  04
066EC:  MOVLB  7
066EE:  MOVWF  x07
066F0:  CLRF   x08
066F2:  MOVLB  0
066F4:  CALL   08C4
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
066F8:  MOVLW  04
066FA:  MOVLB  7
066FC:  MOVWF  x07
066FE:  CLRF   x08
06700:  MOVLB  0
06702:  CALL   08D6
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
06706:  MOVLW  06
06708:  MOVLB  7
0670A:  MOVWF  x07
0670C:  CLRF   x08
0670E:  MOVLB  0
06710:  CALL   08C4
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
06714:  MOVLW  06
06716:  MOVLB  7
06718:  MOVWF  x07
0671A:  CLRF   x08
0671C:  MOVLB  0
0671E:  CALL   08D6
.................... 
....................    
....................    //FlashingFlag = 1;
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
06722:  MOVFF  6F,78
....................    //Address = 1;
....................    
....................    Output.B1 = 1;
06726:  MOVLB  6
06728:  BSF    x99.0
....................    Output.B2 = 1;
0672A:  BSF    x99.1
....................    Output.B3 = 1;
0672C:  BSF    x99.2
....................    Output.B4 = 1;
0672E:  BSF    x99.3
....................    Output.B5 = 1;
06730:  BSF    x99.4
....................    Output.B6 = 1;
06732:  BSF    x99.5
....................    Output.B7 = 1;
06734:  BSF    x99.6
....................    Output.B8 = 1;
06736:  BSF    x99.7
....................    ////////////////////
....................    In.B1 = 0;
06738:  BCF    xA0.0
....................    In.B2 = 0;
0673A:  BCF    xA0.1
....................    In.B3 = 0;
0673C:  BCF    xA0.2
....................    In.B4 = 0;
0673E:  BCF    xA0.3
....................    In.B5 = 0;
06740:  BCF    xA0.4
....................    In.B6 = 0;
06742:  BCF    xA0.5
....................    In.B7 = 0;
06744:  BCF    xA0.6
....................    In.B8 = 0;  
06746:  BCF    xA0.7
....................    ////////////////////
....................    In2.B1 = 0;
06748:  BCF    xA1.0
....................    In2.B2 = 0;
0674A:  BCF    xA1.1
....................    In2.B3 = 0;
0674C:  BCF    xA1.2
....................    In2.B4 = 0;
0674E:  BCF    xA1.3
....................    In2.B5 = 0;
06750:  BCF    xA1.4
....................    In2.B6 = 0;
06752:  BCF    xA1.5
....................    In2.B7 = 0;
06754:  BCF    xA1.6
....................    In2.B8 = 0;  
06756:  BCF    xA1.7
....................    ////////////////////////
....................    Ack.B1 = 0;
06758:  BCF    x9F.0
....................    Ack.B2 = 0;
0675A:  BCF    x9F.1
....................    Ack.B3 = 0;
0675C:  BCF    x9F.2
....................    Ack.B4 = 0;
0675E:  BCF    x9F.3
....................    Ack.B5 = 0;
06760:  BCF    x9F.4
....................    Ack.B6 = 0;
06762:  BCF    x9F.5
....................    Ack.B7 = 0;
06764:  BCF    x9F.6
....................    Ack.B8 = 0;
06766:  BCF    x9F.7
....................    
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0xF0)
06768:  MOVFF  FF2,707
0676C:  BCF    FF2.7
0676E:  CLRF   FAA
06770:  CLRF   FA9
06772:  BCF    FA6.6
06774:  BCF    FA6.7
06776:  BSF    FA6.0
06778:  MOVF   FA8,W
0677A:  MOVLB  7
0677C:  BTFSC  x07.7
0677E:  BSF    FF2.7
06780:  SUBLW  F0
06782:  BNZ   678E
....................    {
....................       Read_Config();
06784:  MOVLB  0
06786:  CALL   08EA
....................    }
0678A:  BRA    694C
0678C:  MOVLB  7
....................    else
....................    {
....................       FlashingRateTime = 25;
0678E:  MOVLW  19
06790:  MOVWF  1B
....................       FlashingRate = 25;
06792:  MOVLB  0
06794:  MOVWF  x6C
....................       AutoAck = 0xF0; //not use auto ack
06796:  MOVLW  F0
06798:  MOVWF  x6A
....................       Address = 0x01;
0679A:  MOVLW  01
0679C:  MOVWF  x79
.................... 
....................       AutoAckTime = 5;
0679E:  MOVLW  05
067A0:  MOVWF  x6B
....................       
....................       NoOfPoint = 8;
067A2:  MOVLW  08
067A4:  MOVWF  x6D
....................       //FlashingRateTime = 0x00;
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
067A6:  MOVLB  7
067A8:  CLRF   x05
067AA:  MOVF   x05,W
067AC:  MOVLB  0
067AE:  SUBWF  x6D,W
067B0:  BNC   67D0
....................       {
....................          FaultDelayTime[i] = 0;
067B2:  BCF    FD8.0
067B4:  MOVLB  7
067B6:  RLCF   x05,W
067B8:  CLRF   03
067BA:  ADDLW  D5
067BC:  MOVWF  FE9
067BE:  MOVLW  06
067C0:  ADDWFC 03,W
067C2:  MOVWF  FEA
067C4:  CLRF   FEC
067C6:  MOVF   FED,F
067C8:  CLRF   FEF
067CA:  INCF   x05,F
067CC:  BRA    67AA
067CE:  MOVLB  0
....................       }
.................... 
....................       InputType.B1 = 1;
067D0:  MOVLB  6
067D2:  BSF    x9A.0
....................       InputType.B2 = 1;
067D4:  BSF    x9A.1
....................       InputType.B3 = 1;
067D6:  BSF    x9A.2
....................       InputType.B4 = 1;
067D8:  BSF    x9A.3
....................       InputType.B5 = 1;
067DA:  BSF    x9A.4
....................       InputType.B6 = 1;
067DC:  BSF    x9A.5
....................       InputType.B7 = 1;
067DE:  BSF    x9A.6
....................       InputType.B8 = 1;
067E0:  BSF    x9A.7
....................       
....................       FaultNCNO[1] = 1;
067E2:  BSF    xFE.1
....................       FaultNCNO[2] = 1;
067E4:  BSF    xFE.2
....................       FaultNCNO[3] = 1;
067E6:  BSF    xFE.3
....................       FaultNCNO[4] = 1;
067E8:  BSF    xFE.4
....................       FaultNCNO[5] = 1;
067EA:  BSF    xFE.5
....................       FaultNCNO[6] = 1;
067EC:  BSF    xFE.6
....................       FaultNCNO[7] = 1;
067EE:  BSF    xFE.7
....................       FaultNCNO[8] = 1;
067F0:  BSF    xFF.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
067F2:  BSF    x9B.0
....................       FaultType.B2= 1;
067F4:  BSF    x9B.1
....................       FaultType.B3 = 1;
067F6:  BSF    x9B.2
....................       FaultType.B4 = 1;
067F8:  BSF    x9B.3
....................       FaultType.B5 = 1;
067FA:  BSF    x9B.4
....................       FaultType.B6 = 1;
067FC:  BSF    x9B.5
....................       FaultType.B7 = 1;
067FE:  BSF    x9B.6
....................       FaultType.B8 = 1;
06800:  BSF    x9B.7
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
06802:  BSF    x9C.0
....................       OutputType.B2 = 1;
06804:  BSF    x9C.1
....................       OutputType.B3 = 1;
06806:  BSF    x9C.2
....................       OutputType.B4 = 1;
06808:  BSF    x9C.3
....................       OutputType.B5 = 1;
0680A:  BSF    x9C.4
....................       OutputType.B6 = 1;
0680C:  BSF    x9C.5
....................       OutputType.B7 = 1;
0680E:  BSF    x9C.6
....................       OutputType.B8 = 1;
06810:  BSF    x9C.7
.................... 
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
06812:  BSF    x9D.0
....................       OutputBoth.B2 = 1;
06814:  BSF    x9D.1
....................       OutputBoth.B3 = 1;
06816:  BSF    x9D.2
....................       OutputBoth.B4 = 1;
06818:  BSF    x9D.3
....................       OutputBoth.B5 = 1;
0681A:  BSF    x9D.4
....................       OutputBoth.B6 = 1;
0681C:  BSF    x9D.5
....................       OutputBoth.B7 = 1;
0681E:  BSF    x9D.6
....................       OutputBoth.B8 = 1;
06820:  BSF    x9D.7
.................... 
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
06822:  BSF    x9E.0
....................       AlarmIndicator.B2 = 1;
06824:  BSF    x9E.1
....................       AlarmIndicator.B3 = 1;
06826:  BSF    x9E.2
....................       AlarmIndicator.B4 = 1;
06828:  BSF    x9E.3
....................       AlarmIndicator.B5 = 1;
0682A:  BSF    x9E.4
....................       AlarmIndicator.B6 = 1;
0682C:  BSF    x9E.5
....................       AlarmIndicator.B7 = 1;
0682E:  BSF    x9E.6
....................       AlarmIndicator.B8 = 1;
06830:  BSF    x9E.7
.................... 
....................       ///////////// JACK///////////////////
....................       EEpDat = read_eeprom(0x10);
06832:  MOVFF  FF2,707
06836:  BCF    FF2.7
06838:  CLRF   FAA
0683A:  MOVLW  10
0683C:  MOVWF  FA9
0683E:  BCF    FA6.6
06840:  BCF    FA6.7
06842:  BSF    FA6.0
06844:  MOVF   FA8,W
06846:  MOVLB  7
06848:  BTFSC  x07.7
0684A:  BSF    FF2.7
0684C:  MOVWF  39
....................       //Red1_8 = EEpDat;
....................       RED_Colour.B1 = EEpDat;
0684E:  MOVLB  6
06850:  BCF    xA4.0
06852:  BTFSC  39.0
06854:  BSF    xA4.0
....................       RED_Colour.B2 = EEpDat >> 1;
06856:  BCF    FD8.0
06858:  RRCF   39,W
0685A:  BCF    xA4.1
0685C:  BTFSC  FE8.0
0685E:  BSF    xA4.1
....................       RED_Colour.B3 = EEpDat >> 2;
06860:  RRCF   39,W
06862:  MOVWF  00
06864:  RRCF   00,F
06866:  MOVLW  3F
06868:  ANDWF  00,F
0686A:  BCF    xA4.2
0686C:  BTFSC  00.0
0686E:  BSF    xA4.2
....................       RED_Colour.B4 = EEpDat >> 3;
06870:  RRCF   39,W
06872:  MOVWF  00
06874:  RRCF   00,F
06876:  RRCF   00,F
06878:  MOVLW  1F
0687A:  ANDWF  00,F
0687C:  BCF    xA4.3
0687E:  BTFSC  00.0
06880:  BSF    xA4.3
....................       RED_Colour.B5 = EEpDat >> 4;
06882:  SWAPF  39,W
06884:  MOVWF  00
06886:  MOVLW  0F
06888:  ANDWF  00,F
0688A:  BCF    xA4.4
0688C:  BTFSC  00.0
0688E:  BSF    xA4.4
....................       RED_Colour.B6 = EEpDat >> 5;
06890:  SWAPF  39,W
06892:  MOVWF  00
06894:  RRCF   00,F
06896:  MOVLW  07
06898:  ANDWF  00,F
0689A:  BCF    xA4.5
0689C:  BTFSC  00.0
0689E:  BSF    xA4.5
....................       RED_Colour.B7 = EEpDat >> 6;
068A0:  SWAPF  39,W
068A2:  MOVWF  00
068A4:  RRCF   00,F
068A6:  RRCF   00,F
068A8:  MOVLW  03
068AA:  ANDWF  00,F
068AC:  BCF    xA4.6
068AE:  BTFSC  00.0
068B0:  BSF    xA4.6
....................       RED_Colour.B8 = EEpDat >> 7;
068B2:  CLRF   00
068B4:  BTFSC  39.7
068B6:  BSF    00.0
068B8:  BCF    xA4.7
068BA:  BTFSC  00.0
068BC:  BSF    xA4.7
....................         
....................       EEpDat = read_eeprom(0x14);
068BE:  MOVFF  FF2,707
068C2:  BCF    FF2.7
068C4:  CLRF   FAA
068C6:  MOVLW  14
068C8:  MOVWF  FA9
068CA:  BCF    FA6.6
068CC:  BCF    FA6.7
068CE:  BSF    FA6.0
068D0:  MOVF   FA8,W
068D2:  MOVLB  7
068D4:  BTFSC  x07.7
068D6:  BSF    FF2.7
068D8:  MOVWF  39
....................       //Green1_8 = EEpDat;
....................       GREEN_Colour.B1 = EEpDat;
068DA:  MOVLB  6
068DC:  BCF    xA5.0
068DE:  BTFSC  39.0
068E0:  BSF    xA5.0
....................       GREEN_Colour.B2 = EEpDat >> 1;
068E2:  BCF    FD8.0
068E4:  RRCF   39,W
068E6:  BCF    xA5.1
068E8:  BTFSC  FE8.0
068EA:  BSF    xA5.1
....................       GREEN_Colour.B3 = EEpDat >> 2;
068EC:  RRCF   39,W
068EE:  MOVWF  00
068F0:  RRCF   00,F
068F2:  MOVLW  3F
068F4:  ANDWF  00,F
068F6:  BCF    xA5.2
068F8:  BTFSC  00.0
068FA:  BSF    xA5.2
....................       GREEN_Colour.B4 = EEpDat >> 3;
068FC:  RRCF   39,W
068FE:  MOVWF  00
06900:  RRCF   00,F
06902:  RRCF   00,F
06904:  MOVLW  1F
06906:  ANDWF  00,F
06908:  BCF    xA5.3
0690A:  BTFSC  00.0
0690C:  BSF    xA5.3
....................       GREEN_Colour.B5 = EEpDat >> 4;
0690E:  SWAPF  39,W
06910:  MOVWF  00
06912:  MOVLW  0F
06914:  ANDWF  00,F
06916:  BCF    xA5.4
06918:  BTFSC  00.0
0691A:  BSF    xA5.4
....................       GREEN_Colour.B6 = EEpDat >> 5;
0691C:  SWAPF  39,W
0691E:  MOVWF  00
06920:  RRCF   00,F
06922:  MOVLW  07
06924:  ANDWF  00,F
06926:  BCF    xA5.5
06928:  BTFSC  00.0
0692A:  BSF    xA5.5
....................       GREEN_Colour.B7 = EEpDat >> 6;
0692C:  SWAPF  39,W
0692E:  MOVWF  00
06930:  RRCF   00,F
06932:  RRCF   00,F
06934:  MOVLW  03
06936:  ANDWF  00,F
06938:  BCF    xA5.6
0693A:  BTFSC  00.0
0693C:  BSF    xA5.6
....................       GREEN_Colour.B8 = EEpDat >> 7;
0693E:  CLRF   00
06940:  BTFSC  39.7
06942:  BSF    00.0
06944:  BCF    xA5.7
06946:  BTFSC  00.0
06948:  BSF    xA5.7
0694A:  MOVLB  0
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
0694C:  MOVLW  00
0694E:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
06950:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
06952:  MOVLW  C0
06954:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
06956:  BSF    FD1.0
....................    Read_input(); restart_wdt();
06958:  CALL   1648
0695C:  CLRWDT
....................    output_bit(Pbuzzer,1);  //Clear Buzzer
0695E:  BSF    F89.4
06960:  BCF    F92.4
....................    output_bit(Pbell,1);   //Clear Bell
06962:  BSF    F89.3
06964:  BCF    F92.3
....................    output_bit(P485ctrl,0);
06966:  BCF    F8A.3
06968:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,0); //jj
0696A:  BCF    F8A.4
0696C:  BCF    F93.4
....................    Send_Ouput();
0696E:  CALL   1D78
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
06972:  MOVLW  04
06974:  MOVLB  7
06976:  MOVWF  x0F
06978:  SETF   x10
0697A:  MOVLB  0
0697C:  CALL   1D4C
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
06980:  MOVLW  04
06982:  MOVLB  7
06984:  MOVWF  x0F
06986:  SETF   x10
06988:  MOVLB  0
0698A:  CALL   1D62
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
0698E:  MOVLW  06
06990:  MOVLB  7
06992:  MOVWF  x0F
06994:  SETF   x10
06996:  MOVLB  0
06998:  CALL   1D4C
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0699C:  MOVLW  06
0699E:  MOVLB  7
069A0:  MOVWF  x0F
069A2:  SETF   x10
069A4:  MOVLB  0
069A6:  CALL   1D62
....................    restart_wdt();
069AA:  CLRWDT
....................    delay_ms(100);
069AC:  MOVLW  64
069AE:  MOVLB  7
069B0:  MOVWF  x10
069B2:  MOVLB  0
069B4:  CALL   07CC
.................... 
....................    
....................    //GSM SIM900 Init
....................    delay_ms(1000);
069B8:  MOVLW  04
069BA:  MOVLB  7
069BC:  MOVWF  x07
069BE:  MOVLW  FA
069C0:  MOVWF  x10
069C2:  MOVLB  0
069C4:  CALL   07CC
069C8:  MOVLB  7
069CA:  DECFSZ x07,F
069CC:  BRA    69BE
....................    fprintf(CH2,"AT+CMGF=1"); 
069CE:  MOVLW  C2
069D0:  MOVWF  FF6
069D2:  MOVLW  07
069D4:  MOVWF  FF7
069D6:  MOVLB  0
069D8:  CALL   1F98
....................    putc('\n',CH2);
069DC:  MOVLW  0A
069DE:  MOVLB  7
069E0:  MOVWF  x11
069E2:  MOVLB  0
069E4:  CALL   1F52
....................    delay_ms(50);
069E8:  MOVLW  32
069EA:  MOVLB  7
069EC:  MOVWF  x10
069EE:  MOVLB  0
069F0:  CALL   07CC
....................    
....................    SendSMS.B1 =0;
069F4:  MOVLB  6
069F6:  BCF    xA6.0
....................    SendSMS.B2 =0;
069F8:  BCF    xA6.1
....................    SendSMS.B3 =0;
069FA:  BCF    xA6.2
....................    SendSMS.B4 =0;
069FC:  BCF    xA6.3
....................    SendSMS.B5 =0;
069FE:  BCF    xA6.4
....................    SendSMS.B6 =0;
06A00:  BCF    xA6.5
....................    SendSMS.B7 =0;
06A02:  BCF    xA6.6
....................    SendSMS.B8 =0;
06A04:  BCF    xA6.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
06A06:  MOVLB  7
06A08:  CLRF   x06
06A0A:  MOVF   x06,W
06A0C:  SUBLW  09
06A0E:  BNC   6A42
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
06A10:  CLRF   03
06A12:  MOVF   x06,W
06A14:  ADDLW  89
06A16:  MOVWF  FE9
06A18:  MOVLW  05
06A1A:  ADDWFC 03,W
06A1C:  MOVWF  FEA
06A1E:  MOVLW  32
06A20:  ADDWF  x06,W
06A22:  MOVWF  x09
06A24:  MOVFF  FF2,70A
06A28:  BCF    FF2.7
06A2A:  CLRF   FAA
06A2C:  MOVFF  709,FA9
06A30:  BCF    FA6.6
06A32:  BCF    FA6.7
06A34:  BSF    FA6.0
06A36:  MOVF   FA8,W
06A38:  BTFSC  x0A.7
06A3A:  BSF    FF2.7
06A3C:  MOVWF  FEF
06A3E:  INCF   x06,F
06A40:  BRA    6A0A
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
06A42:  CLRF   03
06A44:  MOVF   x06,W
06A46:  ADDLW  89
06A48:  MOVWF  FE9
06A4A:  MOVLW  05
06A4C:  ADDWFC 03,W
06A4E:  MOVWF  FEA
06A50:  CLRF   FEF
.................... 
....................    delay_ms(500);
06A52:  MOVLW  02
06A54:  MOVWF  x07
06A56:  MOVLW  FA
06A58:  MOVWF  x10
06A5A:  MOVLB  0
06A5C:  CALL   07CC
06A60:  MOVLB  7
06A62:  DECFSZ x07,F
06A64:  BRA    6A56
....................    while(TRUE)
....................    {
.................... 
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
06A66:  CLRF   x0F
06A68:  SETF   x10
06A6A:  MOVLB  0
06A6C:  CALL   1D4C
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
06A70:  MOVLB  7
06A72:  CLRF   x0F
06A74:  SETF   x10
06A76:  MOVLB  0
06A78:  CALL   1D62
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
06A7C:  MOVLW  02
06A7E:  MOVLB  7
06A80:  MOVWF  x0F
06A82:  SETF   x10
06A84:  MOVLB  0
06A86:  CALL   1D4C
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
06A8A:  MOVLW  02
06A8C:  MOVLB  7
06A8E:  MOVWF  x0F
06A90:  SETF   x10
06A92:  MOVLB  0
06A94:  CALL   1D62
....................       
....................       restart_wdt();
06A98:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
06A9A:  BTFSS  30.5
06A9C:  BRA    6AA4
....................       {
....................          Modbus_Function();
06A9E:  GOTO   2426
....................          recieve_completed = 0 ;
06AA2:  BCF    30.5
....................       }
....................   
....................       check_ack();
06AA4:  CALL   21C0
....................       check_reset();
06AA8:  CALL   22A4
....................       check_test();
06AAC:  BRA    64B6
....................       
....................       restart_wdt();
06AAE:  CLRWDT
.................... 
....................       Read_input(); restart_wdt(); //must be first
06AB0:  CALL   1648
06AB4:  CLRWDT
....................       Anal_Function(); restart_wdt();
06AB6:  CALL   49BC
06ABA:  CLRWDT
....................       Send_Ouput(); restart_wdt();
06ABC:  CALL   1D78
06AC0:  CLRWDT
....................       //Driver595(); restart_wdt();
....................       
....................       output_toggle(PIN_A0);
06AC2:  BCF    F92.0
06AC4:  BTG    F89.0
....................       
....................       if(RefreshConfigData)
06AC6:  BTFSS  30.4
06AC8:  BRA    6B80
....................       {
....................          RefreshConfigData =0;
06ACA:  BCF    30.4
....................          Read_Config();
06ACC:  CALL   08EA
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
06AD0:  MOVLB  7
06AD2:  CLRF   x07
06AD4:  SETF   x08
06AD6:  MOVLB  0
06AD8:  CALL   08C4
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
06ADC:  MOVLB  7
06ADE:  CLRF   x07
06AE0:  SETF   x08
06AE2:  MOVLB  0
06AE4:  CALL   08D6
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
06AE8:  MOVLW  02
06AEA:  MOVLB  7
06AEC:  MOVWF  x07
06AEE:  SETF   x08
06AF0:  MOVLB  0
06AF2:  CALL   08C4
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt 
06AF6:  MOVLW  02
06AF8:  MOVLB  7
06AFA:  MOVWF  x07
06AFC:  SETF   x08
06AFE:  MOVLB  0
06B00:  CALL   08D6
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
06B04:  MOVLB  7
06B06:  CLRF   x11
06B08:  MOVLW  06
06B0A:  MOVWF  x12
06B0C:  SETF   x13
06B0E:  MOVLB  0
06B10:  CALL   07FC
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
06B14:  MOVLB  7
06B16:  CLRF   x11
06B18:  MOVLW  16
06B1A:  MOVWF  x12
06B1C:  SETF   x13
06B1E:  MOVLB  0
06B20:  CALL   07FC
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
06B24:  MOVLW  02
06B26:  MOVLB  7
06B28:  MOVWF  x11
06B2A:  MOVLW  06
06B2C:  MOVWF  x12
06B2E:  SETF   x13
06B30:  MOVLB  0
06B32:  CALL   07FC
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
06B36:  MOVLW  02
06B38:  MOVLB  7
06B3A:  MOVWF  x11
06B3C:  MOVLW  16
06B3E:  MOVWF  x12
06B40:  SETF   x13
06B42:  MOVLB  0
06B44:  CALL   07FC
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
06B48:  MOVLW  04
06B4A:  MOVLB  7
06B4C:  MOVWF  x07
06B4E:  CLRF   x08
06B50:  MOVLB  0
06B52:  CALL   08C4
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
06B56:  MOVLW  04
06B58:  MOVLB  7
06B5A:  MOVWF  x07
06B5C:  CLRF   x08
06B5E:  MOVLB  0
06B60:  CALL   08D6
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
06B64:  MOVLW  06
06B66:  MOVLB  7
06B68:  MOVWF  x07
06B6A:  CLRF   x08
06B6C:  MOVLB  0
06B6E:  CALL   08C4
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
06B72:  MOVLW  06
06B74:  MOVLB  7
06B76:  MOVWF  x07
06B78:  CLRF   x08
06B7A:  MOVLB  0
06B7C:  CALL   08D6
.................... 
....................       }
06B80:  MOVLB  7
06B82:  BRA    6A66
....................    }
....................    
.................... }
06B84:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
