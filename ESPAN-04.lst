CCS PCH C Compiler, Version 5.091, 5967               07-¡.Â.-21 10:27

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_8 - Delay - SP - SMS\ESPAN-04.lst

               ROM used:   27852 bytes (42%)
                           Largest free fragment is 37680
               RAM used:   2169 (56%) at main() level
                           2186 (56%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   646C
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   0544
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   0534
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... //#include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16\ESPAN-04.h"
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
005D8:  DATA 41,54
005DA:  DATA 2B,43
005DC:  DATA 4D,47
005DE:  DATA 46,3D
005E0:  DATA 31,00
005E2:  DATA 41,54
005E4:  DATA 2B,43
005E6:  DATA 4D,47
005E8:  DATA 53,3D
005EA:  DATA 22,00
005EC:  DATA 41,54
005EE:  DATA 2B,43
005F0:  DATA 4D,47
005F2:  DATA 46,3D
005F4:  DATA 31,00
005F6:  DATA 41,54
005F8:  DATA 2B,43
005FA:  DATA 4D,47
005FC:  DATA 53,3D
005FE:  DATA 22,00
00600:  DATA 41,54
00602:  DATA 2B,43
00604:  DATA 4D,47
00606:  DATA 46,3D
00608:  DATA 31,00
0060A:  DATA 41,54
0060C:  DATA 2B,43
0060E:  DATA 4D,47
00610:  DATA 53,3D
00612:  DATA 22,00
00614:  DATA 41,54
00616:  DATA 2B,43
00618:  DATA 4D,47
0061A:  DATA 46,3D
0061C:  DATA 31,00
0061E:  DATA 41,54
00620:  DATA 2B,43
00622:  DATA 4D,47
00624:  DATA 53,3D
00626:  DATA 22,00
00628:  DATA 41,54
0062A:  DATA 2B,43
0062C:  DATA 4D,47
0062E:  DATA 46,3D
00630:  DATA 31,00
00632:  DATA 41,54
00634:  DATA 2B,43
00636:  DATA 4D,47
00638:  DATA 53,3D
0063A:  DATA 22,00
0063C:  DATA 41,54
0063E:  DATA 2B,43
00640:  DATA 4D,47
00642:  DATA 46,3D
00644:  DATA 31,00
00646:  DATA 41,54
00648:  DATA 2B,43
0064A:  DATA 4D,47
0064C:  DATA 53,3D
0064E:  DATA 22,00
00650:  DATA 41,54
00652:  DATA 2B,43
00654:  DATA 4D,47
00656:  DATA 46,3D
00658:  DATA 31,00
0065A:  DATA 41,54
0065C:  DATA 2B,43
0065E:  DATA 4D,47
00660:  DATA 53,3D
00662:  DATA 22,00
00664:  DATA 41,54
00666:  DATA 2B,43
00668:  DATA 4D,47
0066A:  DATA 46,3D
0066C:  DATA 31,00
0066E:  DATA 41,54
00670:  DATA 2B,43
00672:  DATA 4D,47
00674:  DATA 53,3D
00676:  DATA 22,00
00678:  DATA 41,54
0067A:  DATA 2B,43
0067C:  DATA 4D,47
0067E:  DATA 46,3D
00680:  DATA 31,00
00682:  DATA 41,54
00684:  DATA 2B,43
00686:  DATA 4D,47
00688:  DATA 53,3D
0068A:  DATA 22,00
0068C:  DATA 41,54
0068E:  DATA 2B,43
00690:  DATA 4D,47
00692:  DATA 46,3D
00694:  DATA 31,00
00696:  DATA 41,54
00698:  DATA 2B,43
0069A:  DATA 4D,47
0069C:  DATA 53,3D
0069E:  DATA 22,00
006A0:  DATA 41,54
006A2:  DATA 2B,43
006A4:  DATA 4D,47
006A6:  DATA 46,3D
006A8:  DATA 31,00
006AA:  DATA 41,54
006AC:  DATA 2B,43
006AE:  DATA 4D,47
006B0:  DATA 53,3D
006B2:  DATA 22,00
006B4:  DATA 41,54
006B6:  DATA 2B,43
006B8:  DATA 4D,47
006BA:  DATA 46,3D
006BC:  DATA 31,00
006BE:  DATA 41,54
006C0:  DATA 2B,43
006C2:  DATA 4D,47
006C4:  DATA 53,3D
006C6:  DATA 22,00
006C8:  DATA 41,54
006CA:  DATA 2B,43
006CC:  DATA 4D,47
006CE:  DATA 46,3D
006D0:  DATA 31,00
006D2:  DATA 41,54
006D4:  DATA 2B,43
006D6:  DATA 4D,47
006D8:  DATA 53,3D
006DA:  DATA 22,00
006DC:  DATA 41,54
006DE:  DATA 2B,43
006E0:  DATA 4D,47
006E2:  DATA 46,3D
006E4:  DATA 31,00
006E6:  DATA 41,54
006E8:  DATA 2B,43
006EA:  DATA 4D,47
006EC:  DATA 53,3D
006EE:  DATA 22,00
006F0:  DATA 41,54
006F2:  DATA 2B,43
006F4:  DATA 4D,47
006F6:  DATA 53,3D
006F8:  DATA 22,00
006FA:  DATA 41,54
006FC:  DATA 2B,43
006FE:  DATA 4D,47
00700:  DATA 53,3D
00702:  DATA 22,00
00704:  DATA 41,54
00706:  DATA 2B,43
00708:  DATA 4D,47
0070A:  DATA 53,3D
0070C:  DATA 22,00
0070E:  DATA 41,54
00710:  DATA 2B,43
00712:  DATA 4D,47
00714:  DATA 53,3D
00716:  DATA 22,00
00718:  DATA 41,54
0071A:  DATA 2B,43
0071C:  DATA 4D,47
0071E:  DATA 53,3D
00720:  DATA 22,00
00722:  DATA 41,54
00724:  DATA 2B,43
00726:  DATA 4D,47
00728:  DATA 53,3D
0072A:  DATA 22,00
0072C:  DATA 41,54
0072E:  DATA 2B,43
00730:  DATA 4D,47
00732:  DATA 53,3D
00734:  DATA 22,00
00736:  DATA 41,54
00738:  DATA 2B,43
0073A:  DATA 4D,47
0073C:  DATA 53,3D
0073E:  DATA 22,00
00740:  DATA 41,54
00742:  DATA 2B,43
00744:  DATA 4D,47
00746:  DATA 46,3D
00748:  DATA 31,00
*
014C4:  MOVLB  8
014C6:  MOVF   x82,W
014C8:  ANDLW  07
014CA:  MOVWF  00
014CC:  RRCF   x82,W
014CE:  MOVWF  01
014D0:  RRCF   01,F
014D2:  RRCF   01,F
014D4:  MOVLW  1F
014D6:  ANDWF  01,F
014D8:  MOVF   01,W
014DA:  ADDWF  x83,W
014DC:  MOVWF  FE9
014DE:  MOVLW  00
014E0:  ADDWFC x84,W
014E2:  MOVWF  FEA
014E4:  MOVFF  FEF,01
014E8:  INCF   00,F
014EA:  BRA    14EE
014EC:  RRCF   01,F
014EE:  DECFSZ 00,F
014F0:  BRA    14EC
014F2:  MOVLW  01
014F4:  ANDWF  01,F
014F6:  MOVLB  0
014F8:  RETURN 0
014FA:  MOVLB  8
014FC:  MOVF   x83,W
014FE:  MULWF  x85
01500:  MOVFF  FF3,01
01504:  MOVFF  FF4,00
01508:  MULWF  x86
0150A:  MOVF   FF3,W
0150C:  ADDWF  00,F
0150E:  MOVF   x84,W
01510:  MULWF  x85
01512:  MOVF   FF3,W
01514:  ADDWFC 00,W
01516:  MOVWF  02
01518:  MOVLB  0
0151A:  RETURN 0
0151C:  MOVLB  8
0151E:  MOVF   x82,W
01520:  ANDLW  07
01522:  MOVWF  00
01524:  RRCF   x82,W
01526:  MOVWF  01
01528:  RRCF   01,F
0152A:  RRCF   01,F
0152C:  MOVLW  1F
0152E:  ANDWF  01,F
01530:  MOVF   01,W
01532:  ADDWF  x84,W
01534:  MOVWF  FE9
01536:  MOVLW  00
01538:  ADDWFC x85,W
0153A:  MOVWF  FEA
0153C:  CLRF   01
0153E:  INCF   01,F
01540:  INCF   00,F
01542:  BRA    1546
01544:  RLCF   01,F
01546:  DECFSZ 00,F
01548:  BRA    1544
0154A:  MOVF   x83,F
0154C:  BZ    1554
0154E:  MOVF   01,W
01550:  IORWF  FEF,F
01552:  BRA    155A
01554:  COMF   01,F
01556:  MOVF   01,W
01558:  ANDWF  FEF,F
0155A:  MOVLB  0
0155C:  RETURN 0
*
01C18:  ADDWF  FE8,W
01C1A:  CLRF   FF7
01C1C:  RLCF   FF7,F
01C1E:  ADDLW  33
01C20:  MOVWF  FF6
01C22:  MOVLW  1C
01C24:  ADDWFC FF7,F
01C26:  TBLRD*-
01C28:  MOVF   FF5,W
01C2A:  MOVWF  FFA
01C2C:  TBLRD*
01C2E:  MOVF   FF5,W
01C30:  MOVWF  FF9
01C32:  DATA 7E,17
01C34:  DATA 86,17
01C36:  DATA 8E,17
01C38:  DATA 96,17
01C3A:  DATA 9E,17
01C3C:  DATA A6,17
01C3E:  DATA AE,17
01C40:  DATA B6,17
01C42:  ADDWF  FE8,W
01C44:  CLRF   FF7
01C46:  RLCF   FF7,F
01C48:  ADDLW  5D
01C4A:  MOVWF  FF6
01C4C:  MOVLW  1C
01C4E:  ADDWFC FF7,F
01C50:  TBLRD*-
01C52:  MOVF   FF5,W
01C54:  MOVWF  FFA
01C56:  TBLRD*
01C58:  MOVF   FF5,W
01C5A:  MOVWF  FF9
01C5C:  DATA 9E,18
01C5E:  DATA A6,18
01C60:  DATA AE,18
01C62:  DATA B6,18
01C64:  DATA BE,18
01C66:  DATA C6,18
01C68:  DATA CE,18
01C6A:  DATA D6,18
01C6C:  ADDWF  FE8,W
01C6E:  CLRF   FF7
01C70:  RLCF   FF7,F
01C72:  ADDLW  87
01C74:  MOVWF  FF6
01C76:  MOVLW  1C
01C78:  ADDWFC FF7,F
01C7A:  TBLRD*-
01C7C:  MOVF   FF5,W
01C7E:  MOVWF  FFA
01C80:  TBLRD*
01C82:  MOVF   FF5,W
01C84:  MOVWF  FF9
01C86:  DATA F2,19
01C88:  DATA FA,19
01C8A:  DATA 02,1A
01C8C:  DATA 0A,1A
01C8E:  DATA 12,1A
01C90:  DATA 1A,1A
01C92:  DATA 22,1A
01C94:  DATA 2A,1A
01C96:  ADDWF  FE8,W
01C98:  CLRF   FF7
01C9A:  RLCF   FF7,F
01C9C:  ADDLW  B1
01C9E:  MOVWF  FF6
01CA0:  MOVLW  1C
01CA2:  ADDWFC FF7,F
01CA4:  TBLRD*-
01CA6:  MOVF   FF5,W
01CA8:  MOVWF  FFA
01CAA:  TBLRD*
01CAC:  MOVF   FF5,W
01CAE:  MOVWF  FF9
01CB0:  DATA 10,1B
01CB2:  DATA 18,1B
01CB4:  DATA 20,1B
01CB6:  DATA 28,1B
01CB8:  DATA 30,1B
01CBA:  DATA 38,1B
01CBC:  DATA 40,1B
01CBE:  DATA 48,1B
*
01F0C:  TBLRD*+
01F0E:  MOVF   FF5,F
01F10:  BZ    1F2A
01F12:  MOVFF  FF6,87D
01F16:  MOVFF  FF7,87E
01F1A:  MOVFF  FF5,87F
01F1E:  RCALL  1EC6
01F20:  MOVFF  87D,FF6
01F24:  MOVFF  87E,FF7
01F28:  BRA    1F0C
01F2A:  RETURN 0
*
04482:  MOVF   FEF,F
04484:  BZ    44A6
04486:  MOVFF  FEA,87E
0448A:  MOVFF  FE9,87D
0448E:  MOVFF  FEF,87F
04492:  CALL   1EC6
04496:  MOVFF  87E,FEA
0449A:  MOVFF  87D,FE9
0449E:  INCF   FE9,F
044A0:  BTFSC  FD8.2
044A2:  INCF   FEA,F
044A4:  BRA    4482
044A6:  RETURN 0
*
06C7C:  ADDWF  FE8,W
06C7E:  CLRF   FF7
06C80:  RLCF   FF7,F
06C82:  ADDLW  97
06C84:  MOVWF  FF6
06C86:  MOVLW  6C
06C88:  ADDWFC FF7,F
06C8A:  TBLRD*-
06C8C:  MOVF   FF5,W
06C8E:  MOVWF  FFA
06C90:  TBLRD*
06C92:  MOVF   FF5,W
06C94:  MOVWF  FF9
06C96:  DATA 30,6A
06C98:  DATA 38,6A
06C9A:  DATA 40,6A
06C9C:  DATA 48,6A
06C9E:  DATA 50,6A
06CA0:  DATA 58,6A
06CA2:  DATA 60,6A
06CA4:  DATA 68,6A
06CA6:  ADDWF  FE8,W
06CA8:  CLRF   FF7
06CAA:  RLCF   FF7,F
06CAC:  ADDLW  C1
06CAE:  MOVWF  FF6
06CB0:  MOVLW  6C
06CB2:  ADDWFC FF7,F
06CB4:  TBLRD*-
06CB6:  MOVF   FF5,W
06CB8:  MOVWF  FFA
06CBA:  TBLRD*
06CBC:  MOVF   FF5,W
06CBE:  MOVWF  FF9
06CC0:  DATA 88,6A
06CC2:  DATA 90,6A
06CC4:  DATA 98,6A
06CC6:  DATA A0,6A
06CC8:  DATA A8,6A
06CCA:  DATA B0,6A
06CCC:  DATA B8,6A
06CCE:  DATA C0,6A
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
0074A:  MOVLW  08
0074C:  MOVWF  FEA
0074E:  MOVLW  7E
00750:  MOVWF  FE9
00752:  MOVF   FEF,W
00754:  BZ    0778
00756:  MOVLW  05
00758:  MOVWF  01
0075A:  MOVLW  BF
0075C:  MOVWF  00
0075E:  CLRWDT
00760:  DECFSZ 00,F
00762:  BRA    075E
00764:  DECFSZ 01,F
00766:  BRA    075A
00768:  MOVLW  2E
0076A:  MOVWF  00
0076C:  DECFSZ 00,F
0076E:  BRA    076C
00770:  NOP   
00772:  CLRWDT
00774:  DECFSZ FEF,F
00776:  BRA    0756
00778:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_16\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR      0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP      0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW      0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL      0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
007AC:  BCF    F92.5
007AE:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
007B0:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
007B2:  MOVLB  8
007B4:  CLRF   x7F
007B6:  MOVLW  0A
007B8:  MOVWF  x80
007BA:  MOVLW  AA
007BC:  MOVWF  x81
007BE:  MOVLB  0
007C0:  RCALL  077A
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
007C2:  MOVLW  02
007C4:  MOVLB  8
007C6:  MOVWF  x7F
007C8:  MOVLW  0A
007CA:  MOVWF  x80
007CC:  MOVLW  AA
007CE:  MOVWF  x81
007D0:  MOVLB  0
007D2:  RCALL  077A
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
007D4:  MOVLW  04
007D6:  MOVLB  8
007D8:  MOVWF  x7F
007DA:  MOVLW  0A
007DC:  MOVWF  x80
007DE:  MOVLW  AA
007E0:  MOVWF  x81
007E2:  MOVLB  0
007E4:  RCALL  077A
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
007E6:  MOVLW  06
007E8:  MOVLB  8
007EA:  MOVWF  x7F
007EC:  MOVLW  0A
007EE:  MOVWF  x80
007F0:  MOVLW  AA
007F2:  MOVWF  x81
007F4:  MOVLB  0
007F6:  RCALL  077A
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
007F8:  MOVLW  08
007FA:  MOVLB  8
007FC:  MOVWF  x7F
007FE:  MOVLW  0A
00800:  MOVWF  x80
00802:  MOVLW  AA
00804:  MOVWF  x81
00806:  MOVLB  0
00808:  RCALL  077A
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
0080A:  MOVLW  0A
0080C:  MOVLB  8
0080E:  MOVWF  x7F
00810:  MOVWF  x80
00812:  MOVLW  AA
00814:  MOVWF  x81
00816:  MOVLB  0
00818:  RCALL  077A
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
0081A:  MOVLW  0C
0081C:  MOVLB  8
0081E:  MOVWF  x7F
00820:  MOVLW  0A
00822:  MOVWF  x80
00824:  MOVLW  AA
00826:  MOVWF  x81
00828:  MOVLB  0
0082A:  RCALL  077A
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
0082C:  MOVLW  0E
0082E:  MOVLB  8
00830:  MOVWF  x7F
00832:  MOVLW  0A
00834:  MOVWF  x80
00836:  MOVLW  AA
00838:  MOVWF  x81
0083A:  MOVLB  0
0083C:  RCALL  077A
....................    #endif
0083E:  GOTO   655A (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
0077A:  BCF    F92.5
0077C:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
0077E:  MOVLB  8
00780:  MOVF   x7F,W
00782:  IORLW  40
00784:  MOVWF  x82
00786:  MOVF   FC9,W
00788:  MOVFF  882,FC9
0078C:  RRCF   FC7,W
0078E:  BNC   078C
....................    #endif
....................    
....................    spi_write(reg);
00790:  MOVF   FC9,W
00792:  MOVFF  880,FC9
00796:  RRCF   FC7,W
00798:  BNC   0796
....................    spi_write(data);
0079A:  MOVF   FC9,W
0079C:  MOVFF  881,FC9
007A0:  RRCF   FC7,W
007A2:  BNC   07A0
....................    
....................    output_high(IO_CS_PIN);
007A4:  BCF    F92.5
007A6:  BSF    F89.5
007A8:  MOVLB  0
007AA:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
01450:  BCF    F92.5
01452:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
01454:  MOVLB  8
01456:  MOVF   x81,W
01458:  IORLW  41
0145A:  MOVWF  x84
0145C:  MOVF   FC9,W
0145E:  MOVFF  884,FC9
01462:  RRCF   FC7,W
01464:  BNC   1462
....................    #endif
....................    
....................    spi_write(reg);
01466:  MOVF   FC9,W
01468:  MOVFF  882,FC9
0146C:  RRCF   FC7,W
0146E:  BNC   146C
....................    retVal = spi_read(0);
01470:  MOVF   FC9,W
01472:  CLRF   FC9
01474:  RRCF   FC7,W
01476:  BNC   1474
01478:  MOVFF  FC9,883
....................    
....................    output_high(IO_CS_PIN);
0147C:  BCF    F92.5
0147E:  BSF    F89.5
....................    
....................    return retVal;
01480:  MOVFF  883,01
01484:  MOVLB  0
01486:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
01CC0:  MOVFF  87D,87F
01CC4:  MOVLW  0A
01CC6:  MOVLB  8
01CC8:  MOVWF  x80
01CCA:  MOVFF  87E,881
01CCE:  MOVLB  0
01CD0:  CALL   077A
....................    #endif
01CD4:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
01CD6:  MOVFF  87D,87F
01CDA:  MOVLW  1A
01CDC:  MOVLB  8
01CDE:  MOVWF  x80
01CE0:  MOVFF  87E,881
01CE4:  MOVLB  0
01CE6:  CALL   077A
....................    #endif
01CEA:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
01488:  MOVFF  87F,881
0148C:  MOVLW  09
0148E:  MOVLB  8
01490:  MOVWF  x82
01492:  MOVLB  0
01494:  RCALL  1450
01496:  MOVFF  01,880
....................    #endif
....................    
....................    return retVal;
0149A:  MOVLB  8
0149C:  MOVFF  880,01
014A0:  MOVLB  0
014A2:  GOTO   15C6 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
014A6:  MOVFF  87F,881
014AA:  MOVLW  19
014AC:  MOVLB  8
014AE:  MOVWF  x82
014B0:  MOVLB  0
014B2:  RCALL  1450
014B4:  MOVFF  01,880
....................    #endif
....................    
....................    return retVal;
014B8:  MOVLB  8
014BA:  MOVFF  880,01
014BE:  MOVLB  0
014C0:  GOTO   1662 (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00842:  MOVFF  875,87F
00846:  MOVLB  8
00848:  CLRF   x80
0084A:  MOVFF  876,881
0084E:  MOVLB  0
00850:  RCALL  077A
....................    #endif
00852:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00854:  MOVFF  875,87F
00858:  MOVLW  10
0085A:  MOVLB  8
0085C:  MOVWF  x80
0085E:  MOVFF  876,881
00862:  MOVLB  0
00864:  RCALL  077A
....................    #endif
00866:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
01F82:  BTFSS  F9E.4
01F84:  BRA    1F82
01F86:  MOVWF  FAD
01F88:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
01EC6:  BCF    F93.0
01EC8:  BCF    F8A.0
01ECA:  MOVLW  08
01ECC:  MOVWF  01
01ECE:  BRA    1ED0
01ED0:  NOP   
01ED2:  BSF    01.7
01ED4:  BRA    1EF6
01ED6:  BCF    01.7
01ED8:  MOVLB  8
01EDA:  RRCF   x7F,F
01EDC:  MOVLB  0
01EDE:  BTFSC  FD8.0
01EE0:  BSF    F8A.0
01EE2:  BTFSS  FD8.0
01EE4:  BCF    F8A.0
01EE6:  BSF    01.6
01EE8:  BRA    1EF6
01EEA:  BCF    01.6
01EEC:  DECFSZ 01,F
01EEE:  BRA    1ED8
01EF0:  BRA    1EF2
01EF2:  NOP   
01EF4:  BSF    F8A.0
01EF6:  MOVLW  84
01EF8:  MOVWF  FE9
01EFA:  DECFSZ FE9,F
01EFC:  BRA    1EFA
01EFE:  BRA    1F00
01F00:  NOP   
01F02:  BTFSC  01.7
01F04:  BRA    1ED6
01F06:  BTFSC  01.6
01F08:  BRA    1EEA
01F0A:  RETURN 0
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_7;
.................... int8 Red8_8;
.................... int8 Red9_15;
.................... int8 Red16_16;
.................... 
.................... int8 Green1_7;
.................... int8 Green8_8;
.................... int8 Green9_15;
.................... int8 Green16_16;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_16;
.................... 
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... 
.................... int8 Green1_8 ;
.................... int8 Green9_16 ;
.................... 
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_16 ;
.................... 
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... 
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_16 ;
.................... 
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[255];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[255];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... unsigned char index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[41];
.................... unsigned char SMS_Massage2[41];
.................... unsigned char SMS_Massage3[41];
.................... unsigned char SMS_Massage4[41];
.................... unsigned char SMS_Massage5[41];
.................... unsigned char SMS_Massage6[41];
.................... unsigned char SMS_Massage7[41];
.................... unsigned char SMS_Massage8[41];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Inputt
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8;
.................... 
.................... };
.................... 
.................... 
.................... struct Bit64 Inputt,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[30];
.................... int1 FaultNow[30];
.................... int16 ReleaseTime[30];
.................... int16 FaultDelayTime[30];
.................... 
.................... int1 FaultNCNO[17];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void StoreReleaseFault()
*
0155E:  MOVLB  8
01560:  CLRF   x7F
.................... {
....................    Signed int8 i=0;
....................    for(i=1;i<=16;i++)
01562:  MOVLW  01
01564:  MOVWF  x7F
01566:  BTFSC  x7F.7
01568:  BRA    1570
0156A:  MOVF   x7F,W
0156C:  SUBLW  10
0156E:  BNC   15B6
....................    {
....................       FaultAgo[i] = FaultNow[i];
01570:  CLRF   03
01572:  MOVF   x7F,W
01574:  MOVWF  00
01576:  BTFSC  FE8.7
01578:  DECF   03,F
0157A:  MOVWF  x80
0157C:  MOVFF  03,881
01580:  CLRF   03
01582:  MOVF   x7F,W
01584:  MOVWF  00
01586:  BTFSC  FE8.7
01588:  DECF   03,F
0158A:  MOVWF  x82
0158C:  MOVLW  07
0158E:  MOVWF  x84
01590:  MOVLW  F0
01592:  MOVWF  x83
01594:  MOVLB  0
01596:  RCALL  14C4
01598:  MOVFF  880,882
0159C:  MOVLB  8
0159E:  CLRF   x83
015A0:  BTFSC  01.0
015A2:  INCF   x83,F
015A4:  MOVLW  07
015A6:  MOVWF  x85
015A8:  MOVLW  EC
015AA:  MOVWF  x84
015AC:  MOVLB  0
015AE:  RCALL  151C
015B0:  MOVLB  8
015B2:  INCF   x7F,F
015B4:  BRA    1566
....................    }
015B6:  MOVLB  0
015B8:  GOTO   1B7A (RETURN)
.................... }
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
01F2C:  MOVLB  5
01F2E:  SETF   x7A
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
01F30:  SETF   x79
.................... 
....................    for(i = 0;i < usDataLen;i++)
01F32:  MOVLB  8
01F34:  CLRF   x83
01F36:  MOVF   x81,W
01F38:  SUBWF  x83,W
01F3A:  BC    1F7E
....................    {
....................       restart_wdt();
01F3C:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
01F3E:  MOVF   x83,W
01F40:  ADDWF  x7F,W
01F42:  MOVWF  FE9
01F44:  MOVLW  00
01F46:  ADDWFC x80,W
01F48:  MOVWF  FEA
01F4A:  MOVF   FEF,W
01F4C:  MOVLB  5
01F4E:  XORWF  x7A,W
01F50:  MOVLB  8
01F52:  MOVWF  x82
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
01F54:  CLRF   03
01F56:  MOVF   x82,W
01F58:  MOVLB  0
01F5A:  CALL   00BA
01F5E:  MOVWF  01
01F60:  MOVLB  5
01F62:  MOVF   x79,W
01F64:  XORWF  01,W
01F66:  MOVWF  x7A
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
01F68:  CLRF   03
01F6A:  MOVLB  8
01F6C:  MOVF   x82,W
01F6E:  MOVLB  0
01F70:  CALL   01CA
01F74:  MOVFF  FE8,579
01F78:  MOVLB  8
01F7A:  INCF   x83,F
01F7C:  BRA    1F36
....................    }
01F7E:  MOVLB  0
01F80:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................     
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }    
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
01F8A:  CLRF   1E
....................    
....................    Ack1_8_Send = 0x00;
01F8C:  CLRF   26
....................   
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
01F8E:  MOVLB  7
01F90:  BTFSC  xE5.0
01F92:  BRA    1F9C
01F94:  BTFSC  xDE.0
01F96:  BRA    1F9C
....................       AckSend.B1 = 1;
01F98:  BSF    xE8.0
01F9A:  BRA    1F9E
....................    else
....................       AckSend.B1 = 0;
01F9C:  BCF    xE8.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
01F9E:  BTFSC  xE5.1
01FA0:  BRA    1FAA
01FA2:  BTFSC  xDE.1
01FA4:  BRA    1FAA
....................       AckSend.B2 = 1;
01FA6:  BSF    xE8.1
01FA8:  BRA    1FAC
....................    else
....................       AckSend.B2 = 0;
01FAA:  BCF    xE8.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
01FAC:  BTFSC  xE5.2
01FAE:  BRA    1FB8
01FB0:  BTFSC  xDE.2
01FB2:  BRA    1FB8
....................       AckSend.B3 = 1;
01FB4:  BSF    xE8.2
01FB6:  BRA    1FBA
....................    else
....................       AckSend.B3 = 0;
01FB8:  BCF    xE8.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
01FBA:  BTFSC  xE5.3
01FBC:  BRA    1FC6
01FBE:  BTFSC  xDE.3
01FC0:  BRA    1FC6
....................       AckSend.B4 = 1;
01FC2:  BSF    xE8.3
01FC4:  BRA    1FC8
....................    else
....................       AckSend.B4 = 0;
01FC6:  BCF    xE8.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
01FC8:  BTFSC  xE5.4
01FCA:  BRA    1FD4
01FCC:  BTFSC  xDE.4
01FCE:  BRA    1FD4
....................       AckSend.B5 = 1;
01FD0:  BSF    xE8.4
01FD2:  BRA    1FD6
....................    else
....................       AckSend.B5 = 0;
01FD4:  BCF    xE8.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
01FD6:  BTFSC  xE5.5
01FD8:  BRA    1FE2
01FDA:  BTFSC  xDE.5
01FDC:  BRA    1FE2
....................       AckSend.B6 = 1;
01FDE:  BSF    xE8.5
01FE0:  BRA    1FE4
....................    else
....................       AckSend.B6 = 0;
01FE2:  BCF    xE8.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
01FE4:  BTFSC  xE5.6
01FE6:  BRA    1FF0
01FE8:  BTFSC  xDE.6
01FEA:  BRA    1FF0
....................       AckSend.B7 = 1;
01FEC:  BSF    xE8.6
01FEE:  BRA    1FF2
....................    else
....................       AckSend.B7 = 0;
01FF0:  BCF    xE8.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
01FF2:  BTFSC  xE5.7
01FF4:  BRA    1FFE
01FF6:  BTFSC  xDE.7
01FF8:  BRA    1FFE
....................       AckSend.B8 = 1;
01FFA:  BSF    xE8.7
01FFC:  BRA    2000
....................    else
....................       AckSend.B8 = 0;
01FFE:  BCF    xE8.7
.................... 
....................    
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
02000:  MOVLW  00
02002:  BTFSC  xE8.7
02004:  MOVLW  01
02006:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
02008:  BCF    FD8.0
0200A:  RLCF   26,W
0200C:  MOVLB  8
0200E:  MOVWF  x7F
02010:  MOVLW  00
02012:  MOVLB  7
02014:  BTFSC  xE8.6
02016:  MOVLW  01
02018:  MOVLB  8
0201A:  IORWF  x7F,W
0201C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
0201E:  BCF    FD8.0
02020:  RLCF   26,W
02022:  MOVWF  x7F
02024:  MOVLW  00
02026:  MOVLB  7
02028:  BTFSC  xE8.5
0202A:  MOVLW  01
0202C:  MOVLB  8
0202E:  IORWF  x7F,W
02030:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
02032:  BCF    FD8.0
02034:  RLCF   26,W
02036:  MOVWF  x7F
02038:  MOVLW  00
0203A:  MOVLB  7
0203C:  BTFSC  xE8.4
0203E:  MOVLW  01
02040:  MOVLB  8
02042:  IORWF  x7F,W
02044:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
02046:  BCF    FD8.0
02048:  RLCF   26,W
0204A:  MOVWF  x7F
0204C:  MOVLW  00
0204E:  MOVLB  7
02050:  BTFSC  xE8.3
02052:  MOVLW  01
02054:  MOVLB  8
02056:  IORWF  x7F,W
02058:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
0205A:  BCF    FD8.0
0205C:  RLCF   26,W
0205E:  MOVWF  x7F
02060:  MOVLW  00
02062:  MOVLB  7
02064:  BTFSC  xE8.2
02066:  MOVLW  01
02068:  MOVLB  8
0206A:  IORWF  x7F,W
0206C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
0206E:  BCF    FD8.0
02070:  RLCF   26,W
02072:  MOVWF  x7F
02074:  MOVLW  00
02076:  MOVLB  7
02078:  BTFSC  xE8.1
0207A:  MOVLW  01
0207C:  MOVLB  8
0207E:  IORWF  x7F,W
02080:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
02082:  BCF    FD8.0
02084:  RLCF   26,W
02086:  MOVWF  x7F
02088:  MOVLW  00
0208A:  MOVLB  7
0208C:  BTFSC  xE8.0
0208E:  MOVLW  01
02090:  MOVLB  8
02092:  IORWF  x7F,W
02094:  MOVWF  26
....................    
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
02096:  MOVLW  00
02098:  MOVLB  7
0209A:  BTFSC  xE5.7
0209C:  MOVLW  01
0209E:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
020A0:  BCF    FD8.0
020A2:  RLCF   1E,W
020A4:  MOVLB  8
020A6:  MOVWF  x7F
020A8:  MOVLW  00
020AA:  MOVLB  7
020AC:  BTFSC  xE5.6
020AE:  MOVLW  01
020B0:  MOVLB  8
020B2:  IORWF  x7F,W
020B4:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
020B6:  BCF    FD8.0
020B8:  RLCF   1E,W
020BA:  MOVWF  x7F
020BC:  MOVLW  00
020BE:  MOVLB  7
020C0:  BTFSC  xE5.5
020C2:  MOVLW  01
020C4:  MOVLB  8
020C6:  IORWF  x7F,W
020C8:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
020CA:  BCF    FD8.0
020CC:  RLCF   1E,W
020CE:  MOVWF  x7F
020D0:  MOVLW  00
020D2:  MOVLB  7
020D4:  BTFSC  xE5.4
020D6:  MOVLW  01
020D8:  MOVLB  8
020DA:  IORWF  x7F,W
020DC:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
020DE:  BCF    FD8.0
020E0:  RLCF   1E,W
020E2:  MOVWF  x7F
020E4:  MOVLW  00
020E6:  MOVLB  7
020E8:  BTFSC  xE5.3
020EA:  MOVLW  01
020EC:  MOVLB  8
020EE:  IORWF  x7F,W
020F0:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
020F2:  BCF    FD8.0
020F4:  RLCF   1E,W
020F6:  MOVWF  x7F
020F8:  MOVLW  00
020FA:  MOVLB  7
020FC:  BTFSC  xE5.2
020FE:  MOVLW  01
02100:  MOVLB  8
02102:  IORWF  x7F,W
02104:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
02106:  BCF    FD8.0
02108:  RLCF   1E,W
0210A:  MOVWF  x7F
0210C:  MOVLW  00
0210E:  MOVLB  7
02110:  BTFSC  xE5.1
02112:  MOVLW  01
02114:  MOVLB  8
02116:  IORWF  x7F,W
02118:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
0211A:  BCF    FD8.0
0211C:  RLCF   1E,W
0211E:  MOVWF  x7F
02120:  MOVLW  00
02122:  MOVLB  7
02124:  BTFSC  xE5.0
02126:  MOVLW  01
02128:  MOVLB  8
0212A:  IORWF  x7F,W
0212C:  MOVWF  1E
0212E:  MOVLB  0
02130:  GOTO   2AF6 (RETURN)
....................      
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x6F,W
002DE:  SUBWF  x77,W
002E0:  BNZ   0308
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x79
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  79
002E6:  ADDWF  x79,W
002E8:  MOVWF  FE9
002EA:  MOVLW  01
002EC:  MOVWF  FEA
002EE:  BTFSC  FD8.0
002F0:  INCF   FEA,F
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x79,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x77
....................      T_timeout = 0x14; //200ms
002FE:  MOVLW  14
00300:  MOVLB  6
00302:  MOVWF  x83
....................    }
00304:  BRA    052E
00306:  MOVLB  0
....................    else if(sequence == addr_sq)
00308:  MOVF   x77,W
0030A:  SUBLW  10
0030C:  BNZ   03C6
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0030E:  MOVLW  79
00310:  ADDWF  x79,W
00312:  MOVWF  FE9
00314:  MOVLW  01
00316:  MOVWF  FEA
00318:  BTFSC  FD8.0
0031A:  INCF   FEA,F
0031C:  MOVFF  2E,FEF
....................       restart_wdt();
00320:  CLRWDT
....................       RxD_DataLen ++ ;
00322:  INCF   x79,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00324:  MOVLW  01
00326:  SUBWF  x79,W
00328:  ADDLW  79
0032A:  MOVWF  FE9
0032C:  MOVLW  01
0032E:  MOVWF  FEA
00330:  BTFSC  FD8.0
00332:  INCF   FEA,F
00334:  MOVF   FEF,W
00336:  SUBLW  16
00338:  BNC   0348
....................        {
....................            sequence = code_sq;
0033A:  MOVFF  70,77
....................            T_timeout = 0x14; //200ms
0033E:  MOVLW  14
00340:  MOVLB  6
00342:  MOVWF  x83
....................        }
00344:  BRA    03C2
00346:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00348:  MOVLW  01
0034A:  SUBWF  x79,W
0034C:  ADDLW  79
0034E:  MOVWF  FE9
00350:  MOVLW  01
00352:  MOVWF  FEA
00354:  BTFSC  FD8.0
00356:  INCF   FEA,F
00358:  MOVF   FEF,W
0035A:  SUBLW  20
0035C:  BNZ   036C
....................        {
....................           sequence = ubyte_lo_sq;
0035E:  MOVFF  73,77
....................           T_timeout = 0x14; //200ms
00362:  MOVLW  14
00364:  MOVLB  6
00366:  MOVWF  x83
....................        }
00368:  BRA    03C2
0036A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
0036C:  MOVLW  01
0036E:  SUBWF  x79,W
00370:  ADDLW  79
00372:  MOVWF  FE9
00374:  MOVLW  01
00376:  MOVWF  FEA
00378:  BTFSC  FD8.0
0037A:  INCF   FEA,F
0037C:  MOVF   FEF,W
0037E:  SUBLW  21
00380:  BNZ   0390
....................        {
....................           sequence = byte_count_sq ;
00382:  MOVFF  75,77
....................           T_timeout = 0x14; //200ms
00386:  MOVLW  14
00388:  MOVLB  6
0038A:  MOVWF  x83
....................        }
0038C:  BRA    03C2
0038E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////Write setting/////
00390:  MOVLW  01
00392:  SUBWF  x79,W
00394:  ADDLW  79
00396:  MOVWF  FE9
00398:  MOVLW  01
0039A:  MOVWF  FEA
0039C:  BTFSC  FD8.0
0039E:  INCF   FEA,F
003A0:  MOVF   FEF,W
003A2:  SUBLW  22
003A4:  BNZ   03B4
....................        {
....................           sequence = byte_count_sq ;
003A6:  MOVFF  75,77
....................           T_timeout = 0x14; //200ms
003AA:  MOVLW  14
003AC:  MOVLB  6
003AE:  MOVWF  x83
....................        }
003B0:  BRA    03C2
003B2:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003B4:  CLRF   x79
....................           sequence = end_sq;
003B6:  MOVFF  6F,77
....................           T_timeout = 0x00; 
003BA:  MOVLB  6
003BC:  CLRF   x83
....................           output_bit(P485ctrl,0);
003BE:  BCF    F8A.3
003C0:  BCF    F93.3
....................        }
....................    }
003C2:  BRA    052E
003C4:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003C6:  MOVF   x75,W
003C8:  SUBWF  x77,W
003CA:  BNZ   0404
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003CC:  MOVLW  79
003CE:  ADDWF  x79,W
003D0:  MOVWF  FE9
003D2:  MOVLW  01
003D4:  MOVWF  FEA
003D6:  BTFSC  FD8.0
003D8:  INCF   FEA,F
003DA:  MOVFF  2E,FEF
....................       restart_wdt();
003DE:  CLRWDT
....................       RxD_DataLen ++ ;
003E0:  INCF   x79,F
....................       index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
003E2:  MOVLW  01
003E4:  SUBWF  x79,W
003E6:  ADDLW  79
003E8:  MOVWF  FE9
003EA:  MOVLW  01
003EC:  MOVWF  FEA
003EE:  BTFSC  FD8.0
003F0:  INCF   FEA,F
003F2:  MOVFF  FEF,684
....................       T_timeout = 0x14; //200ms
003F6:  MOVLW  14
003F8:  MOVLB  6
003FA:  MOVWF  x83
....................       sequence = data_sq ;
003FC:  MOVFF  76,77
....................    }
00400:  BRA    052E
00402:  MOVLB  0
....................    else if(sequence == data_sq)
00404:  MOVF   x76,W
00406:  SUBWF  x77,W
00408:  BNZ   0434
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
0040A:  MOVLW  79
0040C:  ADDWF  x79,W
0040E:  MOVWF  FE9
00410:  MOVLW  01
00412:  MOVWF  FEA
00414:  BTFSC  FD8.0
00416:  INCF   FEA,F
00418:  MOVFF  2E,FEF
....................       restart_wdt();
0041C:  CLRWDT
....................       RxD_DataLen ++ ;
0041E:  INCF   x79,F
....................       index -- ;                     //Data Byte Count
00420:  MOVLB  6
00422:  DECF   x84,F
....................       if(index == 0x00)
00424:  MOVF   x84,F
00426:  BNZ   042C
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
00428:  MOVFF  73,77
....................       }
....................       T_timeout = 0x14; //200ms
0042C:  MOVLW  14
0042E:  MOVWF  x83
....................    }
00430:  BRA    052E
00432:  MOVLB  0
....................    else if(sequence == code_sq)
00434:  MOVF   x70,W
00436:  SUBWF  x77,W
00438:  BNZ   045E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
0043A:  MOVLW  79
0043C:  ADDWF  x79,W
0043E:  MOVWF  FE9
00440:  MOVLW  01
00442:  MOVWF  FEA
00444:  BTFSC  FD8.0
00446:  INCF   FEA,F
00448:  MOVFF  2E,FEF
....................       restart_wdt();
0044C:  CLRWDT
....................       RxD_DataLen ++ ;
0044E:  INCF   x79,F
....................       sequence = start_addr_hi_sq;
00450:  MOVFF  71,77
....................       T_timeout = 0x14; //200ms
00454:  MOVLW  14
00456:  MOVLB  6
00458:  MOVWF  x83
.................... 
....................    }
0045A:  BRA    052E
0045C:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
0045E:  MOVF   x71,W
00460:  SUBWF  x77,W
00462:  BNZ   0488
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
00464:  MOVLW  79
00466:  ADDWF  x79,W
00468:  MOVWF  FE9
0046A:  MOVLW  01
0046C:  MOVWF  FEA
0046E:  BTFSC  FD8.0
00470:  INCF   FEA,F
00472:  MOVFF  2E,FEF
....................       restart_wdt();
00476:  CLRWDT
....................       RxD_DataLen ++ ;
00478:  INCF   x79,F
....................       sequence = start_addr_lo_sq;
0047A:  MOVFF  72,77
....................       T_timeout = 0x14; //200ms
0047E:  MOVLW  14
00480:  MOVLB  6
00482:  MOVWF  x83
....................    }
00484:  BRA    052E
00486:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
00488:  MOVF   x72,W
0048A:  SUBWF  x77,W
0048C:  BNZ   04B2
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
0048E:  MOVLW  79
00490:  ADDWF  x79,W
00492:  MOVWF  FE9
00494:  MOVLW  01
00496:  MOVWF  FEA
00498:  BTFSC  FD8.0
0049A:  INCF   FEA,F
0049C:  MOVFF  2E,FEF
....................       restart_wdt();
004A0:  CLRWDT
....................       RxD_DataLen ++ ;
004A2:  INCF   x79,F
....................       sequence = ubyte_hi_sq;
004A4:  MOVLW  15
004A6:  MOVWF  x77
....................       T_timeout = 0x14; //200ms
004A8:  MOVLW  14
004AA:  MOVLB  6
004AC:  MOVWF  x83
....................    }
004AE:  BRA    052E
004B0:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
004B2:  MOVF   x77,W
004B4:  SUBLW  15
004B6:  BNZ   04DC
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
004B8:  MOVLW  79
004BA:  ADDWF  x79,W
004BC:  MOVWF  FE9
004BE:  MOVLW  01
004C0:  MOVWF  FEA
004C2:  BTFSC  FD8.0
004C4:  INCF   FEA,F
004C6:  MOVFF  2E,FEF
....................       restart_wdt();
004CA:  CLRWDT
....................       RxD_DataLen ++ ;
004CC:  INCF   x79,F
....................       sequence = ubyte_lo_sq;
004CE:  MOVFF  73,77
....................       T_timeout = 0x14; //200ms
004D2:  MOVLW  14
004D4:  MOVLB  6
004D6:  MOVWF  x83
....................    }
004D8:  BRA    052E
004DA:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
004DC:  MOVF   x73,W
004DE:  SUBWF  x77,W
004E0:  BNZ   0506
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
004E2:  MOVLW  79
004E4:  ADDWF  x79,W
004E6:  MOVWF  FE9
004E8:  MOVLW  01
004EA:  MOVWF  FEA
004EC:  BTFSC  FD8.0
004EE:  INCF   FEA,F
004F0:  MOVFF  2E,FEF
....................       restart_wdt();
004F4:  CLRWDT
....................       RxD_DataLen ++ ;
004F6:  INCF   x79,F
....................       sequence = crc_hi_sq;
004F8:  MOVFF  74,77
....................       T_timeout = 0x14; //200ms
004FC:  MOVLW  14
004FE:  MOVLB  6
00500:  MOVWF  x83
....................    }
00502:  BRA    052E
00504:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
00506:  MOVF   x74,W
00508:  SUBWF  x77,W
0050A:  BNZ   052E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
0050C:  MOVLW  79
0050E:  ADDWF  x79,W
00510:  MOVWF  FE9
00512:  MOVLW  01
00514:  MOVWF  FEA
00516:  BTFSC  FD8.0
00518:  INCF   FEA,F
0051A:  MOVFF  2E,FEF
....................       restart_wdt();
0051E:  CLRWDT
....................       sequence = end_sq;
00520:  MOVFF  6F,77
....................       T_timeout = 0x00;
00524:  MOVLB  6
00526:  CLRF   x83
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
00528:  BSF    30.5
....................       output_bit(P485ctrl,0);
0052A:  BCF    F8A.3
0052C:  BCF    F93.3
0052E:  MOVLB  0
....................    }
00530:  GOTO   053E (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
0239A:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
0239C:  MOVLW  01
0239E:  SUBWF  x79,W
023A0:  MOVLB  8
023A2:  MOVWF  x7E
023A4:  MOVLW  01
023A6:  MOVWF  x80
023A8:  MOVLW  79
023AA:  MOVWF  x7F
023AC:  MOVFF  87E,881
023B0:  MOVLB  0
023B2:  RCALL  1F2C
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
023B4:  MOVLW  01
023B6:  SUBWF  x79,W
023B8:  ADDLW  79
023BA:  MOVWF  FE9
023BC:  MOVLW  01
023BE:  MOVWF  FEA
023C0:  BTFSC  FD8.0
023C2:  INCF   FEA,F
023C4:  MOVF   FEF,W
023C6:  MOVLB  5
023C8:  SUBWF  x7A,W
023CA:  BTFSS  FD8.2
023CC:  GOTO   4454
023D0:  MOVLW  79
023D2:  MOVLB  0
023D4:  ADDWF  x79,W
023D6:  MOVWF  FE9
023D8:  MOVLW  01
023DA:  MOVWF  FEA
023DC:  BTFSC  FD8.0
023DE:  INCF   FEA,F
023E0:  MOVF   FEF,W
023E2:  MOVLB  5
023E4:  SUBWF  x79,W
023E6:  BTFSS  FD8.2
023E8:  GOTO   4454
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
023EC:  MOVLB  1
023EE:  MOVF   x79,W
023F0:  SUBLW  AA
023F2:  BTFSS  FD8.2
023F4:  BRA    26B2
023F6:  MOVF   x7A,W
023F8:  SUBLW  20
023FA:  BTFSS  FD8.2
023FC:  BRA    26B2
....................       {
....................          TxD_Buff[0] = Address ;         //Address
023FE:  MOVFF  78,7A
....................          TxD_Buff[1] = 0x20 ;            //function code
02402:  MOVLW  20
02404:  MOVLB  0
02406:  MOVWF  x7B
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
02408:  MOVLW  1C
0240A:  MOVWF  x7C
....................          TxD_Buff[3] = InputType1_8 ;    //1
0240C:  MOVFF  3A,7D
....................          TxD_Buff[4] = InputType9_16 ;  //2
02410:  MOVFF  3B,7E
....................          TxD_Buff[5] = InputType17_24 ;//3
02414:  MOVFF  3C,7F
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
02418:  MOVFF  3D,80
....................          TxD_Buff[7] = FaultType9_16 ; //5
0241C:  MOVFF  3E,81
....................          TxD_Buff[8] = FaultType17_24 ;   //6
02420:  MOVFF  3F,82
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
02424:  MOVFF  40,83
....................          TxD_Buff[10] = OutputType9_16 ;  //8
02428:  MOVFF  41,84
....................          TxD_Buff[11] = OutputType17_24 ; //9
0242C:  MOVFF  42,85
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
02430:  MOVFF  43,86
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
02434:  MOVFF  44,87
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
02438:  MOVFF  45,88
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
0243C:  MOVFF  46,89
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
02440:  MOVFF  47,8A
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
02444:  MOVFF  48,8B
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
02448:  MOVFF  FF2,87E
0244C:  BCF    FF2.7
0244E:  CLRF   FAA
02450:  MOVLW  10
02452:  MOVWF  FA9
02454:  BCF    FA6.6
02456:  BCF    FA6.7
02458:  BSF    FA6.0
0245A:  MOVF   FA8,W
0245C:  MOVLB  8
0245E:  BTFSC  x7E.7
02460:  BSF    FF2.7
02462:  MOVLB  0
02464:  MOVWF  x8C
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
02466:  MOVFF  FF2,87E
0246A:  BCF    FF2.7
0246C:  CLRF   FAA
0246E:  MOVLW  11
02470:  MOVWF  FA9
02472:  BCF    FA6.6
02474:  BCF    FA6.7
02476:  BSF    FA6.0
02478:  MOVF   FA8,W
0247A:  MOVLB  8
0247C:  BTFSC  x7E.7
0247E:  BSF    FF2.7
02480:  MOVLB  0
02482:  MOVWF  x8D
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
02484:  MOVFF  FF2,87E
02488:  BCF    FF2.7
0248A:  CLRF   FAA
0248C:  MOVLW  12
0248E:  MOVWF  FA9
02490:  BCF    FA6.6
02492:  BCF    FA6.7
02494:  BSF    FA6.0
02496:  MOVF   FA8,W
02498:  MOVLB  8
0249A:  BTFSC  x7E.7
0249C:  BSF    FF2.7
0249E:  MOVLB  0
024A0:  MOVWF  x8E
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
024A2:  MOVFF  FF2,87E
024A6:  BCF    FF2.7
024A8:  CLRF   FAA
024AA:  MOVLW  13
024AC:  MOVWF  FA9
024AE:  BCF    FA6.6
024B0:  BCF    FA6.7
024B2:  BSF    FA6.0
024B4:  MOVF   FA8,W
024B6:  MOVLB  8
024B8:  BTFSC  x7E.7
024BA:  BSF    FF2.7
024BC:  MOVLB  0
024BE:  MOVWF  x8F
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
024C0:  MOVFF  FF2,87E
024C4:  BCF    FF2.7
024C6:  CLRF   FAA
024C8:  MOVLW  14
024CA:  MOVWF  FA9
024CC:  BCF    FA6.6
024CE:  BCF    FA6.7
024D0:  BSF    FA6.0
024D2:  MOVF   FA8,W
024D4:  MOVLB  8
024D6:  BTFSC  x7E.7
024D8:  BSF    FF2.7
024DA:  MOVLB  0
024DC:  MOVWF  x90
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
024DE:  MOVFF  FF2,87E
024E2:  BCF    FF2.7
024E4:  CLRF   FAA
024E6:  MOVLW  15
024E8:  MOVWF  FA9
024EA:  BCF    FA6.6
024EC:  BCF    FA6.7
024EE:  BSF    FA6.0
024F0:  MOVF   FA8,W
024F2:  MOVLB  8
024F4:  BTFSC  x7E.7
024F6:  BSF    FF2.7
024F8:  MOVLB  0
024FA:  MOVWF  x91
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
024FC:  MOVFF  FF2,87E
02500:  BCF    FF2.7
02502:  CLRF   FAA
02504:  MOVLW  16
02506:  MOVWF  FA9
02508:  BCF    FA6.6
0250A:  BCF    FA6.7
0250C:  BSF    FA6.0
0250E:  MOVF   FA8,W
02510:  MOVLB  8
02512:  BTFSC  x7E.7
02514:  BSF    FF2.7
02516:  MOVLB  0
02518:  MOVWF  x92
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
0251A:  MOVFF  FF2,87E
0251E:  BCF    FF2.7
02520:  CLRF   FAA
02522:  MOVLW  17
02524:  MOVWF  FA9
02526:  BCF    FA6.6
02528:  BCF    FA6.7
0252A:  BSF    FA6.0
0252C:  MOVF   FA8,W
0252E:  MOVLB  8
02530:  BTFSC  x7E.7
02532:  BSF    FF2.7
02534:  MOVLB  0
02536:  MOVWF  x93
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
02538:  MOVFF  6A,94
....................          TxD_Buff[27] = AutoAckTime ;        //25
0253C:  MOVFF  6B,95
....................          TxD_Buff[28] = FlashingRate ;       //26
02540:  MOVFF  6C,96
....................          TxD_Buff[29] = NoOfPoint ;          //27
02544:  MOVFF  6D,97
....................          TxD_Buff[30] = FaultDelayTime ;    //28
02548:  MOVLW  30
0254A:  MOVWF  x98
....................          TxD_Buff[31] = Address ;            //29
0254C:  MOVFF  78,99
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
02550:  MOVFF  832,9A
....................          TxD_Buff[33] = FaultDelayTime[2] ;
02554:  MOVFF  834,9B
....................          TxD_Buff[34] = FaultDelayTime[3] ;
02558:  MOVFF  836,9C
....................          TxD_Buff[35] = FaultDelayTime[4] ;
0255C:  MOVFF  838,9D
....................          TxD_Buff[36] = FaultDelayTime[5] ;
02560:  MOVFF  83A,9E
....................          TxD_Buff[37] = FaultDelayTime[6] ;
02564:  MOVFF  83C,9F
....................          TxD_Buff[38] = FaultDelayTime[7] ;
02568:  MOVFF  83E,A0
....................          TxD_Buff[39] = FaultDelayTime[8] ;
0256C:  MOVFF  840,A1
....................          TxD_Buff[40] = FaultDelayTime[9] ;
02570:  MOVFF  842,A2
....................          TxD_Buff[41] = FaultDelayTime[10] ;
02574:  MOVFF  844,A3
....................          TxD_Buff[42] = FaultDelayTime[11] ;
02578:  MOVFF  846,A4
....................          TxD_Buff[43] = FaultDelayTime[12] ;
0257C:  MOVFF  848,A5
....................          TxD_Buff[44] = FaultDelayTime[13] ;
02580:  MOVFF  84A,A6
....................          TxD_Buff[45] = FaultDelayTime[14] ;
02584:  MOVFF  84C,A7
....................          TxD_Buff[46] = FaultDelayTime[15] ;
02588:  MOVFF  84E,A8
....................          TxD_Buff[47] = FaultDelayTime[16] ;
0258C:  MOVFF  850,A9
....................          TxD_Buff[48] = FaultDelayTime[17] ;
02590:  MOVFF  852,AA
....................          TxD_Buff[49] = FaultDelayTime[18] ;
02594:  MOVFF  854,AB
....................          TxD_Buff[50] = FaultDelayTime[19] ;
02598:  MOVFF  856,AC
....................          TxD_Buff[51] = FaultDelayTime[20] ;
0259C:  MOVFF  858,AD
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
025A0:  MOVLB  8
025A2:  CLRF   x80
025A4:  MOVLW  7A
025A6:  MOVWF  x7F
025A8:  MOVLW  34
025AA:  MOVWF  x81
025AC:  MOVLB  0
025AE:  RCALL  1F2C
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
025B0:  MOVFF  57A,AE
....................          TxD_Buff[53] = CRC_Lo ;
025B4:  MOVFF  579,AF
.................... 
....................          output_bit(P485ctrl,1);
025B8:  BSF    F8A.3
025BA:  BCF    F93.3
....................          delay_ms(10);
025BC:  MOVLW  0A
025BE:  MOVLB  8
025C0:  MOVWF  x7E
025C2:  MOVLB  0
025C4:  CALL   074A
.................... 
....................          putc(Txd_Buff[0]);
025C8:  MOVF   x7A,W
025CA:  RCALL  1F82
....................          putc(Txd_Buff[1]);
025CC:  MOVF   x7B,W
025CE:  RCALL  1F82
....................          putc(Txd_Buff[2]);
025D0:  MOVF   x7C,W
025D2:  RCALL  1F82
....................          putc(Txd_Buff[3]);
025D4:  MOVF   x7D,W
025D6:  RCALL  1F82
....................          putc(Txd_Buff[4]);
025D8:  MOVF   x7E,W
025DA:  RCALL  1F82
....................          putc(Txd_Buff[5]);
025DC:  MOVF   x7F,W
025DE:  RCALL  1F82
....................          putc(Txd_Buff[6]);
025E0:  MOVF   x80,W
025E2:  RCALL  1F82
....................          putc(Txd_Buff[7]);
025E4:  MOVF   x81,W
025E6:  RCALL  1F82
....................          putc(Txd_Buff[8]);
025E8:  MOVF   x82,W
025EA:  RCALL  1F82
....................          putc(Txd_Buff[9]);
025EC:  MOVF   x83,W
025EE:  RCALL  1F82
....................          putc(Txd_Buff[10]);
025F0:  MOVF   x84,W
025F2:  RCALL  1F82
....................          putc(Txd_Buff[11]);
025F4:  MOVF   x85,W
025F6:  RCALL  1F82
....................          putc(Txd_Buff[12]);
025F8:  MOVF   x86,W
025FA:  RCALL  1F82
....................          putc(Txd_Buff[13]);
025FC:  MOVF   x87,W
025FE:  RCALL  1F82
....................          putc(Txd_Buff[14]);
02600:  MOVF   x88,W
02602:  RCALL  1F82
....................          putc(Txd_Buff[15]);
02604:  MOVF   x89,W
02606:  RCALL  1F82
....................          putc(Txd_Buff[16]);
02608:  MOVF   x8A,W
0260A:  RCALL  1F82
....................          putc(Txd_Buff[17]);
0260C:  MOVF   x8B,W
0260E:  RCALL  1F82
....................          putc(Txd_Buff[18]);
02610:  MOVF   x8C,W
02612:  RCALL  1F82
....................          putc(Txd_Buff[19]);
02614:  MOVF   x8D,W
02616:  RCALL  1F82
....................          putc(Txd_Buff[20]);
02618:  MOVF   x8E,W
0261A:  RCALL  1F82
....................          putc(Txd_Buff[21]);
0261C:  MOVF   x8F,W
0261E:  RCALL  1F82
....................          putc(Txd_Buff[22]);
02620:  MOVF   x90,W
02622:  RCALL  1F82
....................          putc(Txd_Buff[23]);
02624:  MOVF   x91,W
02626:  RCALL  1F82
....................          putc(Txd_Buff[24]);
02628:  MOVF   x92,W
0262A:  RCALL  1F82
....................          putc(Txd_Buff[25]);
0262C:  MOVF   x93,W
0262E:  RCALL  1F82
....................          putc(Txd_Buff[26]);
02630:  MOVF   x94,W
02632:  RCALL  1F82
....................          putc(Txd_Buff[27]);
02634:  MOVF   x95,W
02636:  RCALL  1F82
....................          putc(Txd_Buff[28]);
02638:  MOVF   x96,W
0263A:  RCALL  1F82
....................          putc(Txd_Buff[29]);
0263C:  MOVF   x97,W
0263E:  RCALL  1F82
....................          putc(Txd_Buff[30]);
02640:  MOVF   x98,W
02642:  RCALL  1F82
....................          putc(Txd_Buff[31]);
02644:  MOVF   x99,W
02646:  RCALL  1F82
....................          
....................          putc(Txd_Buff[32]);
02648:  MOVF   x9A,W
0264A:  RCALL  1F82
....................          putc(Txd_Buff[33]);
0264C:  MOVF   x9B,W
0264E:  RCALL  1F82
....................          putc(Txd_Buff[34]);
02650:  MOVF   x9C,W
02652:  RCALL  1F82
....................          putc(Txd_Buff[35]);
02654:  MOVF   x9D,W
02656:  RCALL  1F82
....................          putc(Txd_Buff[36]);
02658:  MOVF   x9E,W
0265A:  RCALL  1F82
....................          putc(Txd_Buff[37]);
0265C:  MOVF   x9F,W
0265E:  RCALL  1F82
....................          putc(Txd_Buff[38]);
02660:  MOVF   xA0,W
02662:  RCALL  1F82
....................          putc(Txd_Buff[39]);
02664:  MOVF   xA1,W
02666:  RCALL  1F82
....................          putc(Txd_Buff[40]);
02668:  MOVF   xA2,W
0266A:  RCALL  1F82
....................          putc(Txd_Buff[41]);
0266C:  MOVF   xA3,W
0266E:  RCALL  1F82
....................          
....................          putc(Txd_Buff[42]);
02670:  MOVF   xA4,W
02672:  RCALL  1F82
....................          putc(Txd_Buff[43]);
02674:  MOVF   xA5,W
02676:  RCALL  1F82
....................          putc(Txd_Buff[44]);
02678:  MOVF   xA6,W
0267A:  RCALL  1F82
....................          putc(Txd_Buff[45]);
0267C:  MOVF   xA7,W
0267E:  RCALL  1F82
....................          putc(Txd_Buff[46]);
02680:  MOVF   xA8,W
02682:  RCALL  1F82
....................          putc(Txd_Buff[47]);
02684:  MOVF   xA9,W
02686:  RCALL  1F82
....................          putc(Txd_Buff[48]);
02688:  MOVF   xAA,W
0268A:  RCALL  1F82
....................          putc(Txd_Buff[49]);
0268C:  MOVF   xAB,W
0268E:  RCALL  1F82
....................          putc(Txd_Buff[50]);
02690:  MOVF   xAC,W
02692:  RCALL  1F82
....................          putc(Txd_Buff[51]);
02694:  MOVF   xAD,W
02696:  RCALL  1F82
....................          
....................          putc(Txd_Buff[52]);
02698:  MOVF   xAE,W
0269A:  RCALL  1F82
....................          putc(Txd_Buff[53]);
0269C:  MOVF   xAF,W
0269E:  RCALL  1F82
....................        
....................          delay_ms(3);
026A0:  MOVLW  03
026A2:  MOVLB  8
026A4:  MOVWF  x7E
026A6:  MOVLB  0
026A8:  CALL   074A
....................          output_bit(P485ctrl,0);
026AC:  BCF    F8A.3
026AE:  BCF    F93.3
026B0:  MOVLB  1
....................           
....................       }
....................    
.................... 
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
026B2:  MOVLB  0
026B4:  MOVF   x78,W
026B6:  MOVLB  1
026B8:  SUBWF  x79,W
026BA:  BTFSS  FD8.2
026BC:  GOTO   444A
....................       {
....................       
....................       if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
026C0:  DECFSZ x7A,W
026C2:  BRA    2AE8
....................       {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
026C4:  MOVLB  5
026C6:  CLRF   x7E
026C8:  MOVFF  17B,57D
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
026CC:  MOVFF  57D,57E
026D0:  MOVLB  8
026D2:  CLRF   x7E
026D4:  MOVF   x7E,W
026D6:  MOVLB  1
026D8:  IORWF  x7C,W
026DA:  MOVLB  5
026DC:  MOVWF  x7D
026DE:  MOVLB  5
....................             No_PointCount = RxD_Buff[4] ;
026E0:  CLRF   x80
026E2:  MOVFF  17D,57F
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //No. of Point 16 bit
026E6:  MOVFF  57F,580
026EA:  MOVLB  8
026EC:  CLRF   x7E
026EE:  MOVF   x7E,W
026F0:  MOVLB  1
026F2:  IORWF  x7E,W
026F4:  MOVLB  5
026F6:  MOVWF  x7F
026F8:  MOVLB  5
.................... 
....................             if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
026FA:  MOVF   x7E,F
026FC:  BTFSS  FD8.2
026FE:  BRA    2A76
02700:  MOVF   x7D,W
02702:  SUBLW  0F
02704:  BTFSS  FD8.0
02706:  BRA    2A76
02708:  MOVF   x7F,W
0270A:  ADDWF  x7D,W
0270C:  MOVLB  8
0270E:  MOVWF  x7E
02710:  MOVLB  5
02712:  MOVF   x80,W
02714:  ADDWFC x7E,W
02716:  MOVLB  8
02718:  MOVWF  x7F
0271A:  MOVF   x7F,F
0271C:  BTFSC  FD8.2
0271E:  BRA    2724
02720:  MOVLB  5
02722:  BRA    2A76
02724:  MOVF   x7E,W
02726:  SUBLW  10
02728:  BTFSC  FD8.0
0272A:  BRA    2730
0272C:  MOVLB  5
0272E:  BRA    2A76
....................             {
....................                if(No_PointCount < 9) Data_ByteCount = 0x01 ;
02730:  MOVLB  5
02732:  MOVF   x80,F
02734:  BNZ   2742
02736:  MOVF   x7F,W
02738:  SUBLW  08
0273A:  BNC   2742
0273C:  MOVLW  01
0273E:  MOVWF  x81
02740:  BRA    2766
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
02742:  MOVF   x80,F
02744:  BNZ   2752
02746:  MOVF   x7F,W
02748:  SUBLW  10
0274A:  BNC   2752
0274C:  MOVLW  02
0274E:  MOVWF  x81
02750:  BRA    2766
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
02752:  MOVF   x80,F
02754:  BNZ   2762
02756:  MOVF   x7F,W
02758:  SUBLW  18
0275A:  BNC   2762
0275C:  MOVLW  03
0275E:  MOVWF  x81
02760:  BRA    2766
....................                else   Data_ByteCount = 0x01 ; //----Jack
02762:  MOVLW  01
02764:  MOVWF  x81
.................... 
....................                if(Data_ByteCount == 0x01)
02766:  DECFSZ x81,W
02768:  BRA    28AE
....................                {
.................... 
....................                   if(Start_Address < 0x09)
0276A:  MOVF   x7E,F
0276C:  BNZ   2788
0276E:  MOVF   x7D,W
02770:  SUBLW  08
02772:  BNC   2788
....................                   {
....................                      //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                       Data_Buff[0] = Input1_8 >> Start_Address ;
02774:  MOVFF  49,582
02778:  MOVF   x7D,W
0277A:  MOVWF  01
0277C:  BZ    2786
0277E:  BCF    FD8.0
02780:  RRCF   x82,F
02782:  DECFSZ 01,F
02784:  BRA    277E
....................                       //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                       //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                   }
02786:  BRA    27BC
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
02788:  MOVF   x7E,F
0278A:  BNZ   2792
0278C:  MOVF   x7D,W
0278E:  SUBLW  08
02790:  BC    27BC
02792:  MOVF   x7E,F
02794:  BNZ   27BC
02796:  MOVF   x7D,W
02798:  SUBLW  0F
0279A:  BNC   27BC
....................                   {
....................                      //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
0279C:  MOVLW  08
0279E:  SUBWF  x7D,W
027A0:  MOVWF  00
027A2:  MOVLW  00
027A4:  SUBWFB x7E,W
027A6:  MOVWF  03
027A8:  MOVFF  00,01
027AC:  MOVFF  4A,582
027B0:  MOVF   01,F
027B2:  BZ    27BC
027B4:  BCF    FD8.0
027B6:  RRCF   x82,F
027B8:  DECFSZ 01,F
027BA:  BRA    27B4
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
027BC:  MOVF   x7F,W
027BE:  SUBLW  08
027C0:  BNZ   27C8
027C2:  MOVF   x80,F
027C4:  BNZ   27C8
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
027C6:  BRA    2832
....................                   else if(No_PointCount == 0x07)
027C8:  MOVF   x7F,W
027CA:  SUBLW  07
027CC:  BNZ   27D6
027CE:  MOVF   x80,F
027D0:  BNZ   27D6
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
027D2:  BCF    x82.7
....................                   }
027D4:  BRA    2832
....................                   else if(No_PointCount == 0x06)
027D6:  MOVF   x7F,W
027D8:  SUBLW  06
027DA:  BNZ   27E6
027DC:  MOVF   x80,F
027DE:  BNZ   27E6
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
027E0:  MOVLW  3F
027E2:  ANDWF  x82,F
....................                   }
027E4:  BRA    2832
....................                   else if(No_PointCount == 0x05)
027E6:  MOVF   x7F,W
027E8:  SUBLW  05
027EA:  BNZ   27F6
027EC:  MOVF   x80,F
027EE:  BNZ   27F6
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
027F0:  MOVLW  1F
027F2:  ANDWF  x82,F
....................                   }
027F4:  BRA    2832
....................                   else if(No_PointCount == 0x04)
027F6:  MOVF   x7F,W
027F8:  SUBLW  04
027FA:  BNZ   2806
027FC:  MOVF   x80,F
027FE:  BNZ   2806
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
02800:  MOVLW  0F
02802:  ANDWF  x82,F
....................                   }
02804:  BRA    2832
....................                   else if(No_PointCount == 0x03)
02806:  MOVF   x7F,W
02808:  SUBLW  03
0280A:  BNZ   2816
0280C:  MOVF   x80,F
0280E:  BNZ   2816
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
02810:  MOVLW  07
02812:  ANDWF  x82,F
....................                   }
02814:  BRA    2832
....................                   else if(No_PointCount == 0x02)
02816:  MOVF   x7F,W
02818:  SUBLW  02
0281A:  BNZ   2826
0281C:  MOVF   x80,F
0281E:  BNZ   2826
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
02820:  MOVLW  03
02822:  ANDWF  x82,F
....................                   }
02824:  BRA    2832
....................                   else if(No_PointCount == 0x01)
02826:  DECFSZ x7F,W
02828:  BRA    2832
0282A:  MOVF   x80,F
0282C:  BNZ   2832
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
0282E:  MOVLW  01
02830:  ANDWF  x82,F
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02832:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
02836:  MOVLW  01
02838:  MOVLB  0
0283A:  MOVWF  x7B
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
0283C:  MOVFF  581,7C
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
02840:  MOVFF  582,7D
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
02844:  MOVLB  8
02846:  CLRF   x80
02848:  MOVLW  7A
0284A:  MOVWF  x7F
0284C:  MOVLW  04
0284E:  MOVWF  x81
02850:  MOVLB  0
02852:  CALL   1F2C
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
02856:  MOVFF  57A,7E
....................                   TxD_Buff[5] = CRC_Lo ;
0285A:  MOVFF  579,7F
.................... 
.................... 
....................                   output_bit(P485ctrl,1);
0285E:  BSF    F8A.3
02860:  BCF    F93.3
....................                   restart_wdt();
02862:  CLRWDT
....................                   delay_ms(4);
02864:  MOVLW  04
02866:  MOVLB  8
02868:  MOVWF  x7E
0286A:  MOVLB  0
0286C:  CALL   074A
....................                   restart_wdt();
02870:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02872:  MOVF   x7A,W
02874:  CALL   1F82
....................                   putc(TxD_Buff[1]) ;               //Function Code
02878:  MOVF   x7B,W
0287A:  CALL   1F82
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0287E:  MOVF   x7C,W
02880:  CALL   1F82
....................                   putc(TxD_Buff[3]) ;
02884:  MOVF   x7D,W
02886:  CALL   1F82
....................                   putc(TxD_Buff[4]) ;
0288A:  MOVF   x7E,W
0288C:  CALL   1F82
....................                   putc(TxD_Buff[5]) ;
02890:  MOVF   x7F,W
02892:  CALL   1F82
.................... 
....................                
....................                   restart_wdt();
02896:  CLRWDT
....................                   delay_ms(3);
02898:  MOVLW  03
0289A:  MOVLB  8
0289C:  MOVWF  x7E
0289E:  MOVLB  0
028A0:  CALL   074A
....................                   restart_wdt();
028A4:  CLRWDT
....................                   output_bit(P485ctrl,0);
028A6:  BCF    F8A.3
028A8:  BCF    F93.3
....................               
....................                }
028AA:  BRA    2A72
028AC:  MOVLB  5
....................                else if(Data_ByteCount == 0x02)
028AE:  MOVF   x81,W
028B0:  SUBLW  02
028B2:  BTFSS  FD8.2
028B4:  BRA    2A74
....................                {
.................... 
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
028B6:  MOVFF  49,582
028BA:  MOVF   x7D,W
028BC:  MOVWF  01
028BE:  BZ    28C8
028C0:  BCF    FD8.0
028C2:  RRCF   x82,F
028C4:  DECFSZ 01,F
028C6:  BRA    28C0
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
028C8:  MOVFF  4A,583
.................... 
.................... 
....................                   if((No_PointCount - 0x07) == 0x08)
028CC:  MOVLW  07
028CE:  SUBWF  x7F,W
028D0:  MOVLB  8
028D2:  MOVWF  x7E
028D4:  MOVLW  00
028D6:  MOVLB  5
028D8:  SUBWFB x80,W
028DA:  MOVLB  8
028DC:  MOVWF  x7F
028DE:  MOVF   x7E,W
028E0:  SUBLW  08
028E2:  BNZ   28EA
028E4:  MOVF   x7F,F
028E6:  BNZ   28EA
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
028E8:  BRA    29F0
....................                   else if((No_PointCount - 0x07) == 0x07)
028EA:  MOVLW  07
028EC:  MOVLB  5
028EE:  SUBWF  x7F,W
028F0:  MOVLB  8
028F2:  MOVWF  x7E
028F4:  MOVLW  00
028F6:  MOVLB  5
028F8:  SUBWFB x80,W
028FA:  MOVLB  8
028FC:  MOVWF  x7F
028FE:  MOVF   x7E,W
02900:  SUBLW  07
02902:  BNZ   290E
02904:  MOVF   x7F,F
02906:  BNZ   290E
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
02908:  MOVLB  5
0290A:  BCF    x83.7
....................                   }
0290C:  BRA    29EE
....................                   else if((No_PointCount - 0x07) == 0x06)
0290E:  MOVLW  07
02910:  MOVLB  5
02912:  SUBWF  x7F,W
02914:  MOVLB  8
02916:  MOVWF  x7E
02918:  MOVLW  00
0291A:  MOVLB  5
0291C:  SUBWFB x80,W
0291E:  MOVLB  8
02920:  MOVWF  x7F
02922:  MOVF   x7E,W
02924:  SUBLW  06
02926:  BNZ   2934
02928:  MOVF   x7F,F
0292A:  BNZ   2934
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
0292C:  MOVLW  3F
0292E:  MOVLB  5
02930:  ANDWF  x83,F
....................                   }
02932:  BRA    29EE
....................                   else if((No_PointCount - 0x07) == 0x05)
02934:  MOVLW  07
02936:  MOVLB  5
02938:  SUBWF  x7F,W
0293A:  MOVLB  8
0293C:  MOVWF  x7E
0293E:  MOVLW  00
02940:  MOVLB  5
02942:  SUBWFB x80,W
02944:  MOVLB  8
02946:  MOVWF  x7F
02948:  MOVF   x7E,W
0294A:  SUBLW  05
0294C:  BNZ   295A
0294E:  MOVF   x7F,F
02950:  BNZ   295A
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
02952:  MOVLW  1F
02954:  MOVLB  5
02956:  ANDWF  x83,F
....................                   }
02958:  BRA    29EE
....................                   else if((No_PointCount - 0x07) == 0x04)
0295A:  MOVLW  07
0295C:  MOVLB  5
0295E:  SUBWF  x7F,W
02960:  MOVLB  8
02962:  MOVWF  x7E
02964:  MOVLW  00
02966:  MOVLB  5
02968:  SUBWFB x80,W
0296A:  MOVLB  8
0296C:  MOVWF  x7F
0296E:  MOVF   x7E,W
02970:  SUBLW  04
02972:  BNZ   2980
02974:  MOVF   x7F,F
02976:  BNZ   2980
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
02978:  MOVLW  0F
0297A:  MOVLB  5
0297C:  ANDWF  x83,F
....................                   }
0297E:  BRA    29EE
....................                   else if((No_PointCount - 0x07) == 0x03)
02980:  MOVLW  07
02982:  MOVLB  5
02984:  SUBWF  x7F,W
02986:  MOVLB  8
02988:  MOVWF  x7E
0298A:  MOVLW  00
0298C:  MOVLB  5
0298E:  SUBWFB x80,W
02990:  MOVLB  8
02992:  MOVWF  x7F
02994:  MOVF   x7E,W
02996:  SUBLW  03
02998:  BNZ   29A6
0299A:  MOVF   x7F,F
0299C:  BNZ   29A6
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
0299E:  MOVLW  07
029A0:  MOVLB  5
029A2:  ANDWF  x83,F
....................                   }
029A4:  BRA    29EE
....................                   else if((No_PointCount - 0x07) == 0x02)
029A6:  MOVLW  07
029A8:  MOVLB  5
029AA:  SUBWF  x7F,W
029AC:  MOVLB  8
029AE:  MOVWF  x7E
029B0:  MOVLW  00
029B2:  MOVLB  5
029B4:  SUBWFB x80,W
029B6:  MOVLB  8
029B8:  MOVWF  x7F
029BA:  MOVF   x7E,W
029BC:  SUBLW  02
029BE:  BNZ   29CC
029C0:  MOVF   x7F,F
029C2:  BNZ   29CC
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
029C4:  MOVLW  03
029C6:  MOVLB  5
029C8:  ANDWF  x83,F
....................                   }
029CA:  BRA    29EE
....................                   else if((No_PointCount - 0x07) == 0x01)
029CC:  MOVLW  07
029CE:  MOVLB  5
029D0:  SUBWF  x7F,W
029D2:  MOVLB  8
029D4:  MOVWF  x7E
029D6:  MOVLW  00
029D8:  MOVLB  5
029DA:  SUBWFB x80,W
029DC:  MOVLB  8
029DE:  MOVWF  x7F
029E0:  DECFSZ x7E,W
029E2:  BRA    29F0
029E4:  MOVF   x7F,F
029E6:  BNZ   29F0
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
029E8:  MOVLW  01
029EA:  MOVLB  5
029EC:  ANDWF  x83,F
029EE:  MOVLB  8
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
029F0:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
029F4:  MOVLW  01
029F6:  MOVLB  0
029F8:  MOVWF  x7B
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
029FA:  MOVFF  581,7C
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
029FE:  MOVFF  582,7D
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02A02:  MOVFF  583,7E
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
02A06:  MOVLB  8
02A08:  CLRF   x80
02A0A:  MOVLW  7A
02A0C:  MOVWF  x7F
02A0E:  MOVLW  05
02A10:  MOVWF  x81
02A12:  MOVLB  0
02A14:  CALL   1F2C
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
02A18:  MOVFF  57A,7F
....................                   TxD_Buff[6] = CRC_Lo ;
02A1C:  MOVFF  579,80
.................... 
.................... 
....................                   output_bit(P485ctrl,1);
02A20:  BSF    F8A.3
02A22:  BCF    F93.3
....................                   restart_wdt();
02A24:  CLRWDT
....................                   delay_ms(4);
02A26:  MOVLW  04
02A28:  MOVLB  8
02A2A:  MOVWF  x7E
02A2C:  MOVLB  0
02A2E:  CALL   074A
....................                   restart_wdt();
02A32:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02A34:  MOVF   x7A,W
02A36:  CALL   1F82
....................                   putc(TxD_Buff[1]) ;               //Function Code
02A3A:  MOVF   x7B,W
02A3C:  CALL   1F82
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02A40:  MOVF   x7C,W
02A42:  CALL   1F82
....................                   putc(TxD_Buff[3]) ;
02A46:  MOVF   x7D,W
02A48:  CALL   1F82
....................                   putc(TxD_Buff[4]) ;
02A4C:  MOVF   x7E,W
02A4E:  CALL   1F82
....................                   putc(TxD_Buff[5]) ;
02A52:  MOVF   x7F,W
02A54:  CALL   1F82
....................                   putc(TxD_Buff[6]) ;
02A58:  MOVF   x80,W
02A5A:  CALL   1F82
.................... 
.................... 
....................                   restart_wdt();
02A5E:  CLRWDT
....................                   delay_ms(3);
02A60:  MOVLW  03
02A62:  MOVLB  8
02A64:  MOVWF  x7E
02A66:  MOVLB  0
02A68:  CALL   074A
....................                   restart_wdt();
02A6C:  CLRWDT
....................                   output_bit(P485ctrl,0);
02A6E:  BCF    F8A.3
02A70:  BCF    F93.3
02A72:  MOVLB  5
....................               
....................                }
....................             }
02A74:  BRA    2AE6
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
02A76:  MOVFF  78,7A
....................                TxD_Buff[1] = 0x81 ;         //Function Code
02A7A:  MOVLW  81
02A7C:  MOVLB  0
02A7E:  MOVWF  x7B
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
02A80:  MOVLW  02
02A82:  MOVWF  x7C
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
02A84:  MOVLB  8
02A86:  CLRF   x80
02A88:  MOVLW  7A
02A8A:  MOVWF  x7F
02A8C:  MOVLW  03
02A8E:  MOVWF  x81
02A90:  MOVLB  0
02A92:  CALL   1F2C
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
02A96:  MOVFF  57A,7D
....................                TxD_Buff[4] = CRC_Lo ;
02A9A:  MOVFF  579,7E
.................... 
....................                output_bit(P485ctrl,1);
02A9E:  BSF    F8A.3
02AA0:  BCF    F93.3
....................                restart_wdt();
02AA2:  CLRWDT
....................                delay_ms(4);
02AA4:  MOVLW  04
02AA6:  MOVLB  8
02AA8:  MOVWF  x7E
02AAA:  MOVLB  0
02AAC:  CALL   074A
....................                restart_wdt();
02AB0:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
02AB2:  MOVF   x7A,W
02AB4:  CALL   1F82
....................                putc(TxD_Buff[1]) ;               //Function Code
02AB8:  MOVF   x7B,W
02ABA:  CALL   1F82
....................                putc(TxD_Buff[2]) ;               //Byte Count
02ABE:  MOVF   x7C,W
02AC0:  CALL   1F82
....................                putc(TxD_Buff[3]) ;
02AC4:  MOVF   x7D,W
02AC6:  CALL   1F82
....................                putc(TxD_Buff[4]) ;
02ACA:  MOVF   x7E,W
02ACC:  CALL   1F82
.................... 
.................... 
....................                restart_wdt();
02AD0:  CLRWDT
....................                delay_ms(3);
02AD2:  MOVLW  03
02AD4:  MOVLB  8
02AD6:  MOVWF  x7E
02AD8:  MOVLB  0
02ADA:  CALL   074A
....................                restart_wdt();
02ADE:  CLRWDT
....................                output_bit(P485ctrl,0);
02AE0:  BCF    F8A.3
02AE2:  BCF    F93.3
02AE4:  MOVLB  5
02AE6:  MOVLB  1
....................                
....................             }
....................          }
.................... ////\*/
.................... 
.................... 
....................                  /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
02AE8:  MOVF   x7A,W
02AEA:  SUBLW  07
02AEC:  BTFSS  FD8.2
02AEE:  BRA    2C52
....................       {
....................          alarmtosend();
02AF0:  MOVLB  0
02AF2:  GOTO   1F8A
....................          
....................          disable_interrupts(INT_TIMER2);
02AF6:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
02AF8:  MOVFF  1E,582
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
02AFC:  MOVFF  1F,583
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
02B00:  MOVFF  20,584
....................             Data_Buff[3] = Input25_32_Send ;
02B04:  MOVFF  21,585
....................             Data_Buff[4] = Input33_40_Send ;
02B08:  MOVFF  22,586
....................             Data_Buff[5] = Input41_48_Send ;
02B0C:  MOVFF  23,587
....................             Data_Buff[6] = Input49_56_Send ;
02B10:  MOVFF  24,588
....................             Data_Buff[7] = Input57_64_Send ;
02B14:  MOVFF  25,589
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
02B18:  MOVFF  26,58A
....................             Data_Buff[9] = Ack9_16_Send ;
02B1C:  MOVFF  27,58B
....................             Data_Buff[10] = Ack17_24_Send ;
02B20:  MOVFF  28,58C
....................             Data_Buff[11] = Ack25_32_Send ;
02B24:  MOVFF  29,58D
....................             Data_Buff[12] = Ack33_40_Send ;
02B28:  MOVFF  2A,58E
....................             Data_Buff[13] = Ack41_48_Send ;
02B2C:  MOVFF  2B,58F
....................             Data_Buff[14] = Ack49_56_Send ;
02B30:  MOVFF  2C,590
....................             Data_Buff[15] = Ack57_64_Send ;
02B34:  MOVFF  2D,591
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
02B38:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x07 ;         //Function Code
02B3C:  MOVLW  07
02B3E:  MOVWF  x7B
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
02B40:  MOVLW  10
02B42:  MOVLB  5
02B44:  MOVWF  x81
02B46:  MOVFF  581,7C
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02B4A:  MOVFF  582,7D
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02B4E:  MOVFF  583,7E
....................             TxD_Buff[5] = Data_Buff[2] ;  
02B52:  MOVFF  584,7F
....................             TxD_Buff[6] = Data_Buff[3] ;
02B56:  MOVFF  585,80
....................             TxD_Buff[7] = Data_Buff[4] ;
02B5A:  MOVFF  586,81
....................             TxD_Buff[8] = Data_Buff[5] ;
02B5E:  MOVFF  587,82
....................             TxD_Buff[9] = Data_Buff[6] ;
02B62:  MOVFF  588,83
....................             TxD_Buff[10] = Data_Buff[7] ;
02B66:  MOVFF  589,84
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
02B6A:  MOVFF  58A,85
....................            TxD_Buff[12] = Data_Buff[9] ;
02B6E:  MOVFF  58B,86
....................            TxD_Buff[13] = Data_Buff[10] ;
02B72:  MOVFF  58C,87
....................            TxD_Buff[14] = Data_Buff[11] ;
02B76:  MOVFF  58D,88
....................            TxD_Buff[15] = Data_Buff[12] ;
02B7A:  MOVFF  58E,89
....................            TxD_Buff[16] = Data_Buff[13] ;
02B7E:  MOVFF  58F,8A
....................            TxD_Buff[17] = Data_Buff[14] ;
02B82:  MOVFF  590,8B
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
02B86:  MOVFF  591,8C
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
02B8A:  MOVLB  8
02B8C:  CLRF   x80
02B8E:  MOVLW  7A
02B90:  MOVWF  x7F
02B92:  MOVLW  13
02B94:  MOVWF  x81
02B96:  MOVLB  0
02B98:  CALL   1F2C
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
02B9C:  MOVFF  57A,8D
....................           TxD_Buff[20] = CRC_Lo ;
02BA0:  MOVFF  579,8E
.................... 
....................         
....................          output_bit(P485ctrl,1);
02BA4:  BSF    F8A.3
02BA6:  BCF    F93.3
....................          restart_wdt();
02BA8:  CLRWDT
....................          delay_ms(4);
02BAA:  MOVLW  04
02BAC:  MOVLB  8
02BAE:  MOVWF  x7E
02BB0:  MOVLB  0
02BB2:  CALL   074A
....................          restart_wdt();
02BB6:  CLRWDT
....................          
....................          
....................          
....................          putc(TxD_Buff[0]) ;               //Address
02BB8:  MOVF   x7A,W
02BBA:  CALL   1F82
....................          putc(TxD_Buff[1]) ;               //Function Code
02BBE:  MOVF   x7B,W
02BC0:  CALL   1F82
....................          putc(TxD_Buff[2]) ;               //Byte Count
02BC4:  MOVF   x7C,W
02BC6:  CALL   1F82
....................          putc(TxD_Buff[3]) ;
02BCA:  MOVF   x7D,W
02BCC:  CALL   1F82
....................          putc(TxD_Buff[4]) ;
02BD0:  MOVF   x7E,W
02BD2:  CALL   1F82
....................          putc(TxD_Buff[5]) ;
02BD6:  MOVF   x7F,W
02BD8:  CALL   1F82
....................          putc(TxD_Buff[6]) ;
02BDC:  MOVF   x80,W
02BDE:  CALL   1F82
....................          putc(TxD_Buff[7]) ;
02BE2:  MOVF   x81,W
02BE4:  CALL   1F82
....................          putc(TxD_Buff[8]) ;
02BE8:  MOVF   x82,W
02BEA:  CALL   1F82
....................          putc(TxD_Buff[9]) ;
02BEE:  MOVF   x83,W
02BF0:  CALL   1F82
....................          putc(TxD_Buff[10]) ;
02BF4:  MOVF   x84,W
02BF6:  CALL   1F82
....................          putc(TxD_Buff[11]) ;
02BFA:  MOVF   x85,W
02BFC:  CALL   1F82
....................          putc(TxD_Buff[12]) ;
02C00:  MOVF   x86,W
02C02:  CALL   1F82
....................          putc(TxD_Buff[13]) ;
02C06:  MOVF   x87,W
02C08:  CALL   1F82
....................          putc(TxD_Buff[14]) ;
02C0C:  MOVF   x88,W
02C0E:  CALL   1F82
....................          putc(TxD_Buff[15]) ;
02C12:  MOVF   x89,W
02C14:  CALL   1F82
....................          putc(TxD_Buff[16]) ;
02C18:  MOVF   x8A,W
02C1A:  CALL   1F82
....................          putc(TxD_Buff[17]) ;
02C1E:  MOVF   x8B,W
02C20:  CALL   1F82
....................          putc(TxD_Buff[18]) ;
02C24:  MOVF   x8C,W
02C26:  CALL   1F82
....................          putc(TxD_Buff[19]) ;
02C2A:  MOVF   x8D,W
02C2C:  CALL   1F82
....................          putc(TxD_Buff[20]) ;
02C30:  MOVF   x8E,W
02C32:  CALL   1F82
.................... 
....................          restart_wdt();
02C36:  CLRWDT
....................          delay_ms(3);
02C38:  MOVLW  03
02C3A:  MOVLB  8
02C3C:  MOVWF  x7E
02C3E:  MOVLB  0
02C40:  CALL   074A
....................          restart_wdt();
02C44:  CLRWDT
....................          output_bit(P485ctrl,0);
02C46:  BCF    F8A.3
02C48:  BCF    F93.3
....................            
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
02C4A:  BSF    F9D.1
....................      
....................        }
02C4C:  GOTO   43B4
02C50:  MOVLB  1
....................       /////////////////////////////////////////////////////////////////
.................... 
....................        else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
02C52:  MOVF   x7A,W
02C54:  SUBLW  05
02C56:  BTFSS  FD8.2
02C58:  BRA    3146
....................          {
....................             //Do Force Coil
....................             Start_Address = RxD_Buff[2] ;
02C5A:  MOVLB  5
02C5C:  CLRF   x7E
02C5E:  MOVFF  17B,57D
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
02C62:  MOVFF  57D,57E
02C66:  MOVLB  8
02C68:  CLRF   x7E
02C6A:  MOVF   x7E,W
02C6C:  MOVLB  1
02C6E:  IORWF  x7C,W
02C70:  MOVLB  5
02C72:  MOVWF  x7D
02C74:  MOVLB  5
....................             No_PointCount = RxD_Buff[4] ;
02C76:  CLRF   x80
02C78:  MOVFF  17D,57F
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
02C7C:  MOVFF  57F,580
02C80:  MOVLB  8
02C82:  CLRF   x7E
02C84:  MOVF   x7E,W
02C86:  MOVLB  1
02C88:  IORWF  x7E,W
02C8A:  MOVLB  5
02C8C:  MOVWF  x7F
02C8E:  MOVLB  5
.................... 
....................             if(Start_Address == 0x00)   ////// Acknowlegde //////
02C90:  MOVF   x7D,F
02C92:  BNZ   2D32
02C94:  MOVF   x7E,F
02C96:  BNZ   2D32
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02C98:  MOVF   x7F,F
02C9A:  BNZ   2D30
02C9C:  INCFSZ x80,W
02C9E:  BRA    2D30
....................                {
....................                   //Modbus_ACK = 1 ;
....................                   AutoAckFlag = 1;
02CA0:  BSF    1A.2
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02CA2:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02CA6:  MOVLW  05
02CA8:  MOVLB  0
02CAA:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02CAC:  MOVFF  17B,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02CB0:  MOVFF  17C,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02CB4:  MOVFF  17D,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02CB8:  MOVFF  17E,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02CBC:  MOVLB  8
02CBE:  CLRF   x80
02CC0:  MOVLW  7A
02CC2:  MOVWF  x7F
02CC4:  MOVLW  06
02CC6:  MOVWF  x81
02CC8:  MOVLB  0
02CCA:  CALL   1F2C
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02CCE:  MOVFF  57A,80
....................                   TxD_Buff[7] = CRC_Lo ;
02CD2:  MOVFF  579,81
.................... 
....................                   output_bit(P485ctrl,1);
02CD6:  BSF    F8A.3
02CD8:  BCF    F93.3
....................                   restart_wdt();
02CDA:  CLRWDT
....................                   delay_ms(4);
02CDC:  MOVLW  04
02CDE:  MOVLB  8
02CE0:  MOVWF  x7E
02CE2:  MOVLB  0
02CE4:  CALL   074A
....................                   restart_wdt();
02CE8:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02CEA:  MOVF   x7A,W
02CEC:  CALL   1F82
....................                   putc(TxD_Buff[1]) ;               //Function Code
02CF0:  MOVF   x7B,W
02CF2:  CALL   1F82
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02CF6:  MOVF   x7C,W
02CF8:  CALL   1F82
....................                   putc(TxD_Buff[3]) ;
02CFC:  MOVF   x7D,W
02CFE:  CALL   1F82
....................                   putc(TxD_Buff[4]) ;
02D02:  MOVF   x7E,W
02D04:  CALL   1F82
....................                   putc(TxD_Buff[5]) ;
02D08:  MOVF   x7F,W
02D0A:  CALL   1F82
....................                   putc(TxD_Buff[6]) ;
02D0E:  MOVF   x80,W
02D10:  CALL   1F82
....................                   putc(TxD_Buff[7]) ;
02D14:  MOVF   x81,W
02D16:  CALL   1F82
.................... 
.................... 
....................                   restart_wdt();
02D1A:  CLRWDT
....................                   delay_ms(3);
02D1C:  MOVLW  03
02D1E:  MOVLB  8
02D20:  MOVWF  x7E
02D22:  MOVLB  0
02D24:  CALL   074A
....................                   restart_wdt();
02D28:  CLRWDT
....................                   output_bit(P485ctrl,0);
02D2A:  BCF    F8A.3
02D2C:  BCF    F93.3
02D2E:  MOVLB  5
....................               
....................                }
....................             }
02D30:  BRA    3140
....................             else if(Start_Address == 0x01)   ///// Reset //////
02D32:  DECFSZ x7D,W
02D34:  BRA    2DD4
02D36:  MOVF   x7E,F
02D38:  BNZ   2DD4
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02D3A:  MOVF   x7F,F
02D3C:  BNZ   2DD2
02D3E:  INCFSZ x80,W
02D40:  BRA    2DD2
....................                {
....................                   //Modbus_RET = 1 ;
....................                   AutoResetFlag = 1;
02D42:  BSF    1A.3
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
02D44:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02D48:  MOVLW  05
02D4A:  MOVLB  0
02D4C:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02D4E:  MOVFF  17B,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02D52:  MOVFF  17C,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02D56:  MOVFF  17D,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02D5A:  MOVFF  17E,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02D5E:  MOVLB  8
02D60:  CLRF   x80
02D62:  MOVLW  7A
02D64:  MOVWF  x7F
02D66:  MOVLW  06
02D68:  MOVWF  x81
02D6A:  MOVLB  0
02D6C:  CALL   1F2C
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02D70:  MOVFF  57A,80
....................                   TxD_Buff[7] = CRC_Lo ;
02D74:  MOVFF  579,81
.................... 
.................... 
....................               output_bit(P485ctrl,1);
02D78:  BSF    F8A.3
02D7A:  BCF    F93.3
....................                   restart_wdt();
02D7C:  CLRWDT
....................                   delay_ms(4);
02D7E:  MOVLW  04
02D80:  MOVLB  8
02D82:  MOVWF  x7E
02D84:  MOVLB  0
02D86:  CALL   074A
....................                   restart_wdt();
02D8A:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02D8C:  MOVF   x7A,W
02D8E:  CALL   1F82
....................                   putc(TxD_Buff[1]) ;               //Function Code
02D92:  MOVF   x7B,W
02D94:  CALL   1F82
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02D98:  MOVF   x7C,W
02D9A:  CALL   1F82
....................                   putc(TxD_Buff[3]) ;
02D9E:  MOVF   x7D,W
02DA0:  CALL   1F82
....................                   putc(TxD_Buff[4]) ;
02DA4:  MOVF   x7E,W
02DA6:  CALL   1F82
....................                   putc(TxD_Buff[5]) ;
02DAA:  MOVF   x7F,W
02DAC:  CALL   1F82
....................                   putc(TxD_Buff[6]) ;
02DB0:  MOVF   x80,W
02DB2:  CALL   1F82
....................                   putc(TxD_Buff[7]) ;
02DB6:  MOVF   x81,W
02DB8:  CALL   1F82
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02DBC:  CLRWDT
....................                   delay_ms(3);
02DBE:  MOVLW  03
02DC0:  MOVLB  8
02DC2:  MOVWF  x7E
02DC4:  MOVLB  0
02DC6:  CALL   074A
....................                   restart_wdt();
02DCA:  CLRWDT
....................                   output_bit(P485ctrl,0);
02DCC:  BCF    F8A.3
02DCE:  BCF    F93.3
02DD0:  MOVLB  5
....................               
....................                }
....................             }
02DD2:  BRA    3140
....................             else if(Start_Address == 0x02)   ///// Test //////
02DD4:  MOVF   x7D,W
02DD6:  SUBLW  02
02DD8:  BTFSS  FD8.2
02DDA:  BRA    2F26
02DDC:  MOVF   x7E,F
02DDE:  BTFSS  FD8.2
02DE0:  BRA    2F26
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02DE2:  MOVF   x7F,F
02DE4:  BNZ   2E7C
02DE6:  INCFSZ x80,W
02DE8:  BRA    2E7C
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   AutoTestFlag = 1;
02DEA:  BSF    1A.4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02DEC:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02DF0:  MOVLW  05
02DF2:  MOVLB  0
02DF4:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02DF6:  MOVFF  17B,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02DFA:  MOVFF  17C,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02DFE:  MOVFF  17D,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02E02:  MOVFF  17E,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02E06:  MOVLB  8
02E08:  CLRF   x80
02E0A:  MOVLW  7A
02E0C:  MOVWF  x7F
02E0E:  MOVLW  06
02E10:  MOVWF  x81
02E12:  MOVLB  0
02E14:  CALL   1F2C
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02E18:  MOVFF  57A,80
....................                   TxD_Buff[7] = CRC_Lo ;
02E1C:  MOVFF  579,81
.................... 
....................                   output_bit(P485ctrl,1);
02E20:  BSF    F8A.3
02E22:  BCF    F93.3
....................                   restart_wdt();
02E24:  CLRWDT
....................                   delay_ms(4);
02E26:  MOVLW  04
02E28:  MOVLB  8
02E2A:  MOVWF  x7E
02E2C:  MOVLB  0
02E2E:  CALL   074A
....................                   restart_wdt();
02E32:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02E34:  MOVF   x7A,W
02E36:  CALL   1F82
....................                   putc(TxD_Buff[1]) ;               //Function Code
02E3A:  MOVF   x7B,W
02E3C:  CALL   1F82
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02E40:  MOVF   x7C,W
02E42:  CALL   1F82
....................                   putc(TxD_Buff[3]) ;
02E46:  MOVF   x7D,W
02E48:  CALL   1F82
....................                   putc(TxD_Buff[4]) ;
02E4C:  MOVF   x7E,W
02E4E:  CALL   1F82
....................                   putc(TxD_Buff[5]) ;
02E52:  MOVF   x7F,W
02E54:  CALL   1F82
....................                   putc(TxD_Buff[6]) ;
02E58:  MOVF   x80,W
02E5A:  CALL   1F82
....................                   putc(TxD_Buff[7]) ;
02E5E:  MOVF   x81,W
02E60:  CALL   1F82
.................... 
....................                   restart_wdt();
02E64:  CLRWDT
....................                   delay_ms(3);
02E66:  MOVLW  03
02E68:  MOVLB  8
02E6A:  MOVWF  x7E
02E6C:  MOVLB  0
02E6E:  CALL   074A
....................                   restart_wdt();
02E72:  CLRWDT
....................                   output_bit(P485ctrl,0);
02E74:  BCF    F8A.3
02E76:  BCF    F93.3
....................              
....................                }
02E78:  BRA    2F22
02E7A:  MOVLB  5
....................                else if(No_PointCount == 0x00)   //OFF
02E7C:  MOVF   x7F,F
02E7E:  BNZ   2F24
02E80:  MOVF   x80,F
02E82:  BNZ   2F24
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   AutoTestFlag = 0;
02E84:  BCF    1A.4
....................                   Read_input();
02E86:  MOVLB  0
02E88:  CALL   15BC
....................                   AutoAckFlag = 1;
02E8C:  BSF    1A.2
....................                   check_ack();
02E8E:  CALL   2134
....................                   AutoResetFlag = 1;
02E92:  BSF    1A.3
....................                   check_reset();
02E94:  CALL   2218
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02E98:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02E9C:  MOVLW  05
02E9E:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02EA0:  MOVFF  17B,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02EA4:  MOVFF  17C,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02EA8:  MOVFF  17D,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02EAC:  MOVFF  17E,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02EB0:  MOVLB  8
02EB2:  CLRF   x80
02EB4:  MOVLW  7A
02EB6:  MOVWF  x7F
02EB8:  MOVLW  06
02EBA:  MOVWF  x81
02EBC:  MOVLB  0
02EBE:  CALL   1F2C
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02EC2:  MOVFF  57A,80
....................                   TxD_Buff[7] = CRC_Lo ;
02EC6:  MOVFF  579,81
.................... 
....................                   output_bit(P485ctrl,1);
02ECA:  BSF    F8A.3
02ECC:  BCF    F93.3
....................                   restart_wdt();
02ECE:  CLRWDT
....................                   delay_ms(4);
02ED0:  MOVLW  04
02ED2:  MOVLB  8
02ED4:  MOVWF  x7E
02ED6:  MOVLB  0
02ED8:  CALL   074A
....................                   restart_wdt();
02EDC:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02EDE:  MOVF   x7A,W
02EE0:  CALL   1F82
....................                   putc(TxD_Buff[1]) ;               //Function Code
02EE4:  MOVF   x7B,W
02EE6:  CALL   1F82
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02EEA:  MOVF   x7C,W
02EEC:  CALL   1F82
....................                   putc(TxD_Buff[3]) ;
02EF0:  MOVF   x7D,W
02EF2:  CALL   1F82
....................                   putc(TxD_Buff[4]) ;
02EF6:  MOVF   x7E,W
02EF8:  CALL   1F82
....................                   putc(TxD_Buff[5]) ;
02EFC:  MOVF   x7F,W
02EFE:  CALL   1F82
....................                   putc(TxD_Buff[6]) ;
02F02:  MOVF   x80,W
02F04:  CALL   1F82
....................                   putc(TxD_Buff[7]) ;
02F08:  MOVF   x81,W
02F0A:  CALL   1F82
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02F0E:  CLRWDT
....................                   delay_ms(3);
02F10:  MOVLW  03
02F12:  MOVLB  8
02F14:  MOVWF  x7E
02F16:  MOVLB  0
02F18:  CALL   074A
....................                   restart_wdt();
02F1C:  CLRWDT
....................                   output_bit(P485ctrl,0);
02F1E:  BCF    F8A.3
02F20:  BCF    F93.3
02F22:  MOVLB  5
....................                   
....................                }
....................             }
02F24:  BRA    3140
....................             else if(Start_Address == 0x03)   ///// Function Test //////
02F26:  MOVF   x7D,W
02F28:  SUBLW  03
02F2A:  BTFSS  FD8.2
02F2C:  BRA    3078
02F2E:  MOVF   x7E,F
02F30:  BTFSS  FD8.2
02F32:  BRA    3078
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
02F34:  MOVF   x7F,F
02F36:  BNZ   2FCE
02F38:  INCFSZ x80,W
02F3A:  BRA    2FCE
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   test_fault = 1 ;
02F3C:  BSF    1A.5
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02F3E:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02F42:  MOVLW  05
02F44:  MOVLB  0
02F46:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02F48:  MOVFF  17B,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02F4C:  MOVFF  17C,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02F50:  MOVFF  17D,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02F54:  MOVFF  17E,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
02F58:  MOVLB  8
02F5A:  CLRF   x80
02F5C:  MOVLW  7A
02F5E:  MOVWF  x7F
02F60:  MOVLW  06
02F62:  MOVWF  x81
02F64:  MOVLB  0
02F66:  CALL   1F2C
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
02F6A:  MOVFF  57A,80
....................                   TxD_Buff[7] = CRC_Lo ;
02F6E:  MOVFF  579,81
.................... 
....................                  output_bit(P485ctrl,1);
02F72:  BSF    F8A.3
02F74:  BCF    F93.3
....................                   restart_wdt();
02F76:  CLRWDT
....................                   delay_ms(4);
02F78:  MOVLW  04
02F7A:  MOVLB  8
02F7C:  MOVWF  x7E
02F7E:  MOVLB  0
02F80:  CALL   074A
....................                   restart_wdt();
02F84:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
02F86:  MOVF   x7A,W
02F88:  CALL   1F82
....................                   putc(TxD_Buff[1]) ;               //Function Code
02F8C:  MOVF   x7B,W
02F8E:  CALL   1F82
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02F92:  MOVF   x7C,W
02F94:  CALL   1F82
....................                   putc(TxD_Buff[3]) ;
02F98:  MOVF   x7D,W
02F9A:  CALL   1F82
....................                   putc(TxD_Buff[4]) ;
02F9E:  MOVF   x7E,W
02FA0:  CALL   1F82
....................                   putc(TxD_Buff[5]) ;
02FA4:  MOVF   x7F,W
02FA6:  CALL   1F82
....................                   putc(TxD_Buff[6]) ;
02FAA:  MOVF   x80,W
02FAC:  CALL   1F82
....................                   putc(TxD_Buff[7]) ;
02FB0:  MOVF   x81,W
02FB2:  CALL   1F82
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
02FB6:  CLRWDT
....................                   delay_ms(10);
02FB8:  MOVLW  0A
02FBA:  MOVLB  8
02FBC:  MOVWF  x7E
02FBE:  MOVLB  0
02FC0:  CALL   074A
....................                   restart_wdt();
02FC4:  CLRWDT
....................                   output_bit(P485ctrl,0);
02FC6:  BCF    F8A.3
02FC8:  BCF    F93.3
....................                }
02FCA:  BRA    3074
02FCC:  MOVLB  5
....................                else if(No_PointCount == 0x00)   //OFF
02FCE:  MOVF   x7F,F
02FD0:  BNZ   3076
02FD2:  MOVF   x80,F
02FD4:  BNZ   3076
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   test_fault = 0;
02FD6:  BCF    1A.5
....................                   Read_input();
02FD8:  MOVLB  0
02FDA:  CALL   15BC
....................                   AutoAckFlag = 1;
02FDE:  BSF    1A.2
....................                   check_ack();
02FE0:  CALL   2134
....................                   AutoResetFlag = 1;
02FE4:  BSF    1A.3
....................                   check_reset();
02FE6:  CALL   2218
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
02FEA:  MOVFF  78,7A
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
02FEE:  MOVLW  05
02FF0:  MOVWF  x7B
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
02FF2:  MOVFF  17B,7C
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
02FF6:  MOVFF  17C,7D
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
02FFA:  MOVFF  17D,7E
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
02FFE:  MOVFF  17E,7F
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
03002:  MOVLB  8
03004:  CLRF   x80
03006:  MOVLW  7A
03008:  MOVWF  x7F
0300A:  MOVLW  06
0300C:  MOVWF  x81
0300E:  MOVLB  0
03010:  CALL   1F2C
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
03014:  MOVFF  57A,80
....................                   TxD_Buff[7] = CRC_Lo ;
03018:  MOVFF  579,81
.................... 
....................                   output_bit(P485ctrl,1);
0301C:  BSF    F8A.3
0301E:  BCF    F93.3
....................                   restart_wdt();
03020:  CLRWDT
....................                   delay_ms(4);
03022:  MOVLW  04
03024:  MOVLB  8
03026:  MOVWF  x7E
03028:  MOVLB  0
0302A:  CALL   074A
....................                   restart_wdt();
0302E:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
03030:  MOVF   x7A,W
03032:  CALL   1F82
....................                   putc(TxD_Buff[1]) ;               //Function Code
03036:  MOVF   x7B,W
03038:  CALL   1F82
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0303C:  MOVF   x7C,W
0303E:  CALL   1F82
....................                   putc(TxD_Buff[3]) ;
03042:  MOVF   x7D,W
03044:  CALL   1F82
....................                   putc(TxD_Buff[4]) ;
03048:  MOVF   x7E,W
0304A:  CALL   1F82
....................                   putc(TxD_Buff[5]) ;
0304E:  MOVF   x7F,W
03050:  CALL   1F82
....................                   putc(TxD_Buff[6]) ;
03054:  MOVF   x80,W
03056:  CALL   1F82
....................                   putc(TxD_Buff[7]) ;
0305A:  MOVF   x81,W
0305C:  CALL   1F82
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
03060:  CLRWDT
....................                   delay_ms(3);
03062:  MOVLW  03
03064:  MOVLB  8
03066:  MOVWF  x7E
03068:  MOVLB  0
0306A:  CALL   074A
....................                   restart_wdt();
0306E:  CLRWDT
....................                   output_bit(P485ctrl,0);
03070:  BCF    F8A.3
03072:  BCF    F93.3
03074:  MOVLB  5
....................                   
....................                }
....................             }
03076:  BRA    3140
....................             else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
03078:  MOVF   x7D,W
0307A:  SUBLW  64
0307C:  BNZ   3140
0307E:  MOVF   x7E,F
03080:  BNZ   3140
....................             {
....................                Address = No_PointCount;
03082:  MOVFF  57F,78
....................                write_eeprom(0x1D,Address);   //Communication Address
03086:  MOVF   FF2,W
03088:  MOVWF  00
0308A:  BCF    FF2.7
0308C:  CLRF   FAA
0308E:  MOVLW  1D
03090:  MOVWF  FA9
03092:  MOVFF  78,FA8
03096:  BCF    FA6.6
03098:  BCF    FA6.7
0309A:  BSF    FA6.2
0309C:  MOVLB  F
0309E:  MOVLW  55
030A0:  MOVWF  FA7
030A2:  MOVLW  AA
030A4:  MOVWF  FA7
030A6:  BSF    FA6.1
030A8:  BTFSC  FA6.1
030AA:  BRA    30A8
030AC:  BCF    FA6.2
030AE:  MOVF   00,W
030B0:  IORWF  FF2,F
....................                
....................                TxD_Buff[0] = Address ;         //Address
030B2:  MOVFF  78,7A
....................                TxD_Buff[1] = 0x05 ;         //Function Code
030B6:  MOVLW  05
030B8:  MOVLB  0
030BA:  MOVWF  x7B
....................                TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
030BC:  MOVFF  17B,7C
....................                TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
030C0:  MOVFF  17C,7D
....................                TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
030C4:  MOVFF  17D,7E
....................                TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
030C8:  MOVFF  17E,7F
.................... 
....................                CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
030CC:  MOVLB  8
030CE:  CLRF   x80
030D0:  MOVLW  7A
030D2:  MOVWF  x7F
030D4:  MOVLW  06
030D6:  MOVWF  x81
030D8:  MOVLB  0
030DA:  CALL   1F2C
.................... 
....................                TxD_Buff[6] = CRC_Hi ;
030DE:  MOVFF  57A,80
....................                TxD_Buff[7] = CRC_Lo ;
030E2:  MOVFF  579,81
.................... 
....................                output_bit(P485ctrl,1);
030E6:  BSF    F8A.3
030E8:  BCF    F93.3
....................                restart_wdt();
030EA:  CLRWDT
....................                delay_ms(4);
030EC:  MOVLW  04
030EE:  MOVLB  8
030F0:  MOVWF  x7E
030F2:  MOVLB  0
030F4:  CALL   074A
....................                restart_wdt();
030F8:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
030FA:  MOVF   x7A,W
030FC:  CALL   1F82
....................                putc(TxD_Buff[1]) ;               //Function Code
03100:  MOVF   x7B,W
03102:  CALL   1F82
....................                putc(TxD_Buff[2]) ;               //Byte Count
03106:  MOVF   x7C,W
03108:  CALL   1F82
....................                putc(TxD_Buff[3]) ;
0310C:  MOVF   x7D,W
0310E:  CALL   1F82
....................                putc(TxD_Buff[4]) ;
03112:  MOVF   x7E,W
03114:  CALL   1F82
....................                putc(TxD_Buff[5]) ;
03118:  MOVF   x7F,W
0311A:  CALL   1F82
....................                putc(TxD_Buff[6]) ;
0311E:  MOVF   x80,W
03120:  CALL   1F82
....................                putc(TxD_Buff[7]) ;
03124:  MOVF   x81,W
03126:  CALL   1F82
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
0312A:  CLRWDT
....................                delay_ms(3);
0312C:  MOVLW  03
0312E:  MOVLB  8
03130:  MOVWF  x7E
03132:  MOVLB  0
03134:  CALL   074A
....................                restart_wdt();
03138:  CLRWDT
....................                output_bit(P485ctrl,0);
0313A:  BCF    F8A.3
0313C:  BCF    F93.3
0313E:  MOVLB  5
.................... 
.................... 
....................                //save_addr();
....................             }
....................          }
03140:  GOTO   43B6
03144:  MOVLB  1
....................          //--------------------------------------------------//
.................... 
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
03146:  MOVF   x7A,W
03148:  SUBLW  21
0314A:  BTFSS  FD8.2
0314C:  GOTO   3AB4
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
03150:  MOVF   FF2,W
03152:  MOVWF  00
03154:  BCF    FF2.7
03156:  CLRF   FAA
03158:  CLRF   FA9
0315A:  MOVLW  0F
0315C:  MOVWF  FA8
0315E:  BCF    FA6.6
03160:  BCF    FA6.7
03162:  BSF    FA6.2
03164:  MOVLB  F
03166:  MOVLW  55
03168:  MOVWF  FA7
0316A:  MOVLW  AA
0316C:  MOVWF  FA7
0316E:  BSF    FA6.1
03170:  BTFSC  FA6.1
03172:  BRA    3170
03174:  BCF    FA6.2
03176:  MOVF   00,W
03178:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Inputt Type
0317A:  MOVFF  FF2,00
0317E:  BCF    FF2.7
03180:  CLRF   FAA
03182:  MOVLW  01
03184:  MOVWF  FA9
03186:  MOVFF  17C,FA8
0318A:  BCF    FA6.6
0318C:  BCF    FA6.7
0318E:  BSF    FA6.2
03190:  MOVLW  55
03192:  MOVWF  FA7
03194:  MOVLW  AA
03196:  MOVWF  FA7
03198:  BSF    FA6.1
0319A:  BTFSC  FA6.1
0319C:  BRA    319A
0319E:  BCF    FA6.2
031A0:  MOVF   00,W
031A2:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
031A4:  MOVFF  FF2,00
031A8:  BCF    FF2.7
031AA:  CLRF   FAA
031AC:  MOVLW  02
031AE:  MOVWF  FA9
031B0:  MOVFF  17D,FA8
031B4:  BCF    FA6.6
031B6:  BCF    FA6.7
031B8:  BSF    FA6.2
031BA:  MOVLW  55
031BC:  MOVWF  FA7
031BE:  MOVLW  AA
031C0:  MOVWF  FA7
031C2:  BSF    FA6.1
031C4:  BTFSC  FA6.1
031C6:  BRA    31C4
031C8:  BCF    FA6.2
031CA:  MOVF   00,W
031CC:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
031CE:  MOVFF  FF2,00
031D2:  BCF    FF2.7
031D4:  CLRF   FAA
031D6:  MOVLW  03
031D8:  MOVWF  FA9
031DA:  MOVFF  17E,FA8
031DE:  BCF    FA6.6
031E0:  BCF    FA6.7
031E2:  BSF    FA6.2
031E4:  MOVLW  55
031E6:  MOVWF  FA7
031E8:  MOVLW  AA
031EA:  MOVWF  FA7
031EC:  BSF    FA6.1
031EE:  BTFSC  FA6.1
031F0:  BRA    31EE
031F2:  BCF    FA6.2
031F4:  MOVF   00,W
031F6:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
031F8:  MOVFF  FF2,00
031FC:  BCF    FF2.7
031FE:  CLRF   FAA
03200:  MOVLW  04
03202:  MOVWF  FA9
03204:  MOVFF  17F,FA8
03208:  BCF    FA6.6
0320A:  BCF    FA6.7
0320C:  BSF    FA6.2
0320E:  MOVLW  55
03210:  MOVWF  FA7
03212:  MOVLW  AA
03214:  MOVWF  FA7
03216:  BSF    FA6.1
03218:  BTFSC  FA6.1
0321A:  BRA    3218
0321C:  BCF    FA6.2
0321E:  MOVF   00,W
03220:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
03222:  MOVFF  FF2,00
03226:  BCF    FF2.7
03228:  CLRF   FAA
0322A:  MOVLW  05
0322C:  MOVWF  FA9
0322E:  MOVFF  180,FA8
03232:  BCF    FA6.6
03234:  BCF    FA6.7
03236:  BSF    FA6.2
03238:  MOVLW  55
0323A:  MOVWF  FA7
0323C:  MOVLW  AA
0323E:  MOVWF  FA7
03240:  BSF    FA6.1
03242:  BTFSC  FA6.1
03244:  BRA    3242
03246:  BCF    FA6.2
03248:  MOVF   00,W
0324A:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
0324C:  MOVFF  FF2,00
03250:  BCF    FF2.7
03252:  CLRF   FAA
03254:  MOVLW  06
03256:  MOVWF  FA9
03258:  MOVFF  181,FA8
0325C:  BCF    FA6.6
0325E:  BCF    FA6.7
03260:  BSF    FA6.2
03262:  MOVLW  55
03264:  MOVWF  FA7
03266:  MOVLW  AA
03268:  MOVWF  FA7
0326A:  BSF    FA6.1
0326C:  BTFSC  FA6.1
0326E:  BRA    326C
03270:  BCF    FA6.2
03272:  MOVF   00,W
03274:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
03276:  MOVFF  FF2,00
0327A:  BCF    FF2.7
0327C:  CLRF   FAA
0327E:  MOVLW  07
03280:  MOVWF  FA9
03282:  MOVFF  182,FA8
03286:  BCF    FA6.6
03288:  BCF    FA6.7
0328A:  BSF    FA6.2
0328C:  MOVLW  55
0328E:  MOVWF  FA7
03290:  MOVLW  AA
03292:  MOVWF  FA7
03294:  BSF    FA6.1
03296:  BTFSC  FA6.1
03298:  BRA    3296
0329A:  BCF    FA6.2
0329C:  MOVF   00,W
0329E:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
032A0:  MOVFF  FF2,00
032A4:  BCF    FF2.7
032A6:  CLRF   FAA
032A8:  MOVLW  08
032AA:  MOVWF  FA9
032AC:  MOVFF  183,FA8
032B0:  BCF    FA6.6
032B2:  BCF    FA6.7
032B4:  BSF    FA6.2
032B6:  MOVLW  55
032B8:  MOVWF  FA7
032BA:  MOVLW  AA
032BC:  MOVWF  FA7
032BE:  BSF    FA6.1
032C0:  BTFSC  FA6.1
032C2:  BRA    32C0
032C4:  BCF    FA6.2
032C6:  MOVF   00,W
032C8:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
032CA:  MOVFF  FF2,00
032CE:  BCF    FF2.7
032D0:  CLRF   FAA
032D2:  MOVLW  09
032D4:  MOVWF  FA9
032D6:  MOVFF  184,FA8
032DA:  BCF    FA6.6
032DC:  BCF    FA6.7
032DE:  BSF    FA6.2
032E0:  MOVLW  55
032E2:  MOVWF  FA7
032E4:  MOVLW  AA
032E6:  MOVWF  FA7
032E8:  BSF    FA6.1
032EA:  BTFSC  FA6.1
032EC:  BRA    32EA
032EE:  BCF    FA6.2
032F0:  MOVF   00,W
032F2:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
032F4:  MOVFF  FF2,00
032F8:  BCF    FF2.7
032FA:  CLRF   FAA
032FC:  MOVLW  0A
032FE:  MOVWF  FA9
03300:  MOVFF  185,FA8
03304:  BCF    FA6.6
03306:  BCF    FA6.7
03308:  BSF    FA6.2
0330A:  MOVLW  55
0330C:  MOVWF  FA7
0330E:  MOVLW  AA
03310:  MOVWF  FA7
03312:  BSF    FA6.1
03314:  BTFSC  FA6.1
03316:  BRA    3314
03318:  BCF    FA6.2
0331A:  MOVF   00,W
0331C:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
0331E:  MOVFF  FF2,00
03322:  BCF    FF2.7
03324:  CLRF   FAA
03326:  MOVLW  0B
03328:  MOVWF  FA9
0332A:  MOVFF  186,FA8
0332E:  BCF    FA6.6
03330:  BCF    FA6.7
03332:  BSF    FA6.2
03334:  MOVLW  55
03336:  MOVWF  FA7
03338:  MOVLW  AA
0333A:  MOVWF  FA7
0333C:  BSF    FA6.1
0333E:  BTFSC  FA6.1
03340:  BRA    333E
03342:  BCF    FA6.2
03344:  MOVF   00,W
03346:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
03348:  MOVFF  FF2,00
0334C:  BCF    FF2.7
0334E:  CLRF   FAA
03350:  MOVLW  0C
03352:  MOVWF  FA9
03354:  MOVFF  187,FA8
03358:  BCF    FA6.6
0335A:  BCF    FA6.7
0335C:  BSF    FA6.2
0335E:  MOVLW  55
03360:  MOVWF  FA7
03362:  MOVLW  AA
03364:  MOVWF  FA7
03366:  BSF    FA6.1
03368:  BTFSC  FA6.1
0336A:  BRA    3368
0336C:  BCF    FA6.2
0336E:  MOVF   00,W
03370:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
03372:  MOVFF  FF2,00
03376:  BCF    FF2.7
03378:  CLRF   FAA
0337A:  MOVLW  0D
0337C:  MOVWF  FA9
0337E:  MOVFF  188,FA8
03382:  BCF    FA6.6
03384:  BCF    FA6.7
03386:  BSF    FA6.2
03388:  MOVLW  55
0338A:  MOVWF  FA7
0338C:  MOVLW  AA
0338E:  MOVWF  FA7
03390:  BSF    FA6.1
03392:  BTFSC  FA6.1
03394:  BRA    3392
03396:  BCF    FA6.2
03398:  MOVF   00,W
0339A:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
0339C:  MOVFF  FF2,00
033A0:  BCF    FF2.7
033A2:  CLRF   FAA
033A4:  MOVLW  0E
033A6:  MOVWF  FA9
033A8:  MOVFF  189,FA8
033AC:  BCF    FA6.6
033AE:  BCF    FA6.7
033B0:  BSF    FA6.2
033B2:  MOVLW  55
033B4:  MOVWF  FA7
033B6:  MOVLW  AA
033B8:  MOVWF  FA7
033BA:  BSF    FA6.1
033BC:  BTFSC  FA6.1
033BE:  BRA    33BC
033C0:  BCF    FA6.2
033C2:  MOVF   00,W
033C4:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
033C6:  MOVFF  FF2,00
033CA:  BCF    FF2.7
033CC:  CLRF   FAA
033CE:  MOVLW  0F
033D0:  MOVWF  FA9
033D2:  MOVFF  18A,FA8
033D6:  BCF    FA6.6
033D8:  BCF    FA6.7
033DA:  BSF    FA6.2
033DC:  MOVLW  55
033DE:  MOVWF  FA7
033E0:  MOVLW  AA
033E2:  MOVWF  FA7
033E4:  BSF    FA6.1
033E6:  BTFSC  FA6.1
033E8:  BRA    33E6
033EA:  BCF    FA6.2
033EC:  MOVF   00,W
033EE:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
033F0:  MOVFF  FF2,00
033F4:  BCF    FF2.7
033F6:  CLRF   FAA
033F8:  MOVLW  10
033FA:  MOVWF  FA9
033FC:  MOVFF  18B,FA8
03400:  BCF    FA6.6
03402:  BCF    FA6.7
03404:  BSF    FA6.2
03406:  MOVLW  55
03408:  MOVWF  FA7
0340A:  MOVLW  AA
0340C:  MOVWF  FA7
0340E:  BSF    FA6.1
03410:  BTFSC  FA6.1
03412:  BRA    3410
03414:  BCF    FA6.2
03416:  MOVF   00,W
03418:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
0341A:  MOVFF  FF2,00
0341E:  BCF    FF2.7
03420:  CLRF   FAA
03422:  MOVLW  11
03424:  MOVWF  FA9
03426:  MOVFF  18C,FA8
0342A:  BCF    FA6.6
0342C:  BCF    FA6.7
0342E:  BSF    FA6.2
03430:  MOVLW  55
03432:  MOVWF  FA7
03434:  MOVLW  AA
03436:  MOVWF  FA7
03438:  BSF    FA6.1
0343A:  BTFSC  FA6.1
0343C:  BRA    343A
0343E:  BCF    FA6.2
03440:  MOVF   00,W
03442:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
03444:  MOVFF  FF2,00
03448:  BCF    FF2.7
0344A:  CLRF   FAA
0344C:  MOVLW  12
0344E:  MOVWF  FA9
03450:  MOVFF  18D,FA8
03454:  BCF    FA6.6
03456:  BCF    FA6.7
03458:  BSF    FA6.2
0345A:  MOVLW  55
0345C:  MOVWF  FA7
0345E:  MOVLW  AA
03460:  MOVWF  FA7
03462:  BSF    FA6.1
03464:  BTFSC  FA6.1
03466:  BRA    3464
03468:  BCF    FA6.2
0346A:  MOVF   00,W
0346C:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
0346E:  MOVFF  FF2,00
03472:  BCF    FF2.7
03474:  CLRF   FAA
03476:  MOVLW  13
03478:  MOVWF  FA9
0347A:  MOVFF  18E,FA8
0347E:  BCF    FA6.6
03480:  BCF    FA6.7
03482:  BSF    FA6.2
03484:  MOVLW  55
03486:  MOVWF  FA7
03488:  MOVLW  AA
0348A:  MOVWF  FA7
0348C:  BSF    FA6.1
0348E:  BTFSC  FA6.1
03490:  BRA    348E
03492:  BCF    FA6.2
03494:  MOVF   00,W
03496:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
03498:  MOVFF  FF2,00
0349C:  BCF    FF2.7
0349E:  CLRF   FAA
034A0:  MOVLW  14
034A2:  MOVWF  FA9
034A4:  MOVFF  18F,FA8
034A8:  BCF    FA6.6
034AA:  BCF    FA6.7
034AC:  BSF    FA6.2
034AE:  MOVLW  55
034B0:  MOVWF  FA7
034B2:  MOVLW  AA
034B4:  MOVWF  FA7
034B6:  BSF    FA6.1
034B8:  BTFSC  FA6.1
034BA:  BRA    34B8
034BC:  BCF    FA6.2
034BE:  MOVF   00,W
034C0:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
034C2:  MOVFF  FF2,00
034C6:  BCF    FF2.7
034C8:  CLRF   FAA
034CA:  MOVLW  15
034CC:  MOVWF  FA9
034CE:  MOVFF  190,FA8
034D2:  BCF    FA6.6
034D4:  BCF    FA6.7
034D6:  BSF    FA6.2
034D8:  MOVLW  55
034DA:  MOVWF  FA7
034DC:  MOVLW  AA
034DE:  MOVWF  FA7
034E0:  BSF    FA6.1
034E2:  BTFSC  FA6.1
034E4:  BRA    34E2
034E6:  BCF    FA6.2
034E8:  MOVF   00,W
034EA:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
034EC:  MOVFF  FF2,00
034F0:  BCF    FF2.7
034F2:  CLRF   FAA
034F4:  MOVLW  16
034F6:  MOVWF  FA9
034F8:  MOVFF  191,FA8
034FC:  BCF    FA6.6
034FE:  BCF    FA6.7
03500:  BSF    FA6.2
03502:  MOVLW  55
03504:  MOVWF  FA7
03506:  MOVLW  AA
03508:  MOVWF  FA7
0350A:  BSF    FA6.1
0350C:  BTFSC  FA6.1
0350E:  BRA    350C
03510:  BCF    FA6.2
03512:  MOVF   00,W
03514:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
03516:  MOVFF  FF2,00
0351A:  BCF    FF2.7
0351C:  CLRF   FAA
0351E:  MOVLW  17
03520:  MOVWF  FA9
03522:  MOVFF  192,FA8
03526:  BCF    FA6.6
03528:  BCF    FA6.7
0352A:  BSF    FA6.2
0352C:  MOVLW  55
0352E:  MOVWF  FA7
03530:  MOVLW  AA
03532:  MOVWF  FA7
03534:  BSF    FA6.1
03536:  BTFSC  FA6.1
03538:  BRA    3536
0353A:  BCF    FA6.2
0353C:  MOVF   00,W
0353E:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
03540:  MOVFF  FF2,00
03544:  BCF    FF2.7
03546:  CLRF   FAA
03548:  MOVLW  18
0354A:  MOVWF  FA9
0354C:  MOVFF  193,FA8
03550:  BCF    FA6.6
03552:  BCF    FA6.7
03554:  BSF    FA6.2
03556:  MOVLW  55
03558:  MOVWF  FA7
0355A:  MOVLW  AA
0355C:  MOVWF  FA7
0355E:  BSF    FA6.1
03560:  BTFSC  FA6.1
03562:  BRA    3560
03564:  BCF    FA6.2
03566:  MOVF   00,W
03568:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
0356A:  MOVFF  FF2,00
0356E:  BCF    FF2.7
03570:  CLRF   FAA
03572:  MOVLW  19
03574:  MOVWF  FA9
03576:  MOVFF  194,FA8
0357A:  BCF    FA6.6
0357C:  BCF    FA6.7
0357E:  BSF    FA6.2
03580:  MOVLW  55
03582:  MOVWF  FA7
03584:  MOVLW  AA
03586:  MOVWF  FA7
03588:  BSF    FA6.1
0358A:  BTFSC  FA6.1
0358C:  BRA    358A
0358E:  BCF    FA6.2
03590:  MOVF   00,W
03592:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
03594:  MOVFF  FF2,00
03598:  BCF    FF2.7
0359A:  CLRF   FAA
0359C:  MOVLW  1A
0359E:  MOVWF  FA9
035A0:  MOVFF  195,FA8
035A4:  BCF    FA6.6
035A6:  BCF    FA6.7
035A8:  BSF    FA6.2
035AA:  MOVLW  55
035AC:  MOVWF  FA7
035AE:  MOVLW  AA
035B0:  MOVWF  FA7
035B2:  BSF    FA6.1
035B4:  BTFSC  FA6.1
035B6:  BRA    35B4
035B8:  BCF    FA6.2
035BA:  MOVF   00,W
035BC:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
035BE:  MOVFF  FF2,00
035C2:  BCF    FF2.7
035C4:  CLRF   FAA
035C6:  MOVLW  1B
035C8:  MOVWF  FA9
035CA:  MOVFF  196,FA8
035CE:  BCF    FA6.6
035D0:  BCF    FA6.7
035D2:  BSF    FA6.2
035D4:  MOVLW  55
035D6:  MOVWF  FA7
035D8:  MOVLW  AA
035DA:  MOVWF  FA7
035DC:  BSF    FA6.1
035DE:  BTFSC  FA6.1
035E0:  BRA    35DE
035E2:  BCF    FA6.2
035E4:  MOVF   00,W
035E6:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //Master / Slave
035E8:  MOVFF  FF2,00
035EC:  BCF    FF2.7
035EE:  CLRF   FAA
035F0:  MOVLW  1C
035F2:  MOVWF  FA9
035F4:  MOVFF  197,FA8
035F8:  BCF    FA6.6
035FA:  BCF    FA6.7
035FC:  BSF    FA6.2
035FE:  MOVLW  55
03600:  MOVWF  FA7
03602:  MOVLW  AA
03604:  MOVWF  FA7
03606:  BSF    FA6.1
03608:  BTFSC  FA6.1
0360A:  BRA    3608
0360C:  BCF    FA6.2
0360E:  MOVF   00,W
03610:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
03612:  MOVFF  FF2,00
03616:  BCF    FF2.7
03618:  CLRF   FAA
0361A:  MOVLW  1D
0361C:  MOVWF  FA9
0361E:  MOVFF  198,FA8
03622:  BCF    FA6.6
03624:  BCF    FA6.7
03626:  BSF    FA6.2
03628:  MOVLW  55
0362A:  MOVWF  FA7
0362C:  MOVLW  AA
0362E:  MOVWF  FA7
03630:  BSF    FA6.1
03632:  BTFSC  FA6.1
03634:  BRA    3632
03636:  BCF    FA6.2
03638:  MOVF   00,W
0363A:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
0363C:  MOVFF  FF2,00
03640:  BCF    FF2.7
03642:  CLRF   FAA
03644:  MOVLW  1E
03646:  MOVWF  FA9
03648:  MOVFF  199,FA8
0364C:  BCF    FA6.6
0364E:  BCF    FA6.7
03650:  BSF    FA6.2
03652:  MOVLW  55
03654:  MOVWF  FA7
03656:  MOVLW  AA
03658:  MOVWF  FA7
0365A:  BSF    FA6.1
0365C:  BTFSC  FA6.1
0365E:  BRA    365C
03660:  BCF    FA6.2
03662:  MOVF   00,W
03664:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
03666:  MOVFF  FF2,00
0366A:  BCF    FF2.7
0366C:  CLRF   FAA
0366E:  MOVLW  1F
03670:  MOVWF  FA9
03672:  MOVFF  19A,FA8
03676:  BCF    FA6.6
03678:  BCF    FA6.7
0367A:  BSF    FA6.2
0367C:  MOVLW  55
0367E:  MOVWF  FA7
03680:  MOVLW  AA
03682:  MOVWF  FA7
03684:  BSF    FA6.1
03686:  BTFSC  FA6.1
03688:  BRA    3686
0368A:  BCF    FA6.2
0368C:  MOVF   00,W
0368E:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
03690:  MOVFF  FF2,00
03694:  BCF    FF2.7
03696:  CLRF   FAA
03698:  MOVLW  20
0369A:  MOVWF  FA9
0369C:  MOVFF  19B,FA8
036A0:  BCF    FA6.6
036A2:  BCF    FA6.7
036A4:  BSF    FA6.2
036A6:  MOVLW  55
036A8:  MOVWF  FA7
036AA:  MOVLW  AA
036AC:  MOVWF  FA7
036AE:  BSF    FA6.1
036B0:  BTFSC  FA6.1
036B2:  BRA    36B0
036B4:  BCF    FA6.2
036B6:  MOVF   00,W
036B8:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
036BA:  MOVFF  FF2,00
036BE:  BCF    FF2.7
036C0:  CLRF   FAA
036C2:  MOVLW  21
036C4:  MOVWF  FA9
036C6:  MOVFF  19C,FA8
036CA:  BCF    FA6.6
036CC:  BCF    FA6.7
036CE:  BSF    FA6.2
036D0:  MOVLW  55
036D2:  MOVWF  FA7
036D4:  MOVLW  AA
036D6:  MOVWF  FA7
036D8:  BSF    FA6.1
036DA:  BTFSC  FA6.1
036DC:  BRA    36DA
036DE:  BCF    FA6.2
036E0:  MOVF   00,W
036E2:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
036E4:  MOVFF  FF2,00
036E8:  BCF    FF2.7
036EA:  CLRF   FAA
036EC:  MOVLW  22
036EE:  MOVWF  FA9
036F0:  MOVFF  19D,FA8
036F4:  BCF    FA6.6
036F6:  BCF    FA6.7
036F8:  BSF    FA6.2
036FA:  MOVLW  55
036FC:  MOVWF  FA7
036FE:  MOVLW  AA
03700:  MOVWF  FA7
03702:  BSF    FA6.1
03704:  BTFSC  FA6.1
03706:  BRA    3704
03708:  BCF    FA6.2
0370A:  MOVF   00,W
0370C:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
0370E:  MOVFF  FF2,00
03712:  BCF    FF2.7
03714:  CLRF   FAA
03716:  MOVLW  23
03718:  MOVWF  FA9
0371A:  MOVFF  19E,FA8
0371E:  BCF    FA6.6
03720:  BCF    FA6.7
03722:  BSF    FA6.2
03724:  MOVLW  55
03726:  MOVWF  FA7
03728:  MOVLW  AA
0372A:  MOVWF  FA7
0372C:  BSF    FA6.1
0372E:  BTFSC  FA6.1
03730:  BRA    372E
03732:  BCF    FA6.2
03734:  MOVF   00,W
03736:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
03738:  MOVFF  FF2,00
0373C:  BCF    FF2.7
0373E:  CLRF   FAA
03740:  MOVLW  24
03742:  MOVWF  FA9
03744:  MOVFF  19F,FA8
03748:  BCF    FA6.6
0374A:  BCF    FA6.7
0374C:  BSF    FA6.2
0374E:  MOVLW  55
03750:  MOVWF  FA7
03752:  MOVLW  AA
03754:  MOVWF  FA7
03756:  BSF    FA6.1
03758:  BTFSC  FA6.1
0375A:  BRA    3758
0375C:  BCF    FA6.2
0375E:  MOVF   00,W
03760:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
03762:  MOVFF  FF2,00
03766:  BCF    FF2.7
03768:  CLRF   FAA
0376A:  MOVLW  25
0376C:  MOVWF  FA9
0376E:  MOVFF  1A0,FA8
03772:  BCF    FA6.6
03774:  BCF    FA6.7
03776:  BSF    FA6.2
03778:  MOVLW  55
0377A:  MOVWF  FA7
0377C:  MOVLW  AA
0377E:  MOVWF  FA7
03780:  BSF    FA6.1
03782:  BTFSC  FA6.1
03784:  BRA    3782
03786:  BCF    FA6.2
03788:  MOVF   00,W
0378A:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
0378C:  MOVFF  FF2,00
03790:  BCF    FF2.7
03792:  CLRF   FAA
03794:  MOVLW  26
03796:  MOVWF  FA9
03798:  MOVFF  1A1,FA8
0379C:  BCF    FA6.6
0379E:  BCF    FA6.7
037A0:  BSF    FA6.2
037A2:  MOVLW  55
037A4:  MOVWF  FA7
037A6:  MOVLW  AA
037A8:  MOVWF  FA7
037AA:  BSF    FA6.1
037AC:  BTFSC  FA6.1
037AE:  BRA    37AC
037B0:  BCF    FA6.2
037B2:  MOVF   00,W
037B4:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
037B6:  MOVFF  FF2,00
037BA:  BCF    FF2.7
037BC:  CLRF   FAA
037BE:  MOVLW  27
037C0:  MOVWF  FA9
037C2:  MOVFF  1A2,FA8
037C6:  BCF    FA6.6
037C8:  BCF    FA6.7
037CA:  BSF    FA6.2
037CC:  MOVLW  55
037CE:  MOVWF  FA7
037D0:  MOVLW  AA
037D2:  MOVWF  FA7
037D4:  BSF    FA6.1
037D6:  BTFSC  FA6.1
037D8:  BRA    37D6
037DA:  BCF    FA6.2
037DC:  MOVF   00,W
037DE:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
037E0:  MOVFF  FF2,00
037E4:  BCF    FF2.7
037E6:  CLRF   FAA
037E8:  MOVLW  28
037EA:  MOVWF  FA9
037EC:  MOVFF  1A3,FA8
037F0:  BCF    FA6.6
037F2:  BCF    FA6.7
037F4:  BSF    FA6.2
037F6:  MOVLW  55
037F8:  MOVWF  FA7
037FA:  MOVLW  AA
037FC:  MOVWF  FA7
037FE:  BSF    FA6.1
03800:  BTFSC  FA6.1
03802:  BRA    3800
03804:  BCF    FA6.2
03806:  MOVF   00,W
03808:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
0380A:  MOVFF  FF2,00
0380E:  BCF    FF2.7
03810:  CLRF   FAA
03812:  MOVLW  29
03814:  MOVWF  FA9
03816:  MOVFF  1A4,FA8
0381A:  BCF    FA6.6
0381C:  BCF    FA6.7
0381E:  BSF    FA6.2
03820:  MOVLW  55
03822:  MOVWF  FA7
03824:  MOVLW  AA
03826:  MOVWF  FA7
03828:  BSF    FA6.1
0382A:  BTFSC  FA6.1
0382C:  BRA    382A
0382E:  BCF    FA6.2
03830:  MOVF   00,W
03832:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
03834:  MOVFF  FF2,00
03838:  BCF    FF2.7
0383A:  CLRF   FAA
0383C:  MOVLW  2A
0383E:  MOVWF  FA9
03840:  MOVFF  1A5,FA8
03844:  BCF    FA6.6
03846:  BCF    FA6.7
03848:  BSF    FA6.2
0384A:  MOVLW  55
0384C:  MOVWF  FA7
0384E:  MOVLW  AA
03850:  MOVWF  FA7
03852:  BSF    FA6.1
03854:  BTFSC  FA6.1
03856:  BRA    3854
03858:  BCF    FA6.2
0385A:  MOVF   00,W
0385C:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
0385E:  MOVFF  FF2,00
03862:  BCF    FF2.7
03864:  CLRF   FAA
03866:  MOVLW  2B
03868:  MOVWF  FA9
0386A:  MOVFF  1A6,FA8
0386E:  BCF    FA6.6
03870:  BCF    FA6.7
03872:  BSF    FA6.2
03874:  MOVLW  55
03876:  MOVWF  FA7
03878:  MOVLW  AA
0387A:  MOVWF  FA7
0387C:  BSF    FA6.1
0387E:  BTFSC  FA6.1
03880:  BRA    387E
03882:  BCF    FA6.2
03884:  MOVF   00,W
03886:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
03888:  MOVFF  FF2,00
0388C:  BCF    FF2.7
0388E:  CLRF   FAA
03890:  MOVLW  2C
03892:  MOVWF  FA9
03894:  MOVFF  1A7,FA8
03898:  BCF    FA6.6
0389A:  BCF    FA6.7
0389C:  BSF    FA6.2
0389E:  MOVLW  55
038A0:  MOVWF  FA7
038A2:  MOVLW  AA
038A4:  MOVWF  FA7
038A6:  BSF    FA6.1
038A8:  BTFSC  FA6.1
038AA:  BRA    38A8
038AC:  BCF    FA6.2
038AE:  MOVF   00,W
038B0:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
038B2:  MOVFF  FF2,00
038B6:  BCF    FF2.7
038B8:  CLRF   FAA
038BA:  MOVLW  2D
038BC:  MOVWF  FA9
038BE:  MOVFF  1A8,FA8
038C2:  BCF    FA6.6
038C4:  BCF    FA6.7
038C6:  BSF    FA6.2
038C8:  MOVLW  55
038CA:  MOVWF  FA7
038CC:  MOVLW  AA
038CE:  MOVWF  FA7
038D0:  BSF    FA6.1
038D2:  BTFSC  FA6.1
038D4:  BRA    38D2
038D6:  BCF    FA6.2
038D8:  MOVF   00,W
038DA:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
038DC:  MOVFF  FF2,00
038E0:  BCF    FF2.7
038E2:  CLRF   FAA
038E4:  MOVLW  2E
038E6:  MOVWF  FA9
038E8:  MOVFF  1A9,FA8
038EC:  BCF    FA6.6
038EE:  BCF    FA6.7
038F0:  BSF    FA6.2
038F2:  MOVLW  55
038F4:  MOVWF  FA7
038F6:  MOVLW  AA
038F8:  MOVWF  FA7
038FA:  BSF    FA6.1
038FC:  BTFSC  FA6.1
038FE:  BRA    38FC
03900:  BCF    FA6.2
03902:  MOVF   00,W
03904:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
03906:  MOVFF  FF2,00
0390A:  BCF    FF2.7
0390C:  CLRF   FAA
0390E:  MOVLW  2F
03910:  MOVWF  FA9
03912:  MOVFF  1AA,FA8
03916:  BCF    FA6.6
03918:  BCF    FA6.7
0391A:  BSF    FA6.2
0391C:  MOVLW  55
0391E:  MOVWF  FA7
03920:  MOVLW  AA
03922:  MOVWF  FA7
03924:  BSF    FA6.1
03926:  BTFSC  FA6.1
03928:  BRA    3926
0392A:  BCF    FA6.2
0392C:  MOVF   00,W
0392E:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
03930:  MOVFF  FF2,00
03934:  BCF    FF2.7
03936:  CLRF   FAA
03938:  MOVLW  30
0393A:  MOVWF  FA9
0393C:  MOVFF  1AB,FA8
03940:  BCF    FA6.6
03942:  BCF    FA6.7
03944:  BSF    FA6.2
03946:  MOVLW  55
03948:  MOVWF  FA7
0394A:  MOVLW  AA
0394C:  MOVWF  FA7
0394E:  BSF    FA6.1
03950:  BTFSC  FA6.1
03952:  BRA    3950
03954:  BCF    FA6.2
03956:  MOVF   00,W
03958:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
0395A:  MOVFF  FF2,00
0395E:  BCF    FF2.7
03960:  CLRF   FAA
03962:  MOVLW  31
03964:  MOVWF  FA9
03966:  MOVFF  1AC,FA8
0396A:  BCF    FA6.6
0396C:  BCF    FA6.7
0396E:  BSF    FA6.2
03970:  MOVLW  55
03972:  MOVWF  FA7
03974:  MOVLW  AA
03976:  MOVWF  FA7
03978:  BSF    FA6.1
0397A:  BTFSC  FA6.1
0397C:  BRA    397A
0397E:  BCF    FA6.2
03980:  MOVF   00,W
03982:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
03984:  MOVLB  8
03986:  CLRF   x76
03988:  CLRF   x75
....................             for(; ; a++)
....................             {
....................                restart_wdt();
0398A:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
0398C:  MOVLW  AD
0398E:  ADDWF  x75,W
03990:  MOVWF  FE9
03992:  MOVLW  01
03994:  ADDWFC x76,W
03996:  MOVWF  FEA
03998:  MOVFF  FEF,877
....................                if((phonenum == 0x0D) || (a > 15))
0399C:  MOVF   x77,W
0399E:  SUBLW  0D
039A0:  BZ    39AC
039A2:  MOVF   x76,F
039A4:  BNZ   39AC
039A6:  MOVF   x75,W
039A8:  SUBLW  0F
039AA:  BC    39FA
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
039AC:  MOVLW  86
039AE:  ADDWF  x75,W
039B0:  MOVWF  FE9
039B2:  MOVLW  06
039B4:  ADDWFC x76,W
039B6:  MOVWF  FEA
039B8:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
039BA:  MOVLW  32
039BC:  ADDWF  x75,W
039BE:  MOVWF  x7E
039C0:  MOVLW  00
039C2:  ADDWFC x76,W
039C4:  MOVWF  x7F
039C6:  MOVF   FF2,W
039C8:  MOVWF  00
039CA:  BCF    FF2.7
039CC:  MOVFF  87F,FAA
039D0:  MOVFF  87E,FA9
039D4:  MOVFF  877,FA8
039D8:  BCF    FA6.6
039DA:  BCF    FA6.7
039DC:  BSF    FA6.2
039DE:  MOVLB  F
039E0:  MOVLW  55
039E2:  MOVWF  FA7
039E4:  MOVLW  AA
039E6:  MOVWF  FA7
039E8:  BSF    FA6.1
039EA:  BTFSC  FA6.1
039EC:  BRA    39EA
039EE:  BCF    FA6.2
039F0:  MOVF   00,W
039F2:  IORWF  FF2,F
....................                   break;
039F4:  BRA    3A50
....................                }
039F6:  BRA    3A44
039F8:  MOVLB  8
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
039FA:  MOVLW  86
039FC:  ADDWF  x75,W
039FE:  MOVWF  FE9
03A00:  MOVLW  06
03A02:  ADDWFC x76,W
03A04:  MOVWF  FEA
03A06:  MOVFF  877,FEF
....................                   
....................                   write_eeprom(0x32+a,phonenum);
03A0A:  MOVLW  32
03A0C:  ADDWF  x75,W
03A0E:  MOVWF  x7E
03A10:  MOVLW  00
03A12:  ADDWFC x76,W
03A14:  MOVWF  x7F
03A16:  MOVF   FF2,W
03A18:  MOVWF  00
03A1A:  BCF    FF2.7
03A1C:  MOVFF  87F,FAA
03A20:  MOVFF  87E,FA9
03A24:  MOVFF  877,FA8
03A28:  BCF    FA6.6
03A2A:  BCF    FA6.7
03A2C:  BSF    FA6.2
03A2E:  MOVLB  F
03A30:  MOVLW  55
03A32:  MOVWF  FA7
03A34:  MOVLW  AA
03A36:  MOVWF  FA7
03A38:  BSF    FA6.1
03A3A:  BTFSC  FA6.1
03A3C:  BRA    3A3A
03A3E:  BCF    FA6.2
03A40:  MOVF   00,W
03A42:  IORWF  FF2,F
....................                }
03A44:  MOVLB  8
03A46:  INCF   x75,F
03A48:  BTFSC  FD8.2
03A4A:  INCF   x76,F
03A4C:  BRA    398A
03A4E:  MOVLB  F
....................             }
.................... 
....................             
....................             /*
....................             write_eeprom(0x32,RxD_Buff[52]);
....................             write_eeprom(0x33,RxD_Buff[53]);
....................             write_eeprom(0x34,RxD_Buff[54]);
....................             write_eeprom(0x35,RxD_Buff[55]);
....................             write_eeprom(0x36,RxD_Buff[56]);
....................             write_eeprom(0x37,RxD_Buff[57]);
....................             write_eeprom(0x38,RxD_Buff[58]);
....................             write_eeprom(0x39,RxD_Buff[59]);
....................             write_eeprom(0x3A,RxD_Buff[60]);
....................             write_eeprom(0x3B,RxD_Buff[61]);
....................             */
....................             
....................                 
....................             TxD_Buff[0] = Address ;         //Address
03A50:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x21 ;            //return function code
03A54:  MOVLW  21
03A56:  MOVLB  0
03A58:  MOVWF  x7B
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
03A5A:  MOVLB  8
03A5C:  CLRF   x80
03A5E:  MOVLW  7A
03A60:  MOVWF  x7F
03A62:  MOVLW  02
03A64:  MOVWF  x81
03A66:  MOVLB  0
03A68:  CALL   1F2C
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
03A6C:  MOVFF  57A,7C
....................             TxD_Buff[3] = CRC_Lo ;
03A70:  MOVFF  579,7D
.................... 
....................             output_bit(P485ctrl,1);
03A74:  BSF    F8A.3
03A76:  BCF    F93.3
....................             delay_ms(10);
03A78:  MOVLW  0A
03A7A:  MOVLB  8
03A7C:  MOVWF  x7E
03A7E:  MOVLB  0
03A80:  CALL   074A
.................... 
....................             putc(Txd_Buff[0]);
03A84:  MOVF   x7A,W
03A86:  CALL   1F82
....................             putc(Txd_Buff[1]);
03A8A:  MOVF   x7B,W
03A8C:  CALL   1F82
....................             putc(Txd_Buff[2]);
03A90:  MOVF   x7C,W
03A92:  CALL   1F82
....................             putc(Txd_Buff[3]);
03A96:  MOVF   x7D,W
03A98:  CALL   1F82
.................... 
....................             delay_ms(3);
03A9C:  MOVLW  03
03A9E:  MOVLB  8
03AA0:  MOVWF  x7E
03AA2:  MOVLB  0
03AA4:  CALL   074A
....................             output_bit(P485ctrl,0);
03AA8:  BCF    F8A.3
03AAA:  BCF    F93.3
....................             
....................             reset_cpu();
03AAC:  RESET
....................             //Read_Config(); //jj
....................          }
03AAE:  GOTO   43B4
03AB2:  MOVLB  1
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
03AB4:  MOVF   x7A,W
03AB6:  SUBLW  22
03AB8:  BTFSS  FD8.2
03ABA:  GOTO   43B4
....................          {
....................             //SMS_Massage
....................             int16  i =3,j=0,k=0;
03ABE:  MOVLB  8
03AC0:  CLRF   x79
03AC2:  MOVLW  03
03AC4:  MOVWF  x78
03AC6:  CLRF   x7B
03AC8:  CLRF   x7A
03ACA:  CLRF   x7D
03ACC:  CLRF   x7C
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03ACE:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03AD0:  MOVLW  79
03AD2:  ADDWF  x78,W
03AD4:  MOVWF  FE9
03AD6:  MOVLW  01
03AD8:  ADDWFC x79,W
03ADA:  MOVWF  FEA
03ADC:  MOVF   FEF,W
03ADE:  SUBLW  0D
03AE0:  BZ    3AEC
03AE2:  MOVF   x7B,F
03AE4:  BNZ   3AEC
03AE6:  MOVF   x7A,W
03AE8:  SUBLW  29
03AEA:  BC    3B3C
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03AEC:  MOVLW  5D
03AEE:  ADDWF  x78,W
03AF0:  MOVWF  x7E
03AF2:  MOVLW  00
03AF4:  ADDWFC x79,W
03AF6:  MOVWF  x7F
03AF8:  MOVLW  79
03AFA:  ADDWF  x78,W
03AFC:  MOVWF  FE9
03AFE:  MOVLW  01
03B00:  ADDWFC x79,W
03B02:  MOVWF  FEA
03B04:  MOVFF  FEF,880
03B08:  MOVF   FF2,W
03B0A:  MOVWF  00
03B0C:  BCF    FF2.7
03B0E:  MOVFF  87F,FAA
03B12:  MOVFF  87E,FA9
03B16:  MOVFF  880,FA8
03B1A:  BCF    FA6.6
03B1C:  BCF    FA6.7
03B1E:  BSF    FA6.2
03B20:  MOVLB  F
03B22:  MOVLW  55
03B24:  MOVWF  FA7
03B26:  MOVLW  AA
03B28:  MOVWF  FA7
03B2A:  BSF    FA6.1
03B2C:  BTFSC  FA6.1
03B2E:  BRA    3B2C
03B30:  BCF    FA6.2
03B32:  MOVF   00,W
03B34:  IORWF  FF2,F
....................                   break;
03B36:  BRA    3BC6
....................                }
03B38:  BRA    3BAE
03B3A:  MOVLB  8
....................                else
....................                {
....................                   SMS_Massage1[j] = RxD_Buff[i];
03B3C:  MOVLW  95
03B3E:  ADDWF  x7A,W
03B40:  MOVWF  01
03B42:  MOVLW  06
03B44:  ADDWFC x7B,W
03B46:  MOVWF  03
03B48:  MOVLW  79
03B4A:  ADDWF  x78,W
03B4C:  MOVWF  FE9
03B4E:  MOVLW  01
03B50:  ADDWFC x79,W
03B52:  MOVWF  FEA
03B54:  MOVFF  FEF,880
03B58:  MOVFF  03,FEA
03B5C:  MOVFF  01,FE9
03B60:  MOVFF  880,FEF
....................                   
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03B64:  MOVLW  5D
03B66:  ADDWF  x78,W
03B68:  MOVWF  x7E
03B6A:  MOVLW  00
03B6C:  ADDWFC x79,W
03B6E:  MOVWF  x7F
03B70:  MOVLW  79
03B72:  ADDWF  x78,W
03B74:  MOVWF  FE9
03B76:  MOVLW  01
03B78:  ADDWFC x79,W
03B7A:  MOVWF  FEA
03B7C:  MOVFF  FEF,880
03B80:  MOVF   FF2,W
03B82:  MOVWF  00
03B84:  BCF    FF2.7
03B86:  MOVFF  87F,FAA
03B8A:  MOVFF  87E,FA9
03B8E:  MOVFF  880,FA8
03B92:  BCF    FA6.6
03B94:  BCF    FA6.7
03B96:  BSF    FA6.2
03B98:  MOVLB  F
03B9A:  MOVLW  55
03B9C:  MOVWF  FA7
03B9E:  MOVLW  AA
03BA0:  MOVWF  FA7
03BA2:  BSF    FA6.1
03BA4:  BTFSC  FA6.1
03BA6:  BRA    3BA4
03BA8:  BCF    FA6.2
03BAA:  MOVF   00,W
03BAC:  IORWF  FF2,F
....................                }
03BAE:  MOVLB  8
03BB0:  MOVFF  879,03
03BB4:  MOVF   x78,W
03BB6:  INCF   x78,F
03BB8:  BTFSC  FD8.2
03BBA:  INCF   x79,F
03BBC:  INCF   x7A,F
03BBE:  BTFSC  FD8.2
03BC0:  INCF   x7B,F
03BC2:  BRA    3ACE
03BC4:  MOVLB  F
....................             }
....................             SMS_Massage1[j] = '\0' ; // end string
03BC6:  MOVLW  95
03BC8:  MOVLB  8
03BCA:  ADDWF  x7A,W
03BCC:  MOVWF  FE9
03BCE:  MOVLW  06
03BD0:  ADDWFC x7B,W
03BD2:  MOVWF  FEA
03BD4:  CLRF   FEF
....................             
....................             j=0;
03BD6:  CLRF   x7B
03BD8:  CLRF   x7A
....................             i++;
03BDA:  INCF   x78,F
03BDC:  BTFSC  FD8.2
03BDE:  INCF   x79,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03BE0:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03BE2:  MOVLW  79
03BE4:  ADDWF  x78,W
03BE6:  MOVWF  FE9
03BE8:  MOVLW  01
03BEA:  ADDWFC x79,W
03BEC:  MOVWF  FEA
03BEE:  MOVF   FEF,W
03BF0:  SUBLW  0D
03BF2:  BZ    3BFE
03BF4:  MOVF   x7B,F
03BF6:  BNZ   3BFE
03BF8:  MOVF   x7A,W
03BFA:  SUBLW  29
03BFC:  BC    3C4E
....................                {  
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03BFE:  MOVLW  5D
03C00:  ADDWF  x78,W
03C02:  MOVWF  x7E
03C04:  MOVLW  00
03C06:  ADDWFC x79,W
03C08:  MOVWF  x7F
03C0A:  MOVLW  79
03C0C:  ADDWF  x78,W
03C0E:  MOVWF  FE9
03C10:  MOVLW  01
03C12:  ADDWFC x79,W
03C14:  MOVWF  FEA
03C16:  MOVFF  FEF,880
03C1A:  MOVF   FF2,W
03C1C:  MOVWF  00
03C1E:  BCF    FF2.7
03C20:  MOVFF  87F,FAA
03C24:  MOVFF  87E,FA9
03C28:  MOVFF  880,FA8
03C2C:  BCF    FA6.6
03C2E:  BCF    FA6.7
03C30:  BSF    FA6.2
03C32:  MOVLB  F
03C34:  MOVLW  55
03C36:  MOVWF  FA7
03C38:  MOVLW  AA
03C3A:  MOVWF  FA7
03C3C:  BSF    FA6.1
03C3E:  BTFSC  FA6.1
03C40:  BRA    3C3E
03C42:  BCF    FA6.2
03C44:  MOVF   00,W
03C46:  IORWF  FF2,F
....................                   break;
03C48:  BRA    3CD8
....................                }
03C4A:  BRA    3CC0
03C4C:  MOVLB  8
....................                else
....................                {
....................                   SMS_Massage2[j] = RxD_Buff[i];
03C4E:  MOVLW  BE
03C50:  ADDWF  x7A,W
03C52:  MOVWF  01
03C54:  MOVLW  06
03C56:  ADDWFC x7B,W
03C58:  MOVWF  03
03C5A:  MOVLW  79
03C5C:  ADDWF  x78,W
03C5E:  MOVWF  FE9
03C60:  MOVLW  01
03C62:  ADDWFC x79,W
03C64:  MOVWF  FEA
03C66:  MOVFF  FEF,880
03C6A:  MOVFF  03,FEA
03C6E:  MOVFF  01,FE9
03C72:  MOVFF  880,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03C76:  MOVLW  5D
03C78:  ADDWF  x78,W
03C7A:  MOVWF  x7E
03C7C:  MOVLW  00
03C7E:  ADDWFC x79,W
03C80:  MOVWF  x7F
03C82:  MOVLW  79
03C84:  ADDWF  x78,W
03C86:  MOVWF  FE9
03C88:  MOVLW  01
03C8A:  ADDWFC x79,W
03C8C:  MOVWF  FEA
03C8E:  MOVFF  FEF,880
03C92:  MOVF   FF2,W
03C94:  MOVWF  00
03C96:  BCF    FF2.7
03C98:  MOVFF  87F,FAA
03C9C:  MOVFF  87E,FA9
03CA0:  MOVFF  880,FA8
03CA4:  BCF    FA6.6
03CA6:  BCF    FA6.7
03CA8:  BSF    FA6.2
03CAA:  MOVLB  F
03CAC:  MOVLW  55
03CAE:  MOVWF  FA7
03CB0:  MOVLW  AA
03CB2:  MOVWF  FA7
03CB4:  BSF    FA6.1
03CB6:  BTFSC  FA6.1
03CB8:  BRA    3CB6
03CBA:  BCF    FA6.2
03CBC:  MOVF   00,W
03CBE:  IORWF  FF2,F
....................                }
03CC0:  MOVLB  8
03CC2:  MOVFF  879,03
03CC6:  MOVF   x78,W
03CC8:  INCF   x78,F
03CCA:  BTFSC  FD8.2
03CCC:  INCF   x79,F
03CCE:  INCF   x7A,F
03CD0:  BTFSC  FD8.2
03CD2:  INCF   x7B,F
03CD4:  BRA    3BE0
03CD6:  MOVLB  F
....................             }
....................             SMS_Massage2[j] = '\0' ; // end string
03CD8:  MOVLW  BE
03CDA:  MOVLB  8
03CDC:  ADDWF  x7A,W
03CDE:  MOVWF  FE9
03CE0:  MOVLW  06
03CE2:  ADDWFC x7B,W
03CE4:  MOVWF  FEA
03CE6:  CLRF   FEF
....................             
....................             j=0;
03CE8:  CLRF   x7B
03CEA:  CLRF   x7A
....................             i++;
03CEC:  INCF   x78,F
03CEE:  BTFSC  FD8.2
03CF0:  INCF   x79,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03CF2:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03CF4:  MOVLW  79
03CF6:  ADDWF  x78,W
03CF8:  MOVWF  FE9
03CFA:  MOVLW  01
03CFC:  ADDWFC x79,W
03CFE:  MOVWF  FEA
03D00:  MOVF   FEF,W
03D02:  SUBLW  0D
03D04:  BZ    3D10
03D06:  MOVF   x7B,F
03D08:  BNZ   3D10
03D0A:  MOVF   x7A,W
03D0C:  SUBLW  29
03D0E:  BC    3D60
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03D10:  MOVLW  5D
03D12:  ADDWF  x78,W
03D14:  MOVWF  x7E
03D16:  MOVLW  00
03D18:  ADDWFC x79,W
03D1A:  MOVWF  x7F
03D1C:  MOVLW  79
03D1E:  ADDWF  x78,W
03D20:  MOVWF  FE9
03D22:  MOVLW  01
03D24:  ADDWFC x79,W
03D26:  MOVWF  FEA
03D28:  MOVFF  FEF,880
03D2C:  MOVF   FF2,W
03D2E:  MOVWF  00
03D30:  BCF    FF2.7
03D32:  MOVFF  87F,FAA
03D36:  MOVFF  87E,FA9
03D3A:  MOVFF  880,FA8
03D3E:  BCF    FA6.6
03D40:  BCF    FA6.7
03D42:  BSF    FA6.2
03D44:  MOVLB  F
03D46:  MOVLW  55
03D48:  MOVWF  FA7
03D4A:  MOVLW  AA
03D4C:  MOVWF  FA7
03D4E:  BSF    FA6.1
03D50:  BTFSC  FA6.1
03D52:  BRA    3D50
03D54:  BCF    FA6.2
03D56:  MOVF   00,W
03D58:  IORWF  FF2,F
....................                   break;
03D5A:  BRA    3DEA
....................                }
03D5C:  BRA    3DD2
03D5E:  MOVLB  8
....................                else
....................                {
....................                   SMS_Massage3[j] = RxD_Buff[i];
03D60:  MOVLW  E7
03D62:  ADDWF  x7A,W
03D64:  MOVWF  01
03D66:  MOVLW  06
03D68:  ADDWFC x7B,W
03D6A:  MOVWF  03
03D6C:  MOVLW  79
03D6E:  ADDWF  x78,W
03D70:  MOVWF  FE9
03D72:  MOVLW  01
03D74:  ADDWFC x79,W
03D76:  MOVWF  FEA
03D78:  MOVFF  FEF,880
03D7C:  MOVFF  03,FEA
03D80:  MOVFF  01,FE9
03D84:  MOVFF  880,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03D88:  MOVLW  5D
03D8A:  ADDWF  x78,W
03D8C:  MOVWF  x7E
03D8E:  MOVLW  00
03D90:  ADDWFC x79,W
03D92:  MOVWF  x7F
03D94:  MOVLW  79
03D96:  ADDWF  x78,W
03D98:  MOVWF  FE9
03D9A:  MOVLW  01
03D9C:  ADDWFC x79,W
03D9E:  MOVWF  FEA
03DA0:  MOVFF  FEF,880
03DA4:  MOVF   FF2,W
03DA6:  MOVWF  00
03DA8:  BCF    FF2.7
03DAA:  MOVFF  87F,FAA
03DAE:  MOVFF  87E,FA9
03DB2:  MOVFF  880,FA8
03DB6:  BCF    FA6.6
03DB8:  BCF    FA6.7
03DBA:  BSF    FA6.2
03DBC:  MOVLB  F
03DBE:  MOVLW  55
03DC0:  MOVWF  FA7
03DC2:  MOVLW  AA
03DC4:  MOVWF  FA7
03DC6:  BSF    FA6.1
03DC8:  BTFSC  FA6.1
03DCA:  BRA    3DC8
03DCC:  BCF    FA6.2
03DCE:  MOVF   00,W
03DD0:  IORWF  FF2,F
....................                }
03DD2:  MOVLB  8
03DD4:  MOVFF  879,03
03DD8:  MOVF   x78,W
03DDA:  INCF   x78,F
03DDC:  BTFSC  FD8.2
03DDE:  INCF   x79,F
03DE0:  INCF   x7A,F
03DE2:  BTFSC  FD8.2
03DE4:  INCF   x7B,F
03DE6:  BRA    3CF2
03DE8:  MOVLB  F
....................             }
....................             SMS_Massage3[j] = '\0' ; // end string
03DEA:  MOVLW  E7
03DEC:  MOVLB  8
03DEE:  ADDWF  x7A,W
03DF0:  MOVWF  FE9
03DF2:  MOVLW  06
03DF4:  ADDWFC x7B,W
03DF6:  MOVWF  FEA
03DF8:  CLRF   FEF
....................             
....................             j=0;
03DFA:  CLRF   x7B
03DFC:  CLRF   x7A
....................             i++;
03DFE:  INCF   x78,F
03E00:  BTFSC  FD8.2
03E02:  INCF   x79,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03E04:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03E06:  MOVLW  79
03E08:  ADDWF  x78,W
03E0A:  MOVWF  FE9
03E0C:  MOVLW  01
03E0E:  ADDWFC x79,W
03E10:  MOVWF  FEA
03E12:  MOVF   FEF,W
03E14:  SUBLW  0D
03E16:  BZ    3E22
03E18:  MOVF   x7B,F
03E1A:  BNZ   3E22
03E1C:  MOVF   x7A,W
03E1E:  SUBLW  29
03E20:  BC    3E72
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03E22:  MOVLW  5D
03E24:  ADDWF  x78,W
03E26:  MOVWF  x7E
03E28:  MOVLW  00
03E2A:  ADDWFC x79,W
03E2C:  MOVWF  x7F
03E2E:  MOVLW  79
03E30:  ADDWF  x78,W
03E32:  MOVWF  FE9
03E34:  MOVLW  01
03E36:  ADDWFC x79,W
03E38:  MOVWF  FEA
03E3A:  MOVFF  FEF,880
03E3E:  MOVF   FF2,W
03E40:  MOVWF  00
03E42:  BCF    FF2.7
03E44:  MOVFF  87F,FAA
03E48:  MOVFF  87E,FA9
03E4C:  MOVFF  880,FA8
03E50:  BCF    FA6.6
03E52:  BCF    FA6.7
03E54:  BSF    FA6.2
03E56:  MOVLB  F
03E58:  MOVLW  55
03E5A:  MOVWF  FA7
03E5C:  MOVLW  AA
03E5E:  MOVWF  FA7
03E60:  BSF    FA6.1
03E62:  BTFSC  FA6.1
03E64:  BRA    3E62
03E66:  BCF    FA6.2
03E68:  MOVF   00,W
03E6A:  IORWF  FF2,F
....................                   break;
03E6C:  BRA    3EFC
....................                }
03E6E:  BRA    3EE4
03E70:  MOVLB  8
....................                else
....................                {
....................                   SMS_Massage4[j] = RxD_Buff[i];
03E72:  MOVLW  10
03E74:  ADDWF  x7A,W
03E76:  MOVWF  01
03E78:  MOVLW  07
03E7A:  ADDWFC x7B,W
03E7C:  MOVWF  03
03E7E:  MOVLW  79
03E80:  ADDWF  x78,W
03E82:  MOVWF  FE9
03E84:  MOVLW  01
03E86:  ADDWFC x79,W
03E88:  MOVWF  FEA
03E8A:  MOVFF  FEF,880
03E8E:  MOVFF  03,FEA
03E92:  MOVFF  01,FE9
03E96:  MOVFF  880,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03E9A:  MOVLW  5D
03E9C:  ADDWF  x78,W
03E9E:  MOVWF  x7E
03EA0:  MOVLW  00
03EA2:  ADDWFC x79,W
03EA4:  MOVWF  x7F
03EA6:  MOVLW  79
03EA8:  ADDWF  x78,W
03EAA:  MOVWF  FE9
03EAC:  MOVLW  01
03EAE:  ADDWFC x79,W
03EB0:  MOVWF  FEA
03EB2:  MOVFF  FEF,880
03EB6:  MOVF   FF2,W
03EB8:  MOVWF  00
03EBA:  BCF    FF2.7
03EBC:  MOVFF  87F,FAA
03EC0:  MOVFF  87E,FA9
03EC4:  MOVFF  880,FA8
03EC8:  BCF    FA6.6
03ECA:  BCF    FA6.7
03ECC:  BSF    FA6.2
03ECE:  MOVLB  F
03ED0:  MOVLW  55
03ED2:  MOVWF  FA7
03ED4:  MOVLW  AA
03ED6:  MOVWF  FA7
03ED8:  BSF    FA6.1
03EDA:  BTFSC  FA6.1
03EDC:  BRA    3EDA
03EDE:  BCF    FA6.2
03EE0:  MOVF   00,W
03EE2:  IORWF  FF2,F
....................                }
03EE4:  MOVLB  8
03EE6:  MOVFF  879,03
03EEA:  MOVF   x78,W
03EEC:  INCF   x78,F
03EEE:  BTFSC  FD8.2
03EF0:  INCF   x79,F
03EF2:  INCF   x7A,F
03EF4:  BTFSC  FD8.2
03EF6:  INCF   x7B,F
03EF8:  BRA    3E04
03EFA:  MOVLB  F
....................             }
....................             SMS_Massage4[j] = '\0' ; // end string
03EFC:  MOVLW  10
03EFE:  MOVLB  8
03F00:  ADDWF  x7A,W
03F02:  MOVWF  FE9
03F04:  MOVLW  07
03F06:  ADDWFC x7B,W
03F08:  MOVWF  FEA
03F0A:  CLRF   FEF
....................             
....................             j=0;
03F0C:  CLRF   x7B
03F0E:  CLRF   x7A
....................             i++;
03F10:  INCF   x78,F
03F12:  BTFSC  FD8.2
03F14:  INCF   x79,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03F16:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03F18:  MOVLW  79
03F1A:  ADDWF  x78,W
03F1C:  MOVWF  FE9
03F1E:  MOVLW  01
03F20:  ADDWFC x79,W
03F22:  MOVWF  FEA
03F24:  MOVF   FEF,W
03F26:  SUBLW  0D
03F28:  BZ    3F34
03F2A:  MOVF   x7B,F
03F2C:  BNZ   3F34
03F2E:  MOVF   x7A,W
03F30:  SUBLW  29
03F32:  BC    3F84
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03F34:  MOVLW  5D
03F36:  ADDWF  x78,W
03F38:  MOVWF  x7E
03F3A:  MOVLW  00
03F3C:  ADDWFC x79,W
03F3E:  MOVWF  x7F
03F40:  MOVLW  79
03F42:  ADDWF  x78,W
03F44:  MOVWF  FE9
03F46:  MOVLW  01
03F48:  ADDWFC x79,W
03F4A:  MOVWF  FEA
03F4C:  MOVFF  FEF,880
03F50:  MOVF   FF2,W
03F52:  MOVWF  00
03F54:  BCF    FF2.7
03F56:  MOVFF  87F,FAA
03F5A:  MOVFF  87E,FA9
03F5E:  MOVFF  880,FA8
03F62:  BCF    FA6.6
03F64:  BCF    FA6.7
03F66:  BSF    FA6.2
03F68:  MOVLB  F
03F6A:  MOVLW  55
03F6C:  MOVWF  FA7
03F6E:  MOVLW  AA
03F70:  MOVWF  FA7
03F72:  BSF    FA6.1
03F74:  BTFSC  FA6.1
03F76:  BRA    3F74
03F78:  BCF    FA6.2
03F7A:  MOVF   00,W
03F7C:  IORWF  FF2,F
....................                   break;
03F7E:  BRA    400E
....................                }
03F80:  BRA    3FF6
03F82:  MOVLB  8
....................                else
....................                {
....................                   SMS_Massage5[j] = RxD_Buff[i];
03F84:  MOVLW  39
03F86:  ADDWF  x7A,W
03F88:  MOVWF  01
03F8A:  MOVLW  07
03F8C:  ADDWFC x7B,W
03F8E:  MOVWF  03
03F90:  MOVLW  79
03F92:  ADDWF  x78,W
03F94:  MOVWF  FE9
03F96:  MOVLW  01
03F98:  ADDWFC x79,W
03F9A:  MOVWF  FEA
03F9C:  MOVFF  FEF,880
03FA0:  MOVFF  03,FEA
03FA4:  MOVFF  01,FE9
03FA8:  MOVFF  880,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03FAC:  MOVLW  5D
03FAE:  ADDWF  x78,W
03FB0:  MOVWF  x7E
03FB2:  MOVLW  00
03FB4:  ADDWFC x79,W
03FB6:  MOVWF  x7F
03FB8:  MOVLW  79
03FBA:  ADDWF  x78,W
03FBC:  MOVWF  FE9
03FBE:  MOVLW  01
03FC0:  ADDWFC x79,W
03FC2:  MOVWF  FEA
03FC4:  MOVFF  FEF,880
03FC8:  MOVF   FF2,W
03FCA:  MOVWF  00
03FCC:  BCF    FF2.7
03FCE:  MOVFF  87F,FAA
03FD2:  MOVFF  87E,FA9
03FD6:  MOVFF  880,FA8
03FDA:  BCF    FA6.6
03FDC:  BCF    FA6.7
03FDE:  BSF    FA6.2
03FE0:  MOVLB  F
03FE2:  MOVLW  55
03FE4:  MOVWF  FA7
03FE6:  MOVLW  AA
03FE8:  MOVWF  FA7
03FEA:  BSF    FA6.1
03FEC:  BTFSC  FA6.1
03FEE:  BRA    3FEC
03FF0:  BCF    FA6.2
03FF2:  MOVF   00,W
03FF4:  IORWF  FF2,F
....................                }
03FF6:  MOVLB  8
03FF8:  MOVFF  879,03
03FFC:  MOVF   x78,W
03FFE:  INCF   x78,F
04000:  BTFSC  FD8.2
04002:  INCF   x79,F
04004:  INCF   x7A,F
04006:  BTFSC  FD8.2
04008:  INCF   x7B,F
0400A:  BRA    3F16
0400C:  MOVLB  F
....................             }
....................             SMS_Massage5[j] = '\0' ; // end string
0400E:  MOVLW  39
04010:  MOVLB  8
04012:  ADDWF  x7A,W
04014:  MOVWF  FE9
04016:  MOVLW  07
04018:  ADDWFC x7B,W
0401A:  MOVWF  FEA
0401C:  CLRF   FEF
....................             
....................             j=0;
0401E:  CLRF   x7B
04020:  CLRF   x7A
....................             i++;
04022:  INCF   x78,F
04024:  BTFSC  FD8.2
04026:  INCF   x79,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04028:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
0402A:  MOVLW  79
0402C:  ADDWF  x78,W
0402E:  MOVWF  FE9
04030:  MOVLW  01
04032:  ADDWFC x79,W
04034:  MOVWF  FEA
04036:  MOVF   FEF,W
04038:  SUBLW  0D
0403A:  BZ    4046
0403C:  MOVF   x7B,F
0403E:  BNZ   4046
04040:  MOVF   x7A,W
04042:  SUBLW  29
04044:  BC    4096
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04046:  MOVLW  5D
04048:  ADDWF  x78,W
0404A:  MOVWF  x7E
0404C:  MOVLW  00
0404E:  ADDWFC x79,W
04050:  MOVWF  x7F
04052:  MOVLW  79
04054:  ADDWF  x78,W
04056:  MOVWF  FE9
04058:  MOVLW  01
0405A:  ADDWFC x79,W
0405C:  MOVWF  FEA
0405E:  MOVFF  FEF,880
04062:  MOVF   FF2,W
04064:  MOVWF  00
04066:  BCF    FF2.7
04068:  MOVFF  87F,FAA
0406C:  MOVFF  87E,FA9
04070:  MOVFF  880,FA8
04074:  BCF    FA6.6
04076:  BCF    FA6.7
04078:  BSF    FA6.2
0407A:  MOVLB  F
0407C:  MOVLW  55
0407E:  MOVWF  FA7
04080:  MOVLW  AA
04082:  MOVWF  FA7
04084:  BSF    FA6.1
04086:  BTFSC  FA6.1
04088:  BRA    4086
0408A:  BCF    FA6.2
0408C:  MOVF   00,W
0408E:  IORWF  FF2,F
....................                   break;
04090:  BRA    4124
....................                }
04092:  BRA    410C
04094:  MOVLB  8
....................                else
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04096:  MOVLW  5D
04098:  ADDWF  x78,W
0409A:  MOVWF  x7E
0409C:  MOVLW  00
0409E:  ADDWFC x79,W
040A0:  MOVWF  x7F
040A2:  MOVLW  79
040A4:  ADDWF  x78,W
040A6:  MOVWF  FE9
040A8:  MOVLW  01
040AA:  ADDWFC x79,W
040AC:  MOVWF  FEA
040AE:  MOVFF  FEF,880
040B2:  MOVF   FF2,W
040B4:  MOVWF  00
040B6:  BCF    FF2.7
040B8:  MOVFF  87F,FAA
040BC:  MOVFF  87E,FA9
040C0:  MOVFF  880,FA8
040C4:  BCF    FA6.6
040C6:  BCF    FA6.7
040C8:  BSF    FA6.2
040CA:  MOVLB  F
040CC:  MOVLW  55
040CE:  MOVWF  FA7
040D0:  MOVLW  AA
040D2:  MOVWF  FA7
040D4:  BSF    FA6.1
040D6:  BTFSC  FA6.1
040D8:  BRA    40D6
040DA:  BCF    FA6.2
040DC:  MOVF   00,W
040DE:  IORWF  FF2,F
....................                   SMS_Massage6[j] = RxD_Buff[i];
040E0:  MOVLW  62
040E2:  MOVLB  8
040E4:  ADDWF  x7A,W
040E6:  MOVWF  01
040E8:  MOVLW  07
040EA:  ADDWFC x7B,W
040EC:  MOVWF  03
040EE:  MOVLW  79
040F0:  ADDWF  x78,W
040F2:  MOVWF  FE9
040F4:  MOVLW  01
040F6:  ADDWFC x79,W
040F8:  MOVWF  FEA
040FA:  MOVFF  FEF,880
040FE:  MOVFF  03,FEA
04102:  MOVFF  01,FE9
04106:  MOVFF  880,FEF
0410A:  MOVLB  F
....................                }
0410C:  MOVLB  8
0410E:  MOVFF  879,03
04112:  MOVF   x78,W
04114:  INCF   x78,F
04116:  BTFSC  FD8.2
04118:  INCF   x79,F
0411A:  INCF   x7A,F
0411C:  BTFSC  FD8.2
0411E:  INCF   x7B,F
04120:  BRA    4028
04122:  MOVLB  F
....................             }
....................             SMS_Massage6[j] = '\0' ; // end string
04124:  MOVLW  62
04126:  MOVLB  8
04128:  ADDWF  x7A,W
0412A:  MOVWF  FE9
0412C:  MOVLW  07
0412E:  ADDWFC x7B,W
04130:  MOVWF  FEA
04132:  CLRF   FEF
....................             
....................             j=0;
04134:  CLRF   x7B
04136:  CLRF   x7A
....................             i++;
04138:  INCF   x78,F
0413A:  BTFSC  FD8.2
0413C:  INCF   x79,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0413E:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
04140:  MOVLW  79
04142:  ADDWF  x78,W
04144:  MOVWF  FE9
04146:  MOVLW  01
04148:  ADDWFC x79,W
0414A:  MOVWF  FEA
0414C:  MOVF   FEF,W
0414E:  SUBLW  0D
04150:  BZ    415C
04152:  MOVF   x7B,F
04154:  BNZ   415C
04156:  MOVF   x7A,W
04158:  SUBLW  29
0415A:  BC    41AC
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0415C:  MOVLW  5D
0415E:  ADDWF  x78,W
04160:  MOVWF  x7E
04162:  MOVLW  00
04164:  ADDWFC x79,W
04166:  MOVWF  x7F
04168:  MOVLW  79
0416A:  ADDWF  x78,W
0416C:  MOVWF  FE9
0416E:  MOVLW  01
04170:  ADDWFC x79,W
04172:  MOVWF  FEA
04174:  MOVFF  FEF,880
04178:  MOVF   FF2,W
0417A:  MOVWF  00
0417C:  BCF    FF2.7
0417E:  MOVFF  87F,FAA
04182:  MOVFF  87E,FA9
04186:  MOVFF  880,FA8
0418A:  BCF    FA6.6
0418C:  BCF    FA6.7
0418E:  BSF    FA6.2
04190:  MOVLB  F
04192:  MOVLW  55
04194:  MOVWF  FA7
04196:  MOVLW  AA
04198:  MOVWF  FA7
0419A:  BSF    FA6.1
0419C:  BTFSC  FA6.1
0419E:  BRA    419C
041A0:  BCF    FA6.2
041A2:  MOVF   00,W
041A4:  IORWF  FF2,F
....................                   break;
041A6:  BRA    4236
....................                }
041A8:  BRA    421E
041AA:  MOVLB  8
....................                else
....................                {
....................                   SMS_Massage7[j] = RxD_Buff[i];
041AC:  MOVLW  8B
041AE:  ADDWF  x7A,W
041B0:  MOVWF  01
041B2:  MOVLW  07
041B4:  ADDWFC x7B,W
041B6:  MOVWF  03
041B8:  MOVLW  79
041BA:  ADDWF  x78,W
041BC:  MOVWF  FE9
041BE:  MOVLW  01
041C0:  ADDWFC x79,W
041C2:  MOVWF  FEA
041C4:  MOVFF  FEF,880
041C8:  MOVFF  03,FEA
041CC:  MOVFF  01,FE9
041D0:  MOVFF  880,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
041D4:  MOVLW  5D
041D6:  ADDWF  x78,W
041D8:  MOVWF  x7E
041DA:  MOVLW  00
041DC:  ADDWFC x79,W
041DE:  MOVWF  x7F
041E0:  MOVLW  79
041E2:  ADDWF  x78,W
041E4:  MOVWF  FE9
041E6:  MOVLW  01
041E8:  ADDWFC x79,W
041EA:  MOVWF  FEA
041EC:  MOVFF  FEF,880
041F0:  MOVF   FF2,W
041F2:  MOVWF  00
041F4:  BCF    FF2.7
041F6:  MOVFF  87F,FAA
041FA:  MOVFF  87E,FA9
041FE:  MOVFF  880,FA8
04202:  BCF    FA6.6
04204:  BCF    FA6.7
04206:  BSF    FA6.2
04208:  MOVLB  F
0420A:  MOVLW  55
0420C:  MOVWF  FA7
0420E:  MOVLW  AA
04210:  MOVWF  FA7
04212:  BSF    FA6.1
04214:  BTFSC  FA6.1
04216:  BRA    4214
04218:  BCF    FA6.2
0421A:  MOVF   00,W
0421C:  IORWF  FF2,F
....................                }
0421E:  MOVLB  8
04220:  MOVFF  879,03
04224:  MOVF   x78,W
04226:  INCF   x78,F
04228:  BTFSC  FD8.2
0422A:  INCF   x79,F
0422C:  INCF   x7A,F
0422E:  BTFSC  FD8.2
04230:  INCF   x7B,F
04232:  BRA    413E
04234:  MOVLB  F
....................             }
....................             SMS_Massage7[j] = '\0' ; // end string
04236:  MOVLW  8B
04238:  MOVLB  8
0423A:  ADDWF  x7A,W
0423C:  MOVWF  FE9
0423E:  MOVLW  07
04240:  ADDWFC x7B,W
04242:  MOVWF  FEA
04244:  CLRF   FEF
....................             
....................             j=0;
04246:  CLRF   x7B
04248:  CLRF   x7A
....................             i++;
0424A:  INCF   x78,F
0424C:  BTFSC  FD8.2
0424E:  INCF   x79,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04250:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
04252:  MOVLW  79
04254:  ADDWF  x78,W
04256:  MOVWF  FE9
04258:  MOVLW  01
0425A:  ADDWFC x79,W
0425C:  MOVWF  FEA
0425E:  MOVF   FEF,W
04260:  SUBLW  0D
04262:  BZ    426E
04264:  MOVF   x7B,F
04266:  BNZ   426E
04268:  MOVF   x7A,W
0426A:  SUBLW  29
0426C:  BC    42BE
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0426E:  MOVLW  5D
04270:  ADDWF  x78,W
04272:  MOVWF  x7E
04274:  MOVLW  00
04276:  ADDWFC x79,W
04278:  MOVWF  x7F
0427A:  MOVLW  79
0427C:  ADDWF  x78,W
0427E:  MOVWF  FE9
04280:  MOVLW  01
04282:  ADDWFC x79,W
04284:  MOVWF  FEA
04286:  MOVFF  FEF,880
0428A:  MOVF   FF2,W
0428C:  MOVWF  00
0428E:  BCF    FF2.7
04290:  MOVFF  87F,FAA
04294:  MOVFF  87E,FA9
04298:  MOVFF  880,FA8
0429C:  BCF    FA6.6
0429E:  BCF    FA6.7
042A0:  BSF    FA6.2
042A2:  MOVLB  F
042A4:  MOVLW  55
042A6:  MOVWF  FA7
042A8:  MOVLW  AA
042AA:  MOVWF  FA7
042AC:  BSF    FA6.1
042AE:  BTFSC  FA6.1
042B0:  BRA    42AE
042B2:  BCF    FA6.2
042B4:  MOVF   00,W
042B6:  IORWF  FF2,F
....................                   break;
042B8:  BRA    4348
....................                }
042BA:  BRA    4330
042BC:  MOVLB  8
....................                else
....................                {
....................                   SMS_Massage8[j] = RxD_Buff[i];
042BE:  MOVLW  B4
042C0:  ADDWF  x7A,W
042C2:  MOVWF  01
042C4:  MOVLW  07
042C6:  ADDWFC x7B,W
042C8:  MOVWF  03
042CA:  MOVLW  79
042CC:  ADDWF  x78,W
042CE:  MOVWF  FE9
042D0:  MOVLW  01
042D2:  ADDWFC x79,W
042D4:  MOVWF  FEA
042D6:  MOVFF  FEF,880
042DA:  MOVFF  03,FEA
042DE:  MOVFF  01,FE9
042E2:  MOVFF  880,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
042E6:  MOVLW  5D
042E8:  ADDWF  x78,W
042EA:  MOVWF  x7E
042EC:  MOVLW  00
042EE:  ADDWFC x79,W
042F0:  MOVWF  x7F
042F2:  MOVLW  79
042F4:  ADDWF  x78,W
042F6:  MOVWF  FE9
042F8:  MOVLW  01
042FA:  ADDWFC x79,W
042FC:  MOVWF  FEA
042FE:  MOVFF  FEF,880
04302:  MOVF   FF2,W
04304:  MOVWF  00
04306:  BCF    FF2.7
04308:  MOVFF  87F,FAA
0430C:  MOVFF  87E,FA9
04310:  MOVFF  880,FA8
04314:  BCF    FA6.6
04316:  BCF    FA6.7
04318:  BSF    FA6.2
0431A:  MOVLB  F
0431C:  MOVLW  55
0431E:  MOVWF  FA7
04320:  MOVLW  AA
04322:  MOVWF  FA7
04324:  BSF    FA6.1
04326:  BTFSC  FA6.1
04328:  BRA    4326
0432A:  BCF    FA6.2
0432C:  MOVF   00,W
0432E:  IORWF  FF2,F
....................                }
04330:  MOVLB  8
04332:  MOVFF  879,03
04336:  MOVF   x78,W
04338:  INCF   x78,F
0433A:  BTFSC  FD8.2
0433C:  INCF   x79,F
0433E:  INCF   x7A,F
04340:  BTFSC  FD8.2
04342:  INCF   x7B,F
04344:  BRA    4250
04346:  MOVLB  F
....................             }
....................             SMS_Massage8[j] = '\0' ; // end string
04348:  MOVLW  B4
0434A:  MOVLB  8
0434C:  ADDWF  x7A,W
0434E:  MOVWF  FE9
04350:  MOVLW  07
04352:  ADDWFC x7B,W
04354:  MOVWF  FEA
04356:  CLRF   FEF
....................             
....................          
....................             TxD_Buff[0] = Address ;         //Address
04358:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x21 ;            //return function code
0435C:  MOVLW  21
0435E:  MOVLB  0
04360:  MOVWF  x7B
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
04362:  MOVLB  8
04364:  CLRF   x80
04366:  MOVLW  7A
04368:  MOVWF  x7F
0436A:  MOVLW  02
0436C:  MOVWF  x81
0436E:  MOVLB  0
04370:  CALL   1F2C
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
04374:  MOVFF  57A,7C
....................             TxD_Buff[3] = CRC_Lo ;
04378:  MOVFF  579,7D
.................... 
....................             output_bit(P485ctrl,1);
0437C:  BSF    F8A.3
0437E:  BCF    F93.3
....................             delay_ms(10);
04380:  MOVLW  0A
04382:  MOVLB  8
04384:  MOVWF  x7E
04386:  MOVLB  0
04388:  CALL   074A
.................... 
....................             putc(Txd_Buff[0]);
0438C:  MOVF   x7A,W
0438E:  CALL   1F82
....................             putc(Txd_Buff[1]);
04392:  MOVF   x7B,W
04394:  CALL   1F82
....................             putc(Txd_Buff[2]);
04398:  MOVF   x7C,W
0439A:  CALL   1F82
....................             putc(Txd_Buff[3]);
0439E:  MOVF   x7D,W
043A0:  CALL   1F82
.................... 
....................             delay_ms(3);
043A4:  MOVLW  03
043A6:  MOVLB  8
043A8:  MOVWF  x7E
043AA:  MOVLB  0
043AC:  CALL   074A
....................             output_bit(P485ctrl,0);
043B0:  BCF    F8A.3
043B2:  BCF    F93.3
043B4:  MOVLB  5
....................          }
.................... 
....................          if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
043B6:  MOVLB  1
043B8:  MOVF   x7A,W
043BA:  SUBLW  03
043BC:  BNZ   444A
....................          {
.................... 
....................             Data_Buff[0] = 0x00;// dummy data
043BE:  MOVLB  5
043C0:  CLRF   x82
....................             Data_Buff[1] = Input1_8;
043C2:  MOVFF  49,583
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
043C6:  MOVFF  78,7A
....................             TxD_Buff[1] = 0x03 ;           //Function Code
043CA:  MOVLW  03
043CC:  MOVLB  0
043CE:  MOVWF  x7B
....................             TxD_Buff[2] = 0x02 ;          //Byte Count
043D0:  MOVLW  02
043D2:  MOVWF  x7C
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
043D4:  MOVFF  582,7D
....................             TxD_Buff[4] = Data_Buff[1];   //first byte Data
043D8:  MOVFF  583,7E
.................... 
....................             CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
043DC:  MOVLB  8
043DE:  CLRF   x80
043E0:  MOVLW  7A
043E2:  MOVWF  x7F
043E4:  MOVLW  05
043E6:  MOVWF  x81
043E8:  MOVLB  0
043EA:  CALL   1F2C
.................... 
....................             TxD_Buff[5] = CRC_Hi ;
043EE:  MOVFF  57A,7F
....................             TxD_Buff[6] = CRC_Lo ;
043F2:  MOVFF  579,80
.................... 
.................... 
....................             output_bit(P485ctrl,1);
043F6:  BSF    F8A.3
043F8:  BCF    F93.3
....................             restart_wdt();
043FA:  CLRWDT
....................             delay_ms(4);
043FC:  MOVLW  04
043FE:  MOVLB  8
04400:  MOVWF  x7E
04402:  MOVLB  0
04404:  CALL   074A
....................             restart_wdt();
04408:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
0440A:  MOVF   x7A,W
0440C:  CALL   1F82
....................             putc(TxD_Buff[1]) ;               //Function Code
04410:  MOVF   x7B,W
04412:  CALL   1F82
....................             putc(TxD_Buff[2]) ;               //Byte Count
04416:  MOVF   x7C,W
04418:  CALL   1F82
....................             putc(TxD_Buff[3]) ;
0441C:  MOVF   x7D,W
0441E:  CALL   1F82
....................             putc(TxD_Buff[4]) ;
04422:  MOVF   x7E,W
04424:  CALL   1F82
....................             putc(TxD_Buff[5]) ;
04428:  MOVF   x7F,W
0442A:  CALL   1F82
....................             putc(TxD_Buff[6]) ;
0442E:  MOVF   x80,W
04430:  CALL   1F82
.................... 
....................             restart_wdt();
04434:  CLRWDT
....................             delay_ms(3);
04436:  MOVLW  03
04438:  MOVLB  8
0443A:  MOVWF  x7E
0443C:  MOVLB  0
0443E:  CALL   074A
....................             restart_wdt();
04442:  CLRWDT
....................             output_bit(P485ctrl,0);
04444:  BCF    F8A.3
04446:  BCF    F93.3
04448:  MOVLB  1
.................... 
....................          }
....................        
....................        /*-----JACK Comment 18/6/58----------//
....................          else
....................          {
....................             //Invalid function
....................             TxD_Buff[0] = Address ;         //Address
....................             TxD_Buff[1] = 0x81 ;         //Function Code
....................             TxD_Buff[2] = 0x01 ;         //illegal function
.................... 
....................             CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
.................... 
....................             TxD_Buff[3] = CRC_Hi ;
....................             TxD_Buff[4] = CRC_Lo ;
.................... 
....................             output_bit(P485ctrl,1);
....................             delay_ms(10);
.................... 
....................             putc(Txd_Buff[0]);
....................             putc(Txd_Buff[1]);
....................             putc(Txd_Buff[2]);
....................             putc(Txd_Buff[3]);
....................             putc(Txd_Buff[4]);
.................... 
....................             delay_ms(3);
....................             output_bit(P485ctrl,0);
....................          }
....................        *///-----JACK Comment----------//
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
0444A:  MOVLW  01
0444C:  MOVLB  5
0444E:  MOVWF  x7C
04450:  MOVLW  F4
04452:  MOVWF  x7B
....................    } // if crc
.................... 
....................    recieve_completed = 0 ;
04454:  BCF    30.5
....................    sequence = end_sq ;
04456:  MOVFF  6F,77
....................    T_timeout = 0x00;
0445A:  MOVLB  6
0445C:  CLRF   x83
....................    RxD_DataLen = 0x00 ;
0445E:  MOVLB  0
04460:  CLRF   x79
....................    output_bit(P485ctrl,0);
04462:  BCF    F8A.3
04464:  BCF    F93.3
04466:  GOTO   6BA2 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
....................    //if(NoOfPoint >= 10)
....................    //{
....................       // if(NoOfPoint >= 20)
....................    //{   
....................      
....................       ///////////////////////--Edit--///////////////////
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
*
015BC:  MOVLW  02
015BE:  MOVLB  8
015C0:  MOVWF  x7F
015C2:  MOVLB  0
015C4:  BRA    1488
015C6:  MOVFF  01,681
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
015CA:  BTFSS  1A.4
015CC:  BRA    15D4
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
015CE:  MOVLB  6
015D0:  COMF   x81,F
015D2:  MOVLB  0
....................          
....................       }
....................       
....................      // FaultNow[11] = MCP23s17_Ip_dat;
....................       FaultNow[1] = MCP23s17_Ip_dat >> 1;
015D4:  BCF    FD8.0
015D6:  MOVLB  6
015D8:  RRCF   x81,W
015DA:  MOVLB  7
015DC:  BCF    xF0.1
015DE:  BTFSC  FE8.0
015E0:  BSF    xF0.1
....................       FaultNow[2] = MCP23s17_Ip_dat >> 2;
015E2:  MOVLB  6
015E4:  RRCF   x81,W
015E6:  MOVWF  00
015E8:  RRCF   00,F
015EA:  MOVLW  3F
015EC:  ANDWF  00,F
015EE:  MOVLB  7
015F0:  BCF    xF0.2
015F2:  BTFSC  00.0
015F4:  BSF    xF0.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 3;
015F6:  MOVLB  6
015F8:  RRCF   x81,W
015FA:  MOVWF  00
015FC:  RRCF   00,F
015FE:  RRCF   00,F
01600:  MOVLW  1F
01602:  ANDWF  00,F
01604:  MOVLB  7
01606:  BCF    xF0.3
01608:  BTFSC  00.0
0160A:  BSF    xF0.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 4;
0160C:  MOVLB  6
0160E:  SWAPF  x81,W
01610:  MOVWF  00
01612:  MOVLW  0F
01614:  ANDWF  00,F
01616:  MOVLB  7
01618:  BCF    xF0.4
0161A:  BTFSC  00.0
0161C:  BSF    xF0.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 5;
0161E:  MOVLB  6
01620:  SWAPF  x81,W
01622:  MOVWF  00
01624:  RRCF   00,F
01626:  MOVLW  07
01628:  ANDWF  00,F
0162A:  MOVLB  7
0162C:  BCF    xF0.5
0162E:  BTFSC  00.0
01630:  BSF    xF0.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 6;
01632:  MOVLB  6
01634:  SWAPF  x81,W
01636:  MOVWF  00
01638:  RRCF   00,F
0163A:  RRCF   00,F
0163C:  MOVLW  03
0163E:  ANDWF  00,F
01640:  MOVLB  7
01642:  BCF    xF0.6
01644:  BTFSC  00.0
01646:  BSF    xF0.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 7;
01648:  CLRF   00
0164A:  MOVLB  6
0164C:  BTFSC  x81.7
0164E:  BSF    00.0
01650:  MOVLB  7
01652:  BCF    xF0.7
01654:  BTFSC  00.0
01656:  BSF    xF0.7
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
01658:  MOVLW  02
0165A:  MOVLB  8
0165C:  MOVWF  x7F
0165E:  MOVLB  0
01660:  BRA    14A6
01662:  MOVFF  01,681
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01666:  BTFSS  1A.4
01668:  BRA    1670
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
0166A:  MOVLB  6
0166C:  COMF   x81,F
0166E:  MOVLB  0
....................       }
....................       
....................       FaultNow[8] = MCP23s17_Ip_dat;
01670:  MOVLB  7
01672:  BCF    xF1.0
01674:  MOVLB  6
01676:  BTFSS  x81.0
01678:  BRA    1680
0167A:  MOVLB  7
0167C:  BSF    xF1.0
0167E:  MOVLB  6
....................       
.................... 
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=8; i++)
01680:  MOVLW  01
01682:  MOVLB  8
01684:  MOVWF  x7E
01686:  MOVF   x7E,W
01688:  SUBLW  08
0168A:  BTFSS  FD8.0
0168C:  BRA    1B76
....................       {
....................          if(FaultNCNO[i] ==NO)
0168E:  MOVFF  87E,882
01692:  MOVLW  08
01694:  MOVWF  x84
01696:  MOVLW  6C
01698:  MOVWF  x83
0169A:  MOVLB  0
0169C:  RCALL  14C4
0169E:  MOVF   01,W
016A0:  ANDLW  01
016A2:  SUBLW  01
016A4:  BTFSS  FD8.2
016A6:  BRA    18FE
....................          {
....................              if(FaultNow[i]==0)
016A8:  MOVFF  87E,882
016AC:  MOVLW  07
016AE:  MOVLB  8
016B0:  MOVWF  x84
016B2:  MOVLW  F0
016B4:  MOVWF  x83
016B6:  MOVLB  0
016B8:  RCALL  14C4
016BA:  MOVF   01,W
016BC:  ANDLW  01
016BE:  BTFSS  FD8.2
016C0:  BRA    17E0
....................              {   
....................                if(FaultAgo[i]==0)
016C2:  MOVFF  87E,882
016C6:  MOVLW  07
016C8:  MOVLB  8
016CA:  MOVWF  x84
016CC:  MOVLW  EC
016CE:  MOVWF  x83
016D0:  MOVLB  0
016D2:  RCALL  14C4
016D4:  MOVF   01,W
016D6:  ANDLW  01
016D8:  BTFSS  FD8.2
016DA:  BRA    17C4
....................                {
....................                    ReleaseTime[i]++;
016DC:  BCF    FD8.0
016DE:  MOVLB  8
016E0:  RLCF   x7E,W
016E2:  CLRF   03
016E4:  ADDLW  F4
016E6:  MOVWF  FE9
016E8:  MOVLW  07
016EA:  ADDWFC 03,W
016EC:  MOVWF  FEA
016EE:  MOVLW  01
016F0:  ADDWF  FEE,F
016F2:  BNC   16F6
016F4:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
016F6:  BCF    FD8.0
016F8:  RLCF   x7E,W
016FA:  CLRF   03
016FC:  ADDLW  F4
016FE:  MOVWF  FE9
01700:  MOVLW  07
01702:  ADDWFC 03,W
01704:  MOVWF  FEA
01706:  MOVFF  FEC,880
0170A:  MOVF   FED,F
0170C:  MOVFF  FEF,87F
01710:  BCF    FD8.0
01712:  RLCF   x7E,W
01714:  CLRF   03
01716:  ADDLW  30
01718:  MOVWF  FE9
0171A:  MOVLW  08
0171C:  ADDWFC 03,W
0171E:  MOVWF  FEA
01720:  MOVFF  FEC,884
01724:  MOVF   FED,F
01726:  MOVFF  FEF,883
0172A:  CLRF   x86
0172C:  MOVLW  4B
0172E:  MOVWF  x85
01730:  MOVLB  0
01732:  RCALL  14FA
01734:  MOVFF  02,882
01738:  MOVFF  01,881
0173C:  MOVLW  0F
0173E:  MOVLB  8
01740:  ADDWF  01,W
01742:  MOVWF  01
01744:  MOVLW  00
01746:  ADDWFC 02,W
01748:  MOVWF  03
0174A:  MOVF   03,W
0174C:  SUBWF  x80,W
0174E:  BNC   17C0
01750:  BNZ   1758
01752:  MOVF   01,W
01754:  SUBWF  x7F,W
01756:  BNC   17C0
....................                    {   
....................                      ReleaseTime[i] = 0;
01758:  BCF    FD8.0
0175A:  RLCF   x7E,W
0175C:  CLRF   03
0175E:  ADDLW  F4
01760:  MOVWF  FE9
01762:  MOVLW  07
01764:  ADDWFC 03,W
01766:  MOVWF  FEA
01768:  CLRF   FEC
0176A:  MOVF   FED,F
0176C:  CLRF   FEF
....................                      switch(i)
0176E:  MOVLW  01
01770:  SUBWF  x7E,W
01772:  ADDLW  F8
01774:  BC    17C0
01776:  ADDLW  08
01778:  MOVLB  0
0177A:  GOTO   1C18
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
0177E:  MOVLB  7
01780:  BCF    xDD.0
....................                         break;
01782:  MOVLB  8
01784:  BRA    17C0
....................                         case 2:
....................                            Inputt.B2 = 0; 
01786:  MOVLB  7
01788:  BCF    xDD.1
....................                         break;
0178A:  MOVLB  8
0178C:  BRA    17C0
....................                         case 3:
....................                            Inputt.B3 = 0; 
0178E:  MOVLB  7
01790:  BCF    xDD.2
....................                         break;
01792:  MOVLB  8
01794:  BRA    17C0
....................                         case 4:
....................                            Inputt.B4 = 0; 
01796:  MOVLB  7
01798:  BCF    xDD.3
....................                         break;
0179A:  MOVLB  8
0179C:  BRA    17C0
....................                         case 5:
....................                            Inputt.B5 = 0; 
0179E:  MOVLB  7
017A0:  BCF    xDD.4
....................                         break;
017A2:  MOVLB  8
017A4:  BRA    17C0
....................                         case 6:
....................                            Inputt.B6 = 0; 
017A6:  MOVLB  7
017A8:  BCF    xDD.5
....................                         break;
017AA:  MOVLB  8
017AC:  BRA    17C0
....................                         case 7:
....................                            Inputt.B7 = 0; 
017AE:  MOVLB  7
017B0:  BCF    xDD.6
....................                          break;
017B2:  MOVLB  8
017B4:  BRA    17C0
....................                          case 8:
....................                            Inputt.B8 = 0; 
017B6:  MOVLB  7
017B8:  BCF    xDD.7
....................                         break;
017BA:  MOVLB  8
017BC:  BRA    17C0
017BE:  MOVLB  8
....................            
....................                      }                 
....................                    }
....................                }
017C0:  BRA    17DC
017C2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
017C4:  BCF    FD8.0
017C6:  MOVLB  8
017C8:  RLCF   x7E,W
017CA:  CLRF   03
017CC:  ADDLW  F4
017CE:  MOVWF  FE9
017D0:  MOVLW  07
017D2:  ADDWFC 03,W
017D4:  MOVWF  FEA
017D6:  CLRF   FEC
017D8:  MOVF   FED,F
017DA:  CLRF   FEF
....................                }
....................              }
017DC:  BRA    18FC
017DE:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
017E0:  MOVFF  87E,882
017E4:  MOVLW  07
017E6:  MOVLB  8
017E8:  MOVWF  x84
017EA:  MOVLW  EC
017EC:  MOVWF  x83
017EE:  MOVLB  0
017F0:  RCALL  14C4
017F2:  MOVF   01,W
017F4:  ANDLW  01
017F6:  SUBLW  01
017F8:  BTFSS  FD8.2
017FA:  BRA    18E4
....................                {
....................                    ReleaseTime[i]++;
017FC:  BCF    FD8.0
017FE:  MOVLB  8
01800:  RLCF   x7E,W
01802:  CLRF   03
01804:  ADDLW  F4
01806:  MOVWF  FE9
01808:  MOVLW  07
0180A:  ADDWFC 03,W
0180C:  MOVWF  FEA
0180E:  MOVLW  01
01810:  ADDWF  FEE,F
01812:  BNC   1816
01814:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01816:  BCF    FD8.0
01818:  RLCF   x7E,W
0181A:  CLRF   03
0181C:  ADDLW  F4
0181E:  MOVWF  FE9
01820:  MOVLW  07
01822:  ADDWFC 03,W
01824:  MOVWF  FEA
01826:  MOVFF  FEC,880
0182A:  MOVF   FED,F
0182C:  MOVFF  FEF,87F
01830:  BCF    FD8.0
01832:  RLCF   x7E,W
01834:  CLRF   03
01836:  ADDLW  30
01838:  MOVWF  FE9
0183A:  MOVLW  08
0183C:  ADDWFC 03,W
0183E:  MOVWF  FEA
01840:  MOVFF  FEC,884
01844:  MOVF   FED,F
01846:  MOVFF  FEF,883
0184A:  CLRF   x86
0184C:  MOVLW  4B
0184E:  MOVWF  x85
01850:  MOVLB  0
01852:  RCALL  14FA
01854:  MOVFF  02,882
01858:  MOVFF  01,881
0185C:  MOVLW  0F
0185E:  MOVLB  8
01860:  ADDWF  01,W
01862:  MOVWF  01
01864:  MOVLW  00
01866:  ADDWFC 02,W
01868:  MOVWF  03
0186A:  MOVF   03,W
0186C:  SUBWF  x80,W
0186E:  BNC   18E0
01870:  BNZ   1878
01872:  MOVF   01,W
01874:  SUBWF  x7F,W
01876:  BNC   18E0
....................                    {   
....................                      ReleaseTime[i] = 1;
01878:  BCF    FD8.0
0187A:  RLCF   x7E,W
0187C:  CLRF   03
0187E:  ADDLW  F4
01880:  MOVWF  FE9
01882:  MOVLW  07
01884:  ADDWFC 03,W
01886:  MOVWF  FEA
01888:  CLRF   FEC
0188A:  MOVF   FED,F
0188C:  MOVLW  01
0188E:  MOVWF  FEF
....................                      switch(i)
01890:  SUBWF  x7E,W
01892:  ADDLW  F8
01894:  BC    18E0
01896:  ADDLW  08
01898:  MOVLB  0
0189A:  GOTO   1C42
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
0189E:  MOVLB  7
018A0:  BSF    xDD.0
....................                         break;
018A2:  MOVLB  8
018A4:  BRA    18E0
....................                         case 2:
....................                            Inputt.B2 = 1; 
018A6:  MOVLB  7
018A8:  BSF    xDD.1
....................                         break;
018AA:  MOVLB  8
018AC:  BRA    18E0
....................                         case 3:
....................                            Inputt.B3 = 1; 
018AE:  MOVLB  7
018B0:  BSF    xDD.2
....................                         break;
018B2:  MOVLB  8
018B4:  BRA    18E0
....................                         case 4:
....................                            Inputt.B4 = 1; 
018B6:  MOVLB  7
018B8:  BSF    xDD.3
....................                         break;
018BA:  MOVLB  8
018BC:  BRA    18E0
....................                         case 5:
....................                            Inputt.B5 = 1; 
018BE:  MOVLB  7
018C0:  BSF    xDD.4
....................                         break;
018C2:  MOVLB  8
018C4:  BRA    18E0
....................                         case 6:
....................                            Inputt.B6 = 1; 
018C6:  MOVLB  7
018C8:  BSF    xDD.5
....................                         break;
018CA:  MOVLB  8
018CC:  BRA    18E0
....................                         case 7:
....................                            Inputt.B7 = 1; 
018CE:  MOVLB  7
018D0:  BSF    xDD.6
....................                          break;
018D2:  MOVLB  8
018D4:  BRA    18E0
....................                          case 8:
....................                            Inputt.B8 = 1; 
018D6:  MOVLB  7
018D8:  BSF    xDD.7
....................                         break;
018DA:  MOVLB  8
018DC:  BRA    18E0
018DE:  MOVLB  8
....................          
....................                      }                 
....................                    }
....................                }
018E0:  BRA    18FC
018E2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
018E4:  BCF    FD8.0
018E6:  MOVLB  8
018E8:  RLCF   x7E,W
018EA:  CLRF   03
018EC:  ADDLW  F4
018EE:  MOVWF  FE9
018F0:  MOVLW  07
018F2:  ADDWFC 03,W
018F4:  MOVWF  FEA
018F6:  CLRF   FEC
018F8:  MOVF   FED,F
018FA:  CLRF   FEF
....................                }
....................              
.................... 
....................              }
....................           }
018FC:  BRA    1B6E
....................           else if(FaultNCNO[i] ==NC)
018FE:  MOVFF  87E,882
01902:  MOVLW  08
01904:  MOVLB  8
01906:  MOVWF  x84
01908:  MOVLW  6C
0190A:  MOVWF  x83
0190C:  MOVLB  0
0190E:  RCALL  14C4
01910:  MOVF   01,W
01912:  ANDLW  01
01914:  BTFSS  FD8.2
01916:  BRA    1B70
....................           {
....................              if(FaultNow[i]==1)
01918:  MOVFF  87E,882
0191C:  MOVLW  07
0191E:  MOVLB  8
01920:  MOVWF  x84
01922:  MOVLW  F0
01924:  MOVWF  x83
01926:  MOVLB  0
01928:  RCALL  14C4
0192A:  MOVF   01,W
0192C:  ANDLW  01
0192E:  SUBLW  01
01930:  BTFSS  FD8.2
01932:  BRA    1A54
....................              {
....................                if(FaultAgo[i]==1)
01934:  MOVFF  87E,882
01938:  MOVLW  07
0193A:  MOVLB  8
0193C:  MOVWF  x84
0193E:  MOVLW  EC
01940:  MOVWF  x83
01942:  MOVLB  0
01944:  RCALL  14C4
01946:  MOVF   01,W
01948:  ANDLW  01
0194A:  SUBLW  01
0194C:  BTFSS  FD8.2
0194E:  BRA    1A38
....................                {
....................                    ReleaseTime[i]++;
01950:  BCF    FD8.0
01952:  MOVLB  8
01954:  RLCF   x7E,W
01956:  CLRF   03
01958:  ADDLW  F4
0195A:  MOVWF  FE9
0195C:  MOVLW  07
0195E:  ADDWFC 03,W
01960:  MOVWF  FEA
01962:  MOVLW  01
01964:  ADDWF  FEE,F
01966:  BNC   196A
01968:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0196A:  BCF    FD8.0
0196C:  RLCF   x7E,W
0196E:  CLRF   03
01970:  ADDLW  F4
01972:  MOVWF  FE9
01974:  MOVLW  07
01976:  ADDWFC 03,W
01978:  MOVWF  FEA
0197A:  MOVFF  FEC,880
0197E:  MOVF   FED,F
01980:  MOVFF  FEF,87F
01984:  BCF    FD8.0
01986:  RLCF   x7E,W
01988:  CLRF   03
0198A:  ADDLW  30
0198C:  MOVWF  FE9
0198E:  MOVLW  08
01990:  ADDWFC 03,W
01992:  MOVWF  FEA
01994:  MOVFF  FEC,884
01998:  MOVF   FED,F
0199A:  MOVFF  FEF,883
0199E:  CLRF   x86
019A0:  MOVLW  4B
019A2:  MOVWF  x85
019A4:  MOVLB  0
019A6:  RCALL  14FA
019A8:  MOVFF  02,882
019AC:  MOVFF  01,881
019B0:  MOVLW  0F
019B2:  MOVLB  8
019B4:  ADDWF  01,W
019B6:  MOVWF  01
019B8:  MOVLW  00
019BA:  ADDWFC 02,W
019BC:  MOVWF  03
019BE:  MOVF   03,W
019C0:  SUBWF  x80,W
019C2:  BNC   1A34
019C4:  BNZ   19CC
019C6:  MOVF   01,W
019C8:  SUBWF  x7F,W
019CA:  BNC   1A34
....................                    {   
....................                      ReleaseTime[i] = 0;
019CC:  BCF    FD8.0
019CE:  RLCF   x7E,W
019D0:  CLRF   03
019D2:  ADDLW  F4
019D4:  MOVWF  FE9
019D6:  MOVLW  07
019D8:  ADDWFC 03,W
019DA:  MOVWF  FEA
019DC:  CLRF   FEC
019DE:  MOVF   FED,F
019E0:  CLRF   FEF
....................                      switch(i)
019E2:  MOVLW  01
019E4:  SUBWF  x7E,W
019E6:  ADDLW  F8
019E8:  BC    1A34
019EA:  ADDLW  08
019EC:  MOVLB  0
019EE:  GOTO   1C6C
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
019F2:  MOVLB  7
019F4:  BSF    xDD.0
....................                         break;
019F6:  MOVLB  8
019F8:  BRA    1A34
....................                         case 2:
....................                            Inputt.B2 = 1; 
019FA:  MOVLB  7
019FC:  BSF    xDD.1
....................                         break;
019FE:  MOVLB  8
01A00:  BRA    1A34
....................                         case 3:
....................                            Inputt.B3 = 1; 
01A02:  MOVLB  7
01A04:  BSF    xDD.2
....................                         break;
01A06:  MOVLB  8
01A08:  BRA    1A34
....................                         case 4:
....................                            Inputt.B4 = 1; 
01A0A:  MOVLB  7
01A0C:  BSF    xDD.3
....................                         break;
01A0E:  MOVLB  8
01A10:  BRA    1A34
....................                         case 5:
....................                            Inputt.B5 = 1; 
01A12:  MOVLB  7
01A14:  BSF    xDD.4
....................                         break;
01A16:  MOVLB  8
01A18:  BRA    1A34
....................                         case 6:
....................                            Inputt.B6 = 1; 
01A1A:  MOVLB  7
01A1C:  BSF    xDD.5
....................                         break;
01A1E:  MOVLB  8
01A20:  BRA    1A34
....................                         case 7:
....................                            Inputt.B7 = 1; 
01A22:  MOVLB  7
01A24:  BSF    xDD.6
....................                          break;
01A26:  MOVLB  8
01A28:  BRA    1A34
....................                          case 8:
....................                            Inputt.B8 = 1; 
01A2A:  MOVLB  7
01A2C:  BSF    xDD.7
....................                         break;
01A2E:  MOVLB  8
01A30:  BRA    1A34
01A32:  MOVLB  8
....................                                            
....................                      }                 
....................                   }
....................                }
01A34:  BRA    1A50
01A36:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01A38:  BCF    FD8.0
01A3A:  MOVLB  8
01A3C:  RLCF   x7E,W
01A3E:  CLRF   03
01A40:  ADDLW  F4
01A42:  MOVWF  FE9
01A44:  MOVLW  07
01A46:  ADDWFC 03,W
01A48:  MOVWF  FEA
01A4A:  CLRF   FEC
01A4C:  MOVF   FED,F
01A4E:  CLRF   FEF
....................                }
....................              }
01A50:  BRA    1B6E
01A52:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
01A54:  MOVFF  87E,882
01A58:  MOVLW  07
01A5A:  MOVLB  8
01A5C:  MOVWF  x84
01A5E:  MOVLW  EC
01A60:  MOVWF  x83
01A62:  MOVLB  0
01A64:  RCALL  14C4
01A66:  MOVF   01,W
01A68:  ANDLW  01
01A6A:  BTFSS  FD8.2
01A6C:  BRA    1B56
....................                {
....................                    ReleaseTime[i]++;
01A6E:  BCF    FD8.0
01A70:  MOVLB  8
01A72:  RLCF   x7E,W
01A74:  CLRF   03
01A76:  ADDLW  F4
01A78:  MOVWF  FE9
01A7A:  MOVLW  07
01A7C:  ADDWFC 03,W
01A7E:  MOVWF  FEA
01A80:  MOVLW  01
01A82:  ADDWF  FEE,F
01A84:  BNC   1A88
01A86:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01A88:  BCF    FD8.0
01A8A:  RLCF   x7E,W
01A8C:  CLRF   03
01A8E:  ADDLW  F4
01A90:  MOVWF  FE9
01A92:  MOVLW  07
01A94:  ADDWFC 03,W
01A96:  MOVWF  FEA
01A98:  MOVFF  FEC,880
01A9C:  MOVF   FED,F
01A9E:  MOVFF  FEF,87F
01AA2:  BCF    FD8.0
01AA4:  RLCF   x7E,W
01AA6:  CLRF   03
01AA8:  ADDLW  30
01AAA:  MOVWF  FE9
01AAC:  MOVLW  08
01AAE:  ADDWFC 03,W
01AB0:  MOVWF  FEA
01AB2:  MOVFF  FEC,884
01AB6:  MOVF   FED,F
01AB8:  MOVFF  FEF,883
01ABC:  CLRF   x86
01ABE:  MOVLW  4B
01AC0:  MOVWF  x85
01AC2:  MOVLB  0
01AC4:  RCALL  14FA
01AC6:  MOVFF  02,882
01ACA:  MOVFF  01,881
01ACE:  MOVLW  0F
01AD0:  MOVLB  8
01AD2:  ADDWF  01,W
01AD4:  MOVWF  01
01AD6:  MOVLW  00
01AD8:  ADDWFC 02,W
01ADA:  MOVWF  03
01ADC:  MOVF   03,W
01ADE:  SUBWF  x80,W
01AE0:  BNC   1B52
01AE2:  BNZ   1AEA
01AE4:  MOVF   01,W
01AE6:  SUBWF  x7F,W
01AE8:  BNC   1B52
....................                    {   
....................                      ReleaseTime[i] = 0;
01AEA:  BCF    FD8.0
01AEC:  RLCF   x7E,W
01AEE:  CLRF   03
01AF0:  ADDLW  F4
01AF2:  MOVWF  FE9
01AF4:  MOVLW  07
01AF6:  ADDWFC 03,W
01AF8:  MOVWF  FEA
01AFA:  CLRF   FEC
01AFC:  MOVF   FED,F
01AFE:  CLRF   FEF
....................                      switch(i)
01B00:  MOVLW  01
01B02:  SUBWF  x7E,W
01B04:  ADDLW  F8
01B06:  BC    1B52
01B08:  ADDLW  08
01B0A:  MOVLB  0
01B0C:  GOTO   1C96
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01B10:  MOVLB  7
01B12:  BCF    xDD.0
....................                         break;
01B14:  MOVLB  8
01B16:  BRA    1B52
....................                         case 2:
....................                            Inputt.B2 = 0; 
01B18:  MOVLB  7
01B1A:  BCF    xDD.1
....................                         break;
01B1C:  MOVLB  8
01B1E:  BRA    1B52
....................                         case 3:
....................                            Inputt.B3 = 0; 
01B20:  MOVLB  7
01B22:  BCF    xDD.2
....................                         break;
01B24:  MOVLB  8
01B26:  BRA    1B52
....................                         case 4:
....................                            Inputt.B4 = 0; 
01B28:  MOVLB  7
01B2A:  BCF    xDD.3
....................                         break;
01B2C:  MOVLB  8
01B2E:  BRA    1B52
....................                         case 5:
....................                            Inputt.B5 = 0; 
01B30:  MOVLB  7
01B32:  BCF    xDD.4
....................                         break;
01B34:  MOVLB  8
01B36:  BRA    1B52
....................                         case 6:
....................                            Inputt.B6 = 0; 
01B38:  MOVLB  7
01B3A:  BCF    xDD.5
....................                         break;
01B3C:  MOVLB  8
01B3E:  BRA    1B52
....................                         case 7:
....................                            Inputt.B7 = 0; 
01B40:  MOVLB  7
01B42:  BCF    xDD.6
....................                          break;
01B44:  MOVLB  8
01B46:  BRA    1B52
....................                          case 8:
....................                            Inputt.B8 = 0; 
01B48:  MOVLB  7
01B4A:  BCF    xDD.7
....................                         break;
01B4C:  MOVLB  8
01B4E:  BRA    1B52
01B50:  MOVLB  8
....................               
....................                      }                 
....................                    }
....................                }
01B52:  BRA    1B6E
01B54:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01B56:  BCF    FD8.0
01B58:  MOVLB  8
01B5A:  RLCF   x7E,W
01B5C:  CLRF   03
01B5E:  ADDLW  F4
01B60:  MOVWF  FE9
01B62:  MOVLW  07
01B64:  ADDWFC 03,W
01B66:  MOVWF  FEA
01B68:  CLRF   FEC
01B6A:  MOVF   FED,F
01B6C:  CLRF   FEF
01B6E:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
01B70:  MOVLB  8
01B72:  INCF   x7E,F
01B74:  BRA    1686
....................       }
....................       
....................       StoreReleaseFault();
01B76:  MOVLB  0
01B78:  BRA    155E
.................... 
....................    
....................       Input1_8 = 0x00;
01B7A:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
01B7C:  MOVLW  00
01B7E:  MOVLB  7
01B80:  BTFSS  xDD.7
01B82:  MOVLW  01
01B84:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
01B86:  BCF    FD8.0
01B88:  RLCF   49,W
01B8A:  MOVLB  8
01B8C:  MOVWF  x7F
01B8E:  MOVLW  00
01B90:  MOVLB  7
01B92:  BTFSS  xDD.6
01B94:  MOVLW  01
01B96:  MOVLB  8
01B98:  IORWF  x7F,W
01B9A:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
01B9C:  BCF    FD8.0
01B9E:  RLCF   49,W
01BA0:  MOVWF  x7F
01BA2:  MOVLW  00
01BA4:  MOVLB  7
01BA6:  BTFSS  xDD.5
01BA8:  MOVLW  01
01BAA:  MOVLB  8
01BAC:  IORWF  x7F,W
01BAE:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
01BB0:  BCF    FD8.0
01BB2:  RLCF   49,W
01BB4:  MOVWF  x7F
01BB6:  MOVLW  00
01BB8:  MOVLB  7
01BBA:  BTFSS  xDD.4
01BBC:  MOVLW  01
01BBE:  MOVLB  8
01BC0:  IORWF  x7F,W
01BC2:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
01BC4:  BCF    FD8.0
01BC6:  RLCF   49,W
01BC8:  MOVWF  x7F
01BCA:  MOVLW  00
01BCC:  MOVLB  7
01BCE:  BTFSS  xDD.3
01BD0:  MOVLW  01
01BD2:  MOVLB  8
01BD4:  IORWF  x7F,W
01BD6:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
01BD8:  BCF    FD8.0
01BDA:  RLCF   49,W
01BDC:  MOVWF  x7F
01BDE:  MOVLW  00
01BE0:  MOVLB  7
01BE2:  BTFSS  xDD.2
01BE4:  MOVLW  01
01BE6:  MOVLB  8
01BE8:  IORWF  x7F,W
01BEA:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
01BEC:  BCF    FD8.0
01BEE:  RLCF   49,W
01BF0:  MOVWF  x7F
01BF2:  MOVLW  00
01BF4:  MOVLB  7
01BF6:  BTFSS  xDD.1
01BF8:  MOVLW  01
01BFA:  MOVLB  8
01BFC:  IORWF  x7F,W
01BFE:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
01C00:  BCF    FD8.0
01C02:  RLCF   49,W
01C04:  MOVWF  x7F
01C06:  MOVLW  00
01C08:  MOVLB  7
01C0A:  BTFSS  xDD.0
01C0C:  MOVLW  01
01C0E:  MOVLB  8
01C10:  IORWF  x7F,W
01C12:  MOVWF  49
01C14:  MOVLB  0
01C16:  RETURN 0
....................     
.................... 
....................    
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Inputt type 1-8
*
00868:  MOVFF  FF2,87F
0086C:  BCF    FF2.7
0086E:  CLRF   FAA
00870:  MOVLW  01
00872:  MOVWF  FA9
00874:  BCF    FA6.6
00876:  BCF    FA6.7
00878:  BSF    FA6.0
0087A:  MOVF   FA8,W
0087C:  MOVLB  8
0087E:  BTFSC  x7F.7
00880:  BSF    FF2.7
00882:  MOVWF  39
....................    InputType1_8 = EEpDat;
00884:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
00888:  MOVLB  7
0088A:  BCF    xDF.0
0088C:  BTFSC  39.0
0088E:  BSF    xDF.0
....................    InputType.B2 = EEpDat >> 1;
00890:  BCF    FD8.0
00892:  RRCF   39,W
00894:  BCF    xDF.1
00896:  BTFSC  FE8.0
00898:  BSF    xDF.1
....................    InputType.B3 = EEpDat >> 2;
0089A:  RRCF   39,W
0089C:  MOVWF  00
0089E:  RRCF   00,F
008A0:  MOVLW  3F
008A2:  ANDWF  00,F
008A4:  BCF    xDF.2
008A6:  BTFSC  00.0
008A8:  BSF    xDF.2
....................    InputType.B4 = EEpDat >> 3;
008AA:  RRCF   39,W
008AC:  MOVWF  00
008AE:  RRCF   00,F
008B0:  RRCF   00,F
008B2:  MOVLW  1F
008B4:  ANDWF  00,F
008B6:  BCF    xDF.3
008B8:  BTFSC  00.0
008BA:  BSF    xDF.3
....................    InputType.B5 = EEpDat >> 4;
008BC:  SWAPF  39,W
008BE:  MOVWF  00
008C0:  MOVLW  0F
008C2:  ANDWF  00,F
008C4:  BCF    xDF.4
008C6:  BTFSC  00.0
008C8:  BSF    xDF.4
....................    InputType.B6 = EEpDat >> 5;
008CA:  SWAPF  39,W
008CC:  MOVWF  00
008CE:  RRCF   00,F
008D0:  MOVLW  07
008D2:  ANDWF  00,F
008D4:  BCF    xDF.5
008D6:  BTFSC  00.0
008D8:  BSF    xDF.5
....................    InputType.B7 = EEpDat >> 6;
008DA:  SWAPF  39,W
008DC:  MOVWF  00
008DE:  RRCF   00,F
008E0:  RRCF   00,F
008E2:  MOVLW  03
008E4:  ANDWF  00,F
008E6:  BCF    xDF.6
008E8:  BTFSC  00.0
008EA:  BSF    xDF.6
....................    InputType.B8 = EEpDat >> 7;
008EC:  CLRF   00
008EE:  BTFSC  39.7
008F0:  BSF    00.0
008F2:  BCF    xDF.7
008F4:  BTFSC  00.0
008F6:  BSF    xDF.7
....................    
....................    FaultNCNO[1] = InputType.B1;
008F8:  MOVLB  8
008FA:  BCF    x6C.1
008FC:  MOVLB  7
008FE:  BTFSS  xDF.0
00900:  BRA    0908
00902:  MOVLB  8
00904:  BSF    x6C.1
00906:  MOVLB  7
....................    FaultNCNO[2] = InputType.B2;
00908:  MOVLB  8
0090A:  BCF    x6C.2
0090C:  MOVLB  7
0090E:  BTFSS  xDF.1
00910:  BRA    0918
00912:  MOVLB  8
00914:  BSF    x6C.2
00916:  MOVLB  7
....................    FaultNCNO[3] = InputType.B3;
00918:  MOVLB  8
0091A:  BCF    x6C.3
0091C:  MOVLB  7
0091E:  BTFSS  xDF.2
00920:  BRA    0928
00922:  MOVLB  8
00924:  BSF    x6C.3
00926:  MOVLB  7
....................    FaultNCNO[4] = InputType.B4;
00928:  MOVLB  8
0092A:  BCF    x6C.4
0092C:  MOVLB  7
0092E:  BTFSS  xDF.3
00930:  BRA    0938
00932:  MOVLB  8
00934:  BSF    x6C.4
00936:  MOVLB  7
....................    FaultNCNO[5] = InputType.B5;
00938:  MOVLB  8
0093A:  BCF    x6C.5
0093C:  MOVLB  7
0093E:  BTFSS  xDF.4
00940:  BRA    0948
00942:  MOVLB  8
00944:  BSF    x6C.5
00946:  MOVLB  7
....................    FaultNCNO[6] = InputType.B6;
00948:  MOVLB  8
0094A:  BCF    x6C.6
0094C:  MOVLB  7
0094E:  BTFSS  xDF.5
00950:  BRA    0958
00952:  MOVLB  8
00954:  BSF    x6C.6
00956:  MOVLB  7
....................    FaultNCNO[7] = InputType.B7;
00958:  MOVLB  8
0095A:  BCF    x6C.7
0095C:  MOVLB  7
0095E:  BTFSS  xDF.6
00960:  BRA    0968
00962:  MOVLB  8
00964:  BSF    x6C.7
00966:  MOVLB  7
....................    FaultNCNO[8] = InputType.B8;
00968:  MOVLB  8
0096A:  BCF    x6D.0
0096C:  MOVLB  7
0096E:  BTFSS  xDF.7
00970:  BRA    0978
00972:  MOVLB  8
00974:  BSF    x6D.0
00976:  MOVLB  7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00978:  MOVFF  FF2,87F
0097C:  BCF    FF2.7
0097E:  CLRF   FAA
00980:  MOVLW  04
00982:  MOVWF  FA9
00984:  BCF    FA6.6
00986:  BCF    FA6.7
00988:  BSF    FA6.0
0098A:  MOVF   FA8,W
0098C:  MOVLB  8
0098E:  BTFSC  x7F.7
00990:  BSF    FF2.7
00992:  MOVWF  39
....................    FaultType1_8 = EEpDat;
00994:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
00998:  MOVLB  7
0099A:  BCF    xE0.0
0099C:  BTFSC  39.0
0099E:  BSF    xE0.0
....................    FaultType.B2 = EEpDat >> 1;
009A0:  BCF    FD8.0
009A2:  RRCF   39,W
009A4:  BCF    xE0.1
009A6:  BTFSC  FE8.0
009A8:  BSF    xE0.1
....................    FaultType.B3 = EEpDat >> 2;
009AA:  RRCF   39,W
009AC:  MOVWF  00
009AE:  RRCF   00,F
009B0:  MOVLW  3F
009B2:  ANDWF  00,F
009B4:  BCF    xE0.2
009B6:  BTFSC  00.0
009B8:  BSF    xE0.2
....................    FaultType.B4 = EEpDat >> 3;
009BA:  RRCF   39,W
009BC:  MOVWF  00
009BE:  RRCF   00,F
009C0:  RRCF   00,F
009C2:  MOVLW  1F
009C4:  ANDWF  00,F
009C6:  BCF    xE0.3
009C8:  BTFSC  00.0
009CA:  BSF    xE0.3
....................    FaultType.B5 = EEpDat >> 4;
009CC:  SWAPF  39,W
009CE:  MOVWF  00
009D0:  MOVLW  0F
009D2:  ANDWF  00,F
009D4:  BCF    xE0.4
009D6:  BTFSC  00.0
009D8:  BSF    xE0.4
....................    FaultType.B6 = EEpDat >> 5;
009DA:  SWAPF  39,W
009DC:  MOVWF  00
009DE:  RRCF   00,F
009E0:  MOVLW  07
009E2:  ANDWF  00,F
009E4:  BCF    xE0.5
009E6:  BTFSC  00.0
009E8:  BSF    xE0.5
....................    FaultType.B7 = EEpDat >> 6;
009EA:  SWAPF  39,W
009EC:  MOVWF  00
009EE:  RRCF   00,F
009F0:  RRCF   00,F
009F2:  MOVLW  03
009F4:  ANDWF  00,F
009F6:  BCF    xE0.6
009F8:  BTFSC  00.0
009FA:  BSF    xE0.6
....................    FaultType.B8 = EEpDat >> 7;
009FC:  CLRF   00
009FE:  BTFSC  39.7
00A00:  BSF    00.0
00A02:  BCF    xE0.7
00A04:  BTFSC  00.0
00A06:  BSF    xE0.7
.................... 
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00A08:  MOVFF  FF2,87F
00A0C:  BCF    FF2.7
00A0E:  CLRF   FAA
00A10:  MOVLW  07
00A12:  MOVWF  FA9
00A14:  BCF    FA6.6
00A16:  BCF    FA6.7
00A18:  BSF    FA6.0
00A1A:  MOVF   FA8,W
00A1C:  MOVLB  8
00A1E:  BTFSC  x7F.7
00A20:  BSF    FF2.7
00A22:  MOVWF  39
....................    OutputType1_8 = EEpDat;
00A24:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00A28:  MOVLB  7
00A2A:  BCF    xE1.0
00A2C:  BTFSC  39.0
00A2E:  BSF    xE1.0
....................    OutputType.B2 = EEpDat >> 1;
00A30:  BCF    FD8.0
00A32:  RRCF   39,W
00A34:  BCF    xE1.1
00A36:  BTFSC  FE8.0
00A38:  BSF    xE1.1
....................    OutputType.B3 = EEpDat >> 2;
00A3A:  RRCF   39,W
00A3C:  MOVWF  00
00A3E:  RRCF   00,F
00A40:  MOVLW  3F
00A42:  ANDWF  00,F
00A44:  BCF    xE1.2
00A46:  BTFSC  00.0
00A48:  BSF    xE1.2
....................    OutputType.B4 = EEpDat >> 3;
00A4A:  RRCF   39,W
00A4C:  MOVWF  00
00A4E:  RRCF   00,F
00A50:  RRCF   00,F
00A52:  MOVLW  1F
00A54:  ANDWF  00,F
00A56:  BCF    xE1.3
00A58:  BTFSC  00.0
00A5A:  BSF    xE1.3
....................    OutputType.B5 = EEpDat >> 4;
00A5C:  SWAPF  39,W
00A5E:  MOVWF  00
00A60:  MOVLW  0F
00A62:  ANDWF  00,F
00A64:  BCF    xE1.4
00A66:  BTFSC  00.0
00A68:  BSF    xE1.4
....................    OutputType.B6 = EEpDat >> 5;
00A6A:  SWAPF  39,W
00A6C:  MOVWF  00
00A6E:  RRCF   00,F
00A70:  MOVLW  07
00A72:  ANDWF  00,F
00A74:  BCF    xE1.5
00A76:  BTFSC  00.0
00A78:  BSF    xE1.5
....................    OutputType.B7 = EEpDat >> 6;
00A7A:  SWAPF  39,W
00A7C:  MOVWF  00
00A7E:  RRCF   00,F
00A80:  RRCF   00,F
00A82:  MOVLW  03
00A84:  ANDWF  00,F
00A86:  BCF    xE1.6
00A88:  BTFSC  00.0
00A8A:  BSF    xE1.6
....................    OutputType.B8 = EEpDat >> 7;
00A8C:  CLRF   00
00A8E:  BTFSC  39.7
00A90:  BSF    00.0
00A92:  BCF    xE1.7
00A94:  BTFSC  00.0
00A96:  BSF    xE1.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00A98:  MOVFF  FF2,87F
00A9C:  BCF    FF2.7
00A9E:  CLRF   FAA
00AA0:  MOVLW  0A
00AA2:  MOVWF  FA9
00AA4:  BCF    FA6.6
00AA6:  BCF    FA6.7
00AA8:  BSF    FA6.0
00AAA:  MOVF   FA8,W
00AAC:  MOVLB  8
00AAE:  BTFSC  x7F.7
00AB0:  BSF    FF2.7
00AB2:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
00AB4:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
00AB8:  MOVLB  7
00ABA:  BCF    xE2.0
00ABC:  BTFSC  39.0
00ABE:  BSF    xE2.0
....................    OutputBoth.B2 = EEpDat >> 1;
00AC0:  BCF    FD8.0
00AC2:  RRCF   39,W
00AC4:  BCF    xE2.1
00AC6:  BTFSC  FE8.0
00AC8:  BSF    xE2.1
....................    OutputBoth.B3 = EEpDat >> 2;
00ACA:  RRCF   39,W
00ACC:  MOVWF  00
00ACE:  RRCF   00,F
00AD0:  MOVLW  3F
00AD2:  ANDWF  00,F
00AD4:  BCF    xE2.2
00AD6:  BTFSC  00.0
00AD8:  BSF    xE2.2
....................    OutputBoth.B4 = EEpDat >> 3;
00ADA:  RRCF   39,W
00ADC:  MOVWF  00
00ADE:  RRCF   00,F
00AE0:  RRCF   00,F
00AE2:  MOVLW  1F
00AE4:  ANDWF  00,F
00AE6:  BCF    xE2.3
00AE8:  BTFSC  00.0
00AEA:  BSF    xE2.3
....................    OutputBoth.B5 = EEpDat >> 4;
00AEC:  SWAPF  39,W
00AEE:  MOVWF  00
00AF0:  MOVLW  0F
00AF2:  ANDWF  00,F
00AF4:  BCF    xE2.4
00AF6:  BTFSC  00.0
00AF8:  BSF    xE2.4
....................    OutputBoth.B6 = EEpDat >> 5;
00AFA:  SWAPF  39,W
00AFC:  MOVWF  00
00AFE:  RRCF   00,F
00B00:  MOVLW  07
00B02:  ANDWF  00,F
00B04:  BCF    xE2.5
00B06:  BTFSC  00.0
00B08:  BSF    xE2.5
....................    OutputBoth.B7 = EEpDat >> 6;
00B0A:  SWAPF  39,W
00B0C:  MOVWF  00
00B0E:  RRCF   00,F
00B10:  RRCF   00,F
00B12:  MOVLW  03
00B14:  ANDWF  00,F
00B16:  BCF    xE2.6
00B18:  BTFSC  00.0
00B1A:  BSF    xE2.6
....................    OutputBoth.B8 = EEpDat >> 7;
00B1C:  CLRF   00
00B1E:  BTFSC  39.7
00B20:  BSF    00.0
00B22:  BCF    xE2.7
00B24:  BTFSC  00.0
00B26:  BSF    xE2.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00B28:  MOVFF  FF2,87F
00B2C:  BCF    FF2.7
00B2E:  CLRF   FAA
00B30:  MOVLW  0D
00B32:  MOVWF  FA9
00B34:  BCF    FA6.6
00B36:  BCF    FA6.7
00B38:  BSF    FA6.0
00B3A:  MOVF   FA8,W
00B3C:  MOVLB  8
00B3E:  BTFSC  x7F.7
00B40:  BSF    FF2.7
00B42:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
00B44:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00B48:  MOVLB  7
00B4A:  BCF    xE3.0
00B4C:  BTFSC  39.0
00B4E:  BSF    xE3.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00B50:  BCF    FD8.0
00B52:  RRCF   39,W
00B54:  BCF    xE3.1
00B56:  BTFSC  FE8.0
00B58:  BSF    xE3.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00B5A:  RRCF   39,W
00B5C:  MOVWF  00
00B5E:  RRCF   00,F
00B60:  MOVLW  3F
00B62:  ANDWF  00,F
00B64:  BCF    xE3.2
00B66:  BTFSC  00.0
00B68:  BSF    xE3.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00B6A:  RRCF   39,W
00B6C:  MOVWF  00
00B6E:  RRCF   00,F
00B70:  RRCF   00,F
00B72:  MOVLW  1F
00B74:  ANDWF  00,F
00B76:  BCF    xE3.3
00B78:  BTFSC  00.0
00B7A:  BSF    xE3.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00B7C:  SWAPF  39,W
00B7E:  MOVWF  00
00B80:  MOVLW  0F
00B82:  ANDWF  00,F
00B84:  BCF    xE3.4
00B86:  BTFSC  00.0
00B88:  BSF    xE3.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00B8A:  SWAPF  39,W
00B8C:  MOVWF  00
00B8E:  RRCF   00,F
00B90:  MOVLW  07
00B92:  ANDWF  00,F
00B94:  BCF    xE3.5
00B96:  BTFSC  00.0
00B98:  BSF    xE3.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00B9A:  SWAPF  39,W
00B9C:  MOVWF  00
00B9E:  RRCF   00,F
00BA0:  RRCF   00,F
00BA2:  MOVLW  03
00BA4:  ANDWF  00,F
00BA6:  BCF    xE3.6
00BA8:  BTFSC  00.0
00BAA:  BSF    xE3.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00BAC:  CLRF   00
00BAE:  BTFSC  39.7
00BB0:  BSF    00.0
00BB2:  BCF    xE3.7
00BB4:  BTFSC  00.0
00BB6:  BSF    xE3.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00BB8:  MOVFF  FF2,87F
00BBC:  BCF    FF2.7
00BBE:  CLRF   FAA
00BC0:  MOVLW  10
00BC2:  MOVWF  FA9
00BC4:  BCF    FA6.6
00BC6:  BCF    FA6.7
00BC8:  BSF    FA6.0
00BCA:  MOVF   FA8,W
00BCC:  MOVLB  8
00BCE:  BTFSC  x7F.7
00BD0:  BSF    FF2.7
00BD2:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00BD4:  MOVLB  7
00BD6:  BCF    xE9.0
00BD8:  BTFSC  39.0
00BDA:  BSF    xE9.0
....................    RED_Colour.B2 = EEpDat >> 1;
00BDC:  BCF    FD8.0
00BDE:  RRCF   39,W
00BE0:  BCF    xE9.1
00BE2:  BTFSC  FE8.0
00BE4:  BSF    xE9.1
....................    RED_Colour.B3 = EEpDat >> 2;
00BE6:  RRCF   39,W
00BE8:  MOVWF  00
00BEA:  RRCF   00,F
00BEC:  MOVLW  3F
00BEE:  ANDWF  00,F
00BF0:  BCF    xE9.2
00BF2:  BTFSC  00.0
00BF4:  BSF    xE9.2
....................    RED_Colour.B4 = EEpDat >> 3;
00BF6:  RRCF   39,W
00BF8:  MOVWF  00
00BFA:  RRCF   00,F
00BFC:  RRCF   00,F
00BFE:  MOVLW  1F
00C00:  ANDWF  00,F
00C02:  BCF    xE9.3
00C04:  BTFSC  00.0
00C06:  BSF    xE9.3
....................    RED_Colour.B5 = EEpDat >> 4;
00C08:  SWAPF  39,W
00C0A:  MOVWF  00
00C0C:  MOVLW  0F
00C0E:  ANDWF  00,F
00C10:  BCF    xE9.4
00C12:  BTFSC  00.0
00C14:  BSF    xE9.4
....................    RED_Colour.B6 = EEpDat >> 5;
00C16:  SWAPF  39,W
00C18:  MOVWF  00
00C1A:  RRCF   00,F
00C1C:  MOVLW  07
00C1E:  ANDWF  00,F
00C20:  BCF    xE9.5
00C22:  BTFSC  00.0
00C24:  BSF    xE9.5
....................    RED_Colour.B7 = EEpDat >> 6;
00C26:  SWAPF  39,W
00C28:  MOVWF  00
00C2A:  RRCF   00,F
00C2C:  RRCF   00,F
00C2E:  MOVLW  03
00C30:  ANDWF  00,F
00C32:  BCF    xE9.6
00C34:  BTFSC  00.0
00C36:  BSF    xE9.6
....................    RED_Colour.B8 = EEpDat >> 7;
00C38:  CLRF   00
00C3A:  BTFSC  39.7
00C3C:  BSF    00.0
00C3E:  BCF    xE9.7
00C40:  BTFSC  00.0
00C42:  BSF    xE9.7
....................     
....................    EEpDat = read_eeprom(0x14);
00C44:  MOVFF  FF2,87F
00C48:  BCF    FF2.7
00C4A:  CLRF   FAA
00C4C:  MOVLW  14
00C4E:  MOVWF  FA9
00C50:  BCF    FA6.6
00C52:  BCF    FA6.7
00C54:  BSF    FA6.0
00C56:  MOVF   FA8,W
00C58:  MOVLB  8
00C5A:  BTFSC  x7F.7
00C5C:  BSF    FF2.7
00C5E:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00C60:  MOVLB  7
00C62:  BCF    xEA.0
00C64:  BTFSC  39.0
00C66:  BSF    xEA.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00C68:  BCF    FD8.0
00C6A:  RRCF   39,W
00C6C:  BCF    xEA.1
00C6E:  BTFSC  FE8.0
00C70:  BSF    xEA.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00C72:  RRCF   39,W
00C74:  MOVWF  00
00C76:  RRCF   00,F
00C78:  MOVLW  3F
00C7A:  ANDWF  00,F
00C7C:  BCF    xEA.2
00C7E:  BTFSC  00.0
00C80:  BSF    xEA.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00C82:  RRCF   39,W
00C84:  MOVWF  00
00C86:  RRCF   00,F
00C88:  RRCF   00,F
00C8A:  MOVLW  1F
00C8C:  ANDWF  00,F
00C8E:  BCF    xEA.3
00C90:  BTFSC  00.0
00C92:  BSF    xEA.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00C94:  SWAPF  39,W
00C96:  MOVWF  00
00C98:  MOVLW  0F
00C9A:  ANDWF  00,F
00C9C:  BCF    xEA.4
00C9E:  BTFSC  00.0
00CA0:  BSF    xEA.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00CA2:  SWAPF  39,W
00CA4:  MOVWF  00
00CA6:  RRCF   00,F
00CA8:  MOVLW  07
00CAA:  ANDWF  00,F
00CAC:  BCF    xEA.5
00CAE:  BTFSC  00.0
00CB0:  BSF    xEA.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00CB2:  SWAPF  39,W
00CB4:  MOVWF  00
00CB6:  RRCF   00,F
00CB8:  RRCF   00,F
00CBA:  MOVLW  03
00CBC:  ANDWF  00,F
00CBE:  BCF    xEA.6
00CC0:  BTFSC  00.0
00CC2:  BSF    xEA.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00CC4:  CLRF   00
00CC6:  BTFSC  39.7
00CC8:  BSF    00.0
00CCA:  BCF    xEA.7
00CCC:  BTFSC  00.0
00CCE:  BSF    xEA.7
.................... 
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00CD0:  MOVFF  FF2,87F
00CD4:  BCF    FF2.7
00CD6:  CLRF   FAA
00CD8:  MOVLW  18
00CDA:  MOVWF  FA9
00CDC:  BCF    FA6.6
00CDE:  BCF    FA6.7
00CE0:  BSF    FA6.0
00CE2:  MOVF   FA8,W
00CE4:  MOVLB  8
00CE6:  BTFSC  x7F.7
00CE8:  BSF    FF2.7
00CEA:  MOVLB  0
00CEC:  MOVWF  x6A
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00CEE:  MOVFF  FF2,87F
00CF2:  BCF    FF2.7
00CF4:  CLRF   FAA
00CF6:  MOVLW  19
00CF8:  MOVWF  FA9
00CFA:  BCF    FA6.6
00CFC:  BCF    FA6.7
00CFE:  BSF    FA6.0
00D00:  MOVF   FA8,W
00D02:  MOVLB  8
00D04:  BTFSC  x7F.7
00D06:  BSF    FF2.7
00D08:  MOVLB  0
00D0A:  MOVWF  x6B
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
00D0C:  MOVFF  FF2,87F
00D10:  BCF    FF2.7
00D12:  CLRF   FAA
00D14:  MOVLW  1A
00D16:  MOVWF  FA9
00D18:  BCF    FA6.6
00D1A:  BCF    FA6.7
00D1C:  BSF    FA6.0
00D1E:  MOVF   FA8,W
00D20:  MOVLB  8
00D22:  BTFSC  x7F.7
00D24:  BSF    FF2.7
00D26:  MOVLB  0
00D28:  MOVWF  x6C
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00D2A:  MOVFF  FF2,87F
00D2E:  BCF    FF2.7
00D30:  CLRF   FAA
00D32:  MOVLW  1B
00D34:  MOVWF  FA9
00D36:  BCF    FA6.6
00D38:  BCF    FA6.7
00D3A:  BSF    FA6.0
00D3C:  MOVF   FA8,W
00D3E:  MOVLB  8
00D40:  BTFSC  x7F.7
00D42:  BSF    FF2.7
00D44:  MOVLB  0
00D46:  MOVWF  x6D
....................    FlashingRateTime = read_eeprom(0x1C);  // Master or slave sync(flashing)
00D48:  MOVFF  FF2,87F
00D4C:  BCF    FF2.7
00D4E:  CLRF   FAA
00D50:  MOVLW  1C
00D52:  MOVWF  FA9
00D54:  BCF    FA6.6
00D56:  BCF    FA6.7
00D58:  BSF    FA6.0
00D5A:  MOVF   FA8,W
00D5C:  MOVLB  8
00D5E:  BTFSC  x7F.7
00D60:  BSF    FF2.7
00D62:  MOVWF  1B
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
00D64:  MOVFF  FF2,87F
00D68:  BCF    FF2.7
00D6A:  CLRF   FAA
00D6C:  MOVLW  1D
00D6E:  MOVWF  FA9
00D70:  BCF    FA6.6
00D72:  BCF    FA6.7
00D74:  BSF    FA6.0
00D76:  MOVF   FA8,W
00D78:  BTFSC  x7F.7
00D7A:  BSF    FF2.7
00D7C:  MOVLB  0
00D7E:  MOVWF  x78
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
00D80:  MOVFF  FF2,87F
00D84:  BCF    FF2.7
00D86:  CLRF   FAA
00D88:  MOVLW  1E
00D8A:  MOVWF  FA9
00D8C:  BCF    FA6.6
00D8E:  BCF    FA6.7
00D90:  BSF    FA6.0
00D92:  MOVF   FA8,W
00D94:  MOVLB  8
00D96:  BTFSC  x7F.7
00D98:  BSF    FF2.7
00D9A:  CLRF   x33
00D9C:  MOVWF  x32
....................    FaultDelayTime[2] = read_eeprom(0x1F);
00D9E:  MOVFF  FF2,87F
00DA2:  BCF    FF2.7
00DA4:  CLRF   FAA
00DA6:  MOVLW  1F
00DA8:  MOVWF  FA9
00DAA:  BCF    FA6.6
00DAC:  BCF    FA6.7
00DAE:  BSF    FA6.0
00DB0:  MOVF   FA8,W
00DB2:  BTFSC  x7F.7
00DB4:  BSF    FF2.7
00DB6:  CLRF   x35
00DB8:  MOVWF  x34
....................    FaultDelayTime[3] = read_eeprom(0x20);
00DBA:  MOVFF  FF2,87F
00DBE:  BCF    FF2.7
00DC0:  CLRF   FAA
00DC2:  MOVLW  20
00DC4:  MOVWF  FA9
00DC6:  BCF    FA6.6
00DC8:  BCF    FA6.7
00DCA:  BSF    FA6.0
00DCC:  MOVF   FA8,W
00DCE:  BTFSC  x7F.7
00DD0:  BSF    FF2.7
00DD2:  CLRF   x37
00DD4:  MOVWF  x36
....................    FaultDelayTime[4] = read_eeprom(0x21);
00DD6:  MOVFF  FF2,87F
00DDA:  BCF    FF2.7
00DDC:  CLRF   FAA
00DDE:  MOVLW  21
00DE0:  MOVWF  FA9
00DE2:  BCF    FA6.6
00DE4:  BCF    FA6.7
00DE6:  BSF    FA6.0
00DE8:  MOVF   FA8,W
00DEA:  BTFSC  x7F.7
00DEC:  BSF    FF2.7
00DEE:  CLRF   x39
00DF0:  MOVWF  x38
....................    FaultDelayTime[5] = read_eeprom(0x22);
00DF2:  MOVFF  FF2,87F
00DF6:  BCF    FF2.7
00DF8:  CLRF   FAA
00DFA:  MOVLW  22
00DFC:  MOVWF  FA9
00DFE:  BCF    FA6.6
00E00:  BCF    FA6.7
00E02:  BSF    FA6.0
00E04:  MOVF   FA8,W
00E06:  BTFSC  x7F.7
00E08:  BSF    FF2.7
00E0A:  CLRF   x3B
00E0C:  MOVWF  x3A
....................    FaultDelayTime[6] = read_eeprom(0x23);
00E0E:  MOVFF  FF2,87F
00E12:  BCF    FF2.7
00E14:  CLRF   FAA
00E16:  MOVLW  23
00E18:  MOVWF  FA9
00E1A:  BCF    FA6.6
00E1C:  BCF    FA6.7
00E1E:  BSF    FA6.0
00E20:  MOVF   FA8,W
00E22:  BTFSC  x7F.7
00E24:  BSF    FF2.7
00E26:  CLRF   x3D
00E28:  MOVWF  x3C
....................    FaultDelayTime[7] = read_eeprom(0x24);
00E2A:  MOVFF  FF2,87F
00E2E:  BCF    FF2.7
00E30:  CLRF   FAA
00E32:  MOVLW  24
00E34:  MOVWF  FA9
00E36:  BCF    FA6.6
00E38:  BCF    FA6.7
00E3A:  BSF    FA6.0
00E3C:  MOVF   FA8,W
00E3E:  BTFSC  x7F.7
00E40:  BSF    FF2.7
00E42:  CLRF   x3F
00E44:  MOVWF  x3E
....................    FaultDelayTime[8] = read_eeprom(0x25);
00E46:  MOVFF  FF2,87F
00E4A:  BCF    FF2.7
00E4C:  CLRF   FAA
00E4E:  MOVLW  25
00E50:  MOVWF  FA9
00E52:  BCF    FA6.6
00E54:  BCF    FA6.7
00E56:  BSF    FA6.0
00E58:  MOVF   FA8,W
00E5A:  BTFSC  x7F.7
00E5C:  BSF    FF2.7
00E5E:  CLRF   x41
00E60:  MOVWF  x40
....................    FaultDelayTime[9] = read_eeprom(0x26);
00E62:  MOVFF  FF2,87F
00E66:  BCF    FF2.7
00E68:  CLRF   FAA
00E6A:  MOVLW  26
00E6C:  MOVWF  FA9
00E6E:  BCF    FA6.6
00E70:  BCF    FA6.7
00E72:  BSF    FA6.0
00E74:  MOVF   FA8,W
00E76:  BTFSC  x7F.7
00E78:  BSF    FF2.7
00E7A:  CLRF   x43
00E7C:  MOVWF  x42
....................    FaultDelayTime[10] = read_eeprom(0x27);
00E7E:  MOVFF  FF2,87F
00E82:  BCF    FF2.7
00E84:  CLRF   FAA
00E86:  MOVLW  27
00E88:  MOVWF  FA9
00E8A:  BCF    FA6.6
00E8C:  BCF    FA6.7
00E8E:  BSF    FA6.0
00E90:  MOVF   FA8,W
00E92:  BTFSC  x7F.7
00E94:  BSF    FF2.7
00E96:  CLRF   x45
00E98:  MOVWF  x44
....................    FaultDelayTime[11] = read_eeprom(0x28);
00E9A:  MOVFF  FF2,87F
00E9E:  BCF    FF2.7
00EA0:  CLRF   FAA
00EA2:  MOVLW  28
00EA4:  MOVWF  FA9
00EA6:  BCF    FA6.6
00EA8:  BCF    FA6.7
00EAA:  BSF    FA6.0
00EAC:  MOVF   FA8,W
00EAE:  BTFSC  x7F.7
00EB0:  BSF    FF2.7
00EB2:  CLRF   x47
00EB4:  MOVWF  x46
....................    FaultDelayTime[12] = read_eeprom(0x29);
00EB6:  MOVFF  FF2,87F
00EBA:  BCF    FF2.7
00EBC:  CLRF   FAA
00EBE:  MOVLW  29
00EC0:  MOVWF  FA9
00EC2:  BCF    FA6.6
00EC4:  BCF    FA6.7
00EC6:  BSF    FA6.0
00EC8:  MOVF   FA8,W
00ECA:  BTFSC  x7F.7
00ECC:  BSF    FF2.7
00ECE:  CLRF   x49
00ED0:  MOVWF  x48
....................    FaultDelayTime[13] = read_eeprom(0x2A);
00ED2:  MOVFF  FF2,87F
00ED6:  BCF    FF2.7
00ED8:  CLRF   FAA
00EDA:  MOVLW  2A
00EDC:  MOVWF  FA9
00EDE:  BCF    FA6.6
00EE0:  BCF    FA6.7
00EE2:  BSF    FA6.0
00EE4:  MOVF   FA8,W
00EE6:  BTFSC  x7F.7
00EE8:  BSF    FF2.7
00EEA:  CLRF   x4B
00EEC:  MOVWF  x4A
....................    FaultDelayTime[14] = read_eeprom(0x2B);
00EEE:  MOVFF  FF2,87F
00EF2:  BCF    FF2.7
00EF4:  CLRF   FAA
00EF6:  MOVLW  2B
00EF8:  MOVWF  FA9
00EFA:  BCF    FA6.6
00EFC:  BCF    FA6.7
00EFE:  BSF    FA6.0
00F00:  MOVF   FA8,W
00F02:  BTFSC  x7F.7
00F04:  BSF    FF2.7
00F06:  CLRF   x4D
00F08:  MOVWF  x4C
....................    FaultDelayTime[15] = read_eeprom(0x2C);
00F0A:  MOVFF  FF2,87F
00F0E:  BCF    FF2.7
00F10:  CLRF   FAA
00F12:  MOVLW  2C
00F14:  MOVWF  FA9
00F16:  BCF    FA6.6
00F18:  BCF    FA6.7
00F1A:  BSF    FA6.0
00F1C:  MOVF   FA8,W
00F1E:  BTFSC  x7F.7
00F20:  BSF    FF2.7
00F22:  CLRF   x4F
00F24:  MOVWF  x4E
....................    FaultDelayTime[16] = read_eeprom(0x2D);
00F26:  MOVFF  FF2,87F
00F2A:  BCF    FF2.7
00F2C:  CLRF   FAA
00F2E:  MOVLW  2D
00F30:  MOVWF  FA9
00F32:  BCF    FA6.6
00F34:  BCF    FA6.7
00F36:  BSF    FA6.0
00F38:  MOVF   FA8,W
00F3A:  BTFSC  x7F.7
00F3C:  BSF    FF2.7
00F3E:  CLRF   x51
00F40:  MOVWF  x50
....................    FaultDelayTime[17] = read_eeprom(0x2E);
00F42:  MOVFF  FF2,87F
00F46:  BCF    FF2.7
00F48:  CLRF   FAA
00F4A:  MOVLW  2E
00F4C:  MOVWF  FA9
00F4E:  BCF    FA6.6
00F50:  BCF    FA6.7
00F52:  BSF    FA6.0
00F54:  MOVF   FA8,W
00F56:  BTFSC  x7F.7
00F58:  BSF    FF2.7
00F5A:  CLRF   x53
00F5C:  MOVWF  x52
....................    FaultDelayTime[18] = read_eeprom(0x2F);
00F5E:  MOVFF  FF2,87F
00F62:  BCF    FF2.7
00F64:  CLRF   FAA
00F66:  MOVLW  2F
00F68:  MOVWF  FA9
00F6A:  BCF    FA6.6
00F6C:  BCF    FA6.7
00F6E:  BSF    FA6.0
00F70:  MOVF   FA8,W
00F72:  BTFSC  x7F.7
00F74:  BSF    FF2.7
00F76:  CLRF   x55
00F78:  MOVWF  x54
....................    FaultDelayTime[19] = read_eeprom(0x30);
00F7A:  MOVFF  FF2,87F
00F7E:  BCF    FF2.7
00F80:  CLRF   FAA
00F82:  MOVLW  30
00F84:  MOVWF  FA9
00F86:  BCF    FA6.6
00F88:  BCF    FA6.7
00F8A:  BSF    FA6.0
00F8C:  MOVF   FA8,W
00F8E:  BTFSC  x7F.7
00F90:  BSF    FF2.7
00F92:  CLRF   x57
00F94:  MOVWF  x56
....................    FaultDelayTime[20] = read_eeprom(0x31);
00F96:  MOVFF  FF2,87F
00F9A:  BCF    FF2.7
00F9C:  CLRF   FAA
00F9E:  MOVLW  31
00FA0:  MOVWF  FA9
00FA2:  BCF    FA6.6
00FA4:  BCF    FA6.7
00FA6:  BSF    FA6.0
00FA8:  MOVF   FA8,W
00FAA:  BTFSC  x7F.7
00FAC:  BSF    FF2.7
00FAE:  CLRF   x59
00FB0:  MOVWF  x58
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
00FB2:  CLRF   x75
....................    for(; ; a++)
....................    {
....................       restart_wdt();
00FB4:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
00FB6:  MOVLW  32
00FB8:  ADDWF  x75,W
00FBA:  MOVWF  x7F
00FBC:  MOVFF  FF2,880
00FC0:  BCF    FF2.7
00FC2:  CLRF   FAA
00FC4:  MOVFF  87F,FA9
00FC8:  BCF    FA6.6
00FCA:  BCF    FA6.7
00FCC:  BSF    FA6.0
00FCE:  MOVF   FA8,W
00FD0:  BTFSC  x80.7
00FD2:  BSF    FF2.7
00FD4:  MOVWF  x76
....................       if((phonenum == 0x0D) || (a > 15))
00FD6:  MOVF   x76,W
00FD8:  SUBLW  0D
00FDA:  BZ    0FE2
00FDC:  MOVF   x75,W
00FDE:  SUBLW  0F
00FE0:  BC    102A
....................       {
....................          sms_phonenumber[a] =  '\0';
00FE2:  CLRF   03
00FE4:  MOVF   x75,W
00FE6:  ADDLW  86
00FE8:  MOVWF  FE9
00FEA:  MOVLW  06
00FEC:  ADDWFC 03,W
00FEE:  MOVWF  FEA
00FF0:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
00FF2:  MOVLW  32
00FF4:  ADDWF  x75,W
00FF6:  MOVWF  x7F
00FF8:  MOVF   FF2,W
00FFA:  MOVWF  00
00FFC:  BCF    FF2.7
00FFE:  CLRF   FAA
01000:  MOVFF  87F,FA9
01004:  MOVFF  876,FA8
01008:  BCF    FA6.6
0100A:  BCF    FA6.7
0100C:  BSF    FA6.2
0100E:  MOVLB  F
01010:  MOVLW  55
01012:  MOVWF  FA7
01014:  MOVLW  AA
01016:  MOVWF  FA7
01018:  BSF    FA6.1
0101A:  BTFSC  FA6.1
0101C:  BRA    101A
0101E:  BCF    FA6.2
01020:  MOVF   00,W
01022:  IORWF  FF2,F
....................          break;
01024:  BRA    1046
....................       }
01026:  BRA    103E
01028:  MOVLB  8
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
0102A:  CLRF   03
0102C:  MOVF   x75,W
0102E:  ADDLW  86
01030:  MOVWF  FE9
01032:  MOVLW  06
01034:  ADDWFC 03,W
01036:  MOVWF  FEA
01038:  MOVFF  876,FEF
0103C:  MOVLB  F
....................       }
0103E:  MOVLB  8
01040:  INCF   x75,F
01042:  BRA    0FB4
01044:  MOVLB  F
....................    }
.................... 
....................    /*
....................    char b;
....................    for(b=0; b<10; b++)
....................    {
....................       sms_phonenumber[b] = read_eeprom(0x32 + b);
....................    }
....................    sms_phonenumber[b] = '\0' ; // end string
....................    */
.................... 
....................    
....................    int16  i =3,j=0,k=0 , buff;
01046:  MOVLB  8
01048:  CLRF   x78
0104A:  MOVLW  03
0104C:  MOVWF  x77
0104E:  CLRF   x7A
01050:  CLRF   x79
01052:  CLRF   x7C
01054:  CLRF   x7B
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01056:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01058:  MOVLW  5D
0105A:  ADDWF  x77,W
0105C:  MOVWF  x7F
0105E:  MOVLW  00
01060:  ADDWFC x78,W
01062:  MOVWF  x80
01064:  MOVFF  FF2,881
01068:  BCF    FF2.7
0106A:  MOVFF  880,FAA
0106E:  MOVFF  87F,FA9
01072:  BCF    FA6.6
01074:  BCF    FA6.7
01076:  BSF    FA6.0
01078:  MOVF   FA8,W
0107A:  BTFSC  x81.7
0107C:  BSF    FF2.7
0107E:  CLRF   x7E
01080:  MOVWF  x7D
....................       
....................       if((buff == 0x0D)|| (j>41))
01082:  MOVF   x7D,W
01084:  SUBLW  0D
01086:  BNZ   108C
01088:  MOVF   x7E,F
0108A:  BZ    1096
0108C:  MOVF   x7A,F
0108E:  BNZ   1096
01090:  MOVF   x79,W
01092:  SUBLW  29
01094:  BC    10A8
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
01096:  MOVLW  95
01098:  ADDWF  x79,W
0109A:  MOVWF  FE9
0109C:  MOVLW  06
0109E:  ADDWFC x7A,W
010A0:  MOVWF  FEA
010A2:  CLRF   FEF
....................          break;
010A4:  BRA    10CC
....................       }
010A6:  BRA    10B8
....................       else
....................       {
....................          SMS_Massage1[j] = buff;
010A8:  MOVLW  95
010AA:  ADDWF  x79,W
010AC:  MOVWF  FE9
010AE:  MOVLW  06
010B0:  ADDWFC x7A,W
010B2:  MOVWF  FEA
010B4:  MOVFF  87D,FEF
....................          
....................       }
010B8:  MOVFF  878,03
010BC:  MOVF   x77,W
010BE:  INCF   x77,F
010C0:  BTFSC  FD8.2
010C2:  INCF   x78,F
010C4:  INCF   x79,F
010C6:  BTFSC  FD8.2
010C8:  INCF   x7A,F
010CA:  BRA    1056
....................    }
....................    
....................    i++;
010CC:  INCF   x77,F
010CE:  BTFSC  FD8.2
010D0:  INCF   x78,F
....................    j=0;
010D2:  CLRF   x7A
010D4:  CLRF   x79
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
010D6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
010D8:  MOVLW  5D
010DA:  ADDWF  x77,W
010DC:  MOVWF  x7F
010DE:  MOVLW  00
010E0:  ADDWFC x78,W
010E2:  MOVWF  x80
010E4:  MOVFF  FF2,881
010E8:  BCF    FF2.7
010EA:  MOVFF  880,FAA
010EE:  MOVFF  87F,FA9
010F2:  BCF    FA6.6
010F4:  BCF    FA6.7
010F6:  BSF    FA6.0
010F8:  MOVF   FA8,W
010FA:  BTFSC  x81.7
010FC:  BSF    FF2.7
010FE:  CLRF   x7E
01100:  MOVWF  x7D
....................       
....................       if((buff == 0x0D) || (j>41))
01102:  MOVF   x7D,W
01104:  SUBLW  0D
01106:  BNZ   110C
01108:  MOVF   x7E,F
0110A:  BZ    1116
0110C:  MOVF   x7A,F
0110E:  BNZ   1116
01110:  MOVF   x79,W
01112:  SUBLW  29
01114:  BC    1128
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01116:  MOVLW  BE
01118:  ADDWF  x79,W
0111A:  MOVWF  FE9
0111C:  MOVLW  06
0111E:  ADDWFC x7A,W
01120:  MOVWF  FEA
01122:  CLRF   FEF
....................          break;
01124:  BRA    114C
....................       }
01126:  BRA    1138
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
01128:  MOVLW  BE
0112A:  ADDWF  x79,W
0112C:  MOVWF  FE9
0112E:  MOVLW  06
01130:  ADDWFC x7A,W
01132:  MOVWF  FEA
01134:  MOVFF  87D,FEF
....................          
....................       }
01138:  MOVFF  878,03
0113C:  MOVF   x77,W
0113E:  INCF   x77,F
01140:  BTFSC  FD8.2
01142:  INCF   x78,F
01144:  INCF   x79,F
01146:  BTFSC  FD8.2
01148:  INCF   x7A,F
0114A:  BRA    10D6
....................    }
....................    
....................    i++;
0114C:  INCF   x77,F
0114E:  BTFSC  FD8.2
01150:  INCF   x78,F
....................    j=0;
01152:  CLRF   x7A
01154:  CLRF   x79
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01156:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01158:  MOVLW  5D
0115A:  ADDWF  x77,W
0115C:  MOVWF  x7F
0115E:  MOVLW  00
01160:  ADDWFC x78,W
01162:  MOVWF  x80
01164:  MOVFF  FF2,881
01168:  BCF    FF2.7
0116A:  MOVFF  880,FAA
0116E:  MOVFF  87F,FA9
01172:  BCF    FA6.6
01174:  BCF    FA6.7
01176:  BSF    FA6.0
01178:  MOVF   FA8,W
0117A:  BTFSC  x81.7
0117C:  BSF    FF2.7
0117E:  CLRF   x7E
01180:  MOVWF  x7D
....................       
....................       if((buff == 0x0D) || (j>41))
01182:  MOVF   x7D,W
01184:  SUBLW  0D
01186:  BNZ   118C
01188:  MOVF   x7E,F
0118A:  BZ    1196
0118C:  MOVF   x7A,F
0118E:  BNZ   1196
01190:  MOVF   x79,W
01192:  SUBLW  29
01194:  BC    11A8
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
01196:  MOVLW  E7
01198:  ADDWF  x79,W
0119A:  MOVWF  FE9
0119C:  MOVLW  06
0119E:  ADDWFC x7A,W
011A0:  MOVWF  FEA
011A2:  CLRF   FEF
....................          break;
011A4:  BRA    11CC
....................       }
011A6:  BRA    11B8
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
011A8:  MOVLW  E7
011AA:  ADDWF  x79,W
011AC:  MOVWF  FE9
011AE:  MOVLW  06
011B0:  ADDWFC x7A,W
011B2:  MOVWF  FEA
011B4:  MOVFF  87D,FEF
....................          
....................       }
011B8:  MOVFF  878,03
011BC:  MOVF   x77,W
011BE:  INCF   x77,F
011C0:  BTFSC  FD8.2
011C2:  INCF   x78,F
011C4:  INCF   x79,F
011C6:  BTFSC  FD8.2
011C8:  INCF   x7A,F
011CA:  BRA    1156
....................    }
....................    
....................    i++;
011CC:  INCF   x77,F
011CE:  BTFSC  FD8.2
011D0:  INCF   x78,F
....................    j=0;
011D2:  CLRF   x7A
011D4:  CLRF   x79
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
011D6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
011D8:  MOVLW  5D
011DA:  ADDWF  x77,W
011DC:  MOVWF  x7F
011DE:  MOVLW  00
011E0:  ADDWFC x78,W
011E2:  MOVWF  x80
011E4:  MOVFF  FF2,881
011E8:  BCF    FF2.7
011EA:  MOVFF  880,FAA
011EE:  MOVFF  87F,FA9
011F2:  BCF    FA6.6
011F4:  BCF    FA6.7
011F6:  BSF    FA6.0
011F8:  MOVF   FA8,W
011FA:  BTFSC  x81.7
011FC:  BSF    FF2.7
011FE:  CLRF   x7E
01200:  MOVWF  x7D
....................       
....................       if((buff == 0x0D) || (j>41))
01202:  MOVF   x7D,W
01204:  SUBLW  0D
01206:  BNZ   120C
01208:  MOVF   x7E,F
0120A:  BZ    1216
0120C:  MOVF   x7A,F
0120E:  BNZ   1216
01210:  MOVF   x79,W
01212:  SUBLW  29
01214:  BC    1228
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01216:  MOVLW  10
01218:  ADDWF  x79,W
0121A:  MOVWF  FE9
0121C:  MOVLW  07
0121E:  ADDWFC x7A,W
01220:  MOVWF  FEA
01222:  CLRF   FEF
....................          break;
01224:  BRA    124C
....................       }
01226:  BRA    1238
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
01228:  MOVLW  10
0122A:  ADDWF  x79,W
0122C:  MOVWF  FE9
0122E:  MOVLW  07
01230:  ADDWFC x7A,W
01232:  MOVWF  FEA
01234:  MOVFF  87D,FEF
....................          
....................       }
01238:  MOVFF  878,03
0123C:  MOVF   x77,W
0123E:  INCF   x77,F
01240:  BTFSC  FD8.2
01242:  INCF   x78,F
01244:  INCF   x79,F
01246:  BTFSC  FD8.2
01248:  INCF   x7A,F
0124A:  BRA    11D6
....................    }
....................    
....................    i++;
0124C:  INCF   x77,F
0124E:  BTFSC  FD8.2
01250:  INCF   x78,F
....................    j=0;
01252:  CLRF   x7A
01254:  CLRF   x79
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01256:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01258:  MOVLW  5D
0125A:  ADDWF  x77,W
0125C:  MOVWF  x7F
0125E:  MOVLW  00
01260:  ADDWFC x78,W
01262:  MOVWF  x80
01264:  MOVFF  FF2,881
01268:  BCF    FF2.7
0126A:  MOVFF  880,FAA
0126E:  MOVFF  87F,FA9
01272:  BCF    FA6.6
01274:  BCF    FA6.7
01276:  BSF    FA6.0
01278:  MOVF   FA8,W
0127A:  BTFSC  x81.7
0127C:  BSF    FF2.7
0127E:  CLRF   x7E
01280:  MOVWF  x7D
....................       
....................       if((buff == 0x0D) || (j>41))
01282:  MOVF   x7D,W
01284:  SUBLW  0D
01286:  BNZ   128C
01288:  MOVF   x7E,F
0128A:  BZ    1296
0128C:  MOVF   x7A,F
0128E:  BNZ   1296
01290:  MOVF   x79,W
01292:  SUBLW  29
01294:  BC    12A8
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
01296:  MOVLW  39
01298:  ADDWF  x79,W
0129A:  MOVWF  FE9
0129C:  MOVLW  07
0129E:  ADDWFC x7A,W
012A0:  MOVWF  FEA
012A2:  CLRF   FEF
....................          break;
012A4:  BRA    12CC
....................       }
012A6:  BRA    12B8
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
012A8:  MOVLW  39
012AA:  ADDWF  x79,W
012AC:  MOVWF  FE9
012AE:  MOVLW  07
012B0:  ADDWFC x7A,W
012B2:  MOVWF  FEA
012B4:  MOVFF  87D,FEF
....................          
....................       }
012B8:  MOVFF  878,03
012BC:  MOVF   x77,W
012BE:  INCF   x77,F
012C0:  BTFSC  FD8.2
012C2:  INCF   x78,F
012C4:  INCF   x79,F
012C6:  BTFSC  FD8.2
012C8:  INCF   x7A,F
012CA:  BRA    1256
....................    }
....................    
....................    i++;
012CC:  INCF   x77,F
012CE:  BTFSC  FD8.2
012D0:  INCF   x78,F
....................    j=0;
012D2:  CLRF   x7A
012D4:  CLRF   x79
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
012D6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
012D8:  MOVLW  5D
012DA:  ADDWF  x77,W
012DC:  MOVWF  x7F
012DE:  MOVLW  00
012E0:  ADDWFC x78,W
012E2:  MOVWF  x80
012E4:  MOVFF  FF2,881
012E8:  BCF    FF2.7
012EA:  MOVFF  880,FAA
012EE:  MOVFF  87F,FA9
012F2:  BCF    FA6.6
012F4:  BCF    FA6.7
012F6:  BSF    FA6.0
012F8:  MOVF   FA8,W
012FA:  BTFSC  x81.7
012FC:  BSF    FF2.7
012FE:  CLRF   x7E
01300:  MOVWF  x7D
....................       
....................       if((buff == 0x0D) || (j>41))
01302:  MOVF   x7D,W
01304:  SUBLW  0D
01306:  BNZ   130C
01308:  MOVF   x7E,F
0130A:  BZ    1316
0130C:  MOVF   x7A,F
0130E:  BNZ   1316
01310:  MOVF   x79,W
01312:  SUBLW  29
01314:  BC    1328
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01316:  MOVLW  62
01318:  ADDWF  x79,W
0131A:  MOVWF  FE9
0131C:  MOVLW  07
0131E:  ADDWFC x7A,W
01320:  MOVWF  FEA
01322:  CLRF   FEF
....................          break;
01324:  BRA    134C
....................       }
01326:  BRA    1338
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
01328:  MOVLW  62
0132A:  ADDWF  x79,W
0132C:  MOVWF  FE9
0132E:  MOVLW  07
01330:  ADDWFC x7A,W
01332:  MOVWF  FEA
01334:  MOVFF  87D,FEF
....................          
....................       }
01338:  MOVFF  878,03
0133C:  MOVF   x77,W
0133E:  INCF   x77,F
01340:  BTFSC  FD8.2
01342:  INCF   x78,F
01344:  INCF   x79,F
01346:  BTFSC  FD8.2
01348:  INCF   x7A,F
0134A:  BRA    12D6
....................    }
....................    
....................    i++;
0134C:  INCF   x77,F
0134E:  BTFSC  FD8.2
01350:  INCF   x78,F
....................    j=0;
01352:  CLRF   x7A
01354:  CLRF   x79
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01356:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01358:  MOVLW  5D
0135A:  ADDWF  x77,W
0135C:  MOVWF  x7F
0135E:  MOVLW  00
01360:  ADDWFC x78,W
01362:  MOVWF  x80
01364:  MOVFF  FF2,881
01368:  BCF    FF2.7
0136A:  MOVFF  880,FAA
0136E:  MOVFF  87F,FA9
01372:  BCF    FA6.6
01374:  BCF    FA6.7
01376:  BSF    FA6.0
01378:  MOVF   FA8,W
0137A:  BTFSC  x81.7
0137C:  BSF    FF2.7
0137E:  CLRF   x7E
01380:  MOVWF  x7D
....................       
....................       if((buff == 0x0D) || (j>41))
01382:  MOVF   x7D,W
01384:  SUBLW  0D
01386:  BNZ   138C
01388:  MOVF   x7E,F
0138A:  BZ    1396
0138C:  MOVF   x7A,F
0138E:  BNZ   1396
01390:  MOVF   x79,W
01392:  SUBLW  29
01394:  BC    13A8
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01396:  MOVLW  8B
01398:  ADDWF  x79,W
0139A:  MOVWF  FE9
0139C:  MOVLW  07
0139E:  ADDWFC x7A,W
013A0:  MOVWF  FEA
013A2:  CLRF   FEF
....................          break;
013A4:  BRA    13CC
....................       }
013A6:  BRA    13B8
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
013A8:  MOVLW  8B
013AA:  ADDWF  x79,W
013AC:  MOVWF  FE9
013AE:  MOVLW  07
013B0:  ADDWFC x7A,W
013B2:  MOVWF  FEA
013B4:  MOVFF  87D,FEF
....................          
....................       }
013B8:  MOVFF  878,03
013BC:  MOVF   x77,W
013BE:  INCF   x77,F
013C0:  BTFSC  FD8.2
013C2:  INCF   x78,F
013C4:  INCF   x79,F
013C6:  BTFSC  FD8.2
013C8:  INCF   x7A,F
013CA:  BRA    1356
....................    }
....................    
....................    i++;
013CC:  INCF   x77,F
013CE:  BTFSC  FD8.2
013D0:  INCF   x78,F
....................    j=0;
013D2:  CLRF   x7A
013D4:  CLRF   x79
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
013D6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
013D8:  MOVLW  5D
013DA:  ADDWF  x77,W
013DC:  MOVWF  x7F
013DE:  MOVLW  00
013E0:  ADDWFC x78,W
013E2:  MOVWF  x80
013E4:  MOVFF  FF2,881
013E8:  BCF    FF2.7
013EA:  MOVFF  880,FAA
013EE:  MOVFF  87F,FA9
013F2:  BCF    FA6.6
013F4:  BCF    FA6.7
013F6:  BSF    FA6.0
013F8:  MOVF   FA8,W
013FA:  BTFSC  x81.7
013FC:  BSF    FF2.7
013FE:  CLRF   x7E
01400:  MOVWF  x7D
....................       
....................       if((buff == 0x0D) || (j>41))
01402:  MOVF   x7D,W
01404:  SUBLW  0D
01406:  BNZ   140C
01408:  MOVF   x7E,F
0140A:  BZ    1416
0140C:  MOVF   x7A,F
0140E:  BNZ   1416
01410:  MOVF   x79,W
01412:  SUBLW  29
01414:  BC    1428
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01416:  MOVLW  B4
01418:  ADDWF  x79,W
0141A:  MOVWF  FE9
0141C:  MOVLW  07
0141E:  ADDWFC x7A,W
01420:  MOVWF  FEA
01422:  CLRF   FEF
....................          break;
01424:  BRA    144C
....................       }
01426:  BRA    1438
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
01428:  MOVLW  B4
0142A:  ADDWF  x79,W
0142C:  MOVWF  FE9
0142E:  MOVLW  07
01430:  ADDWFC x7A,W
01432:  MOVWF  FEA
01434:  MOVFF  87D,FEF
....................          
....................       }
01438:  MOVFF  878,03
0143C:  MOVF   x77,W
0143E:  INCF   x77,F
01440:  BTFSC  FD8.2
01442:  INCF   x78,F
01444:  INCF   x79,F
01446:  BTFSC  FD8.2
01448:  INCF   x7A,F
0144A:  BRA    13D6
....................    } 
0144C:  MOVLB  0
0144E:  RETURN 0
....................   
....................    
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
00534:  BTFSS  F9E.5
00536:  BRA    0534
00538:  MOVFF  FAE,2E
....................    checkCommand();
0053C:  BRA    02DA
.................... }
.................... 
0053E:  BCF    F9E.5
00540:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
00544:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
00546:  MOVLB  6
00548:  MOVF   x83,F
0054A:  BZ    055A
....................    {
....................       T_timeout--;
0054C:  DECF   x83,F
....................       if(T_timeout == 0)
0054E:  MOVF   x83,F
00550:  BNZ   055A
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout   
00552:  MOVFF  6F,77
....................          output_bit(P485ctrl,0);
00556:  BCF    F8A.3
00558:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
0055A:  MOVF   1C,F
0055C:  BZ    0576
....................    {
....................       TimeBase1s--;
0055E:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
00560:  MOVF   1C,F
00562:  BNZ   0576
....................       {
....................          if(AutoAckDelayTime != 0x00)
00564:  MOVF   1D,F
00566:  BZ    0570
....................          {
....................             AutoAckDelayTime--;
00568:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
0056A:  MOVF   1D,F
0056C:  BNZ   0570
....................             {
....................                AutoAckFlag = 1 ;
0056E:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
00570:  BSF    30.4
....................          TimeBase1s = 100;
00572:  MOVLW  64
00574:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
00576:  MOVF   19,W
00578:  SUBLW  32
0057A:  BNZ   05A6
....................    {
....................       StatusTime = 0;
0057C:  CLRF   19
....................       if(HearthbeatInd == 0)
0057E:  BTFSC  1A.0
00580:  BRA    058A
....................       {
....................          HearthbeatInd = 1;
00582:  BSF    1A.0
....................          output_bit(Pled,1);
00584:  BSF    F8A.5
00586:  BCF    F93.5
....................       }
00588:  BRA    0590
....................       else
....................       {
....................          HearthbeatInd = 0;
0058A:  BCF    1A.0
....................          output_bit(Pled,0);
0058C:  BCF    F8A.5
0058E:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
00590:  BTFSS  1A.6
00592:  BRA    05A4
....................       {
....................              if(T_test > 0x00) T_test --;
00594:  MOVF   2F,F
00596:  BZ    059A
00598:  DECF   2F,F
....................              if(T_test == 0x00)
0059A:  MOVF   2F,F
0059C:  BNZ   05A2
....................              {
....................                Test_fault = 1;
0059E:  BSF    1A.5
....................                functointest_f = 1;
005A0:  BSF    30.1
....................              }
....................        }
005A2:  BRA    05A6
....................        else
....................        {
....................           //Test = 0;
....................           T_test = 0x00;
005A4:  CLRF   2F
....................        }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
005A6:  MOVF   1B,F
005A8:  BZ    05D0
....................    {
....................       FlashingRateTime--;
005AA:  DECF   1B,F
....................       if(FlashingRateTime == 0)
005AC:  MOVF   1B,F
005AE:  BNZ   05C4
....................       {
....................          outmcp23 = 0xff;
005B0:  SETF   x85
....................          
....................          if(SyncStatus == 0)
005B2:  BTFSC  30.2
005B4:  BRA    05C0
....................          {
....................             if(FlashingFlag == 1)
005B6:  BTFSS  1A.1
005B8:  BRA    05BE
....................             {
....................                FlashingFlag = 0;
005BA:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
005BC:  BRA    05C0
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
005BE:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
005C0:  MOVFF  6C,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
005C4:  MOVF   31,F
005C6:  BZ    05D0
....................       {
....................          Synctimer--;
005C8:  DECF   31,F
....................          if(Synctimer == 0x00)
005CA:  MOVF   31,F
005CC:  BNZ   05D0
....................          {
....................             SyncStatus = 0;
005CE:  BCF    30.2
....................          }
....................       }
.................... 
....................    }
....................    
005D0:  BCF    F9E.1
005D2:  MOVLB  0
005D4:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
049B0:  MOVLB  7
049B2:  BTFSS  xE3.0
049B4:  BRA    4A32
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
049B6:  MOVLW  00
049B8:  BTFSC  xDD.0
049BA:  MOVLW  01
049BC:  MOVLB  8
049BE:  MOVWF  x7E
049C0:  MOVLW  00
049C2:  MOVLB  7
049C4:  BTFSC  xDF.0
049C6:  MOVLW  01
049C8:  MOVLB  8
049CA:  XORWF  x7E,W
049CC:  SUBLW  01
049CE:  BNZ   49D6
049D0:  MOVLB  7
049D2:  BTFSC  xE0.0
049D4:  BRA    49DC
049D6:  MOVLB  7
049D8:  BTFSS  xE5.0
049DA:  BRA    4A2A
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
049DC:  BTFSC  xE4.0
049DE:  BRA    4A28
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
049E0:  BTFSC  xE5.0
049E2:  BRA    49FC
049E4:  MOVLB  0
049E6:  MOVF   x6A,W
049E8:  SUBLW  0F
049EA:  BTFSC  FD8.2
049EC:  BRA    49F2
049EE:  MOVLB  7
049F0:  BRA    49FC
....................             {
....................                TimeBase1s = 100 ;            //reload again
049F2:  MOVLW  64
049F4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
049F6:  MOVFF  6B,1D
049FA:  MOVLB  7
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
049FC:  BSF    xE5.0
....................             if(FlashingFlag == 0)
049FE:  BTFSC  1A.1
04A00:  BRA    4A06
....................             {
....................                Output.B1 = 0;           //Flash output1
04A02:  BCF    xDE.0
....................             }
04A04:  BRA    4A08
....................             else
....................             {
....................                Output.B1 = 1;
04A06:  BSF    xDE.0
....................             }
.................... 
....................             if (~AutoTestFlag)
04A08:  BTFSC  1A.4
04A0A:  BRA    4A28
....................             {
....................                
....................                if(OutputBoth.B1 == 0)                  //Both output
04A0C:  BTFSC  xE2.0
04A0E:  BRA    4A1A
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04A10:  BCF    F89.4
04A12:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04A14:  BCF    F89.3
04A16:  BCF    F92.3
....................                }
04A18:  BRA    4A28
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,0);     //Buzzer
04A1A:  BTFSS  xE1.0
04A1C:  BRA    4A24
04A1E:  BCF    F89.4
04A20:  BCF    F92.4
04A22:  BRA    4A28
....................                   else output_bit(Pbell,0);                          //Bell
04A24:  BCF    F89.3
04A26:  BCF    F92.3
....................                }
....................                
....................             }
....................             
....................             /*
....................             // SMS Sending   
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................             
....................                SendSMS.B1 =1;
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH1,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               //fprintf(CH2,"Fault No.1"); 
....................               fprintf(CH2,SMS_Massage1);
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................             }
....................             */
....................         }
....................       }
04A28:  BRA    4A30
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
04A2A:  BTFSS  xE0.0
04A2C:  BRA    4A30
04A2E:  BCF    xE4.0
....................    }
04A30:  BRA    4A5C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
04A32:  MOVLW  00
04A34:  BTFSC  xDD.0
04A36:  MOVLW  01
04A38:  MOVLB  8
04A3A:  MOVWF  x7E
04A3C:  MOVLW  00
04A3E:  MOVLB  7
04A40:  BTFSC  xDF.0
04A42:  MOVLW  01
04A44:  MOVLB  8
04A46:  XORWF  x7E,W
04A48:  SUBLW  01
04A4A:  BNZ   4A54
....................       {
....................          Output.B1 = 0;
04A4C:  MOVLB  7
04A4E:  BCF    xDE.0
....................          
....................          /*
....................          // SMS Sending   
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             SendSMS.B1 =1;
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            //fprintf(CH2,"Fault No.1");
....................            fprintf(CH2,SMS_Massage1);
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................          }
....................          */
....................       }
04A50:  BRA    4A5C
04A52:  MOVLB  8
....................       else
....................       {
....................          Output.B1 = 1;
04A54:  MOVLB  7
04A56:  BSF    xDE.0
....................          
....................          SendSMS.B1 =0;
04A58:  BCF    xEB.0
....................          functointest_f =0;
04A5A:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
04A5C:  BTFSS  xE3.1
04A5E:  BRA    4B72
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
04A60:  MOVLW  00
04A62:  BTFSC  xDD.1
04A64:  MOVLW  01
04A66:  MOVLB  8
04A68:  MOVWF  x7E
04A6A:  MOVLW  00
04A6C:  MOVLB  7
04A6E:  BTFSC  xDF.1
04A70:  MOVLW  01
04A72:  MOVLB  8
04A74:  XORWF  x7E,W
04A76:  SUBLW  01
04A78:  BNZ   4A80
04A7A:  MOVLB  7
04A7C:  BTFSC  xE0.1
04A7E:  BRA    4A86
04A80:  MOVLB  7
04A82:  BTFSS  xE5.1
04A84:  BRA    4B6A
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
04A86:  BTFSC  xE4.1
04A88:  BRA    4AD2
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04A8A:  BTFSC  xE5.1
04A8C:  BRA    4AA6
04A8E:  MOVLB  0
04A90:  MOVF   x6A,W
04A92:  SUBLW  0F
04A94:  BTFSC  FD8.2
04A96:  BRA    4A9C
04A98:  MOVLB  7
04A9A:  BRA    4AA6
....................             {
....................                TimeBase1s = 100 ;            //reload again
04A9C:  MOVLW  64
04A9E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04AA0:  MOVFF  6B,1D
04AA4:  MOVLB  7
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
04AA6:  BSF    xE5.1
....................             if(FlashingFlag == 0)
04AA8:  BTFSC  1A.1
04AAA:  BRA    4AB0
....................             {
....................                Output.B2 = 0;           //Flash output1
04AAC:  BCF    xDE.1
....................             }
04AAE:  BRA    4AB2
....................             else
....................             {
....................                Output.B2 = 1;
04AB0:  BSF    xDE.1
....................             }
.................... 
....................             if (~AutoTestFlag)
04AB2:  BTFSC  1A.4
04AB4:  BRA    4AD2
....................             {
....................                
....................                if(OutputBoth.B2 == 0)                  //Both output
04AB6:  BTFSC  xE2.1
04AB8:  BRA    4AC4
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04ABA:  BCF    F89.4
04ABC:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04ABE:  BCF    F89.3
04AC0:  BCF    F92.3
....................                }
04AC2:  BRA    4AD2
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,0);     //Buzzer
04AC4:  BTFSS  xE1.1
04AC6:  BRA    4ACE
04AC8:  BCF    F89.4
04ACA:  BCF    F92.4
04ACC:  BRA    4AD2
....................                   else output_bit(Pbell,0);                          //Bell
04ACE:  BCF    F89.3
04AD0:  BCF    F92.3
....................                }
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04AD2:  BTFSC  xEB.1
04AD4:  BRA    4B68
04AD6:  BTFSC  30.1
04AD8:  BRA    4B68
04ADA:  BTFSC  xE4.1
04ADC:  BRA    4B68
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04ADE:  MOVLW  D8
04AE0:  MOVWF  FF6
04AE2:  MOVLW  05
04AE4:  MOVWF  FF7
04AE6:  MOVLB  0
04AE8:  CALL   1F0C
....................                putc('\n',CH2);
04AEC:  MOVLW  0A
04AEE:  MOVLB  8
04AF0:  MOVWF  x7F
04AF2:  MOVLB  0
04AF4:  CALL   1EC6
....................                delay_ms(10);
04AF8:  MOVLW  0A
04AFA:  MOVLB  8
04AFC:  MOVWF  x7E
04AFE:  MOVLB  0
04B00:  CALL   074A
....................                 
....................                SendSMS.B2 =1;
04B04:  MOVLB  7
04B06:  BSF    xEB.1
....................                fprintf(CH2,"AT+CMGS=\"");
04B08:  MOVLW  E2
04B0A:  MOVWF  FF6
04B0C:  MOVLW  05
04B0E:  MOVWF  FF7
04B10:  MOVLB  0
04B12:  CALL   1F0C
....................                fprintf(CH2,sms_phonenumber);
04B16:  MOVLW  06
04B18:  MOVWF  FEA
04B1A:  MOVLW  86
04B1C:  MOVWF  FE9
04B1E:  RCALL  4482
....................                
....................                fprintf(CH2,"\"");
04B20:  MOVLW  22
04B22:  MOVLB  8
04B24:  MOVWF  x7F
04B26:  MOVLB  0
04B28:  CALL   1EC6
....................                putc('\n',CH2);
04B2C:  MOVLW  0A
04B2E:  MOVLB  8
04B30:  MOVWF  x7F
04B32:  MOVLB  0
04B34:  CALL   1EC6
....................                delay_ms(50);
04B38:  MOVLW  32
04B3A:  MOVLB  8
04B3C:  MOVWF  x7E
04B3E:  MOVLB  0
04B40:  CALL   074A
....................                
....................               fprintf(CH2,SMS_Massage2);
04B44:  MOVLW  06
04B46:  MOVWF  FEA
04B48:  MOVLW  BE
04B4A:  MOVWF  FE9
04B4C:  RCALL  4482
....................               putc('\n',CH2);
04B4E:  MOVLW  0A
04B50:  MOVLB  8
04B52:  MOVWF  x7F
04B54:  MOVLB  0
04B56:  CALL   1EC6
....................              putc(26,CH2);
04B5A:  MOVLW  1A
04B5C:  MOVLB  8
04B5E:  MOVWF  x7F
04B60:  MOVLB  0
04B62:  CALL   1EC6
04B66:  MOVLB  7
....................             }  
.................... 
....................       }
04B68:  BRA    4B70
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
04B6A:  BTFSS  xE0.1
04B6C:  BRA    4B70
04B6E:  BCF    xE4.1
....................    }
04B70:  BRA    4C32
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
04B72:  MOVLW  00
04B74:  BTFSC  xDD.1
04B76:  MOVLW  01
04B78:  MOVLB  8
04B7A:  MOVWF  x7E
04B7C:  MOVLW  00
04B7E:  MOVLB  7
04B80:  BTFSC  xDF.1
04B82:  MOVLW  01
04B84:  MOVLB  8
04B86:  XORWF  x7E,W
04B88:  SUBLW  01
04B8A:  BNZ   4C2A
....................       {
....................          Output.B2 = 0;
04B8C:  MOVLB  7
04B8E:  BCF    xDE.1
....................           // SMS Sending   
....................          if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04B90:  BTFSC  xEB.1
04B92:  BRA    4C26
04B94:  BTFSC  30.1
04B96:  BRA    4C26
04B98:  BTFSC  xE4.1
04B9A:  BRA    4C26
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04B9C:  MOVLW  EC
04B9E:  MOVWF  FF6
04BA0:  MOVLW  05
04BA2:  MOVWF  FF7
04BA4:  MOVLB  0
04BA6:  CALL   1F0C
....................             putc('\n',CH2);
04BAA:  MOVLW  0A
04BAC:  MOVLB  8
04BAE:  MOVWF  x7F
04BB0:  MOVLB  0
04BB2:  CALL   1EC6
....................             delay_ms(10);
04BB6:  MOVLW  0A
04BB8:  MOVLB  8
04BBA:  MOVWF  x7E
04BBC:  MOVLB  0
04BBE:  CALL   074A
....................             
....................             SendSMS.B2 =1;
04BC2:  MOVLB  7
04BC4:  BSF    xEB.1
....................             fprintf(CH2,"AT+CMGS=\"");
04BC6:  MOVLW  F6
04BC8:  MOVWF  FF6
04BCA:  MOVLW  05
04BCC:  MOVWF  FF7
04BCE:  MOVLB  0
04BD0:  CALL   1F0C
....................             fprintf(CH2,sms_phonenumber);
04BD4:  MOVLW  06
04BD6:  MOVWF  FEA
04BD8:  MOVLW  86
04BDA:  MOVWF  FE9
04BDC:  RCALL  4482
....................             
....................             printf("\"");
04BDE:  MOVLW  22
04BE0:  MOVLB  8
04BE2:  MOVWF  x7F
04BE4:  MOVLB  0
04BE6:  CALL   1EC6
....................             putc('\n',CH2);
04BEA:  MOVLW  0A
04BEC:  MOVLB  8
04BEE:  MOVWF  x7F
04BF0:  MOVLB  0
04BF2:  CALL   1EC6
....................             delay_ms(50);
04BF6:  MOVLW  32
04BF8:  MOVLB  8
04BFA:  MOVWF  x7E
04BFC:  MOVLB  0
04BFE:  CALL   074A
....................            
....................            fprintf(CH2,SMS_Massage1);
04C02:  MOVLW  06
04C04:  MOVWF  FEA
04C06:  MOVLW  95
04C08:  MOVWF  FE9
04C0A:  RCALL  4482
....................            putc('\n',CH2);
04C0C:  MOVLW  0A
04C0E:  MOVLB  8
04C10:  MOVWF  x7F
04C12:  MOVLB  0
04C14:  CALL   1EC6
....................            putc(26,CH2);
04C18:  MOVLW  1A
04C1A:  MOVLB  8
04C1C:  MOVWF  x7F
04C1E:  MOVLB  0
04C20:  CALL   1EC6
04C24:  MOVLB  7
....................          }  
....................       }
04C26:  BRA    4C32
04C28:  MOVLB  8
....................       else
....................       {
....................          Output.B2 = 1;
04C2A:  MOVLB  7
04C2C:  BSF    xDE.1
....................          SendSMS.B2 =0;
04C2E:  BCF    xEB.1
....................          functointest_f =0;
04C30:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
04C32:  BTFSS  xE3.2
04C34:  BRA    4D4C
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
04C36:  MOVLW  00
04C38:  BTFSC  xDD.2
04C3A:  MOVLW  01
04C3C:  MOVLB  8
04C3E:  MOVWF  x7E
04C40:  MOVLW  00
04C42:  MOVLB  7
04C44:  BTFSC  xDF.2
04C46:  MOVLW  01
04C48:  MOVLB  8
04C4A:  XORWF  x7E,W
04C4C:  SUBLW  01
04C4E:  BNZ   4C56
04C50:  MOVLB  7
04C52:  BTFSC  xE0.2
04C54:  BRA    4C5C
04C56:  MOVLB  7
04C58:  BTFSS  xE5.2
04C5A:  BRA    4D44
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
04C5C:  BTFSC  xE4.2
04C5E:  BRA    4CA8
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04C60:  BTFSC  xE5.2
04C62:  BRA    4C7C
04C64:  MOVLB  0
04C66:  MOVF   x6A,W
04C68:  SUBLW  0F
04C6A:  BTFSC  FD8.2
04C6C:  BRA    4C72
04C6E:  MOVLB  7
04C70:  BRA    4C7C
....................             {
....................                TimeBase1s = 100 ;            //reload again
04C72:  MOVLW  64
04C74:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04C76:  MOVFF  6B,1D
04C7A:  MOVLB  7
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
04C7C:  BSF    xE5.2
....................             if(FlashingFlag == 0)
04C7E:  BTFSC  1A.1
04C80:  BRA    4C86
....................             {
....................                Output.B3 = 0;           //Flash output1
04C82:  BCF    xDE.2
....................             }
04C84:  BRA    4C88
....................             else
....................             {
....................                Output.B3 = 1;
04C86:  BSF    xDE.2
....................             }
.................... 
....................             if (~AutoTestFlag)
04C88:  BTFSC  1A.4
04C8A:  BRA    4CA8
....................             {
....................                
....................                if(OutputBoth.B3 == 0)                  //Both output
04C8C:  BTFSC  xE2.2
04C8E:  BRA    4C9A
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04C90:  BCF    F89.4
04C92:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04C94:  BCF    F89.3
04C96:  BCF    F92.3
....................                }
04C98:  BRA    4CA8
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,0);     //Buzzer
04C9A:  BTFSS  xE1.2
04C9C:  BRA    4CA4
04C9E:  BCF    F89.4
04CA0:  BCF    F92.4
04CA2:  BRA    4CA8
....................                   else output_bit(Pbell,0);                          //Bell
04CA4:  BCF    F89.3
04CA6:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
04CA8:  BTFSC  xEB.2
04CAA:  BRA    4D42
04CAC:  BTFSC  30.1
04CAE:  BRA    4D42
04CB0:  BTFSC  xE4.2
04CB2:  BRA    4D42
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04CB4:  MOVLW  00
04CB6:  MOVWF  FF6
04CB8:  MOVLW  06
04CBA:  MOVWF  FF7
04CBC:  MOVLB  0
04CBE:  CALL   1F0C
....................                putc('\n',CH2);
04CC2:  MOVLW  0A
04CC4:  MOVLB  8
04CC6:  MOVWF  x7F
04CC8:  MOVLB  0
04CCA:  CALL   1EC6
....................                delay_ms(10);
04CCE:  MOVLW  0A
04CD0:  MOVLB  8
04CD2:  MOVWF  x7E
04CD4:  MOVLB  0
04CD6:  CALL   074A
....................                
....................                SendSMS.B3 =1;
04CDA:  MOVLB  7
04CDC:  BSF    xEB.2
....................                fprintf(CH2,"AT+CMGS=\"");
04CDE:  MOVLW  0A
04CE0:  MOVWF  FF6
04CE2:  MOVLW  06
04CE4:  MOVWF  FF7
04CE6:  MOVLB  0
04CE8:  CALL   1F0C
....................                fprintf(CH2,sms_phonenumber);
04CEC:  MOVLW  06
04CEE:  MOVWF  FEA
04CF0:  MOVLW  86
04CF2:  MOVWF  FE9
04CF4:  CALL   4482
....................                
....................                fprintf(CH2,"\"");
04CF8:  MOVLW  22
04CFA:  MOVLB  8
04CFC:  MOVWF  x7F
04CFE:  MOVLB  0
04D00:  CALL   1EC6
....................                putc('\n',CH2);
04D04:  MOVLW  0A
04D06:  MOVLB  8
04D08:  MOVWF  x7F
04D0A:  MOVLB  0
04D0C:  CALL   1EC6
....................                delay_ms(50);
04D10:  MOVLW  32
04D12:  MOVLB  8
04D14:  MOVWF  x7E
04D16:  MOVLB  0
04D18:  CALL   074A
....................               
....................               fprintf(CH2,SMS_Massage3);
04D1C:  MOVLW  06
04D1E:  MOVWF  FEA
04D20:  MOVLW  E7
04D22:  MOVWF  FE9
04D24:  CALL   4482
....................               putc('\n',CH2);
04D28:  MOVLW  0A
04D2A:  MOVLB  8
04D2C:  MOVWF  x7F
04D2E:  MOVLB  0
04D30:  CALL   1EC6
....................              putc(26,CH2);
04D34:  MOVLW  1A
04D36:  MOVLB  8
04D38:  MOVWF  x7F
04D3A:  MOVLB  0
04D3C:  CALL   1EC6
04D40:  MOVLB  7
....................             }
.................... 
....................       }
04D42:  BRA    4D4A
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
04D44:  BTFSS  xE0.2
04D46:  BRA    4D4A
04D48:  BCF    xE4.2
....................    }
04D4A:  BRA    4E0E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
04D4C:  MOVLW  00
04D4E:  BTFSC  xDD.2
04D50:  MOVLW  01
04D52:  MOVLB  8
04D54:  MOVWF  x7E
04D56:  MOVLW  00
04D58:  MOVLB  7
04D5A:  BTFSC  xDF.2
04D5C:  MOVLW  01
04D5E:  MOVLB  8
04D60:  XORWF  x7E,W
04D62:  SUBLW  01
04D64:  BNZ   4E08
....................       {
....................          Output.B3 = 0;
04D66:  MOVLB  7
04D68:  BCF    xDE.2
....................          // SMS Sending   
....................          if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
04D6A:  BTFSC  xEB.2
04D6C:  BRA    4E04
04D6E:  BTFSC  30.1
04D70:  BRA    4E04
04D72:  BTFSC  xE4.2
04D74:  BRA    4E04
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04D76:  MOVLW  14
04D78:  MOVWF  FF6
04D7A:  MOVLW  06
04D7C:  MOVWF  FF7
04D7E:  MOVLB  0
04D80:  CALL   1F0C
....................             putc('\n',CH2);
04D84:  MOVLW  0A
04D86:  MOVLB  8
04D88:  MOVWF  x7F
04D8A:  MOVLB  0
04D8C:  CALL   1EC6
....................             delay_ms(10);
04D90:  MOVLW  0A
04D92:  MOVLB  8
04D94:  MOVWF  x7E
04D96:  MOVLB  0
04D98:  CALL   074A
....................             
....................             SendSMS.B3 =1;
04D9C:  MOVLB  7
04D9E:  BSF    xEB.2
....................             fprintf(CH2,"AT+CMGS=\"");
04DA0:  MOVLW  1E
04DA2:  MOVWF  FF6
04DA4:  MOVLW  06
04DA6:  MOVWF  FF7
04DA8:  MOVLB  0
04DAA:  CALL   1F0C
....................             fprintf(CH2,sms_phonenumber);
04DAE:  MOVLW  06
04DB0:  MOVWF  FEA
04DB2:  MOVLW  86
04DB4:  MOVWF  FE9
04DB6:  CALL   4482
....................             
....................             fprintf(CH2,"\"");
04DBA:  MOVLW  22
04DBC:  MOVLB  8
04DBE:  MOVWF  x7F
04DC0:  MOVLB  0
04DC2:  CALL   1EC6
....................             putc('\n',CH2);
04DC6:  MOVLW  0A
04DC8:  MOVLB  8
04DCA:  MOVWF  x7F
04DCC:  MOVLB  0
04DCE:  CALL   1EC6
....................             delay_ms(50);
04DD2:  MOVLW  32
04DD4:  MOVLB  8
04DD6:  MOVWF  x7E
04DD8:  MOVLB  0
04DDA:  CALL   074A
....................            
....................            fprintf(CH2,SMS_Massage3);
04DDE:  MOVLW  06
04DE0:  MOVWF  FEA
04DE2:  MOVLW  E7
04DE4:  MOVWF  FE9
04DE6:  CALL   4482
....................            putc('\n',CH2);
04DEA:  MOVLW  0A
04DEC:  MOVLB  8
04DEE:  MOVWF  x7F
04DF0:  MOVLB  0
04DF2:  CALL   1EC6
....................           putc(26,CH2);
04DF6:  MOVLW  1A
04DF8:  MOVLB  8
04DFA:  MOVWF  x7F
04DFC:  MOVLB  0
04DFE:  CALL   1EC6
04E02:  MOVLB  7
....................          }
....................       }
04E04:  BRA    4E0E
04E06:  MOVLB  8
....................       else
....................       {
....................          Output.B3 = 1;
04E08:  MOVLB  7
04E0A:  BSF    xDE.2
....................          SendSMS.B3 =0;
04E0C:  BCF    xEB.2
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
04E0E:  BTFSS  xE3.3
04E10:  BRA    4F28
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
04E12:  MOVLW  00
04E14:  BTFSC  xDD.3
04E16:  MOVLW  01
04E18:  MOVLB  8
04E1A:  MOVWF  x7E
04E1C:  MOVLW  00
04E1E:  MOVLB  7
04E20:  BTFSC  xDF.3
04E22:  MOVLW  01
04E24:  MOVLB  8
04E26:  XORWF  x7E,W
04E28:  SUBLW  01
04E2A:  BNZ   4E32
04E2C:  MOVLB  7
04E2E:  BTFSC  xE0.3
04E30:  BRA    4E38
04E32:  MOVLB  7
04E34:  BTFSS  xE5.3
04E36:  BRA    4F20
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
04E38:  BTFSC  xE4.3
04E3A:  BRA    4E84
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04E3C:  BTFSC  xE5.3
04E3E:  BRA    4E58
04E40:  MOVLB  0
04E42:  MOVF   x6A,W
04E44:  SUBLW  0F
04E46:  BTFSC  FD8.2
04E48:  BRA    4E4E
04E4A:  MOVLB  7
04E4C:  BRA    4E58
....................             {
....................                TimeBase1s = 100 ;            //reload again
04E4E:  MOVLW  64
04E50:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04E52:  MOVFF  6B,1D
04E56:  MOVLB  7
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
04E58:  BSF    xE5.3
....................             if(FlashingFlag == 0)
04E5A:  BTFSC  1A.1
04E5C:  BRA    4E62
....................             {
....................                Output.B4 = 0;           //Flash output1
04E5E:  BCF    xDE.3
....................             }
04E60:  BRA    4E64
....................             else
....................             {
....................                Output.B4 = 1;
04E62:  BSF    xDE.3
....................             }
.................... 
....................             if (~AutoTestFlag)
04E64:  BTFSC  1A.4
04E66:  BRA    4E84
....................             {
....................                
....................                if(OutputBoth.B4 == 0)                  //Both output
04E68:  BTFSC  xE2.3
04E6A:  BRA    4E76
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
04E6C:  BCF    F89.4
04E6E:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
04E70:  BCF    F89.3
04E72:  BCF    F92.3
....................                }
04E74:  BRA    4E84
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,0);     //Buzzer
04E76:  BTFSS  xE1.3
04E78:  BRA    4E80
04E7A:  BCF    F89.4
04E7C:  BCF    F92.4
04E7E:  BRA    4E84
....................                   else output_bit(Pbell,0);                          //Bell
04E80:  BCF    F89.3
04E82:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
04E84:  BTFSC  xEB.3
04E86:  BRA    4F1E
04E88:  BTFSC  30.1
04E8A:  BRA    4F1E
04E8C:  BTFSC  xE4.3
04E8E:  BRA    4F1E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04E90:  MOVLW  28
04E92:  MOVWF  FF6
04E94:  MOVLW  06
04E96:  MOVWF  FF7
04E98:  MOVLB  0
04E9A:  CALL   1F0C
....................                putc('\n',CH2);
04E9E:  MOVLW  0A
04EA0:  MOVLB  8
04EA2:  MOVWF  x7F
04EA4:  MOVLB  0
04EA6:  CALL   1EC6
....................                delay_ms(10);
04EAA:  MOVLW  0A
04EAC:  MOVLB  8
04EAE:  MOVWF  x7E
04EB0:  MOVLB  0
04EB2:  CALL   074A
....................                
....................                SendSMS.B4 =1;
04EB6:  MOVLB  7
04EB8:  BSF    xEB.3
....................                fprintf(CH2,"AT+CMGS=\"");
04EBA:  MOVLW  32
04EBC:  MOVWF  FF6
04EBE:  MOVLW  06
04EC0:  MOVWF  FF7
04EC2:  MOVLB  0
04EC4:  CALL   1F0C
....................                fprintf(CH2,sms_phonenumber);
04EC8:  MOVLW  06
04ECA:  MOVWF  FEA
04ECC:  MOVLW  86
04ECE:  MOVWF  FE9
04ED0:  CALL   4482
....................             
....................                fprintf(CH2,"\"");
04ED4:  MOVLW  22
04ED6:  MOVLB  8
04ED8:  MOVWF  x7F
04EDA:  MOVLB  0
04EDC:  CALL   1EC6
....................                putc('\n',CH2);
04EE0:  MOVLW  0A
04EE2:  MOVLB  8
04EE4:  MOVWF  x7F
04EE6:  MOVLB  0
04EE8:  CALL   1EC6
....................                delay_ms(50);
04EEC:  MOVLW  32
04EEE:  MOVLB  8
04EF0:  MOVWF  x7E
04EF2:  MOVLB  0
04EF4:  CALL   074A
....................               
....................               fprintf(CH2,SMS_Massage4);
04EF8:  MOVLW  07
04EFA:  MOVWF  FEA
04EFC:  MOVLW  10
04EFE:  MOVWF  FE9
04F00:  CALL   4482
....................               putc('\n',CH2);
04F04:  MOVLW  0A
04F06:  MOVLB  8
04F08:  MOVWF  x7F
04F0A:  MOVLB  0
04F0C:  CALL   1EC6
....................              putc(26,CH2);
04F10:  MOVLW  1A
04F12:  MOVLB  8
04F14:  MOVWF  x7F
04F16:  MOVLB  0
04F18:  CALL   1EC6
04F1C:  MOVLB  7
....................             }
.................... 
....................       }
04F1E:  BRA    4F26
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
04F20:  BTFSS  xE0.3
04F22:  BRA    4F26
04F24:  BCF    xE4.3
....................    }
04F26:  BRA    4FEA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
04F28:  MOVLW  00
04F2A:  BTFSC  xDD.3
04F2C:  MOVLW  01
04F2E:  MOVLB  8
04F30:  MOVWF  x7E
04F32:  MOVLW  00
04F34:  MOVLB  7
04F36:  BTFSC  xDF.3
04F38:  MOVLW  01
04F3A:  MOVLB  8
04F3C:  XORWF  x7E,W
04F3E:  SUBLW  01
04F40:  BNZ   4FE4
....................       {
....................          Output.B4 = 0;
04F42:  MOVLB  7
04F44:  BCF    xDE.3
....................          
....................          // SMS Sending   
....................          if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
04F46:  BTFSC  xEB.3
04F48:  BRA    4FE0
04F4A:  BTFSC  30.1
04F4C:  BRA    4FE0
04F4E:  BTFSC  xE4.3
04F50:  BRA    4FE0
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04F52:  MOVLW  3C
04F54:  MOVWF  FF6
04F56:  MOVLW  06
04F58:  MOVWF  FF7
04F5A:  MOVLB  0
04F5C:  CALL   1F0C
....................             putc('\n',CH2);
04F60:  MOVLW  0A
04F62:  MOVLB  8
04F64:  MOVWF  x7F
04F66:  MOVLB  0
04F68:  CALL   1EC6
....................             delay_ms(10);
04F6C:  MOVLW  0A
04F6E:  MOVLB  8
04F70:  MOVWF  x7E
04F72:  MOVLB  0
04F74:  CALL   074A
....................             
....................             SendSMS.B4 =1;
04F78:  MOVLB  7
04F7A:  BSF    xEB.3
....................             fprintf(CH2,"AT+CMGS=\"");
04F7C:  MOVLW  46
04F7E:  MOVWF  FF6
04F80:  MOVLW  06
04F82:  MOVWF  FF7
04F84:  MOVLB  0
04F86:  CALL   1F0C
....................             fprintf(CH2,sms_phonenumber);
04F8A:  MOVLW  06
04F8C:  MOVWF  FEA
04F8E:  MOVLW  86
04F90:  MOVWF  FE9
04F92:  CALL   4482
....................          
....................             fprintf(CH2,"\"");
04F96:  MOVLW  22
04F98:  MOVLB  8
04F9A:  MOVWF  x7F
04F9C:  MOVLB  0
04F9E:  CALL   1EC6
....................             putc('\n',CH2);
04FA2:  MOVLW  0A
04FA4:  MOVLB  8
04FA6:  MOVWF  x7F
04FA8:  MOVLB  0
04FAA:  CALL   1EC6
....................             delay_ms(50);
04FAE:  MOVLW  32
04FB0:  MOVLB  8
04FB2:  MOVWF  x7E
04FB4:  MOVLB  0
04FB6:  CALL   074A
....................            
....................            fprintf(CH2,SMS_Massage4);
04FBA:  MOVLW  07
04FBC:  MOVWF  FEA
04FBE:  MOVLW  10
04FC0:  MOVWF  FE9
04FC2:  CALL   4482
....................            putc('\n',CH2);
04FC6:  MOVLW  0A
04FC8:  MOVLB  8
04FCA:  MOVWF  x7F
04FCC:  MOVLB  0
04FCE:  CALL   1EC6
....................           putc(26,CH2);
04FD2:  MOVLW  1A
04FD4:  MOVLB  8
04FD6:  MOVWF  x7F
04FD8:  MOVLB  0
04FDA:  CALL   1EC6
04FDE:  MOVLB  7
....................          }
....................       }
04FE0:  BRA    4FEA
04FE2:  MOVLB  8
....................       else
....................       {
....................          Output.B4 = 1;
04FE4:  MOVLB  7
04FE6:  BSF    xDE.3
....................          SendSMS.B4 =0;
04FE8:  BCF    xEB.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
04FEA:  BTFSS  xE3.4
04FEC:  BRA    5104
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
04FEE:  MOVLW  00
04FF0:  BTFSC  xDD.4
04FF2:  MOVLW  01
04FF4:  MOVLB  8
04FF6:  MOVWF  x7E
04FF8:  MOVLW  00
04FFA:  MOVLB  7
04FFC:  BTFSC  xDF.4
04FFE:  MOVLW  01
05000:  MOVLB  8
05002:  XORWF  x7E,W
05004:  SUBLW  01
05006:  BNZ   500E
05008:  MOVLB  7
0500A:  BTFSC  xE0.4
0500C:  BRA    5014
0500E:  MOVLB  7
05010:  BTFSS  xE5.4
05012:  BRA    50FC
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
05014:  BTFSC  xE4.4
05016:  BRA    5060
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05018:  BTFSC  xE5.4
0501A:  BRA    5034
0501C:  MOVLB  0
0501E:  MOVF   x6A,W
05020:  SUBLW  0F
05022:  BTFSC  FD8.2
05024:  BRA    502A
05026:  MOVLB  7
05028:  BRA    5034
....................             {
....................                TimeBase1s = 100 ;            //reload again
0502A:  MOVLW  64
0502C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0502E:  MOVFF  6B,1D
05032:  MOVLB  7
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
05034:  BSF    xE5.4
....................             if(FlashingFlag == 0)
05036:  BTFSC  1A.1
05038:  BRA    503E
....................             {
....................                Output.B5 = 0;           //Flash output1
0503A:  BCF    xDE.4
....................             }
0503C:  BRA    5040
....................             else
....................             {
....................                Output.B5 = 1;
0503E:  BSF    xDE.4
....................             }
.................... 
....................             if (~AutoTestFlag)
05040:  BTFSC  1A.4
05042:  BRA    5060
....................             {
....................                
....................                if(OutputBoth.B5 == 0)                  //Both output
05044:  BTFSC  xE2.4
05046:  BRA    5052
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05048:  BCF    F89.4
0504A:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
0504C:  BCF    F89.3
0504E:  BCF    F92.3
....................                }
05050:  BRA    5060
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,0);     //Buzzer
05052:  BTFSS  xE1.4
05054:  BRA    505C
05056:  BCF    F89.4
05058:  BCF    F92.4
0505A:  BRA    5060
....................                   else output_bit(Pbell,0);                          //Bell
0505C:  BCF    F89.3
0505E:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05060:  BTFSC  xEB.4
05062:  BRA    50FA
05064:  BTFSC  30.1
05066:  BRA    50FA
05068:  BTFSC  xE4.4
0506A:  BRA    50FA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0506C:  MOVLW  50
0506E:  MOVWF  FF6
05070:  MOVLW  06
05072:  MOVWF  FF7
05074:  MOVLB  0
05076:  CALL   1F0C
....................                putc('\n',CH2);
0507A:  MOVLW  0A
0507C:  MOVLB  8
0507E:  MOVWF  x7F
05080:  MOVLB  0
05082:  CALL   1EC6
....................                delay_ms(10);
05086:  MOVLW  0A
05088:  MOVLB  8
0508A:  MOVWF  x7E
0508C:  MOVLB  0
0508E:  CALL   074A
....................                
....................                SendSMS.B5 =1;
05092:  MOVLB  7
05094:  BSF    xEB.4
....................                fprintf(CH2,"AT+CMGS=\"");
05096:  MOVLW  5A
05098:  MOVWF  FF6
0509A:  MOVLW  06
0509C:  MOVWF  FF7
0509E:  MOVLB  0
050A0:  CALL   1F0C
....................                fprintf(CH2,sms_phonenumber);
050A4:  MOVLW  06
050A6:  MOVWF  FEA
050A8:  MOVLW  86
050AA:  MOVWF  FE9
050AC:  CALL   4482
....................                
....................                fprintf(CH2,"\"");
050B0:  MOVLW  22
050B2:  MOVLB  8
050B4:  MOVWF  x7F
050B6:  MOVLB  0
050B8:  CALL   1EC6
....................                putc('\n',CH2);
050BC:  MOVLW  0A
050BE:  MOVLB  8
050C0:  MOVWF  x7F
050C2:  MOVLB  0
050C4:  CALL   1EC6
....................                delay_ms(50);
050C8:  MOVLW  32
050CA:  MOVLB  8
050CC:  MOVWF  x7E
050CE:  MOVLB  0
050D0:  CALL   074A
....................               
....................               fprintf(CH2,SMS_Massage5);
050D4:  MOVLW  07
050D6:  MOVWF  FEA
050D8:  MOVLW  39
050DA:  MOVWF  FE9
050DC:  CALL   4482
....................               putc('\n',CH2);
050E0:  MOVLW  0A
050E2:  MOVLB  8
050E4:  MOVWF  x7F
050E6:  MOVLB  0
050E8:  CALL   1EC6
....................              putc(26,CH2);
050EC:  MOVLW  1A
050EE:  MOVLB  8
050F0:  MOVWF  x7F
050F2:  MOVLB  0
050F4:  CALL   1EC6
050F8:  MOVLB  7
....................             }
.................... 
....................       }
050FA:  BRA    5102
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
050FC:  BTFSS  xE0.4
050FE:  BRA    5102
05100:  BCF    xE4.4
....................    }
05102:  BRA    51C6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
05104:  MOVLW  00
05106:  BTFSC  xDD.4
05108:  MOVLW  01
0510A:  MOVLB  8
0510C:  MOVWF  x7E
0510E:  MOVLW  00
05110:  MOVLB  7
05112:  BTFSC  xDF.4
05114:  MOVLW  01
05116:  MOVLB  8
05118:  XORWF  x7E,W
0511A:  SUBLW  01
0511C:  BNZ   51C0
....................       {
....................          Output.B5 = 0;
0511E:  MOVLB  7
05120:  BCF    xDE.4
....................          // SMS Sending   
....................          if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05122:  BTFSC  xEB.4
05124:  BRA    51BC
05126:  BTFSC  30.1
05128:  BRA    51BC
0512A:  BTFSC  xE4.4
0512C:  BRA    51BC
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0512E:  MOVLW  64
05130:  MOVWF  FF6
05132:  MOVLW  06
05134:  MOVWF  FF7
05136:  MOVLB  0
05138:  CALL   1F0C
....................             putc('\n',CH2);
0513C:  MOVLW  0A
0513E:  MOVLB  8
05140:  MOVWF  x7F
05142:  MOVLB  0
05144:  CALL   1EC6
....................             delay_ms(10);
05148:  MOVLW  0A
0514A:  MOVLB  8
0514C:  MOVWF  x7E
0514E:  MOVLB  0
05150:  CALL   074A
....................             
....................             SendSMS.B5 =1;
05154:  MOVLB  7
05156:  BSF    xEB.4
....................             fprintf(CH2,"AT+CMGS=\"");
05158:  MOVLW  6E
0515A:  MOVWF  FF6
0515C:  MOVLW  06
0515E:  MOVWF  FF7
05160:  MOVLB  0
05162:  CALL   1F0C
....................             fprintf(CH2,sms_phonenumber);
05166:  MOVLW  06
05168:  MOVWF  FEA
0516A:  MOVLW  86
0516C:  MOVWF  FE9
0516E:  CALL   4482
....................             
....................             fprintf(CH2,"\"");
05172:  MOVLW  22
05174:  MOVLB  8
05176:  MOVWF  x7F
05178:  MOVLB  0
0517A:  CALL   1EC6
....................             putc('\n',CH2);
0517E:  MOVLW  0A
05180:  MOVLB  8
05182:  MOVWF  x7F
05184:  MOVLB  0
05186:  CALL   1EC6
....................             delay_ms(50);
0518A:  MOVLW  32
0518C:  MOVLB  8
0518E:  MOVWF  x7E
05190:  MOVLB  0
05192:  CALL   074A
....................            
....................            fprintf(CH2,SMS_Massage5);  
05196:  MOVLW  07
05198:  MOVWF  FEA
0519A:  MOVLW  39
0519C:  MOVWF  FE9
0519E:  CALL   4482
....................            putc('\n',CH2);
051A2:  MOVLW  0A
051A4:  MOVLB  8
051A6:  MOVWF  x7F
051A8:  MOVLB  0
051AA:  CALL   1EC6
....................           putc(26,CH2);
051AE:  MOVLW  1A
051B0:  MOVLB  8
051B2:  MOVWF  x7F
051B4:  MOVLB  0
051B6:  CALL   1EC6
051BA:  MOVLB  7
....................          }
....................       }
051BC:  BRA    51C6
051BE:  MOVLB  8
....................       else
....................       {
....................          Output.B5 = 1;
051C0:  MOVLB  7
051C2:  BSF    xDE.4
....................          SendSMS.B5 =0;
051C4:  BCF    xEB.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
051C6:  BTFSS  xE3.5
051C8:  BRA    52E0
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
051CA:  MOVLW  00
051CC:  BTFSC  xDD.5
051CE:  MOVLW  01
051D0:  MOVLB  8
051D2:  MOVWF  x7E
051D4:  MOVLW  00
051D6:  MOVLB  7
051D8:  BTFSC  xDF.5
051DA:  MOVLW  01
051DC:  MOVLB  8
051DE:  XORWF  x7E,W
051E0:  SUBLW  01
051E2:  BNZ   51EA
051E4:  MOVLB  7
051E6:  BTFSC  xE0.5
051E8:  BRA    51F0
051EA:  MOVLB  7
051EC:  BTFSS  xE5.5
051EE:  BRA    52D8
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
051F0:  BTFSC  xE4.5
051F2:  BRA    523C
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
051F4:  BTFSC  xE5.5
051F6:  BRA    5210
051F8:  MOVLB  0
051FA:  MOVF   x6A,W
051FC:  SUBLW  0F
051FE:  BTFSC  FD8.2
05200:  BRA    5206
05202:  MOVLB  7
05204:  BRA    5210
....................             {
....................                TimeBase1s = 100 ;            //reload again
05206:  MOVLW  64
05208:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0520A:  MOVFF  6B,1D
0520E:  MOVLB  7
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
05210:  BSF    xE5.5
....................             if(FlashingFlag == 0)
05212:  BTFSC  1A.1
05214:  BRA    521A
....................             {
....................                Output.B6 = 0;           //Flash output1
05216:  BCF    xDE.5
....................             }
05218:  BRA    521C
....................             else
....................             {
....................                Output.B6 = 1;
0521A:  BSF    xDE.5
....................             }
.................... 
....................             if (~AutoTestFlag)
0521C:  BTFSC  1A.4
0521E:  BRA    523C
....................             {
....................                
....................                if(OutputBoth.B6 == 0)                  //Both output
05220:  BTFSC  xE2.5
05222:  BRA    522E
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05224:  BCF    F89.4
05226:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05228:  BCF    F89.3
0522A:  BCF    F92.3
....................                }
0522C:  BRA    523C
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,0);     //Buzzer
0522E:  BTFSS  xE1.5
05230:  BRA    5238
05232:  BCF    F89.4
05234:  BCF    F92.4
05236:  BRA    523C
....................                   else output_bit(Pbell,0);                          //Bell
05238:  BCF    F89.3
0523A:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0523C:  BTFSC  xEB.5
0523E:  BRA    52D6
05240:  BTFSC  30.1
05242:  BRA    52D6
05244:  BTFSC  xE4.5
05246:  BRA    52D6
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05248:  MOVLW  78
0524A:  MOVWF  FF6
0524C:  MOVLW  06
0524E:  MOVWF  FF7
05250:  MOVLB  0
05252:  CALL   1F0C
....................                putc('\n',CH2);
05256:  MOVLW  0A
05258:  MOVLB  8
0525A:  MOVWF  x7F
0525C:  MOVLB  0
0525E:  CALL   1EC6
....................                delay_ms(10);
05262:  MOVLW  0A
05264:  MOVLB  8
05266:  MOVWF  x7E
05268:  MOVLB  0
0526A:  CALL   074A
....................                
....................                SendSMS.B6 =1;
0526E:  MOVLB  7
05270:  BSF    xEB.5
....................                fprintf(CH2,"AT+CMGS=\"");
05272:  MOVLW  82
05274:  MOVWF  FF6
05276:  MOVLW  06
05278:  MOVWF  FF7
0527A:  MOVLB  0
0527C:  CALL   1F0C
....................                fprintf(CH2,sms_phonenumber);
05280:  MOVLW  06
05282:  MOVWF  FEA
05284:  MOVLW  86
05286:  MOVWF  FE9
05288:  CALL   4482
....................                
....................                fprintf(CH2,"\"");
0528C:  MOVLW  22
0528E:  MOVLB  8
05290:  MOVWF  x7F
05292:  MOVLB  0
05294:  CALL   1EC6
....................                putc('\n',CH2);
05298:  MOVLW  0A
0529A:  MOVLB  8
0529C:  MOVWF  x7F
0529E:  MOVLB  0
052A0:  CALL   1EC6
....................                delay_ms(50);
052A4:  MOVLW  32
052A6:  MOVLB  8
052A8:  MOVWF  x7E
052AA:  MOVLB  0
052AC:  CALL   074A
....................               
....................               fprintf(CH2,SMS_Massage6);
052B0:  MOVLW  07
052B2:  MOVWF  FEA
052B4:  MOVLW  62
052B6:  MOVWF  FE9
052B8:  CALL   4482
....................               putc('\n',CH2);
052BC:  MOVLW  0A
052BE:  MOVLB  8
052C0:  MOVWF  x7F
052C2:  MOVLB  0
052C4:  CALL   1EC6
....................              putc(26,CH2);
052C8:  MOVLW  1A
052CA:  MOVLB  8
052CC:  MOVWF  x7F
052CE:  MOVLB  0
052D0:  CALL   1EC6
052D4:  MOVLB  7
....................             }
.................... 
....................       }
052D6:  BRA    52DE
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
052D8:  BTFSS  xE0.5
052DA:  BRA    52DE
052DC:  BCF    xE4.5
....................    }
052DE:  BRA    53A2
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
052E0:  MOVLW  00
052E2:  BTFSC  xDD.5
052E4:  MOVLW  01
052E6:  MOVLB  8
052E8:  MOVWF  x7E
052EA:  MOVLW  00
052EC:  MOVLB  7
052EE:  BTFSC  xDF.5
052F0:  MOVLW  01
052F2:  MOVLB  8
052F4:  XORWF  x7E,W
052F6:  SUBLW  01
052F8:  BNZ   539C
....................       {
....................          Output.B6 = 0;
052FA:  MOVLB  7
052FC:  BCF    xDE.5
....................          // SMS Sending   
....................          if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
052FE:  BTFSC  xEB.5
05300:  BRA    5398
05302:  BTFSC  30.1
05304:  BRA    5398
05306:  BTFSC  xE4.5
05308:  BRA    5398
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0530A:  MOVLW  8C
0530C:  MOVWF  FF6
0530E:  MOVLW  06
05310:  MOVWF  FF7
05312:  MOVLB  0
05314:  CALL   1F0C
....................             putc('\n',CH2);
05318:  MOVLW  0A
0531A:  MOVLB  8
0531C:  MOVWF  x7F
0531E:  MOVLB  0
05320:  CALL   1EC6
....................             delay_ms(10);
05324:  MOVLW  0A
05326:  MOVLB  8
05328:  MOVWF  x7E
0532A:  MOVLB  0
0532C:  CALL   074A
....................             
....................             SendSMS.B6 =1;
05330:  MOVLB  7
05332:  BSF    xEB.5
....................             fprintf(CH2,"AT+CMGS=\"");
05334:  MOVLW  96
05336:  MOVWF  FF6
05338:  MOVLW  06
0533A:  MOVWF  FF7
0533C:  MOVLB  0
0533E:  CALL   1F0C
....................             fprintf(CH2,sms_phonenumber);
05342:  MOVLW  06
05344:  MOVWF  FEA
05346:  MOVLW  86
05348:  MOVWF  FE9
0534A:  CALL   4482
....................             
....................             fprintf(CH2,"\"");
0534E:  MOVLW  22
05350:  MOVLB  8
05352:  MOVWF  x7F
05354:  MOVLB  0
05356:  CALL   1EC6
....................             putc('\n',CH2);
0535A:  MOVLW  0A
0535C:  MOVLB  8
0535E:  MOVWF  x7F
05360:  MOVLB  0
05362:  CALL   1EC6
....................             delay_ms(50);
05366:  MOVLW  32
05368:  MOVLB  8
0536A:  MOVWF  x7E
0536C:  MOVLB  0
0536E:  CALL   074A
....................            
....................            fprintf(CH2,SMS_Massage6);  
05372:  MOVLW  07
05374:  MOVWF  FEA
05376:  MOVLW  62
05378:  MOVWF  FE9
0537A:  CALL   4482
....................            putc('\n',CH2);
0537E:  MOVLW  0A
05380:  MOVLB  8
05382:  MOVWF  x7F
05384:  MOVLB  0
05386:  CALL   1EC6
....................           putc(26,CH2);
0538A:  MOVLW  1A
0538C:  MOVLB  8
0538E:  MOVWF  x7F
05390:  MOVLB  0
05392:  CALL   1EC6
05396:  MOVLB  7
....................          }
....................       }
05398:  BRA    53A2
0539A:  MOVLB  8
....................       else
....................       {
....................          Output.B6 = 1;
0539C:  MOVLB  7
0539E:  BSF    xDE.5
....................          SendSMS.B6 =0;
053A0:  BCF    xEB.5
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
053A2:  BTFSS  xE3.6
053A4:  BRA    54BC
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
053A6:  MOVLW  00
053A8:  BTFSC  xDD.6
053AA:  MOVLW  01
053AC:  MOVLB  8
053AE:  MOVWF  x7E
053B0:  MOVLW  00
053B2:  MOVLB  7
053B4:  BTFSC  xDF.6
053B6:  MOVLW  01
053B8:  MOVLB  8
053BA:  XORWF  x7E,W
053BC:  SUBLW  01
053BE:  BNZ   53C6
053C0:  MOVLB  7
053C2:  BTFSC  xE0.6
053C4:  BRA    53CC
053C6:  MOVLB  7
053C8:  BTFSS  xE5.6
053CA:  BRA    54B4
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
053CC:  BTFSC  xE4.6
053CE:  BRA    5418
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
053D0:  BTFSC  xE5.6
053D2:  BRA    53EC
053D4:  MOVLB  0
053D6:  MOVF   x6A,W
053D8:  SUBLW  0F
053DA:  BTFSC  FD8.2
053DC:  BRA    53E2
053DE:  MOVLB  7
053E0:  BRA    53EC
....................             {
....................                TimeBase1s = 100 ;            //reload again
053E2:  MOVLW  64
053E4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
053E6:  MOVFF  6B,1D
053EA:  MOVLB  7
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
053EC:  BSF    xE5.6
....................             if(FlashingFlag == 0)
053EE:  BTFSC  1A.1
053F0:  BRA    53F6
....................             {
....................                Output.B7 = 0;           //Flash output1
053F2:  BCF    xDE.6
....................             }
053F4:  BRA    53F8
....................             else
....................             {
....................                Output.B7 = 1;
053F6:  BSF    xDE.6
....................             }
.................... 
....................             if (~AutoTestFlag)
053F8:  BTFSC  1A.4
053FA:  BRA    5418
....................             {
....................                
....................                if(OutputBoth.B7 == 0)                  //Both output
053FC:  BTFSC  xE2.6
053FE:  BRA    540A
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05400:  BCF    F89.4
05402:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05404:  BCF    F89.3
05406:  BCF    F92.3
....................                }
05408:  BRA    5418
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,0);     //Buzzer
0540A:  BTFSS  xE1.6
0540C:  BRA    5414
0540E:  BCF    F89.4
05410:  BCF    F92.4
05412:  BRA    5418
....................                   else output_bit(Pbell,0);                          //Bell
05414:  BCF    F89.3
05416:  BCF    F92.3
....................                }
....................                
....................             }
....................           }
....................           
....................           // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
05418:  BTFSC  xEB.6
0541A:  BRA    54B2
0541C:  BTFSC  30.1
0541E:  BRA    54B2
05420:  BTFSC  xE4.6
05422:  BRA    54B2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05424:  MOVLW  A0
05426:  MOVWF  FF6
05428:  MOVLW  06
0542A:  MOVWF  FF7
0542C:  MOVLB  0
0542E:  CALL   1F0C
....................                putc('\n',CH2);
05432:  MOVLW  0A
05434:  MOVLB  8
05436:  MOVWF  x7F
05438:  MOVLB  0
0543A:  CALL   1EC6
....................                delay_ms(10);
0543E:  MOVLW  0A
05440:  MOVLB  8
05442:  MOVWF  x7E
05444:  MOVLB  0
05446:  CALL   074A
....................                
....................                SendSMS.B7 =1;
0544A:  MOVLB  7
0544C:  BSF    xEB.6
....................                fprintf(CH2,"AT+CMGS=\"");
0544E:  MOVLW  AA
05450:  MOVWF  FF6
05452:  MOVLW  06
05454:  MOVWF  FF7
05456:  MOVLB  0
05458:  CALL   1F0C
....................                fprintf(CH2,sms_phonenumber);
0545C:  MOVLW  06
0545E:  MOVWF  FEA
05460:  MOVLW  86
05462:  MOVWF  FE9
05464:  CALL   4482
....................                
....................                fprintf(CH2,"\"");
05468:  MOVLW  22
0546A:  MOVLB  8
0546C:  MOVWF  x7F
0546E:  MOVLB  0
05470:  CALL   1EC6
....................                putc('\n',CH2);
05474:  MOVLW  0A
05476:  MOVLB  8
05478:  MOVWF  x7F
0547A:  MOVLB  0
0547C:  CALL   1EC6
....................                delay_ms(50);
05480:  MOVLW  32
05482:  MOVLB  8
05484:  MOVWF  x7E
05486:  MOVLB  0
05488:  CALL   074A
....................               
....................               fprintf(CH2,SMS_Massage7);  
0548C:  MOVLW  07
0548E:  MOVWF  FEA
05490:  MOVLW  8B
05492:  MOVWF  FE9
05494:  CALL   4482
....................               putc('\n',CH2);
05498:  MOVLW  0A
0549A:  MOVLB  8
0549C:  MOVWF  x7F
0549E:  MOVLB  0
054A0:  CALL   1EC6
....................              putc(26,CH2);
054A4:  MOVLW  1A
054A6:  MOVLB  8
054A8:  MOVWF  x7F
054AA:  MOVLB  0
054AC:  CALL   1EC6
054B0:  MOVLB  7
....................             }
.................... 
....................       }
054B2:  BRA    54BA
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
054B4:  BTFSS  xE0.6
054B6:  BRA    54BA
054B8:  BCF    xE4.6
....................    }
054BA:  BRA    557E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
054BC:  MOVLW  00
054BE:  BTFSC  xDD.6
054C0:  MOVLW  01
054C2:  MOVLB  8
054C4:  MOVWF  x7E
054C6:  MOVLW  00
054C8:  MOVLB  7
054CA:  BTFSC  xDF.6
054CC:  MOVLW  01
054CE:  MOVLB  8
054D0:  XORWF  x7E,W
054D2:  SUBLW  01
054D4:  BNZ   5578
....................       {
....................          Output.B7 = 0;
054D6:  MOVLB  7
054D8:  BCF    xDE.6
....................          // SMS Sending   
....................          if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
054DA:  BTFSC  xEB.6
054DC:  BRA    5574
054DE:  BTFSC  30.1
054E0:  BRA    5574
054E2:  BTFSC  xE4.6
054E4:  BRA    5574
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
054E6:  MOVLW  B4
054E8:  MOVWF  FF6
054EA:  MOVLW  06
054EC:  MOVWF  FF7
054EE:  MOVLB  0
054F0:  CALL   1F0C
....................             putc('\n',CH2);
054F4:  MOVLW  0A
054F6:  MOVLB  8
054F8:  MOVWF  x7F
054FA:  MOVLB  0
054FC:  CALL   1EC6
....................             delay_ms(10);
05500:  MOVLW  0A
05502:  MOVLB  8
05504:  MOVWF  x7E
05506:  MOVLB  0
05508:  CALL   074A
....................             
....................             SendSMS.B7 =1;
0550C:  MOVLB  7
0550E:  BSF    xEB.6
....................             fprintf(CH2,"AT+CMGS=\"");
05510:  MOVLW  BE
05512:  MOVWF  FF6
05514:  MOVLW  06
05516:  MOVWF  FF7
05518:  MOVLB  0
0551A:  CALL   1F0C
....................             fprintf(CH2,sms_phonenumber);
0551E:  MOVLW  06
05520:  MOVWF  FEA
05522:  MOVLW  86
05524:  MOVWF  FE9
05526:  CALL   4482
....................             
....................             fprintf(CH2,"\"");
0552A:  MOVLW  22
0552C:  MOVLB  8
0552E:  MOVWF  x7F
05530:  MOVLB  0
05532:  CALL   1EC6
....................             putc('\n',CH2);
05536:  MOVLW  0A
05538:  MOVLB  8
0553A:  MOVWF  x7F
0553C:  MOVLB  0
0553E:  CALL   1EC6
....................             delay_ms(50);
05542:  MOVLW  32
05544:  MOVLB  8
05546:  MOVWF  x7E
05548:  MOVLB  0
0554A:  CALL   074A
....................            
....................            fprintf(CH2,SMS_Massage7); 
0554E:  MOVLW  07
05550:  MOVWF  FEA
05552:  MOVLW  8B
05554:  MOVWF  FE9
05556:  CALL   4482
....................            putc('\n',CH2);
0555A:  MOVLW  0A
0555C:  MOVLB  8
0555E:  MOVWF  x7F
05560:  MOVLB  0
05562:  CALL   1EC6
....................           putc(26,CH2);
05566:  MOVLW  1A
05568:  MOVLB  8
0556A:  MOVWF  x7F
0556C:  MOVLB  0
0556E:  CALL   1EC6
05572:  MOVLB  7
....................          }
....................       }
05574:  BRA    557E
05576:  MOVLB  8
....................       else
....................       {
....................          Output.B7 = 1;
05578:  MOVLB  7
0557A:  BSF    xDE.6
....................          SendSMS.B7 =0;
0557C:  BCF    xEB.6
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
0557E:  BTFSS  xE3.7
05580:  BRA    5698
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
05582:  MOVLW  00
05584:  BTFSC  xDD.7
05586:  MOVLW  01
05588:  MOVLB  8
0558A:  MOVWF  x7E
0558C:  MOVLW  00
0558E:  MOVLB  7
05590:  BTFSC  xDF.7
05592:  MOVLW  01
05594:  MOVLB  8
05596:  XORWF  x7E,W
05598:  SUBLW  01
0559A:  BNZ   55A2
0559C:  MOVLB  7
0559E:  BTFSC  xE0.7
055A0:  BRA    55A8
055A2:  MOVLB  7
055A4:  BTFSS  xE5.7
055A6:  BRA    5690
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
055A8:  BTFSC  xE4.7
055AA:  BRA    55F4
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
055AC:  BTFSC  xE5.7
055AE:  BRA    55C8
055B0:  MOVLB  0
055B2:  MOVF   x6A,W
055B4:  SUBLW  0F
055B6:  BTFSC  FD8.2
055B8:  BRA    55BE
055BA:  MOVLB  7
055BC:  BRA    55C8
....................             {
....................                TimeBase1s = 100 ;            //reload again
055BE:  MOVLW  64
055C0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
055C2:  MOVFF  6B,1D
055C6:  MOVLB  7
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
055C8:  BSF    xE5.7
....................             if(FlashingFlag == 0)
055CA:  BTFSC  1A.1
055CC:  BRA    55D2
....................             {
....................                Output.B8 = 0;           //Flash output1
055CE:  BCF    xDE.7
....................             }
055D0:  BRA    55D4
....................             else
....................             {
....................                Output.B8 = 1;
055D2:  BSF    xDE.7
....................             }
.................... 
....................             if (~AutoTestFlag)
055D4:  BTFSC  1A.4
055D6:  BRA    55F4
....................             {
....................                
....................                if(OutputBoth.B8 == 0)                  //Both output
055D8:  BTFSC  xE2.7
055DA:  BRA    55E6
....................                {
....................                   output_bit(Pbuzzer,0);   //Buzzer
055DC:  BCF    F89.4
055DE:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
055E0:  BCF    F89.3
055E2:  BCF    F92.3
....................                }
055E4:  BRA    55F4
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,0);     //Buzzer
055E6:  BTFSS  xE1.7
055E8:  BRA    55F0
055EA:  BCF    F89.4
055EC:  BCF    F92.4
055EE:  BRA    55F4
....................                   else output_bit(Pbell,0);                          //Bell
055F0:  BCF    F89.3
055F2:  BCF    F92.3
....................                }
....................                
....................             }
....................        }
....................        
....................        // SMS Sending   
....................             if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
055F4:  BTFSC  xEB.7
055F6:  BRA    568E
055F8:  BTFSC  30.1
055FA:  BRA    568E
055FC:  BTFSC  xE4.7
055FE:  BRA    568E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05600:  MOVLW  C8
05602:  MOVWF  FF6
05604:  MOVLW  06
05606:  MOVWF  FF7
05608:  MOVLB  0
0560A:  CALL   1F0C
....................                putc('\n',CH2);
0560E:  MOVLW  0A
05610:  MOVLB  8
05612:  MOVWF  x7F
05614:  MOVLB  0
05616:  CALL   1EC6
....................                delay_ms(10);
0561A:  MOVLW  0A
0561C:  MOVLB  8
0561E:  MOVWF  x7E
05620:  MOVLB  0
05622:  CALL   074A
....................                
....................                SendSMS.B8 =1;
05626:  MOVLB  7
05628:  BSF    xEB.7
....................                fprintf(CH2,"AT+CMGS=\"");
0562A:  MOVLW  D2
0562C:  MOVWF  FF6
0562E:  MOVLW  06
05630:  MOVWF  FF7
05632:  MOVLB  0
05634:  CALL   1F0C
....................                fprintf(CH2,sms_phonenumber);
05638:  MOVLW  06
0563A:  MOVWF  FEA
0563C:  MOVLW  86
0563E:  MOVWF  FE9
05640:  CALL   4482
....................                
....................                fprintf(CH2,"\"");
05644:  MOVLW  22
05646:  MOVLB  8
05648:  MOVWF  x7F
0564A:  MOVLB  0
0564C:  CALL   1EC6
....................                putc('\n',CH2);
05650:  MOVLW  0A
05652:  MOVLB  8
05654:  MOVWF  x7F
05656:  MOVLB  0
05658:  CALL   1EC6
....................                delay_ms(50);
0565C:  MOVLW  32
0565E:  MOVLB  8
05660:  MOVWF  x7E
05662:  MOVLB  0
05664:  CALL   074A
....................               
....................               printf(SMS_Massage8);  
05668:  MOVLW  07
0566A:  MOVWF  FEA
0566C:  MOVLW  B4
0566E:  MOVWF  FE9
05670:  CALL   4482
....................               putc('\n',CH2);
05674:  MOVLW  0A
05676:  MOVLB  8
05678:  MOVWF  x7F
0567A:  MOVLB  0
0567C:  CALL   1EC6
....................              putc(26,CH2);
05680:  MOVLW  1A
05682:  MOVLB  8
05684:  MOVWF  x7F
05686:  MOVLB  0
05688:  CALL   1EC6
0568C:  MOVLB  7
....................             }
.................... 
....................       }
0568E:  BRA    5696
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
05690:  BTFSS  xE0.7
05692:  BRA    5696
05694:  BCF    xE4.7
....................    }
05696:  BRA    575A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
05698:  MOVLW  00
0569A:  BTFSC  xDD.7
0569C:  MOVLW  01
0569E:  MOVLB  8
056A0:  MOVWF  x7E
056A2:  MOVLW  00
056A4:  MOVLB  7
056A6:  BTFSC  xDF.7
056A8:  MOVLW  01
056AA:  MOVLB  8
056AC:  XORWF  x7E,W
056AE:  SUBLW  01
056B0:  BNZ   5754
....................       {
....................          Output.B8 = 0;
056B2:  MOVLB  7
056B4:  BCF    xDE.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
056B6:  BTFSC  xEB.7
056B8:  BRA    5750
056BA:  BTFSC  30.1
056BC:  BRA    5750
056BE:  BTFSC  xE4.7
056C0:  BRA    5750
....................          {
....................             printf("AT+CMGF=1"); 
056C2:  MOVLW  DC
056C4:  MOVWF  FF6
056C6:  MOVLW  06
056C8:  MOVWF  FF7
056CA:  MOVLB  0
056CC:  CALL   1F0C
....................             putc('\n',CH2);
056D0:  MOVLW  0A
056D2:  MOVLB  8
056D4:  MOVWF  x7F
056D6:  MOVLB  0
056D8:  CALL   1EC6
....................             delay_ms(10);
056DC:  MOVLW  0A
056DE:  MOVLB  8
056E0:  MOVWF  x7E
056E2:  MOVLB  0
056E4:  CALL   074A
....................             
....................             SendSMS.B8 =1;
056E8:  MOVLB  7
056EA:  BSF    xEB.7
....................             fprintf(CH2,"AT+CMGS=\"");
056EC:  MOVLW  E6
056EE:  MOVWF  FF6
056F0:  MOVLW  06
056F2:  MOVWF  FF7
056F4:  MOVLB  0
056F6:  CALL   1F0C
....................             fprintf(CH2,sms_phonenumber);
056FA:  MOVLW  06
056FC:  MOVWF  FEA
056FE:  MOVLW  86
05700:  MOVWF  FE9
05702:  CALL   4482
....................             
....................             fprintf(CH2,"\"");
05706:  MOVLW  22
05708:  MOVLB  8
0570A:  MOVWF  x7F
0570C:  MOVLB  0
0570E:  CALL   1EC6
....................             putc('\n',CH2);
05712:  MOVLW  0A
05714:  MOVLB  8
05716:  MOVWF  x7F
05718:  MOVLB  0
0571A:  CALL   1EC6
....................             delay_ms(50);
0571E:  MOVLW  32
05720:  MOVLB  8
05722:  MOVWF  x7E
05724:  MOVLB  0
05726:  CALL   074A
....................            
....................            fprintf(CH2,SMS_Massage8);  
0572A:  MOVLW  07
0572C:  MOVWF  FEA
0572E:  MOVLW  B4
05730:  MOVWF  FE9
05732:  CALL   4482
....................            putc('\n',CH2);
05736:  MOVLW  0A
05738:  MOVLB  8
0573A:  MOVWF  x7F
0573C:  MOVLB  0
0573E:  CALL   1EC6
....................           putc(26,CH2);
05742:  MOVLW  1A
05744:  MOVLB  8
05746:  MOVWF  x7F
05748:  MOVLB  0
0574A:  CALL   1EC6
0574E:  MOVLB  7
....................          }
....................       }
05750:  BRA    575A
05752:  MOVLB  8
....................       else
....................       {
....................          Output.B8 = 1;
05754:  MOVLB  7
05756:  BSF    xDE.7
....................          SendSMS.B8 =0;
05758:  BCF    xEB.7
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
0575A:  MOVLW  00
0575C:  BTFSC  xDD.0
0575E:  MOVLW  01
05760:  MOVLB  8
05762:  MOVWF  x7E
05764:  MOVLW  00
05766:  MOVLB  7
05768:  BTFSC  xDF.0
0576A:  MOVLW  01
0576C:  MOVLB  8
0576E:  XORWF  x7E,W
05770:  SUBLW  01
05772:  BNZ   577C
05774:  MOVLB  7
05776:  BTFSS  xE0.0
05778:  BRA    5782
0577A:  MOVLB  8
0577C:  BTFSS  1A.5
0577E:  BRA    5852
05780:  MOVLB  7
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
05782:  BTFSC  xE6.0
05784:  BRA    57A2
05786:  MOVLB  0
05788:  MOVF   x6A,W
0578A:  SUBLW  0F
0578C:  BTFSC  FD8.2
0578E:  BRA    5794
05790:  MOVLB  7
05792:  BRA    57A2
05794:  MOVLB  7
05796:  BTFSC  xE4.0
05798:  BRA    57A2
....................       {
....................             TimeBase1s = 100 ;            //reload again
0579A:  MOVLW  64
0579C:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0579E:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B1 = 1;
057A2:  BSF    xE6.0
....................       if(Ack.B1 == 0)
057A4:  BTFSC  xE4.0
057A6:  BRA    57D6
....................       {
....................          if(FlashingFlag == 0)
057A8:  BTFSC  1A.1
057AA:  BRA    57B0
....................             {
....................                Output.B1 = 0;           //Flash output1
057AC:  BCF    xDE.0
....................             }
057AE:  BRA    57B2
....................             else
....................             {
....................                Output.B1 = 1;
057B0:  BSF    xDE.0
....................             }
....................          if(~AutoTestFlag)
057B2:  BTFSC  1A.4
057B4:  BRA    57D6
....................          {
....................             if(AlarmIndicator.B1 == 1){
057B6:  BTFSS  xE3.0
057B8:  BRA    57D6
....................                 if(OutputBoth.B1 == 0)        //Both output
057BA:  BTFSC  xE2.0
057BC:  BRA    57C8
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
057BE:  BCF    F89.4
057C0:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
057C2:  BCF    F89.3
057C4:  BCF    F92.3
....................                 }
057C6:  BRA    57D6
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,0);     //Buzzer
057C8:  BTFSS  xE1.0
057CA:  BRA    57D2
057CC:  BCF    F89.4
057CE:  BCF    F92.4
057D0:  BRA    57D6
....................                   else output_bit(Pbell,0);                          //Bell
057D2:  BCF    F89.3
057D4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
057D6:  MOVLW  01
057D8:  MOVLB  8
057DA:  MOVWF  x71
....................       
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
057DC:  MOVLB  7
057DE:  BTFSC  xEB.0
057E0:  BRA    5850
057E2:  BTFSC  30.1
057E4:  BRA    5850
057E6:  BTFSC  xE4.0
057E8:  BRA    5850
....................       {
....................          SendSMS.B1 =1;
057EA:  BSF    xEB.0
....................          fprintf(CH2,"AT+CMGS=\"");
057EC:  MOVLW  F0
057EE:  MOVWF  FF6
057F0:  MOVLW  06
057F2:  MOVWF  FF7
057F4:  MOVLB  0
057F6:  CALL   1F0C
....................          fprintf(CH2,sms_phonenumber);
057FA:  MOVLW  06
057FC:  MOVWF  FEA
057FE:  MOVLW  86
05800:  MOVWF  FE9
05802:  CALL   4482
....................          
....................          fprintf(CH2,"\"");
05806:  MOVLW  22
05808:  MOVLB  8
0580A:  MOVWF  x7F
0580C:  MOVLB  0
0580E:  CALL   1EC6
....................          putc('\n',CH2);
05812:  MOVLW  0A
05814:  MOVLB  8
05816:  MOVWF  x7F
05818:  MOVLB  0
0581A:  CALL   1EC6
....................          delay_ms(50);
0581E:  MOVLW  32
05820:  MOVLB  8
05822:  MOVWF  x7E
05824:  MOVLB  0
05826:  CALL   074A
....................         
....................         fprintf(CH2,SMS_Massage1);   
0582A:  MOVLW  06
0582C:  MOVWF  FEA
0582E:  MOVLW  95
05830:  MOVWF  FE9
05832:  CALL   4482
....................         putc('\n',CH2);
05836:  MOVLW  0A
05838:  MOVLB  8
0583A:  MOVWF  x7F
0583C:  MOVLB  0
0583E:  CALL   1EC6
....................        putc(26,CH2);
05842:  MOVLW  1A
05844:  MOVLB  8
05846:  MOVWF  x7F
05848:  MOVLB  0
0584A:  CALL   1EC6
0584E:  MOVLB  7
....................       }
....................    }
05850:  BRA    58DC
....................    else if(FaultType.B1 == 0)
05852:  MOVLB  7
05854:  BTFSC  xE0.0
05856:  BRA    58DC
....................    {
....................       In2.B1 = 0;
05858:  BCF    xE6.0
....................       Ack.B1 = 0;
0585A:  BCF    xE4.0
....................       Output.B1 = 1;      //Off LED
0585C:  BSF    xDE.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
0585E:  BCF    xEB.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)      //If Buzzer or Both
05860:  BTFSC  xE1.0
05862:  BRA    5868
05864:  BTFSC  xE2.0
05866:  BRA    588A
05868:  MOVLB  8
0586A:  MOVF   x71,F
0586C:  BTFSC  FD8.2
0586E:  BRA    5874
05870:  MOVLB  7
05872:  BRA    588A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05874:  MOVLW  01
05876:  MOVWF  x7D
05878:  MOVLB  0
0587A:  CALL   44A8
0587E:  DECFSZ 01,W
05880:  BRA    5884
05882:  BRA    5888
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05884:  BSF    F89.4
05886:  BCF    F92.4
05888:  MOVLB  7
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)  //If Bell or Both
0588A:  BTFSS  xE1.0
0588C:  BRA    5892
0588E:  BTFSC  xE2.0
05890:  BRA    58B4
05892:  MOVLB  8
05894:  MOVF   x71,F
05896:  BTFSC  FD8.2
05898:  BRA    589E
0589A:  MOVLB  7
0589C:  BRA    58B4
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0589E:  MOVLW  02
058A0:  MOVWF  x7D
058A2:  MOVLB  0
058A4:  CALL   44A8
058A8:  DECFSZ 01,W
058AA:  BRA    58AE
058AC:  BRA    58B2
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
058AE:  BSF    F89.3
058B0:  BCF    F92.3
058B2:  MOVLB  7
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
058B4:  BTFSC  xE6.0
058B6:  BRA    58DC
058B8:  BTFSC  xE6.1
058BA:  BRA    58DC
058BC:  BTFSC  xE6.2
058BE:  BRA    58DC
058C0:  BTFSC  xE6.3
058C2:  BRA    58DC
058C4:  BTFSC  xE6.4
058C6:  BRA    58DC
058C8:  BTFSC  xE6.5
058CA:  BRA    58DC
058CC:  BTFSC  xE6.6
058CE:  BRA    58DC
058D0:  BTFSC  xE6.7
058D2:  BRA    58DC
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
058D4:  BSF    F89.3
058D6:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
058D8:  BSF    F89.4
058DA:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
058DC:  MOVLW  00
058DE:  BTFSC  xDD.1
058E0:  MOVLW  01
058E2:  MOVLB  8
058E4:  MOVWF  x7E
058E6:  MOVLW  00
058E8:  MOVLB  7
058EA:  BTFSC  xDF.1
058EC:  MOVLW  01
058EE:  MOVLB  8
058F0:  XORWF  x7E,W
058F2:  SUBLW  01
058F4:  BNZ   58FE
058F6:  MOVLB  7
058F8:  BTFSS  xE0.1
058FA:  BRA    5904
058FC:  MOVLB  8
058FE:  BTFSS  1A.5
05900:  BRA    59D4
05902:  MOVLB  7
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
05904:  BTFSC  xE6.1
05906:  BRA    5924
05908:  MOVLB  0
0590A:  MOVF   x6A,W
0590C:  SUBLW  0F
0590E:  BTFSC  FD8.2
05910:  BRA    5916
05912:  MOVLB  7
05914:  BRA    5924
05916:  MOVLB  7
05918:  BTFSC  xE4.1
0591A:  BRA    5924
....................       {
....................             TimeBase1s = 100 ;            //reload again
0591C:  MOVLW  64
0591E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05920:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B2 = 1;
05924:  BSF    xE6.1
....................       if(Ack.B2 == 0)
05926:  BTFSC  xE4.1
05928:  BRA    5958
....................       {
....................          if(FlashingFlag == 0)
0592A:  BTFSC  1A.1
0592C:  BRA    5932
....................             {
....................                Output.B2 = 0;           //Flash output1
0592E:  BCF    xDE.1
....................             }
05930:  BRA    5934
....................             else
....................             {
....................                Output.B2 = 1;
05932:  BSF    xDE.1
....................             }
....................          if (~AutoTestFlag)
05934:  BTFSC  1A.4
05936:  BRA    5958
....................          {
....................            if(AlarmIndicator.B2 == 1){
05938:  BTFSS  xE3.1
0593A:  BRA    5958
....................              if(OutputBoth.B2 == 0)        //Both output
0593C:  BTFSC  xE2.1
0593E:  BRA    594A
....................              {
....................                output_bit(Pbuzzer,0);   //Buzzer
05940:  BCF    F89.4
05942:  BCF    F92.4
....................                output_bit(Pbell,0);     //Bell
05944:  BCF    F89.3
05946:  BCF    F92.3
....................              }
05948:  BRA    5958
....................              else
....................              {
....................                if(OutputType.B2 == 1) output_bit(Pbuzzer,0);     //Buzzer
0594A:  BTFSS  xE1.1
0594C:  BRA    5954
0594E:  BCF    F89.4
05950:  BCF    F92.4
05952:  BRA    5958
....................                else output_bit(Pbell,0);                          //Bell
05954:  BCF    F89.3
05956:  BCF    F92.3
....................              }
....................            }
....................          }
....................        }
....................       inputflag =1;
05958:  MOVLW  01
0595A:  MOVLB  8
0595C:  MOVWF  x71
....................       
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
0595E:  MOVLB  7
05960:  BTFSC  xEB.1
05962:  BRA    59D2
05964:  BTFSC  30.1
05966:  BRA    59D2
05968:  BTFSC  xE4.1
0596A:  BRA    59D2
....................       {
....................          SendSMS.B2 =1;
0596C:  BSF    xEB.1
....................          fprintf(CH2,"AT+CMGS=\"");
0596E:  MOVLW  FA
05970:  MOVWF  FF6
05972:  MOVLW  06
05974:  MOVWF  FF7
05976:  MOVLB  0
05978:  CALL   1F0C
....................          fprintf(CH2,sms_phonenumber);
0597C:  MOVLW  06
0597E:  MOVWF  FEA
05980:  MOVLW  86
05982:  MOVWF  FE9
05984:  CALL   4482
....................          
....................          fprintf(CH2,"\"");
05988:  MOVLW  22
0598A:  MOVLB  8
0598C:  MOVWF  x7F
0598E:  MOVLB  0
05990:  CALL   1EC6
....................          putc('\n',CH2);
05994:  MOVLW  0A
05996:  MOVLB  8
05998:  MOVWF  x7F
0599A:  MOVLB  0
0599C:  CALL   1EC6
....................          delay_ms(50);
059A0:  MOVLW  32
059A2:  MOVLB  8
059A4:  MOVWF  x7E
059A6:  MOVLB  0
059A8:  CALL   074A
....................         
....................         fprintf(CH2,SMS_Massage2); 
059AC:  MOVLW  06
059AE:  MOVWF  FEA
059B0:  MOVLW  BE
059B2:  MOVWF  FE9
059B4:  CALL   4482
....................         putc('\n',CH2);
059B8:  MOVLW  0A
059BA:  MOVLB  8
059BC:  MOVWF  x7F
059BE:  MOVLB  0
059C0:  CALL   1EC6
....................        putc(26,CH2);
059C4:  MOVLW  1A
059C6:  MOVLB  8
059C8:  MOVWF  x7F
059CA:  MOVLB  0
059CC:  CALL   1EC6
059D0:  MOVLB  7
....................       }
....................    }
059D2:  BRA    5A5E
....................    else if(FaultType.B2 == 0)
059D4:  MOVLB  7
059D6:  BTFSC  xE0.1
059D8:  BRA    5A5E
....................    {
....................       In2.B2 = 0x00;
059DA:  BCF    xE6.1
....................       Ack.B2 = 0;
059DC:  BCF    xE4.1
....................       Output.B2 = 1;      //Off LED
059DE:  BSF    xDE.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
059E0:  BCF    xEB.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)      //If Buzzer or Both
059E2:  BTFSC  xE1.1
059E4:  BRA    59EA
059E6:  BTFSC  xE2.1
059E8:  BRA    5A0C
059EA:  MOVLB  8
059EC:  MOVF   x71,F
059EE:  BTFSC  FD8.2
059F0:  BRA    59F6
059F2:  MOVLB  7
059F4:  BRA    5A0C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
059F6:  MOVLW  01
059F8:  MOVWF  x7D
059FA:  MOVLB  0
059FC:  CALL   44A8
05A00:  DECFSZ 01,W
05A02:  BRA    5A06
05A04:  BRA    5A0A
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05A06:  BSF    F89.4
05A08:  BCF    F92.4
05A0A:  MOVLB  7
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)  //If Bell or Both
05A0C:  BTFSS  xE1.1
05A0E:  BRA    5A14
05A10:  BTFSC  xE2.1
05A12:  BRA    5A36
05A14:  MOVLB  8
05A16:  MOVF   x71,F
05A18:  BTFSC  FD8.2
05A1A:  BRA    5A20
05A1C:  MOVLB  7
05A1E:  BRA    5A36
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05A20:  MOVLW  02
05A22:  MOVWF  x7D
05A24:  MOVLB  0
05A26:  CALL   44A8
05A2A:  DECFSZ 01,W
05A2C:  BRA    5A30
05A2E:  BRA    5A34
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05A30:  BSF    F89.3
05A32:  BCF    F92.3
05A34:  MOVLB  7
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05A36:  BTFSC  xE6.0
05A38:  BRA    5A5E
05A3A:  BTFSC  xE6.1
05A3C:  BRA    5A5E
05A3E:  BTFSC  xE6.2
05A40:  BRA    5A5E
05A42:  BTFSC  xE6.3
05A44:  BRA    5A5E
05A46:  BTFSC  xE6.4
05A48:  BRA    5A5E
05A4A:  BTFSC  xE6.5
05A4C:  BRA    5A5E
05A4E:  BTFSC  xE6.6
05A50:  BRA    5A5E
05A52:  BTFSC  xE6.7
05A54:  BRA    5A5E
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05A56:  BSF    F89.3
05A58:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05A5A:  BSF    F89.4
05A5C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
05A5E:  MOVLW  00
05A60:  BTFSC  xDD.2
05A62:  MOVLW  01
05A64:  MOVLB  8
05A66:  MOVWF  x7E
05A68:  MOVLW  00
05A6A:  MOVLB  7
05A6C:  BTFSC  xDF.2
05A6E:  MOVLW  01
05A70:  MOVLB  8
05A72:  XORWF  x7E,W
05A74:  SUBLW  01
05A76:  BNZ   5A80
05A78:  MOVLB  7
05A7A:  BTFSS  xE0.2
05A7C:  BRA    5A86
05A7E:  MOVLB  8
05A80:  BTFSS  1A.5
05A82:  BRA    5B56
05A84:  MOVLB  7
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
05A86:  BTFSC  xE6.2
05A88:  BRA    5AA6
05A8A:  MOVLB  0
05A8C:  MOVF   x6A,W
05A8E:  SUBLW  0F
05A90:  BTFSC  FD8.2
05A92:  BRA    5A98
05A94:  MOVLB  7
05A96:  BRA    5AA6
05A98:  MOVLB  7
05A9A:  BTFSC  xE4.2
05A9C:  BRA    5AA6
....................       {
....................             TimeBase1s = 100 ;            //reload again
05A9E:  MOVLW  64
05AA0:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05AA2:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B3 = 1;
05AA6:  BSF    xE6.2
....................       if(Ack.B3 == 0)
05AA8:  BTFSC  xE4.2
05AAA:  BRA    5ADA
....................       {
....................          if(FlashingFlag == 0)
05AAC:  BTFSC  1A.1
05AAE:  BRA    5AB4
....................             {
....................                Output.B3 = 0;           //Flash output1
05AB0:  BCF    xDE.2
....................             }
05AB2:  BRA    5AB6
....................             else
....................             {
....................                Output.B3 = 1;
05AB4:  BSF    xDE.2
....................             }
....................          if (~AutoTestFlag)
05AB6:  BTFSC  1A.4
05AB8:  BRA    5ADA
....................          {
....................             if(AlarmIndicator.B3 == 1){
05ABA:  BTFSS  xE3.2
05ABC:  BRA    5ADA
....................                 if(OutputBoth.B3 == 0)        //Both output
05ABE:  BTFSC  xE2.2
05AC0:  BRA    5ACC
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05AC2:  BCF    F89.4
05AC4:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05AC6:  BCF    F89.3
05AC8:  BCF    F92.3
....................                 }
05ACA:  BRA    5ADA
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,0);     //Buzzer
05ACC:  BTFSS  xE1.2
05ACE:  BRA    5AD6
05AD0:  BCF    F89.4
05AD2:  BCF    F92.4
05AD4:  BRA    5ADA
....................                   else output_bit(Pbell,0);                          //Bell
05AD6:  BCF    F89.3
05AD8:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05ADA:  MOVLW  01
05ADC:  MOVLB  8
05ADE:  MOVWF  x71
....................       
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
05AE0:  MOVLB  7
05AE2:  BTFSC  xEB.2
05AE4:  BRA    5B54
05AE6:  BTFSC  30.1
05AE8:  BRA    5B54
05AEA:  BTFSC  xE4.2
05AEC:  BRA    5B54
....................       {
....................          SendSMS.B3 =1;
05AEE:  BSF    xEB.2
....................          fprintf(CH2,"AT+CMGS=\"");
05AF0:  MOVLW  04
05AF2:  MOVWF  FF6
05AF4:  MOVLW  07
05AF6:  MOVWF  FF7
05AF8:  MOVLB  0
05AFA:  CALL   1F0C
....................          fprintf(CH2,sms_phonenumber);
05AFE:  MOVLW  06
05B00:  MOVWF  FEA
05B02:  MOVLW  86
05B04:  MOVWF  FE9
05B06:  CALL   4482
....................          
....................          fprintf(CH2,"\"");
05B0A:  MOVLW  22
05B0C:  MOVLB  8
05B0E:  MOVWF  x7F
05B10:  MOVLB  0
05B12:  CALL   1EC6
....................          putc('\n',CH2);
05B16:  MOVLW  0A
05B18:  MOVLB  8
05B1A:  MOVWF  x7F
05B1C:  MOVLB  0
05B1E:  CALL   1EC6
....................          delay_ms(50);
05B22:  MOVLW  32
05B24:  MOVLB  8
05B26:  MOVWF  x7E
05B28:  MOVLB  0
05B2A:  CALL   074A
....................         
....................         fprintf(CH2,SMS_Massage3); 
05B2E:  MOVLW  06
05B30:  MOVWF  FEA
05B32:  MOVLW  E7
05B34:  MOVWF  FE9
05B36:  CALL   4482
....................         putc('\n',CH2);
05B3A:  MOVLW  0A
05B3C:  MOVLB  8
05B3E:  MOVWF  x7F
05B40:  MOVLB  0
05B42:  CALL   1EC6
....................        putc(26,CH2);
05B46:  MOVLW  1A
05B48:  MOVLB  8
05B4A:  MOVWF  x7F
05B4C:  MOVLB  0
05B4E:  CALL   1EC6
05B52:  MOVLB  7
....................       }
....................    }
05B54:  BRA    5BE0
....................    else if(FaultType.B3 == 0)
05B56:  MOVLB  7
05B58:  BTFSC  xE0.2
05B5A:  BRA    5BE0
....................    {
....................       In2.B3 = 0x00;
05B5C:  BCF    xE6.2
....................       Ack.B3 = 0;
05B5E:  BCF    xE4.2
....................       Output.B3 = 1;      //Off LED
05B60:  BSF    xDE.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
05B62:  BCF    xEB.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)      //If Buzzer or Both
05B64:  BTFSC  xE1.2
05B66:  BRA    5B6C
05B68:  BTFSC  xE2.2
05B6A:  BRA    5B8E
05B6C:  MOVLB  8
05B6E:  MOVF   x71,F
05B70:  BTFSC  FD8.2
05B72:  BRA    5B78
05B74:  MOVLB  7
05B76:  BRA    5B8E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05B78:  MOVLW  01
05B7A:  MOVWF  x7D
05B7C:  MOVLB  0
05B7E:  CALL   44A8
05B82:  DECFSZ 01,W
05B84:  BRA    5B88
05B86:  BRA    5B8C
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05B88:  BSF    F89.4
05B8A:  BCF    F92.4
05B8C:  MOVLB  7
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)  //If Bell or Both
05B8E:  BTFSS  xE1.2
05B90:  BRA    5B96
05B92:  BTFSC  xE2.2
05B94:  BRA    5BB8
05B96:  MOVLB  8
05B98:  MOVF   x71,F
05B9A:  BTFSC  FD8.2
05B9C:  BRA    5BA2
05B9E:  MOVLB  7
05BA0:  BRA    5BB8
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05BA2:  MOVLW  02
05BA4:  MOVWF  x7D
05BA6:  MOVLB  0
05BA8:  CALL   44A8
05BAC:  DECFSZ 01,W
05BAE:  BRA    5BB2
05BB0:  BRA    5BB6
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05BB2:  BSF    F89.3
05BB4:  BCF    F92.3
05BB6:  MOVLB  7
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 )
05BB8:  BTFSC  xE6.0
05BBA:  BRA    5BE0
05BBC:  BTFSC  xE6.1
05BBE:  BRA    5BE0
05BC0:  BTFSC  xE6.2
05BC2:  BRA    5BE0
05BC4:  BTFSC  xE6.3
05BC6:  BRA    5BE0
05BC8:  BTFSC  xE6.4
05BCA:  BRA    5BE0
05BCC:  BTFSC  xE6.5
05BCE:  BRA    5BE0
05BD0:  BTFSC  xE6.6
05BD2:  BRA    5BE0
05BD4:  BTFSC  xE6.7
05BD6:  BRA    5BE0
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05BD8:  BSF    F89.3
05BDA:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05BDC:  BSF    F89.4
05BDE:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05BE0:  MOVLW  00
05BE2:  BTFSC  xDD.3
05BE4:  MOVLW  01
05BE6:  MOVLB  8
05BE8:  MOVWF  x7E
05BEA:  MOVLW  00
05BEC:  MOVLB  7
05BEE:  BTFSC  xDF.3
05BF0:  MOVLW  01
05BF2:  MOVLB  8
05BF4:  XORWF  x7E,W
05BF6:  SUBLW  01
05BF8:  BNZ   5C02
05BFA:  MOVLB  7
05BFC:  BTFSS  xE0.3
05BFE:  BRA    5C08
05C00:  MOVLB  8
05C02:  BTFSS  1A.5
05C04:  BRA    5CD8
05C06:  MOVLB  7
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
05C08:  BTFSC  xE6.3
05C0A:  BRA    5C28
05C0C:  MOVLB  0
05C0E:  MOVF   x6A,W
05C10:  SUBLW  0F
05C12:  BTFSC  FD8.2
05C14:  BRA    5C1A
05C16:  MOVLB  7
05C18:  BRA    5C28
05C1A:  MOVLB  7
05C1C:  BTFSC  xE4.3
05C1E:  BRA    5C28
....................       {
....................             TimeBase1s = 100 ;            //reload again
05C20:  MOVLW  64
05C22:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05C24:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B4 = 1;
05C28:  BSF    xE6.3
....................       if(Ack.B4 == 0)
05C2A:  BTFSC  xE4.3
05C2C:  BRA    5C5C
....................       {
....................          if(FlashingFlag == 0)
05C2E:  BTFSC  1A.1
05C30:  BRA    5C36
....................             {
....................                Output.B4 = 0;           //Flash output1
05C32:  BCF    xDE.3
....................             }
05C34:  BRA    5C38
....................             else
....................             {
....................                Output.B4 = 1;
05C36:  BSF    xDE.3
....................             }
....................          if (~AutoTestFlag)
05C38:  BTFSC  1A.4
05C3A:  BRA    5C5C
....................          {
....................             if(AlarmIndicator.B4 == 1){
05C3C:  BTFSS  xE3.3
05C3E:  BRA    5C5C
....................                 if(OutputBoth.B4 == 0)        //Both output
05C40:  BTFSC  xE2.3
05C42:  BRA    5C4E
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05C44:  BCF    F89.4
05C46:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05C48:  BCF    F89.3
05C4A:  BCF    F92.3
....................                 }
05C4C:  BRA    5C5C
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,0);     //Buzzer
05C4E:  BTFSS  xE1.3
05C50:  BRA    5C58
05C52:  BCF    F89.4
05C54:  BCF    F92.4
05C56:  BRA    5C5C
....................                   else output_bit(Pbell,0);                          //Bell
05C58:  BCF    F89.3
05C5A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05C5C:  MOVLW  01
05C5E:  MOVLB  8
05C60:  MOVWF  x71
....................       
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
05C62:  MOVLB  7
05C64:  BTFSC  xEB.3
05C66:  BRA    5CD6
05C68:  BTFSC  30.1
05C6A:  BRA    5CD6
05C6C:  BTFSC  xE4.3
05C6E:  BRA    5CD6
....................       {
....................          SendSMS.B4 =1;
05C70:  BSF    xEB.3
....................          fprintf(CH2,"AT+CMGS=\"");
05C72:  MOVLW  0E
05C74:  MOVWF  FF6
05C76:  MOVLW  07
05C78:  MOVWF  FF7
05C7A:  MOVLB  0
05C7C:  CALL   1F0C
....................          fprintf(CH2,sms_phonenumber);
05C80:  MOVLW  06
05C82:  MOVWF  FEA
05C84:  MOVLW  86
05C86:  MOVWF  FE9
05C88:  CALL   4482
....................          
....................          fprintf(CH2,"\"");
05C8C:  MOVLW  22
05C8E:  MOVLB  8
05C90:  MOVWF  x7F
05C92:  MOVLB  0
05C94:  CALL   1EC6
....................          putc('\n',CH2);
05C98:  MOVLW  0A
05C9A:  MOVLB  8
05C9C:  MOVWF  x7F
05C9E:  MOVLB  0
05CA0:  CALL   1EC6
....................          delay_ms(50);
05CA4:  MOVLW  32
05CA6:  MOVLB  8
05CA8:  MOVWF  x7E
05CAA:  MOVLB  0
05CAC:  CALL   074A
....................         
....................         fprintf(CH2,SMS_Massage4); 
05CB0:  MOVLW  07
05CB2:  MOVWF  FEA
05CB4:  MOVLW  10
05CB6:  MOVWF  FE9
05CB8:  CALL   4482
....................         putc('\n',CH2);
05CBC:  MOVLW  0A
05CBE:  MOVLB  8
05CC0:  MOVWF  x7F
05CC2:  MOVLB  0
05CC4:  CALL   1EC6
....................        putc(26,CH2);
05CC8:  MOVLW  1A
05CCA:  MOVLB  8
05CCC:  MOVWF  x7F
05CCE:  MOVLB  0
05CD0:  CALL   1EC6
05CD4:  MOVLB  7
....................       }
....................    }
05CD6:  BRA    5D62
....................    else if(FaultType.B4 == 0)
05CD8:  MOVLB  7
05CDA:  BTFSC  xE0.3
05CDC:  BRA    5D62
....................    {
....................       In2.B4 = 0x00;
05CDE:  BCF    xE6.3
....................       Ack.B4 = 0;
05CE0:  BCF    xE4.3
....................       Output.B4 = 1;      //Off LED
05CE2:  BSF    xDE.3
....................       
....................       SendSMS.B4 =0;// Clear SMS
05CE4:  BCF    xEB.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)      //If Buzzer or Both
05CE6:  BTFSC  xE1.3
05CE8:  BRA    5CEE
05CEA:  BTFSC  xE2.3
05CEC:  BRA    5D10
05CEE:  MOVLB  8
05CF0:  MOVF   x71,F
05CF2:  BTFSC  FD8.2
05CF4:  BRA    5CFA
05CF6:  MOVLB  7
05CF8:  BRA    5D10
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05CFA:  MOVLW  01
05CFC:  MOVWF  x7D
05CFE:  MOVLB  0
05D00:  CALL   44A8
05D04:  DECFSZ 01,W
05D06:  BRA    5D0A
05D08:  BRA    5D0E
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05D0A:  BSF    F89.4
05D0C:  BCF    F92.4
05D0E:  MOVLB  7
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)  //If Bell or Both
05D10:  BTFSS  xE1.3
05D12:  BRA    5D18
05D14:  BTFSC  xE2.3
05D16:  BRA    5D3A
05D18:  MOVLB  8
05D1A:  MOVF   x71,F
05D1C:  BTFSC  FD8.2
05D1E:  BRA    5D24
05D20:  MOVLB  7
05D22:  BRA    5D3A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05D24:  MOVLW  02
05D26:  MOVWF  x7D
05D28:  MOVLB  0
05D2A:  CALL   44A8
05D2E:  DECFSZ 01,W
05D30:  BRA    5D34
05D32:  BRA    5D38
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05D34:  BSF    F89.3
05D36:  BCF    F92.3
05D38:  MOVLB  7
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
05D3A:  BTFSC  xE6.0
05D3C:  BRA    5D62
05D3E:  BTFSC  xE6.1
05D40:  BRA    5D62
05D42:  BTFSC  xE6.2
05D44:  BRA    5D62
05D46:  BTFSC  xE6.3
05D48:  BRA    5D62
05D4A:  BTFSC  xE6.4
05D4C:  BRA    5D62
05D4E:  BTFSC  xE6.5
05D50:  BRA    5D62
05D52:  BTFSC  xE6.6
05D54:  BRA    5D62
05D56:  BTFSC  xE6.7
05D58:  BRA    5D62
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05D5A:  BSF    F89.3
05D5C:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05D5E:  BSF    F89.4
05D60:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05D62:  MOVLW  00
05D64:  BTFSC  xDD.4
05D66:  MOVLW  01
05D68:  MOVLB  8
05D6A:  MOVWF  x7E
05D6C:  MOVLW  00
05D6E:  MOVLB  7
05D70:  BTFSC  xDF.4
05D72:  MOVLW  01
05D74:  MOVLB  8
05D76:  XORWF  x7E,W
05D78:  SUBLW  01
05D7A:  BNZ   5D84
05D7C:  MOVLB  7
05D7E:  BTFSS  xE0.4
05D80:  BRA    5D8A
05D82:  MOVLB  8
05D84:  BTFSS  1A.5
05D86:  BRA    5E5A
05D88:  MOVLB  7
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
05D8A:  BTFSC  xE6.4
05D8C:  BRA    5DAA
05D8E:  MOVLB  0
05D90:  MOVF   x6A,W
05D92:  SUBLW  0F
05D94:  BTFSC  FD8.2
05D96:  BRA    5D9C
05D98:  MOVLB  7
05D9A:  BRA    5DAA
05D9C:  MOVLB  7
05D9E:  BTFSC  xE4.4
05DA0:  BRA    5DAA
....................       {
....................             TimeBase1s = 100 ;            //reload again
05DA2:  MOVLW  64
05DA4:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05DA6:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B5 = 1;
05DAA:  BSF    xE6.4
....................       if(Ack.B5 == 0)
05DAC:  BTFSC  xE4.4
05DAE:  BRA    5DDE
....................       {
....................          if(FlashingFlag == 0)
05DB0:  BTFSC  1A.1
05DB2:  BRA    5DB8
....................             {
....................                Output.B5 = 0;           //Flash output1
05DB4:  BCF    xDE.4
....................             }
05DB6:  BRA    5DBA
....................             else
....................             {
....................                Output.B5 = 1;
05DB8:  BSF    xDE.4
....................             }
....................          if (~AutoTestFlag)
05DBA:  BTFSC  1A.4
05DBC:  BRA    5DDE
....................          {
....................             if(AlarmIndicator.B5 == 1){
05DBE:  BTFSS  xE3.4
05DC0:  BRA    5DDE
....................                 if(OutputBoth.B5 == 0)        //Both output
05DC2:  BTFSC  xE2.4
05DC4:  BRA    5DD0
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05DC6:  BCF    F89.4
05DC8:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05DCA:  BCF    F89.3
05DCC:  BCF    F92.3
....................                 }
05DCE:  BRA    5DDE
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,0);     //Buzzer
05DD0:  BTFSS  xE1.4
05DD2:  BRA    5DDA
05DD4:  BCF    F89.4
05DD6:  BCF    F92.4
05DD8:  BRA    5DDE
....................                   else output_bit(Pbell,0);                          //Bell
05DDA:  BCF    F89.3
05DDC:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05DDE:  MOVLW  01
05DE0:  MOVLB  8
05DE2:  MOVWF  x71
....................       
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05DE4:  MOVLB  7
05DE6:  BTFSC  xEB.4
05DE8:  BRA    5E58
05DEA:  BTFSC  30.1
05DEC:  BRA    5E58
05DEE:  BTFSC  xE4.4
05DF0:  BRA    5E58
....................       {
....................          SendSMS.B5 =1;
05DF2:  BSF    xEB.4
....................          fprintf(CH2,"AT+CMGS=\"");
05DF4:  MOVLW  18
05DF6:  MOVWF  FF6
05DF8:  MOVLW  07
05DFA:  MOVWF  FF7
05DFC:  MOVLB  0
05DFE:  CALL   1F0C
....................          fprintf(CH2,sms_phonenumber);
05E02:  MOVLW  06
05E04:  MOVWF  FEA
05E06:  MOVLW  86
05E08:  MOVWF  FE9
05E0A:  CALL   4482
....................          
....................          fprintf(CH2,"\"");
05E0E:  MOVLW  22
05E10:  MOVLB  8
05E12:  MOVWF  x7F
05E14:  MOVLB  0
05E16:  CALL   1EC6
....................          putc('\n',CH2);
05E1A:  MOVLW  0A
05E1C:  MOVLB  8
05E1E:  MOVWF  x7F
05E20:  MOVLB  0
05E22:  CALL   1EC6
....................          delay_ms(50);
05E26:  MOVLW  32
05E28:  MOVLB  8
05E2A:  MOVWF  x7E
05E2C:  MOVLB  0
05E2E:  CALL   074A
....................         
....................         fprintf(CH2,SMS_Massage5); 
05E32:  MOVLW  07
05E34:  MOVWF  FEA
05E36:  MOVLW  39
05E38:  MOVWF  FE9
05E3A:  CALL   4482
....................         putc('\n',CH2);
05E3E:  MOVLW  0A
05E40:  MOVLB  8
05E42:  MOVWF  x7F
05E44:  MOVLB  0
05E46:  CALL   1EC6
....................        putc(26,CH2);
05E4A:  MOVLW  1A
05E4C:  MOVLB  8
05E4E:  MOVWF  x7F
05E50:  MOVLB  0
05E52:  CALL   1EC6
05E56:  MOVLB  7
....................       }
....................    }
05E58:  BRA    5EE4
....................    else if(FaultType.B5 == 0)
05E5A:  MOVLB  7
05E5C:  BTFSC  xE0.4
05E5E:  BRA    5EE4
....................    {
....................       In2.B5 = 0x00;
05E60:  BCF    xE6.4
....................       Ack.B5 = 0;
05E62:  BCF    xE4.4
....................       Output.B5 = 1;      //Off LED
05E64:  BSF    xDE.4
....................       
....................       SendSMS.B5 =0;// Clear SMS
05E66:  BCF    xEB.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)      //If Buzzer or Both
05E68:  BTFSC  xE1.4
05E6A:  BRA    5E70
05E6C:  BTFSC  xE2.4
05E6E:  BRA    5E92
05E70:  MOVLB  8
05E72:  MOVF   x71,F
05E74:  BTFSC  FD8.2
05E76:  BRA    5E7C
05E78:  MOVLB  7
05E7A:  BRA    5E92
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05E7C:  MOVLW  01
05E7E:  MOVWF  x7D
05E80:  MOVLB  0
05E82:  CALL   44A8
05E86:  DECFSZ 01,W
05E88:  BRA    5E8C
05E8A:  BRA    5E90
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
05E8C:  BSF    F89.4
05E8E:  BCF    F92.4
05E90:  MOVLB  7
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)  //If Bell or Both
05E92:  BTFSS  xE1.4
05E94:  BRA    5E9A
05E96:  BTFSC  xE2.4
05E98:  BRA    5EBC
05E9A:  MOVLB  8
05E9C:  MOVF   x71,F
05E9E:  BTFSC  FD8.2
05EA0:  BRA    5EA6
05EA2:  MOVLB  7
05EA4:  BRA    5EBC
....................       {
....................          if(CheckAutoReset(0x02) == 1);
05EA6:  MOVLW  02
05EA8:  MOVWF  x7D
05EAA:  MOVLB  0
05EAC:  CALL   44A8
05EB0:  DECFSZ 01,W
05EB2:  BRA    5EB6
05EB4:  BRA    5EBA
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
05EB6:  BSF    F89.3
05EB8:  BCF    F92.3
05EBA:  MOVLB  7
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
05EBC:  BTFSC  xE6.0
05EBE:  BRA    5EE4
05EC0:  BTFSC  xE6.1
05EC2:  BRA    5EE4
05EC4:  BTFSC  xE6.2
05EC6:  BRA    5EE4
05EC8:  BTFSC  xE6.3
05ECA:  BRA    5EE4
05ECC:  BTFSC  xE6.4
05ECE:  BRA    5EE4
05ED0:  BTFSC  xE6.5
05ED2:  BRA    5EE4
05ED4:  BTFSC  xE6.6
05ED6:  BRA    5EE4
05ED8:  BTFSC  xE6.7
05EDA:  BRA    5EE4
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
05EDC:  BSF    F89.3
05EDE:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
05EE0:  BSF    F89.4
05EE2:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
05EE4:  MOVLW  00
05EE6:  BTFSC  xDD.5
05EE8:  MOVLW  01
05EEA:  MOVLB  8
05EEC:  MOVWF  x7E
05EEE:  MOVLW  00
05EF0:  MOVLB  7
05EF2:  BTFSC  xDF.5
05EF4:  MOVLW  01
05EF6:  MOVLB  8
05EF8:  XORWF  x7E,W
05EFA:  SUBLW  01
05EFC:  BNZ   5F06
05EFE:  MOVLB  7
05F00:  BTFSS  xE0.5
05F02:  BRA    5F0C
05F04:  MOVLB  8
05F06:  BTFSS  1A.5
05F08:  BRA    5FDC
05F0A:  MOVLB  7
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
05F0C:  BTFSC  xE6.5
05F0E:  BRA    5F2C
05F10:  MOVLB  0
05F12:  MOVF   x6A,W
05F14:  SUBLW  0F
05F16:  BTFSC  FD8.2
05F18:  BRA    5F1E
05F1A:  MOVLB  7
05F1C:  BRA    5F2C
05F1E:  MOVLB  7
05F20:  BTFSC  xE4.5
05F22:  BRA    5F2C
....................       {
....................             TimeBase1s = 100 ;            //reload again
05F24:  MOVLW  64
05F26:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
05F28:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B6 = 1;
05F2C:  BSF    xE6.5
....................       if(Ack.B6 == 0)
05F2E:  BTFSC  xE4.5
05F30:  BRA    5F60
....................       {
....................          if(FlashingFlag == 0)
05F32:  BTFSC  1A.1
05F34:  BRA    5F3A
....................             {
....................                Output.B6 = 0;           //Flash output1
05F36:  BCF    xDE.5
....................             }
05F38:  BRA    5F3C
....................             else
....................             {
....................                Output.B6 = 1;
05F3A:  BSF    xDE.5
....................             }
....................          if (~AutoTestFlag)
05F3C:  BTFSC  1A.4
05F3E:  BRA    5F60
....................          {
....................             if(AlarmIndicator.B6 == 1){
05F40:  BTFSS  xE3.5
05F42:  BRA    5F60
....................                 if(OutputBoth.B6 == 0)        //Both output
05F44:  BTFSC  xE2.5
05F46:  BRA    5F52
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
05F48:  BCF    F89.4
05F4A:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
05F4C:  BCF    F89.3
05F4E:  BCF    F92.3
....................                 }
05F50:  BRA    5F60
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,0);     //Buzzer
05F52:  BTFSS  xE1.5
05F54:  BRA    5F5C
05F56:  BCF    F89.4
05F58:  BCF    F92.4
05F5A:  BRA    5F60
....................                   else output_bit(Pbell,0);                          //Bell
05F5C:  BCF    F89.3
05F5E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
05F60:  MOVLW  01
05F62:  MOVLB  8
05F64:  MOVWF  x71
....................       
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
05F66:  MOVLB  7
05F68:  BTFSC  xEB.5
05F6A:  BRA    5FDA
05F6C:  BTFSC  30.1
05F6E:  BRA    5FDA
05F70:  BTFSC  xE4.5
05F72:  BRA    5FDA
....................       {
....................          SendSMS.B6 =1;
05F74:  BSF    xEB.5
....................          fprintf(CH2,"AT+CMGS=\"");
05F76:  MOVLW  22
05F78:  MOVWF  FF6
05F7A:  MOVLW  07
05F7C:  MOVWF  FF7
05F7E:  MOVLB  0
05F80:  CALL   1F0C
....................          fprintf(CH2,sms_phonenumber);
05F84:  MOVLW  06
05F86:  MOVWF  FEA
05F88:  MOVLW  86
05F8A:  MOVWF  FE9
05F8C:  CALL   4482
....................          
....................          fprintf(CH2,"\"");
05F90:  MOVLW  22
05F92:  MOVLB  8
05F94:  MOVWF  x7F
05F96:  MOVLB  0
05F98:  CALL   1EC6
....................          putc('\n',CH2);
05F9C:  MOVLW  0A
05F9E:  MOVLB  8
05FA0:  MOVWF  x7F
05FA2:  MOVLB  0
05FA4:  CALL   1EC6
....................          delay_ms(50);
05FA8:  MOVLW  32
05FAA:  MOVLB  8
05FAC:  MOVWF  x7E
05FAE:  MOVLB  0
05FB0:  CALL   074A
....................         
....................         fprintf(CH2,SMS_Massage6);  
05FB4:  MOVLW  07
05FB6:  MOVWF  FEA
05FB8:  MOVLW  62
05FBA:  MOVWF  FE9
05FBC:  CALL   4482
....................         putc('\n',CH2);
05FC0:  MOVLW  0A
05FC2:  MOVLB  8
05FC4:  MOVWF  x7F
05FC6:  MOVLB  0
05FC8:  CALL   1EC6
....................        putc(26,CH2);
05FCC:  MOVLW  1A
05FCE:  MOVLB  8
05FD0:  MOVWF  x7F
05FD2:  MOVLB  0
05FD4:  CALL   1EC6
05FD8:  MOVLB  7
....................       }
....................    }
05FDA:  BRA    6066
....................    else if(FaultType.B6 == 0)
05FDC:  MOVLB  7
05FDE:  BTFSC  xE0.5
05FE0:  BRA    6066
....................    {
....................       In2.B6 = 0x00;
05FE2:  BCF    xE6.5
....................       Ack.B6 = 0;
05FE4:  BCF    xE4.5
....................       Output.B6 = 1;      //Off LED
05FE6:  BSF    xDE.5
....................       
....................       SendSMS.B6 =0;// Clear SMS
05FE8:  BCF    xEB.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
05FEA:  BTFSC  xE1.5
05FEC:  BRA    5FF2
05FEE:  BTFSC  xE2.5
05FF0:  BRA    6014
05FF2:  MOVLB  8
05FF4:  MOVF   x71,F
05FF6:  BTFSC  FD8.2
05FF8:  BRA    5FFE
05FFA:  MOVLB  7
05FFC:  BRA    6014
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
05FFE:  MOVLW  01
06000:  MOVWF  x7D
06002:  MOVLB  0
06004:  CALL   44A8
06008:  DECFSZ 01,W
0600A:  BRA    600E
0600C:  BRA    6012
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
0600E:  BSF    F89.4
06010:  BCF    F92.4
06012:  MOVLB  7
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
06014:  BTFSS  xE1.5
06016:  BRA    601C
06018:  BTFSC  xE2.5
0601A:  BRA    603E
0601C:  MOVLB  8
0601E:  MOVF   x71,F
06020:  BTFSC  FD8.2
06022:  BRA    6028
06024:  MOVLB  7
06026:  BRA    603E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06028:  MOVLW  02
0602A:  MOVWF  x7D
0602C:  MOVLB  0
0602E:  CALL   44A8
06032:  DECFSZ 01,W
06034:  BRA    6038
06036:  BRA    603C
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
06038:  BSF    F89.3
0603A:  BCF    F92.3
0603C:  MOVLB  7
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
0603E:  BTFSC  xE6.0
06040:  BRA    6066
06042:  BTFSC  xE6.1
06044:  BRA    6066
06046:  BTFSC  xE6.2
06048:  BRA    6066
0604A:  BTFSC  xE6.3
0604C:  BRA    6066
0604E:  BTFSC  xE6.4
06050:  BRA    6066
06052:  BTFSC  xE6.5
06054:  BRA    6066
06056:  BTFSC  xE6.6
06058:  BRA    6066
0605A:  BTFSC  xE6.7
0605C:  BRA    6066
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
0605E:  BSF    F89.3
06060:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
06062:  BSF    F89.4
06064:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06066:  MOVLW  00
06068:  BTFSC  xDD.6
0606A:  MOVLW  01
0606C:  MOVLB  8
0606E:  MOVWF  x7E
06070:  MOVLW  00
06072:  MOVLB  7
06074:  BTFSC  xDF.6
06076:  MOVLW  01
06078:  MOVLB  8
0607A:  XORWF  x7E,W
0607C:  SUBLW  01
0607E:  BNZ   6088
06080:  MOVLB  7
06082:  BTFSS  xE0.6
06084:  BRA    608E
06086:  MOVLB  8
06088:  BTFSS  1A.5
0608A:  BRA    615E
0608C:  MOVLB  7
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
0608E:  BTFSC  xE6.6
06090:  BRA    60AE
06092:  MOVLB  0
06094:  MOVF   x6A,W
06096:  SUBLW  0F
06098:  BTFSC  FD8.2
0609A:  BRA    60A0
0609C:  MOVLB  7
0609E:  BRA    60AE
060A0:  MOVLB  7
060A2:  BTFSC  xE4.6
060A4:  BRA    60AE
....................       {
....................             TimeBase1s = 100 ;            //reload again
060A6:  MOVLW  64
060A8:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
060AA:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B7 = 1;
060AE:  BSF    xE6.6
....................       if(Ack.B7 == 0)
060B0:  BTFSC  xE4.6
060B2:  BRA    60E2
....................       {
....................          if(FlashingFlag == 0)
060B4:  BTFSC  1A.1
060B6:  BRA    60BC
....................             {
....................                Output.B7 = 0;           //Flash output1
060B8:  BCF    xDE.6
....................             }
060BA:  BRA    60BE
....................             else
....................             {
....................                Output.B7 = 1;
060BC:  BSF    xDE.6
....................             }
....................          if (~AutoTestFlag)
060BE:  BTFSC  1A.4
060C0:  BRA    60E2
....................          {
....................             if(AlarmIndicator.B7 == 1){
060C2:  BTFSS  xE3.6
060C4:  BRA    60E2
....................                 if(OutputBoth.B7 == 0)        //Both output
060C6:  BTFSC  xE2.6
060C8:  BRA    60D4
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
060CA:  BCF    F89.4
060CC:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
060CE:  BCF    F89.3
060D0:  BCF    F92.3
....................                 }
060D2:  BRA    60E2
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,0);     //Buzzer
060D4:  BTFSS  xE1.6
060D6:  BRA    60DE
060D8:  BCF    F89.4
060DA:  BCF    F92.4
060DC:  BRA    60E2
....................                   else output_bit(Pbell,0);                          //Bell
060DE:  BCF    F89.3
060E0:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
060E2:  MOVLW  01
060E4:  MOVLB  8
060E6:  MOVWF  x71
....................       
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
060E8:  MOVLB  7
060EA:  BTFSC  xEB.6
060EC:  BRA    615C
060EE:  BTFSC  30.1
060F0:  BRA    615C
060F2:  BTFSC  xE4.6
060F4:  BRA    615C
....................       {
....................          SendSMS.B7 =1;
060F6:  BSF    xEB.6
....................          fprintf(CH2,"AT+CMGS=\"");
060F8:  MOVLW  2C
060FA:  MOVWF  FF6
060FC:  MOVLW  07
060FE:  MOVWF  FF7
06100:  MOVLB  0
06102:  CALL   1F0C
....................          fprintf(CH2,sms_phonenumber);
06106:  MOVLW  06
06108:  MOVWF  FEA
0610A:  MOVLW  86
0610C:  MOVWF  FE9
0610E:  CALL   4482
....................          
....................          fprintf(CH2,"\"");
06112:  MOVLW  22
06114:  MOVLB  8
06116:  MOVWF  x7F
06118:  MOVLB  0
0611A:  CALL   1EC6
....................          putc('\n',CH2);
0611E:  MOVLW  0A
06120:  MOVLB  8
06122:  MOVWF  x7F
06124:  MOVLB  0
06126:  CALL   1EC6
....................          delay_ms(50);
0612A:  MOVLW  32
0612C:  MOVLB  8
0612E:  MOVWF  x7E
06130:  MOVLB  0
06132:  CALL   074A
....................         
....................         fprintf(CH2,SMS_Massage7);  
06136:  MOVLW  07
06138:  MOVWF  FEA
0613A:  MOVLW  8B
0613C:  MOVWF  FE9
0613E:  CALL   4482
....................         putc('\n',CH2);
06142:  MOVLW  0A
06144:  MOVLB  8
06146:  MOVWF  x7F
06148:  MOVLB  0
0614A:  CALL   1EC6
....................        putc(26,CH2);
0614E:  MOVLW  1A
06150:  MOVLB  8
06152:  MOVWF  x7F
06154:  MOVLB  0
06156:  CALL   1EC6
0615A:  MOVLB  7
....................       }
....................    }
0615C:  BRA    61E8
....................    else if(FaultType.B7 == 0)
0615E:  MOVLB  7
06160:  BTFSC  xE0.6
06162:  BRA    61E8
....................    {
....................       In2.B7 = 0x00;
06164:  BCF    xE6.6
....................       Ack.B7 = 0;
06166:  BCF    xE4.6
....................       Output.B7 = 1;      //Off LED
06168:  BSF    xDE.6
....................       
....................       SendSMS.B7 =0;// Clear SMS
0616A:  BCF    xEB.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
0616C:  BTFSC  xE1.6
0616E:  BRA    6174
06170:  BTFSC  xE2.6
06172:  BRA    6196
06174:  MOVLB  8
06176:  MOVF   x71,F
06178:  BTFSC  FD8.2
0617A:  BRA    6180
0617C:  MOVLB  7
0617E:  BRA    6196
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
06180:  MOVLW  01
06182:  MOVWF  x7D
06184:  MOVLB  0
06186:  CALL   44A8
0618A:  DECFSZ 01,W
0618C:  BRA    6190
0618E:  BRA    6194
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06190:  BSF    F89.4
06192:  BCF    F92.4
06194:  MOVLB  7
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
06196:  BTFSS  xE1.6
06198:  BRA    619E
0619A:  BTFSC  xE2.6
0619C:  BRA    61C0
0619E:  MOVLB  8
061A0:  MOVF   x71,F
061A2:  BTFSC  FD8.2
061A4:  BRA    61AA
061A6:  MOVLB  7
061A8:  BRA    61C0
....................       {
....................          if(CheckAutoReset(0x02) == 1);
061AA:  MOVLW  02
061AC:  MOVWF  x7D
061AE:  MOVLB  0
061B0:  CALL   44A8
061B4:  DECFSZ 01,W
061B6:  BRA    61BA
061B8:  BRA    61BE
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
061BA:  BSF    F89.3
061BC:  BCF    F92.3
061BE:  MOVLB  7
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
061C0:  BTFSC  xE6.0
061C2:  BRA    61E8
061C4:  BTFSC  xE6.1
061C6:  BRA    61E8
061C8:  BTFSC  xE6.2
061CA:  BRA    61E8
061CC:  BTFSC  xE6.3
061CE:  BRA    61E8
061D0:  BTFSC  xE6.4
061D2:  BRA    61E8
061D4:  BTFSC  xE6.5
061D6:  BRA    61E8
061D8:  BTFSC  xE6.6
061DA:  BRA    61E8
061DC:  BTFSC  xE6.7
061DE:  BRA    61E8
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
061E0:  BSF    F89.3
061E2:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
061E4:  BSF    F89.4
061E6:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
061E8:  MOVLW  00
061EA:  BTFSC  xDD.7
061EC:  MOVLW  01
061EE:  MOVLB  8
061F0:  MOVWF  x7E
061F2:  MOVLW  00
061F4:  MOVLB  7
061F6:  BTFSC  xDF.7
061F8:  MOVLW  01
061FA:  MOVLB  8
061FC:  XORWF  x7E,W
061FE:  SUBLW  01
06200:  BNZ   620A
06202:  MOVLB  7
06204:  BTFSS  xE0.7
06206:  BRA    6210
06208:  MOVLB  8
0620A:  BTFSS  1A.5
0620C:  BRA    62E0
0620E:  MOVLB  7
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
06210:  BTFSC  xE6.7
06212:  BRA    6230
06214:  MOVLB  0
06216:  MOVF   x6A,W
06218:  SUBLW  0F
0621A:  BTFSC  FD8.2
0621C:  BRA    6222
0621E:  MOVLB  7
06220:  BRA    6230
06222:  MOVLB  7
06224:  BTFSC  xE4.7
06226:  BRA    6230
....................       {
....................             TimeBase1s = 100 ;            //reload again
06228:  MOVLW  64
0622A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0622C:  MOVFF  6B,1D
....................       }
.................... 
....................       In2.B8 = 1;
06230:  BSF    xE6.7
....................       if(Ack.B8 == 0)
06232:  BTFSC  xE4.7
06234:  BRA    6264
....................       {
....................          if(FlashingFlag == 0)
06236:  BTFSC  1A.1
06238:  BRA    623E
....................             {
....................                Output.B8 = 0;           //Flash output1
0623A:  BCF    xDE.7
....................             }
0623C:  BRA    6240
....................             else
....................             {
....................                Output.B8 = 1;
0623E:  BSF    xDE.7
....................             }
....................          if (~AutoTestFlag)
06240:  BTFSC  1A.4
06242:  BRA    6264
....................          {
....................             if(AlarmIndicator.B8 == 1){
06244:  BTFSS  xE3.7
06246:  BRA    6264
....................                 if(OutputBoth.B8 == 0)        //Both output
06248:  BTFSC  xE2.7
0624A:  BRA    6256
....................                 {
....................                   output_bit(Pbuzzer,0);   //Buzzer
0624C:  BCF    F89.4
0624E:  BCF    F92.4
....................                   output_bit(Pbell,0);     //Bell
06250:  BCF    F89.3
06252:  BCF    F92.3
....................                 }
06254:  BRA    6264
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,0);     //Buzzer
06256:  BTFSS  xE1.7
06258:  BRA    6260
0625A:  BCF    F89.4
0625C:  BCF    F92.4
0625E:  BRA    6264
....................                   else output_bit(Pbell,0);                          //Bell
06260:  BCF    F89.3
06262:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
06264:  MOVLW  01
06266:  MOVLB  8
06268:  MOVWF  x71
....................       
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
0626A:  MOVLB  7
0626C:  BTFSC  xEB.7
0626E:  BRA    62DE
06270:  BTFSC  30.1
06272:  BRA    62DE
06274:  BTFSC  xE4.7
06276:  BRA    62DE
....................       {
....................          SendSMS.B8 =1;
06278:  BSF    xEB.7
....................          fprintf(CH2,"AT+CMGS=\"");
0627A:  MOVLW  36
0627C:  MOVWF  FF6
0627E:  MOVLW  07
06280:  MOVWF  FF7
06282:  MOVLB  0
06284:  CALL   1F0C
....................          fprintf(CH2,sms_phonenumber);
06288:  MOVLW  06
0628A:  MOVWF  FEA
0628C:  MOVLW  86
0628E:  MOVWF  FE9
06290:  CALL   4482
....................          
....................          fprintf(CH2,"\"");
06294:  MOVLW  22
06296:  MOVLB  8
06298:  MOVWF  x7F
0629A:  MOVLB  0
0629C:  CALL   1EC6
....................          putc('\n',CH2);
062A0:  MOVLW  0A
062A2:  MOVLB  8
062A4:  MOVWF  x7F
062A6:  MOVLB  0
062A8:  CALL   1EC6
....................          delay_ms(50);
062AC:  MOVLW  32
062AE:  MOVLB  8
062B0:  MOVWF  x7E
062B2:  MOVLB  0
062B4:  CALL   074A
....................         
....................         fprintf(CH2,SMS_Massage8);   
062B8:  MOVLW  07
062BA:  MOVWF  FEA
062BC:  MOVLW  B4
062BE:  MOVWF  FE9
062C0:  CALL   4482
....................         putc('\n',CH2);
062C4:  MOVLW  0A
062C6:  MOVLB  8
062C8:  MOVWF  x7F
062CA:  MOVLB  0
062CC:  CALL   1EC6
....................         putc(26,CH2);
062D0:  MOVLW  1A
062D2:  MOVLB  8
062D4:  MOVWF  x7F
062D6:  MOVLB  0
062D8:  CALL   1EC6
062DC:  MOVLB  7
....................       }
....................    }
062DE:  BRA    636A
....................    else if(FaultType.B8 == 0)
062E0:  MOVLB  7
062E2:  BTFSC  xE0.7
062E4:  BRA    636A
....................    {
....................       In2.B8 = 0x00;
062E6:  BCF    xE6.7
....................       Ack.B8 = 0;
062E8:  BCF    xE4.7
....................       Output.B8 = 1;      //Off LED
062EA:  BSF    xDE.7
....................       
....................       SendSMS.B8 =0;// Clear SMS
062EC:  BCF    xEB.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
062EE:  BTFSC  xE1.7
062F0:  BRA    62F6
062F2:  BTFSC  xE2.7
062F4:  BRA    6318
062F6:  MOVLB  8
062F8:  MOVF   x71,F
062FA:  BTFSC  FD8.2
062FC:  BRA    6302
062FE:  MOVLB  7
06300:  BRA    6318
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
06302:  MOVLW  01
06304:  MOVWF  x7D
06306:  MOVLB  0
06308:  CALL   44A8
0630C:  DECFSZ 01,W
0630E:  BRA    6312
06310:  BRA    6316
....................          else
....................          {
....................             output_bit(Pbuzzer,1);   //Clear Buzzer
06312:  BSF    F89.4
06314:  BCF    F92.4
06316:  MOVLB  7
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
06318:  BTFSS  xE1.7
0631A:  BRA    6320
0631C:  BTFSC  xE2.7
0631E:  BRA    6342
06320:  MOVLB  8
06322:  MOVF   x71,F
06324:  BTFSC  FD8.2
06326:  BRA    632C
06328:  MOVLB  7
0632A:  BRA    6342
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0632C:  MOVLW  02
0632E:  MOVWF  x7D
06330:  MOVLB  0
06332:  CALL   44A8
06336:  DECFSZ 01,W
06338:  BRA    633C
0633A:  BRA    6340
....................          else
....................          {
....................             output_bit(Pbell,1);      //Clear Bell
0633C:  BSF    F89.3
0633E:  BCF    F92.3
06340:  MOVLB  7
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0)
06342:  BTFSC  xE6.0
06344:  BRA    636A
06346:  BTFSC  xE6.1
06348:  BRA    636A
0634A:  BTFSC  xE6.2
0634C:  BRA    636A
0634E:  BTFSC  xE6.3
06350:  BRA    636A
06352:  BTFSC  xE6.4
06354:  BRA    636A
06356:  BTFSC  xE6.5
06358:  BRA    636A
0635A:  BTFSC  xE6.6
0635C:  BRA    636A
0635E:  BTFSC  xE6.7
06360:  BRA    636A
....................       {
....................          output_bit(Pbell,1);      //Clear Bell
06362:  BSF    F89.3
06364:  BCF    F92.3
....................          output_bit(Pbuzzer,1);   //Clear Buzzer
06366:  BSF    F89.4
06368:  BCF    F92.4
....................       }
....................    }
0636A:  MOVLB  0
0636C:  RETURN 0
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////   
....................    
.................... 
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Send_Ouput(void)
.................... {
....................     Red1_7 = 0;
*
01CEC:  CLRF   4E
....................     Red8_8 = 0;
01CEE:  CLRF   4F
....................     //Red9_15 = 0;
....................     //Red16_16 = 0;
.................... 
....................     Green1_7 = 0;
01CF0:  CLRF   52
....................     Green8_8 = 0;
01CF2:  CLRF   53
....................     //Green9_15 = 0;
....................     //Green16_16 = 0;
.................... 
....................    if(T_test == 0x00)
01CF4:  MOVF   2F,F
01CF6:  BTFSS  FD8.2
01CF8:  BRA    1EC4
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
01CFA:  MOVLB  7
01CFC:  BTFSS  xDE.0
01CFE:  BRA    1D06
....................            {
....................              bit_clear(Red1_7,1); bit_clear(Green1_7,1);
01D00:  BCF    4E.1
01D02:  BCF    52.1
....................            }
01D04:  BRA    1D2E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
01D06:  BTFSS  xE9.0
01D08:  BRA    1D14
01D0A:  BTFSC  xEA.0
01D0C:  BRA    1D14
....................              {
....................                bit_set(Red1_7,1); bit_clear(Green1_7,1);
01D0E:  BSF    4E.1
01D10:  BCF    52.1
....................              }
01D12:  BRA    1D2E
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
01D14:  BTFSC  xE9.0
01D16:  BRA    1D22
01D18:  BTFSS  xEA.0
01D1A:  BRA    1D22
....................              {
....................                bit_clear(Red1_7,1); bit_set(Green1_7,1); 
01D1C:  BCF    4E.1
01D1E:  BSF    52.1
....................              }
01D20:  BRA    1D2E
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
01D22:  BTFSS  xE9.0
01D24:  BRA    1D2E
01D26:  BTFSS  xEA.0
01D28:  BRA    1D2E
....................              {
....................                bit_set(Red1_7,1); bit_set(Green1_7,1) ; 
01D2A:  BSF    4E.1
01D2C:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
01D2E:  BTFSS  xDE.1
01D30:  BRA    1D38
....................            {
....................              bit_clear(Red1_7,2); bit_clear(Green1_7,2);
01D32:  BCF    4E.2
01D34:  BCF    52.2
....................            }
01D36:  BRA    1D60
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
01D38:  BTFSS  xE9.1
01D3A:  BRA    1D46
01D3C:  BTFSC  xEA.1
01D3E:  BRA    1D46
....................              {
....................                bit_set(Red1_7,2); bit_clear(Green1_7,2);
01D40:  BSF    4E.2
01D42:  BCF    52.2
....................              }
01D44:  BRA    1D60
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
01D46:  BTFSC  xE9.1
01D48:  BRA    1D54
01D4A:  BTFSS  xEA.1
01D4C:  BRA    1D54
....................              {
....................                bit_clear(Red1_7,2); bit_set(Green1_7,2); 
01D4E:  BCF    4E.2
01D50:  BSF    52.2
....................              }
01D52:  BRA    1D60
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
01D54:  BTFSS  xE9.1
01D56:  BRA    1D60
01D58:  BTFSS  xEA.1
01D5A:  BRA    1D60
....................              {
....................                bit_set(Red1_7,2); bit_set(Green1_7,2) ; 
01D5C:  BSF    4E.2
01D5E:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
01D60:  BTFSS  xDE.2
01D62:  BRA    1D6A
....................            {
....................              bit_clear(Red1_7,3); bit_clear(Green1_7,3);
01D64:  BCF    4E.3
01D66:  BCF    52.3
....................            }
01D68:  BRA    1D92
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
01D6A:  BTFSS  xE9.2
01D6C:  BRA    1D78
01D6E:  BTFSC  xEA.2
01D70:  BRA    1D78
....................              {
....................                bit_set(Red1_7,3); bit_clear(Green1_7,3);
01D72:  BSF    4E.3
01D74:  BCF    52.3
....................              }
01D76:  BRA    1D92
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
01D78:  BTFSC  xE9.2
01D7A:  BRA    1D86
01D7C:  BTFSS  xEA.2
01D7E:  BRA    1D86
....................              {
....................                bit_clear(Red1_7,3); bit_set(Green1_7,3); 
01D80:  BCF    4E.3
01D82:  BSF    52.3
....................              }
01D84:  BRA    1D92
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
01D86:  BTFSS  xE9.2
01D88:  BRA    1D92
01D8A:  BTFSS  xEA.2
01D8C:  BRA    1D92
....................              {
....................                bit_set(Red1_7,3); bit_set(Green1_7,3) ; 
01D8E:  BSF    4E.3
01D90:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
01D92:  BTFSS  xDE.3
01D94:  BRA    1D9C
....................            {
....................              bit_clear(Red1_7,4); bit_clear(Green1_7,4);
01D96:  BCF    4E.4
01D98:  BCF    52.4
....................            }
01D9A:  BRA    1DC4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
01D9C:  BTFSS  xE9.3
01D9E:  BRA    1DAA
01DA0:  BTFSC  xEA.3
01DA2:  BRA    1DAA
....................              {
....................                bit_set(Red1_7,4); bit_clear(Green1_7,4);
01DA4:  BSF    4E.4
01DA6:  BCF    52.4
....................              }
01DA8:  BRA    1DC4
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
01DAA:  BTFSC  xE9.3
01DAC:  BRA    1DB8
01DAE:  BTFSS  xEA.3
01DB0:  BRA    1DB8
....................              {
....................                bit_clear(Red1_7,4); bit_set(Green1_7,4); 
01DB2:  BCF    4E.4
01DB4:  BSF    52.4
....................              }
01DB6:  BRA    1DC4
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
01DB8:  BTFSS  xE9.3
01DBA:  BRA    1DC4
01DBC:  BTFSS  xEA.3
01DBE:  BRA    1DC4
....................              {
....................                bit_set(Red1_7,4); bit_set(Green1_7,4) ; 
01DC0:  BSF    4E.4
01DC2:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
01DC4:  BTFSS  xDE.4
01DC6:  BRA    1DCE
....................            {
....................              bit_clear(Red1_7,5); bit_clear(Green1_7,5);
01DC8:  BCF    4E.5
01DCA:  BCF    52.5
....................            }
01DCC:  BRA    1DF6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
01DCE:  BTFSS  xE9.4
01DD0:  BRA    1DDC
01DD2:  BTFSC  xEA.4
01DD4:  BRA    1DDC
....................              {
....................                bit_set(Red1_7,5); bit_clear(Green1_7,5);
01DD6:  BSF    4E.5
01DD8:  BCF    52.5
....................              }
01DDA:  BRA    1DF6
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
01DDC:  BTFSC  xE9.4
01DDE:  BRA    1DEA
01DE0:  BTFSS  xEA.4
01DE2:  BRA    1DEA
....................              {
....................                bit_clear(Red1_7,5); bit_set(Green1_7,5); 
01DE4:  BCF    4E.5
01DE6:  BSF    52.5
....................              }
01DE8:  BRA    1DF6
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
01DEA:  BTFSS  xE9.4
01DEC:  BRA    1DF6
01DEE:  BTFSS  xEA.4
01DF0:  BRA    1DF6
....................              {
....................                bit_set(Red1_7,5); bit_set(Green1_7,5) ; 
01DF2:  BSF    4E.5
01DF4:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
01DF6:  BTFSS  xDE.5
01DF8:  BRA    1E00
....................            {
....................              bit_clear(Red1_7,6); bit_clear(Green1_7,6);
01DFA:  BCF    4E.6
01DFC:  BCF    52.6
....................            }
01DFE:  BRA    1E28
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
01E00:  BTFSS  xE9.5
01E02:  BRA    1E0E
01E04:  BTFSC  xEA.5
01E06:  BRA    1E0E
....................              {
....................                bit_set(Red1_7,6); bit_clear(Green1_7,6);
01E08:  BSF    4E.6
01E0A:  BCF    52.6
....................              }
01E0C:  BRA    1E28
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
01E0E:  BTFSC  xE9.5
01E10:  BRA    1E1C
01E12:  BTFSS  xEA.5
01E14:  BRA    1E1C
....................              {
....................                bit_clear(Red1_7,6); bit_set(Green1_7,6); 
01E16:  BCF    4E.6
01E18:  BSF    52.6
....................              }
01E1A:  BRA    1E28
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
01E1C:  BTFSS  xE9.5
01E1E:  BRA    1E28
01E20:  BTFSS  xEA.5
01E22:  BRA    1E28
....................              {
....................                bit_set(Red1_7,6); bit_set(Green1_7,6) ; 
01E24:  BSF    4E.6
01E26:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
01E28:  BTFSS  xDE.6
01E2A:  BRA    1E32
....................            {
....................              bit_clear(Red1_7,7); bit_clear(Green1_7,7);
01E2C:  BCF    4E.7
01E2E:  BCF    52.7
....................            }
01E30:  BRA    1E5A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
01E32:  BTFSS  xE9.6
01E34:  BRA    1E40
01E36:  BTFSC  xEA.6
01E38:  BRA    1E40
....................              {
....................                bit_set(Red1_7,7); bit_clear(Green1_7,7);
01E3A:  BSF    4E.7
01E3C:  BCF    52.7
....................              }
01E3E:  BRA    1E5A
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
01E40:  BTFSC  xE9.6
01E42:  BRA    1E4E
01E44:  BTFSS  xEA.6
01E46:  BRA    1E4E
....................              {
....................                bit_clear(Red1_7,7); bit_set(Green1_7,7); 
01E48:  BCF    4E.7
01E4A:  BSF    52.7
....................              }
01E4C:  BRA    1E5A
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
01E4E:  BTFSS  xE9.6
01E50:  BRA    1E5A
01E52:  BTFSS  xEA.6
01E54:  BRA    1E5A
....................              {
....................                bit_set(Red1_7,7); bit_set(Green
01E56:  BSF    4E.7
01E58:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
01E5A:  BTFSS  xDE.7
01E5C:  BRA    1E64
....................            {
....................              bit_clear(Red8_8,0); bit_clear(Green8_8,0);
01E5E:  BCF    4F.0
01E60:  BCF    53.0
....................            }
01E62:  BRA    1E8C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
01E64:  BTFSS  xE9.7
01E66:  BRA    1E72
01E68:  BTFSC  xEA.7
01E6A:  BRA    1E72
....................              {
....................                bit_set(Red8_8,0); bit_clear(Green8_8,0);
01E6C:  BSF    4F.0
01E6E:  BCF    53.0
....................              }
01E70:  BRA    1E8C
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
01E72:  BTFSC  xE9.7
01E74:  BRA    1E80
01E76:  BTFSS  xEA.7
01E78:  BRA    1E80
....................              {
....................                bit_clear(Red8_8,0); bit_set(Green8_8,0); 
01E7A:  BCF    4F.0
01E7C:  BSF    53.0
....................              }
01E7E:  BRA    1E8C
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
01E80:  BTFSS  xE9.7
01E82:  BRA    1E8C
01E84:  BTFSS  xEA.7
01E86:  BRA    1E8C
....................              {
....................                bit_set(Red8_8,0); bit_set(Green8_8,0) ; 
01E88:  BSF    4F.0
01E8A:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
.................... 
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_7);
01E8C:  MOVLW  04
01E8E:  MOVLB  8
01E90:  MOVWF  x7D
01E92:  MOVFF  4E,87E
01E96:  MOVLB  0
01E98:  RCALL  1CC0
....................            IO_OUTPUT_B(IO_DEVICE_2, Red8_8);
01E9A:  MOVLW  04
01E9C:  MOVLB  8
01E9E:  MOVWF  x7D
01EA0:  MOVFF  4F,87E
01EA4:  MOVLB  0
01EA6:  RCALL  1CD6
....................                       
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_7);
01EA8:  MOVLW  06
01EAA:  MOVLB  8
01EAC:  MOVWF  x7D
01EAE:  MOVFF  52,87E
01EB2:  MOVLB  0
01EB4:  RCALL  1CC0
....................            IO_OUTPUT_B(IO_DEVICE_3, Green8_8);
01EB6:  MOVLW  06
01EB8:  MOVLB  8
01EBA:  MOVWF  x7D
01EBC:  MOVFF  53,87E
01EC0:  MOVLB  0
01EC2:  RCALL  1CD6
....................            
.................... 
....................                                            
....................            
....................    }
01EC4:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    In.B1 = 1;
*
0446A:  MOVLB  7
0446C:  BSF    xE5.0
....................    In.B2 = 1;
0446E:  BSF    xE5.1
....................    In.B3 = 1;
04470:  BSF    xE5.2
....................    In.B4 = 1;
04472:  BSF    xE5.3
....................    In.B5 = 1;
04474:  BSF    xE5.4
....................    In.B6 = 1;
04476:  BSF    xE5.5
....................    In.B7 = 1;
04478:  BSF    xE5.6
....................    In.B8 = 1;
0447A:  BSF    xE5.7
0447C:  MOVLB  0
0447E:  GOTO   6444 (RETURN)
....................       /*
....................       Inputt.B1 = ~InputType.B1;
....................       Inputt.B2 = ~InputType.B2;
....................       Inputt.B3 = ~InputType.B3;
....................       Inputt.B4 = ~InputType.B4;
....................       Inputt.B5 = ~InputType.B5;
....................       Inputt.B6 = ~InputType.B6;
....................       Inputt.B7 = ~InputType.B7;
....................       Inputt.B8 = ~InputType.B8;
....................       Ack.B1 = 0;
....................       Ack.B2 = 0;
....................       Ack.B3 = 0;
....................       Ack.B4 = 0;
....................       Ack.B5 = 0;
....................       Ack.B6 = 0;
....................       Ack.B7 = 0;
....................       Ack.B8 = 0;
....................       */
....................   
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
0636E:  MOVFF  32,875
....................    output_temp[1] = output9_16;
06372:  MOVFF  33,876
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
06376:  BSF    F94.2
06378:  BTFSC  F82.2
0637A:  BRA    6380
0637C:  BTFSS  1A.6
0637E:  BRA    6384
06380:  BTFSS  1A.4
06382:  BRA    6390
06384:  MOVLW  32
06386:  MOVLB  8
06388:  MOVWF  x7E
0638A:  MOVLB  0
0638C:  CALL   074A
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
06390:  BSF    F94.2
06392:  BTFSC  F82.2
06394:  BRA    639A
06396:  BTFSS  1A.6
06398:  BRA    639E
0639A:  BTFSS  1A.4
0639C:  BRA    642A
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
0639E:  BSF    F94.2
063A0:  BTFSC  F82.2
063A2:  BRA    63A8
063A4:  BTFSS  1A.6
063A6:  BRA    63AC
063A8:  BTFSS  1A.4
063AA:  BRA    6428
....................            {
....................              restart_wdt();
063AC:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
063AE:  MOVF   2F,F
063B0:  BNZ   63B6
063B2:  MOVLW  06
063B4:  MOVWF  2F
....................               Test = 1;
063B6:  BSF    1A.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
063B8:  MOVLW  04
063BA:  MOVLB  8
063BC:  MOVWF  x7D
063BE:  SETF   x7E
063C0:  MOVLB  0
063C2:  CALL   1CC0
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
063C6:  MOVLW  04
063C8:  MOVLB  8
063CA:  MOVWF  x7D
063CC:  SETF   x7E
063CE:  MOVLB  0
063D0:  CALL   1CD6
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
063D4:  MOVLW  06
063D6:  MOVLB  8
063D8:  MOVWF  x7D
063DA:  SETF   x7E
063DC:  MOVLB  0
063DE:  CALL   1CC0
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
063E2:  MOVLW  06
063E4:  MOVLB  8
063E6:  MOVWF  x7D
063E8:  SETF   x7E
063EA:  MOVLB  0
063EC:  CALL   1CD6
....................                  
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
063F0:  MOVLW  08
063F2:  MOVLB  8
063F4:  MOVWF  x7D
063F6:  SETF   x7E
063F8:  MOVLB  0
063FA:  CALL   1CC0
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
063FE:  MOVLW  08
06400:  MOVLB  8
06402:  MOVWF  x7D
06404:  SETF   x7E
06406:  MOVLB  0
06408:  CALL   1CD6
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
0640C:  MOVLW  0A
0640E:  MOVLB  8
06410:  MOVWF  x7D
06412:  SETF   x7E
06414:  MOVLB  0
06416:  CALL   1CC0
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
0641A:  MOVLW  0A
0641C:  MOVLB  8
0641E:  MOVWF  x7D
06420:  SETF   x7E
06422:  MOVLB  0
06424:  CALL   1CD6
.................... 
....................              
....................            }
....................          
....................        }
06428:  BRA    643A
....................        else if(input(Ptest) == 1 && Test == 1)
0642A:  BSF    F94.2
0642C:  BTFSS  F82.2
0642E:  BRA    643A
06430:  BTFSS  1A.6
06432:  BRA    643A
....................        {
....................            T_test = 0x00;
06434:  CLRF   2F
....................            Test = 0;
06436:  BCF    1A.6
....................            Test_fault = 0;
06438:  BCF    1A.5
....................        }
....................        if(Test_fault == 1)
0643A:  BTFSS  1A.5
0643C:  BRA    6452
....................        {
....................           functointest_f = 1;
0643E:  BSF    30.1
....................           ForceAllAlarm();
06440:  GOTO   446A
....................           Anal_Function();
06444:  CALL   49B0
....................           if(Input(Ptest) == 1)
06448:  BSF    F94.2
0644A:  BTFSS  F82.2
0644C:  BRA    6450
....................           {
....................             Test_fault = 0;
0644E:  BCF    1A.5
....................           }
....................        }
06450:  BRA    6468
....................        else if(input(Ptest) == 1 && Test == 1)
06452:  BSF    F94.2
06454:  BTFSS  F82.2
06456:  BRA    6468
06458:  BTFSS  1A.6
0645A:  BRA    6468
....................        {
....................           if(NoOfPoint >= 16)
0645C:  MOVF   x6D,W
0645E:  SUBLW  0F
06460:  BC    6462
....................           {
.................... 
....................           }
....................           
.................... 
....................           T_test = 0x00;
06462:  CLRF   2F
....................           Test = 0;
06464:  BCF    1A.6
....................           Test_fault = 0;
06466:  BCF    1A.5
....................        }
06468:  GOTO   6BB0 (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
02134:  BSF    F94.0
02136:  BTFSC  F82.0
02138:  BRA    213E
0213A:  BTFSS  1A.7
0213C:  BRA    2142
0213E:  BTFSS  1A.2
02140:  BRA    214E
02142:  MOVLW  32
02144:  MOVLB  8
02146:  MOVWF  x7E
02148:  MOVLB  0
0214A:  CALL   074A
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
0214E:  BSF    F94.0
02150:  BTFSC  F82.0
02152:  BRA    2158
02154:  BTFSS  1A.7
02156:  BRA    215C
02158:  BTFSS  1A.2
0215A:  BRA    2206
....................    {
....................             AutoAckFlag = 0;
0215C:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
0215E:  CLRF   1D
.................... 
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
02160:  MOVLB  7
02162:  BTFSC  xE5.0
02164:  BRA    216A
02166:  BTFSS  xE6.0
02168:  BRA    2174
....................            {
....................              Ack.B1 = 1;
0216A:  BSF    xE4.0
....................              In.B1 = 0;
0216C:  BCF    xE5.0
....................              In2.B1 = 0;      //for auto reset
0216E:  BCF    xE6.0
....................              Output.B1 = 0;
02170:  BCF    xDE.0
....................              SendSMS.B1 =0;
02172:  BCF    xEB.0
....................            }
.................... 
....................            if((In.B2 == 1)||(In2.B2 == 1))
02174:  BTFSC  xE5.1
02176:  BRA    217C
02178:  BTFSS  xE6.1
0217A:  BRA    2186
....................            {
....................              Ack.B2 = 1;
0217C:  BSF    xE4.1
....................              In.B2 = 0;
0217E:  BCF    xE5.1
....................              In2.B2 = 0;      //for auto reset
02180:  BCF    xE6.1
....................              Output.B2 = 0;
02182:  BCF    xDE.1
....................              SendSMS.B2 =0;
02184:  BCF    xEB.1
....................            }
.................... 
....................            if((In.B3 == 1)||(In2.B3 == 1))
02186:  BTFSC  xE5.2
02188:  BRA    218E
0218A:  BTFSS  xE6.2
0218C:  BRA    2198
....................            {
....................              Ack.B3 = 1;
0218E:  BSF    xE4.2
....................              In.B3 = 0;
02190:  BCF    xE5.2
....................              In2.B3 = 0;      //for auto reset
02192:  BCF    xE6.2
....................              Output.B3 = 0;
02194:  BCF    xDE.2
....................              SendSMS.B3 =0;
02196:  BCF    xEB.2
....................            }
.................... 
....................            if((In.B4 == 1)||(In2.B4 == 1))
02198:  BTFSC  xE5.3
0219A:  BRA    21A0
0219C:  BTFSS  xE6.3
0219E:  BRA    21AA
....................            {
....................              Ack.B4 = 1;
021A0:  BSF    xE4.3
....................              In.B4 = 0;
021A2:  BCF    xE5.3
....................              In2.B4 = 0;      //for auto reset
021A4:  BCF    xE6.3
....................              Output.B4 = 0;
021A6:  BCF    xDE.3
....................              SendSMS.B4 =0;
021A8:  BCF    xEB.3
....................            }
.................... 
....................            if((In.B5 == 1)||(In2.B5 == 1))
021AA:  BTFSC  xE5.4
021AC:  BRA    21B2
021AE:  BTFSS  xE6.4
021B0:  BRA    21BC
....................            {
....................              Ack.B5 = 1;
021B2:  BSF    xE4.4
....................              In.B5 = 0;
021B4:  BCF    xE5.4
....................              In2.B5 = 0;      //for auto reset
021B6:  BCF    xE6.4
....................              Output.B5 = 0;
021B8:  BCF    xDE.4
....................              SendSMS.B5 =0;
021BA:  BCF    xEB.4
....................            }
.................... 
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
021BC:  BTFSC  xE5.5
021BE:  BRA    21C4
021C0:  BTFSS  xE6.5
021C2:  BRA    21CE
....................            {
....................              Ack.B6 = 1;
021C4:  BSF    xE4.5
....................              In.B6 = 0;
021C6:  BCF    xE5.5
....................              In2.B6 = 0;      //for auto reset
021C8:  BCF    xE6.5
....................              Output.B6 = 0;
021CA:  BCF    xDE.5
....................              SendSMS.B6 =0;
021CC:  BCF    xEB.5
....................            }
.................... 
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
021CE:  BTFSC  xE5.6
021D0:  BRA    21D6
021D2:  BTFSS  xE6.6
021D4:  BRA    21E0
....................            {
....................              Ack.B7 = 1;
021D6:  BSF    xE4.6
....................              In.B7 = 0;
021D8:  BCF    xE5.6
....................              In2.B7 = 0;      //for auto reset
021DA:  BCF    xE6.6
....................              Output.B7 = 0;
021DC:  BCF    xDE.6
....................              SendSMS.B7 =0;
021DE:  BCF    xEB.6
....................            }
.................... 
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
021E0:  BTFSC  xE5.7
021E2:  BRA    21E8
021E4:  BTFSS  xE6.7
021E6:  BRA    21F2
....................            {
....................              Ack.B8 = 1;
021E8:  BSF    xE4.7
....................              In.B8 = 0;
021EA:  BCF    xE5.7
....................              In2.B8 = 0;      //for auto reset
021EC:  BCF    xE6.7
....................              Output.B8 = 0;
021EE:  BCF    xDE.7
....................              SendSMS.B8 =0;
021F0:  BCF    xEB.7
....................            }
....................       
....................             if(functointest_f){
021F2:  BTFSS  30.1
021F4:  BRA    21F8
....................                functointest_f = 0;
021F6:  BCF    30.1
....................             }
....................             Ack_F = 1;
021F8:  BSF    1A.7
....................             output_bit(Pbuzzer,1);   //Buzzer
021FA:  BSF    F89.4
021FC:  BCF    F92.4
....................             output_bit(Pbell,1);     //Bell
021FE:  BSF    F89.3
02200:  BCF    F92.3
....................    }
02202:  BRA    2214
02204:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
02206:  BSF    F94.0
02208:  BTFSS  F82.0
0220A:  BRA    2212
0220C:  BTFSS  1A.7
0220E:  BRA    2212
....................    {
....................       Ack_F = 0;
02210:  BCF    1A.7
02212:  MOVLB  7
....................    }
02214:  MOVLB  0
02216:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
02218:  BSF    F94.1
0221A:  BTFSC  F82.1
0221C:  BRA    2222
0221E:  BTFSS  30.0
02220:  BRA    2226
02222:  BTFSS  1A.3
02224:  BRA    2232
02226:  MOVLW  32
02228:  MOVLB  8
0222A:  MOVWF  x7E
0222C:  MOVLB  0
0222E:  CALL   074A
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
02232:  BSF    F94.1
02234:  BTFSC  F82.1
02236:  BRA    223C
02238:  BTFSS  30.0
0223A:  BRA    2240
0223C:  BTFSS  1A.3
0223E:  BRA    2388
....................     {
....................        AutoResetFlag = 0;
02240:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
02242:  MOVLW  00
02244:  MOVLB  7
02246:  BTFSC  xDD.0
02248:  MOVLW  01
0224A:  MOVLB  8
0224C:  MOVWF  x7F
0224E:  MOVLW  00
02250:  MOVLB  7
02252:  BTFSC  xDF.0
02254:  MOVLW  01
02256:  MOVLB  8
02258:  XORWF  x7F,W
0225A:  BNZ   226A
0225C:  MOVLB  7
0225E:  BTFSS  xE5.0
02260:  BRA    2266
02262:  MOVLB  8
02264:  BRA    226A
02266:  BSF    xDE.0
02268:  MOVLB  8
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
0226A:  MOVLW  00
0226C:  MOVLB  7
0226E:  BTFSC  xDD.1
02270:  MOVLW  01
02272:  MOVLB  8
02274:  MOVWF  x7F
02276:  MOVLW  00
02278:  MOVLB  7
0227A:  BTFSC  xDF.1
0227C:  MOVLW  01
0227E:  MOVLB  8
02280:  XORWF  x7F,W
02282:  BNZ   2292
02284:  MOVLB  7
02286:  BTFSS  xE5.1
02288:  BRA    228E
0228A:  MOVLB  8
0228C:  BRA    2292
0228E:  BSF    xDE.1
02290:  MOVLB  8
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
02292:  MOVLW  00
02294:  MOVLB  7
02296:  BTFSC  xDD.2
02298:  MOVLW  01
0229A:  MOVLB  8
0229C:  MOVWF  x7F
0229E:  MOVLW  00
022A0:  MOVLB  7
022A2:  BTFSC  xDF.2
022A4:  MOVLW  01
022A6:  MOVLB  8
022A8:  XORWF  x7F,W
022AA:  BNZ   22BA
022AC:  MOVLB  7
022AE:  BTFSS  xE5.2
022B0:  BRA    22B6
022B2:  MOVLB  8
022B4:  BRA    22BA
022B6:  BSF    xDE.2
022B8:  MOVLB  8
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
022BA:  MOVLW  00
022BC:  MOVLB  7
022BE:  BTFSC  xDD.3
022C0:  MOVLW  01
022C2:  MOVLB  8
022C4:  MOVWF  x7F
022C6:  MOVLW  00
022C8:  MOVLB  7
022CA:  BTFSC  xDF.3
022CC:  MOVLW  01
022CE:  MOVLB  8
022D0:  XORWF  x7F,W
022D2:  BNZ   22E2
022D4:  MOVLB  7
022D6:  BTFSS  xE5.3
022D8:  BRA    22DE
022DA:  MOVLB  8
022DC:  BRA    22E2
022DE:  BSF    xDE.3
022E0:  MOVLB  8
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
022E2:  MOVLW  00
022E4:  MOVLB  7
022E6:  BTFSC  xDD.4
022E8:  MOVLW  01
022EA:  MOVLB  8
022EC:  MOVWF  x7F
022EE:  MOVLW  00
022F0:  MOVLB  7
022F2:  BTFSC  xDF.4
022F4:  MOVLW  01
022F6:  MOVLB  8
022F8:  XORWF  x7F,W
022FA:  BNZ   230A
022FC:  MOVLB  7
022FE:  BTFSS  xE5.4
02300:  BRA    2306
02302:  MOVLB  8
02304:  BRA    230A
02306:  BSF    xDE.4
02308:  MOVLB  8
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
0230A:  MOVLW  00
0230C:  MOVLB  7
0230E:  BTFSC  xDD.5
02310:  MOVLW  01
02312:  MOVLB  8
02314:  MOVWF  x7F
02316:  MOVLW  00
02318:  MOVLB  7
0231A:  BTFSC  xDF.5
0231C:  MOVLW  01
0231E:  MOVLB  8
02320:  XORWF  x7F,W
02322:  BNZ   2332
02324:  MOVLB  7
02326:  BTFSS  xE5.5
02328:  BRA    232E
0232A:  MOVLB  8
0232C:  BRA    2332
0232E:  BSF    xDE.5
02330:  MOVLB  8
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
02332:  MOVLW  00
02334:  MOVLB  7
02336:  BTFSC  xDD.6
02338:  MOVLW  01
0233A:  MOVLB  8
0233C:  MOVWF  x7F
0233E:  MOVLW  00
02340:  MOVLB  7
02342:  BTFSC  xDF.6
02344:  MOVLW  01
02346:  MOVLB  8
02348:  XORWF  x7F,W
0234A:  BNZ   235A
0234C:  MOVLB  7
0234E:  BTFSS  xE5.6
02350:  BRA    2356
02352:  MOVLB  8
02354:  BRA    235A
02356:  BSF    xDE.6
02358:  MOVLB  8
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
0235A:  MOVLW  00
0235C:  MOVLB  7
0235E:  BTFSC  xDD.7
02360:  MOVLW  01
02362:  MOVLB  8
02364:  MOVWF  x7F
02366:  MOVLW  00
02368:  MOVLB  7
0236A:  BTFSC  xDF.7
0236C:  MOVLW  01
0236E:  MOVLB  8
02370:  XORWF  x7F,W
02372:  BNZ   2382
02374:  MOVLB  7
02376:  BTFSS  xE5.7
02378:  BRA    237E
0237A:  MOVLB  8
0237C:  BRA    2382
0237E:  BSF    xDE.7
02380:  MOVLB  8
.................... 
.................... 
....................        Reset_F = 1;
02382:  BSF    30.0
....................        
....................        
.................... 
....................        
....................     }
02384:  BRA    2396
02386:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
02388:  BSF    F94.1
0238A:  BTFSS  F82.1
0238C:  BRA    2394
0238E:  BTFSS  30.0
02390:  BRA    2394
....................     {
....................        Reset_F = 0;
02392:  BCF    30.0
02394:  MOVLB  8
....................     }
02396:  MOVLB  0
02398:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////// Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
044A8:  MOVLB  8
044AA:  DECFSZ x7D,W
044AC:  BRA    4726
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
044AE:  MOVLW  00
044B0:  MOVLB  7
044B2:  BTFSC  xE5.0
044B4:  MOVLW  01
044B6:  MOVLB  8
044B8:  MOVWF  x80
044BA:  MOVLW  00
044BC:  MOVLB  7
044BE:  BTFSC  xE6.0
044C0:  MOVLW  01
044C2:  MOVLB  8
044C4:  IORWF  x80,W
044C6:  MOVWF  x7F
044C8:  MOVLW  00
044CA:  MOVLB  7
044CC:  BTFSS  xE4.0
044CE:  MOVLW  01
044D0:  MOVLB  8
044D2:  ANDWF  x7F,F
044D4:  MOVLW  00
044D6:  MOVLB  7
044D8:  BTFSC  xE1.0
044DA:  MOVLW  01
044DC:  MOVLB  8
044DE:  MOVWF  x82
044E0:  MOVLW  00
044E2:  MOVLB  7
044E4:  BTFSC  xE2.0
044E6:  MOVLW  01
044E8:  MOVLB  8
044EA:  IORWF  x82,W
044EC:  ANDWF  x7F,W
044EE:  BCF    x7E.0
044F0:  BTFSC  FE8.0
044F2:  BSF    x7E.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
044F4:  MOVLW  00
044F6:  BTFSC  x7E.0
044F8:  MOVLW  01
044FA:  MOVWF  x7F
044FC:  MOVLW  00
044FE:  MOVLB  7
04500:  BTFSC  xE5.1
04502:  MOVLW  01
04504:  MOVLB  8
04506:  MOVWF  x81
04508:  MOVLW  00
0450A:  MOVLB  7
0450C:  BTFSC  xE6.1
0450E:  MOVLW  01
04510:  MOVLB  8
04512:  IORWF  x81,W
04514:  MOVWF  x80
04516:  MOVLW  00
04518:  MOVLB  7
0451A:  BTFSS  xE4.1
0451C:  MOVLW  01
0451E:  MOVLB  8
04520:  ANDWF  x80,F
04522:  MOVLW  00
04524:  MOVLB  7
04526:  BTFSC  xE1.1
04528:  MOVLW  01
0452A:  MOVLB  8
0452C:  MOVWF  x83
0452E:  MOVLW  00
04530:  MOVLB  7
04532:  BTFSC  xE2.1
04534:  MOVLW  01
04536:  MOVLB  8
04538:  IORWF  x83,W
0453A:  ANDWF  x80,W
0453C:  IORWF  x7F,W
0453E:  BCF    x7E.0
04540:  BTFSC  FE8.0
04542:  BSF    x7E.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
04544:  MOVLW  00
04546:  BTFSC  x7E.0
04548:  MOVLW  01
0454A:  MOVWF  x7F
0454C:  MOVLW  00
0454E:  MOVLB  7
04550:  BTFSC  xE5.2
04552:  MOVLW  01
04554:  MOVLB  8
04556:  MOVWF  x81
04558:  MOVLW  00
0455A:  MOVLB  7
0455C:  BTFSC  xE6.2
0455E:  MOVLW  01
04560:  MOVLB  8
04562:  IORWF  x81,W
04564:  MOVWF  x80
04566:  MOVLW  00
04568:  MOVLB  7
0456A:  BTFSS  xE4.2
0456C:  MOVLW  01
0456E:  MOVLB  8
04570:  ANDWF  x80,F
04572:  MOVLW  00
04574:  MOVLB  7
04576:  BTFSC  xE1.2
04578:  MOVLW  01
0457A:  MOVLB  8
0457C:  MOVWF  x83
0457E:  MOVLW  00
04580:  MOVLB  7
04582:  BTFSC  xE2.2
04584:  MOVLW  01
04586:  MOVLB  8
04588:  IORWF  x83,W
0458A:  ANDWF  x80,W
0458C:  IORWF  x7F,W
0458E:  BCF    x7E.0
04590:  BTFSC  FE8.0
04592:  BSF    x7E.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
04594:  MOVLW  00
04596:  BTFSC  x7E.0
04598:  MOVLW  01
0459A:  MOVWF  x7F
0459C:  MOVLW  00
0459E:  MOVLB  7
045A0:  BTFSC  xE5.3
045A2:  MOVLW  01
045A4:  MOVLB  8
045A6:  MOVWF  x81
045A8:  MOVLW  00
045AA:  MOVLB  7
045AC:  BTFSC  xE6.3
045AE:  MOVLW  01
045B0:  MOVLB  8
045B2:  IORWF  x81,W
045B4:  MOVWF  x80
045B6:  MOVLW  00
045B8:  MOVLB  7
045BA:  BTFSS  xE4.3
045BC:  MOVLW  01
045BE:  MOVLB  8
045C0:  ANDWF  x80,F
045C2:  MOVLW  00
045C4:  MOVLB  7
045C6:  BTFSC  xE1.3
045C8:  MOVLW  01
045CA:  MOVLB  8
045CC:  MOVWF  x83
045CE:  MOVLW  00
045D0:  MOVLB  7
045D2:  BTFSC  xE2.3
045D4:  MOVLW  01
045D6:  MOVLB  8
045D8:  IORWF  x83,W
045DA:  ANDWF  x80,W
045DC:  IORWF  x7F,W
045DE:  BCF    x7E.0
045E0:  BTFSC  FE8.0
045E2:  BSF    x7E.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
045E4:  MOVLW  00
045E6:  BTFSC  x7E.0
045E8:  MOVLW  01
045EA:  MOVWF  x7F
045EC:  MOVLW  00
045EE:  MOVLB  7
045F0:  BTFSC  xE5.4
045F2:  MOVLW  01
045F4:  MOVLB  8
045F6:  MOVWF  x81
045F8:  MOVLW  00
045FA:  MOVLB  7
045FC:  BTFSC  xE6.4
045FE:  MOVLW  01
04600:  MOVLB  8
04602:  IORWF  x81,W
04604:  MOVWF  x80
04606:  MOVLW  00
04608:  MOVLB  7
0460A:  BTFSS  xE4.4
0460C:  MOVLW  01
0460E:  MOVLB  8
04610:  ANDWF  x80,F
04612:  MOVLW  00
04614:  MOVLB  7
04616:  BTFSC  xE1.4
04618:  MOVLW  01
0461A:  MOVLB  8
0461C:  MOVWF  x83
0461E:  MOVLW  00
04620:  MOVLB  7
04622:  BTFSC  xE2.4
04624:  MOVLW  01
04626:  MOVLB  8
04628:  IORWF  x83,W
0462A:  ANDWF  x80,W
0462C:  IORWF  x7F,W
0462E:  BCF    x7E.0
04630:  BTFSC  FE8.0
04632:  BSF    x7E.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
04634:  MOVLW  00
04636:  BTFSC  x7E.0
04638:  MOVLW  01
0463A:  MOVWF  x7F
0463C:  MOVLW  00
0463E:  MOVLB  7
04640:  BTFSC  xE5.5
04642:  MOVLW  01
04644:  MOVLB  8
04646:  MOVWF  x81
04648:  MOVLW  00
0464A:  MOVLB  7
0464C:  BTFSC  xE6.5
0464E:  MOVLW  01
04650:  MOVLB  8
04652:  IORWF  x81,W
04654:  MOVWF  x80
04656:  MOVLW  00
04658:  MOVLB  7
0465A:  BTFSS  xE4.5
0465C:  MOVLW  01
0465E:  MOVLB  8
04660:  ANDWF  x80,F
04662:  MOVLW  00
04664:  MOVLB  7
04666:  BTFSC  xE1.5
04668:  MOVLW  01
0466A:  MOVLB  8
0466C:  MOVWF  x83
0466E:  MOVLW  00
04670:  MOVLB  7
04672:  BTFSC  xE2.5
04674:  MOVLW  01
04676:  MOVLB  8
04678:  IORWF  x83,W
0467A:  ANDWF  x80,W
0467C:  IORWF  x7F,W
0467E:  BCF    x7E.0
04680:  BTFSC  FE8.0
04682:  BSF    x7E.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
04684:  MOVLW  00
04686:  BTFSC  x7E.0
04688:  MOVLW  01
0468A:  MOVWF  x7F
0468C:  MOVLW  00
0468E:  MOVLB  7
04690:  BTFSC  xE5.6
04692:  MOVLW  01
04694:  MOVLB  8
04696:  MOVWF  x81
04698:  MOVLW  00
0469A:  MOVLB  7
0469C:  BTFSC  xE6.6
0469E:  MOVLW  01
046A0:  MOVLB  8
046A2:  IORWF  x81,W
046A4:  MOVWF  x80
046A6:  MOVLW  00
046A8:  MOVLB  7
046AA:  BTFSS  xE4.6
046AC:  MOVLW  01
046AE:  MOVLB  8
046B0:  ANDWF  x80,F
046B2:  MOVLW  00
046B4:  MOVLB  7
046B6:  BTFSC  xE1.6
046B8:  MOVLW  01
046BA:  MOVLB  8
046BC:  MOVWF  x83
046BE:  MOVLW  00
046C0:  MOVLB  7
046C2:  BTFSC  xE2.6
046C4:  MOVLW  01
046C6:  MOVLB  8
046C8:  IORWF  x83,W
046CA:  ANDWF  x80,W
046CC:  IORWF  x7F,W
046CE:  BCF    x7E.0
046D0:  BTFSC  FE8.0
046D2:  BSF    x7E.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
046D4:  MOVLW  00
046D6:  BTFSC  x7E.0
046D8:  MOVLW  01
046DA:  MOVWF  x7F
046DC:  MOVLW  00
046DE:  MOVLB  7
046E0:  BTFSC  xE5.7
046E2:  MOVLW  01
046E4:  MOVLB  8
046E6:  MOVWF  x81
046E8:  MOVLW  00
046EA:  MOVLB  7
046EC:  BTFSC  xE6.7
046EE:  MOVLW  01
046F0:  MOVLB  8
046F2:  IORWF  x81,W
046F4:  MOVWF  x80
046F6:  MOVLW  00
046F8:  MOVLB  7
046FA:  BTFSS  xE4.7
046FC:  MOVLW  01
046FE:  MOVLB  8
04700:  ANDWF  x80,F
04702:  MOVLW  00
04704:  MOVLB  7
04706:  BTFSC  xE1.7
04708:  MOVLW  01
0470A:  MOVLB  8
0470C:  MOVWF  x83
0470E:  MOVLW  00
04710:  MOVLB  7
04712:  BTFSC  xE2.7
04714:  MOVLW  01
04716:  MOVLB  8
04718:  IORWF  x83,W
0471A:  ANDWF  x80,W
0471C:  IORWF  x7F,W
0471E:  BCF    x7E.0
04720:  BTFSC  FE8.0
04722:  BSF    x7E.0
.................... 
....................      
....................    }
04724:  BRA    49A4
....................    else if(DatType == 0x02)             //Bell
04726:  MOVF   x7D,W
04728:  SUBLW  02
0472A:  BTFSS  FD8.2
0472C:  BRA    49A4
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
0472E:  MOVLW  00
04730:  MOVLB  7
04732:  BTFSC  xE5.0
04734:  MOVLW  01
04736:  MOVLB  8
04738:  MOVWF  x80
0473A:  MOVLW  00
0473C:  MOVLB  7
0473E:  BTFSC  xE6.0
04740:  MOVLW  01
04742:  MOVLB  8
04744:  IORWF  x80,W
04746:  MOVWF  x7F
04748:  MOVLW  00
0474A:  MOVLB  7
0474C:  BTFSS  xE4.0
0474E:  MOVLW  01
04750:  MOVLB  8
04752:  ANDWF  x7F,F
04754:  MOVLW  00
04756:  MOVLB  7
04758:  BTFSS  xE1.0
0475A:  MOVLW  01
0475C:  MOVLB  8
0475E:  MOVWF  x82
04760:  MOVLW  00
04762:  MOVLB  7
04764:  BTFSC  xE2.0
04766:  MOVLW  01
04768:  MOVLB  8
0476A:  IORWF  x82,W
0476C:  ANDWF  x7F,W
0476E:  BCF    x7E.0
04770:  BTFSC  FE8.0
04772:  BSF    x7E.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
04774:  MOVLW  00
04776:  BTFSC  x7E.0
04778:  MOVLW  01
0477A:  MOVWF  x7F
0477C:  MOVLW  00
0477E:  MOVLB  7
04780:  BTFSC  xE5.1
04782:  MOVLW  01
04784:  MOVLB  8
04786:  MOVWF  x81
04788:  MOVLW  00
0478A:  MOVLB  7
0478C:  BTFSC  xE6.1
0478E:  MOVLW  01
04790:  MOVLB  8
04792:  IORWF  x81,W
04794:  MOVWF  x80
04796:  MOVLW  00
04798:  MOVLB  7
0479A:  BTFSS  xE4.1
0479C:  MOVLW  01
0479E:  MOVLB  8
047A0:  ANDWF  x80,F
047A2:  MOVLW  00
047A4:  MOVLB  7
047A6:  BTFSS  xE1.1
047A8:  MOVLW  01
047AA:  MOVLB  8
047AC:  MOVWF  x83
047AE:  MOVLW  00
047B0:  MOVLB  7
047B2:  BTFSC  xE2.1
047B4:  MOVLW  01
047B6:  MOVLB  8
047B8:  IORWF  x83,W
047BA:  ANDWF  x80,W
047BC:  IORWF  x7F,W
047BE:  BCF    x7E.0
047C0:  BTFSC  FE8.0
047C2:  BSF    x7E.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
047C4:  MOVLW  00
047C6:  BTFSC  x7E.0
047C8:  MOVLW  01
047CA:  MOVWF  x7F
047CC:  MOVLW  00
047CE:  MOVLB  7
047D0:  BTFSC  xE5.2
047D2:  MOVLW  01
047D4:  MOVLB  8
047D6:  MOVWF  x81
047D8:  MOVLW  00
047DA:  MOVLB  7
047DC:  BTFSC  xE6.2
047DE:  MOVLW  01
047E0:  MOVLB  8
047E2:  IORWF  x81,W
047E4:  MOVWF  x80
047E6:  MOVLW  00
047E8:  MOVLB  7
047EA:  BTFSS  xE4.2
047EC:  MOVLW  01
047EE:  MOVLB  8
047F0:  ANDWF  x80,F
047F2:  MOVLW  00
047F4:  MOVLB  7
047F6:  BTFSS  xE1.2
047F8:  MOVLW  01
047FA:  MOVLB  8
047FC:  MOVWF  x83
047FE:  MOVLW  00
04800:  MOVLB  7
04802:  BTFSC  xE2.2
04804:  MOVLW  01
04806:  MOVLB  8
04808:  IORWF  x83,W
0480A:  ANDWF  x80,W
0480C:  IORWF  x7F,W
0480E:  BCF    x7E.0
04810:  BTFSC  FE8.0
04812:  BSF    x7E.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
04814:  MOVLW  00
04816:  BTFSC  x7E.0
04818:  MOVLW  01
0481A:  MOVWF  x7F
0481C:  MOVLW  00
0481E:  MOVLB  7
04820:  BTFSC  xE5.3
04822:  MOVLW  01
04824:  MOVLB  8
04826:  MOVWF  x81
04828:  MOVLW  00
0482A:  MOVLB  7
0482C:  BTFSC  xE6.3
0482E:  MOVLW  01
04830:  MOVLB  8
04832:  IORWF  x81,W
04834:  MOVWF  x80
04836:  MOVLW  00
04838:  MOVLB  7
0483A:  BTFSS  xE4.3
0483C:  MOVLW  01
0483E:  MOVLB  8
04840:  ANDWF  x80,F
04842:  MOVLW  00
04844:  MOVLB  7
04846:  BTFSS  xE1.3
04848:  MOVLW  01
0484A:  MOVLB  8
0484C:  MOVWF  x83
0484E:  MOVLW  00
04850:  MOVLB  7
04852:  BTFSC  xE2.3
04854:  MOVLW  01
04856:  MOVLB  8
04858:  IORWF  x83,W
0485A:  ANDWF  x80,W
0485C:  IORWF  x7F,W
0485E:  BCF    x7E.0
04860:  BTFSC  FE8.0
04862:  BSF    x7E.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
04864:  MOVLW  00
04866:  BTFSC  x7E.0
04868:  MOVLW  01
0486A:  MOVWF  x7F
0486C:  MOVLW  00
0486E:  MOVLB  7
04870:  BTFSC  xE5.4
04872:  MOVLW  01
04874:  MOVLB  8
04876:  MOVWF  x81
04878:  MOVLW  00
0487A:  MOVLB  7
0487C:  BTFSC  xE6.4
0487E:  MOVLW  01
04880:  MOVLB  8
04882:  IORWF  x81,W
04884:  MOVWF  x80
04886:  MOVLW  00
04888:  MOVLB  7
0488A:  BTFSS  xE4.4
0488C:  MOVLW  01
0488E:  MOVLB  8
04890:  ANDWF  x80,F
04892:  MOVLW  00
04894:  MOVLB  7
04896:  BTFSS  xE1.4
04898:  MOVLW  01
0489A:  MOVLB  8
0489C:  MOVWF  x83
0489E:  MOVLW  00
048A0:  MOVLB  7
048A2:  BTFSC  xE2.4
048A4:  MOVLW  01
048A6:  MOVLB  8
048A8:  IORWF  x83,W
048AA:  ANDWF  x80,W
048AC:  IORWF  x7F,W
048AE:  BCF    x7E.0
048B0:  BTFSC  FE8.0
048B2:  BSF    x7E.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
048B4:  MOVLW  00
048B6:  BTFSC  x7E.0
048B8:  MOVLW  01
048BA:  MOVWF  x7F
048BC:  MOVLW  00
048BE:  MOVLB  7
048C0:  BTFSC  xE5.5
048C2:  MOVLW  01
048C4:  MOVLB  8
048C6:  MOVWF  x81
048C8:  MOVLW  00
048CA:  MOVLB  7
048CC:  BTFSC  xE6.5
048CE:  MOVLW  01
048D0:  MOVLB  8
048D2:  IORWF  x81,W
048D4:  MOVWF  x80
048D6:  MOVLW  00
048D8:  MOVLB  7
048DA:  BTFSS  xE4.5
048DC:  MOVLW  01
048DE:  MOVLB  8
048E0:  ANDWF  x80,F
048E2:  MOVLW  00
048E4:  MOVLB  7
048E6:  BTFSS  xE1.5
048E8:  MOVLW  01
048EA:  MOVLB  8
048EC:  MOVWF  x83
048EE:  MOVLW  00
048F0:  MOVLB  7
048F2:  BTFSC  xE2.5
048F4:  MOVLW  01
048F6:  MOVLB  8
048F8:  IORWF  x83,W
048FA:  ANDWF  x80,W
048FC:  IORWF  x7F,W
048FE:  BCF    x7E.0
04900:  BTFSC  FE8.0
04902:  BSF    x7E.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
04904:  MOVLW  00
04906:  BTFSC  x7E.0
04908:  MOVLW  01
0490A:  MOVWF  x7F
0490C:  MOVLW  00
0490E:  MOVLB  7
04910:  BTFSC  xE5.6
04912:  MOVLW  01
04914:  MOVLB  8
04916:  MOVWF  x81
04918:  MOVLW  00
0491A:  MOVLB  7
0491C:  BTFSC  xE6.6
0491E:  MOVLW  01
04920:  MOVLB  8
04922:  IORWF  x81,W
04924:  MOVWF  x80
04926:  MOVLW  00
04928:  MOVLB  7
0492A:  BTFSS  xE4.6
0492C:  MOVLW  01
0492E:  MOVLB  8
04930:  ANDWF  x80,F
04932:  MOVLW  00
04934:  MOVLB  7
04936:  BTFSS  xE1.6
04938:  MOVLW  01
0493A:  MOVLB  8
0493C:  MOVWF  x83
0493E:  MOVLW  00
04940:  MOVLB  7
04942:  BTFSC  xE2.6
04944:  MOVLW  01
04946:  MOVLB  8
04948:  IORWF  x83,W
0494A:  ANDWF  x80,W
0494C:  IORWF  x7F,W
0494E:  BCF    x7E.0
04950:  BTFSC  FE8.0
04952:  BSF    x7E.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
04954:  MOVLW  00
04956:  BTFSC  x7E.0
04958:  MOVLW  01
0495A:  MOVWF  x7F
0495C:  MOVLW  00
0495E:  MOVLB  7
04960:  BTFSC  xE5.7
04962:  MOVLW  01
04964:  MOVLB  8
04966:  MOVWF  x81
04968:  MOVLW  00
0496A:  MOVLB  7
0496C:  BTFSC  xE6.7
0496E:  MOVLW  01
04970:  MOVLB  8
04972:  IORWF  x81,W
04974:  MOVWF  x80
04976:  MOVLW  00
04978:  MOVLB  7
0497A:  BTFSS  xE4.7
0497C:  MOVLW  01
0497E:  MOVLB  8
04980:  ANDWF  x80,F
04982:  MOVLW  00
04984:  MOVLB  7
04986:  BTFSS  xE1.7
04988:  MOVLW  01
0498A:  MOVLB  8
0498C:  MOVWF  x83
0498E:  MOVLW  00
04990:  MOVLB  7
04992:  BTFSC  xE2.7
04994:  MOVLW  01
04996:  MOVLB  8
04998:  IORWF  x83,W
0499A:  ANDWF  x80,W
0499C:  IORWF  x7F,W
0499E:  BCF    x7E.0
049A0:  BTFSC  FE8.0
049A2:  BSF    x7E.0
.................... 
.................... 
....................    }
....................    return(check);
049A4:  MOVLW  00
049A6:  BTFSC  x7E.0
049A8:  MOVLW  01
049AA:  MOVWF  01
049AC:  MOVLB  0
049AE:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
0646C:  CLRF   FF8
0646E:  BCF    FD0.7
06470:  BSF    07.7
06472:  MOVLW  70
06474:  MOVWF  FD3
06476:  BCF    F9B.6
06478:  BCF    F9B.7
0647A:  BSF    FB8.3
0647C:  MOVLW  A0
0647E:  MOVWF  FAF
06480:  MOVLW  01
06482:  MOVWF  FB0
06484:  MOVLW  A6
06486:  MOVWF  FAC
06488:  MOVLW  90
0648A:  MOVWF  FAB
0648C:  BCF    F93.0
0648E:  BSF    F8A.0
06490:  CLRF   19
06492:  BCF    1A.0
06494:  MOVLW  19
06496:  MOVWF  1B
06498:  BCF    1A.1
0649A:  MOVLW  64
0649C:  MOVWF  1C
0649E:  CLRF   1D
064A0:  BCF    1A.2
064A2:  BCF    1A.3
064A4:  BCF    1A.4
064A6:  CLRF   2E
064A8:  BCF    1A.5
064AA:  CLRF   2F
064AC:  BCF    1A.6
064AE:  BCF    1A.7
064B0:  BCF    30.0
064B2:  BCF    30.1
064B4:  BCF    30.2
064B6:  BCF    30.3
064B8:  CLRF   31
064BA:  BCF    30.4
064BC:  MOVLW  11
064BE:  MOVWF  x6F
064C0:  MOVLW  12
064C2:  MOVWF  x70
064C4:  MOVLW  13
064C6:  MOVWF  x71
064C8:  MOVLW  14
064CA:  MOVWF  x72
064CC:  MOVLW  16
064CE:  MOVWF  x73
064D0:  MOVLW  17
064D2:  MOVWF  x74
064D4:  MOVLW  19
064D6:  MOVWF  x75
064D8:  MOVLW  20
064DA:  MOVWF  x76
064DC:  BCF    30.5
064DE:  CLRF   x79
064E0:  MOVLW  01
064E2:  MOVLB  5
064E4:  MOVWF  x7C
064E6:  MOVLW  F4
064E8:  MOVWF  x7B
064EA:  CLRF   x7E
064EC:  CLRF   x7D
064EE:  CLRF   x80
064F0:  CLRF   x7F
064F2:  CLRF   x81
064F4:  MOVLB  6
064F6:  CLRF   x84
064F8:  CLRF   x85
064FA:  MOVLB  8
064FC:  CLRF   x70
064FE:  CLRF   x6F
06500:  MOVLB  F
06502:  CLRF   x38
06504:  CLRF   x39
06506:  CLRF   x3A
06508:  CLRF   F77
0650A:  CLRF   F78
0650C:  CLRF   F79
0650E:  MOVLB  8
06510:  CLRF   x71
.................... {
....................    
....................    
....................    delay_ms(50);
06512:  MOVLW  32
06514:  MOVWF  x7E
06516:  MOVLB  0
06518:  CALL   074A
....................    output_bit(Pled,0);   //power on watchdog signal
0651C:  BCF    F8A.5
0651E:  BCF    F93.5
.................... 
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD);
06520:  MOVF   FC1,W
06522:  ANDLW  F0
06524:  MOVWF  FC1
06526:  MOVLW  00
06528:  MOVLB  F
0652A:  MOVWF  x38
0652C:  MOVWF  x39
0652E:  MOVWF  x3A
....................    setup_adc(ADC_OFF|ADC_TAD_MUL_0);
06530:  BCF    FC2.0
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
06532:  MOVLW  80
06534:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
06536:  MOVLW  78
06538:  IORLW  06
0653A:  MOVWF  FBA
0653C:  MOVLW  C4
0653E:  MOVWF  FBB
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................    enable_interrupts(INT_TIMER2);
06540:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
06542:  BSF    F9D.5
....................    
....................    //setup_oscillator(False);
....................    
.................... 
....................    //  set_tris_c (0b01010111);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H |SPI_SS_DISABLED|SPI_H_TO_L  | SPI_CLK_DIV_4  );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L  | SPI_CLK_DIV_4 |SPI_SS_DISABLED); // Initial SPI
....................    //setup_spi(SPI_MASTER|SPI_H_TO_L|SPI_SS_DISABLED|SPI_CLK_DIV_16);
....................    //setup_spi2( FALSE );
....................    //setup_spi( FALSE );
....................    
....................   // setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //masterOK
....................    
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1
06544:  BCF    FC6.5
06546:  BCF    F94.5
06548:  BSF    F94.4
0654A:  BCF    F94.3
0654C:  MOVLW  20
0654E:  MOVWF  FC6
06550:  MOVLW  40
06552:  MOVWF  FC7
.................... 
....................     //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 ); //master2
....................     //setup_spi(SPI_MASTER |SPI_SS_DISABLED |SPI_SAMPLE_AT_END | SPI_H_TO_L | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1.1
....................    //spi_init(SPI1_MODE0, TRUE);
....................    //spi_init(250000);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_SS_DISABLED  | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_T2 | SPI_XMIT_L_TO_H);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L| SPI_SAMPLE_AT_END | SPI_CLK_DIV_64);//master3
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| SPI_L_TO_H | SPI_SAMPLE_AT_END | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| spi_L_to_H| SPI_XMIT_L_TO_H|SPI_CLK_DIV_4 );
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
06554:  MOVLB  0
06556:  GOTO   07AC
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
0655A:  MOVLB  8
0655C:  CLRF   x75
0655E:  SETF   x76
06560:  MOVLB  0
06562:  CALL   0842
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
06566:  MOVLB  8
06568:  CLRF   x75
0656A:  SETF   x76
0656C:  MOVLB  0
0656E:  CALL   0854
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
06572:  MOVLW  02
06574:  MOVLB  8
06576:  MOVWF  x75
06578:  SETF   x76
0657A:  MOVLB  0
0657C:  CALL   0842
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt 
06580:  MOVLW  02
06582:  MOVLB  8
06584:  MOVWF  x75
06586:  SETF   x76
06588:  MOVLB  0
0658A:  CALL   0854
....................    
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0658E:  MOVLB  8
06590:  CLRF   x7F
06592:  MOVLW  06
06594:  MOVWF  x80
06596:  SETF   x81
06598:  MOVLB  0
0659A:  CALL   077A
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0659E:  MOVLB  8
065A0:  CLRF   x7F
065A2:  MOVLW  16
065A4:  MOVWF  x80
065A6:  SETF   x81
065A8:  MOVLB  0
065AA:  CALL   077A
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
065AE:  MOVLW  02
065B0:  MOVLB  8
065B2:  MOVWF  x7F
065B4:  MOVLW  06
065B6:  MOVWF  x80
065B8:  SETF   x81
065BA:  MOVLB  0
065BC:  CALL   077A
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
065C0:  MOVLW  02
065C2:  MOVLB  8
065C4:  MOVWF  x7F
065C6:  MOVLW  16
065C8:  MOVWF  x80
065CA:  SETF   x81
065CC:  MOVLB  0
065CE:  CALL   077A
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
065D2:  MOVLW  04
065D4:  MOVLB  8
065D6:  MOVWF  x75
065D8:  CLRF   x76
065DA:  MOVLB  0
065DC:  CALL   0842
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
065E0:  MOVLW  04
065E2:  MOVLB  8
065E4:  MOVWF  x75
065E6:  CLRF   x76
065E8:  MOVLB  0
065EA:  CALL   0854
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
065EE:  MOVLW  06
065F0:  MOVLB  8
065F2:  MOVWF  x75
065F4:  CLRF   x76
065F6:  MOVLB  0
065F8:  CALL   0842
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
065FC:  MOVLW  06
065FE:  MOVLB  8
06600:  MOVWF  x75
06602:  CLRF   x76
06604:  MOVLB  0
06606:  CALL   0854
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0660A:  MOVLW  08
0660C:  MOVLB  8
0660E:  MOVWF  x75
06610:  CLRF   x76
06612:  MOVLB  0
06614:  CALL   0842
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
06618:  MOVLW  08
0661A:  MOVLB  8
0661C:  MOVWF  x75
0661E:  CLRF   x76
06620:  MOVLB  0
06622:  CALL   0854
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
06626:  MOVLW  0A
06628:  MOVLB  8
0662A:  MOVWF  x75
0662C:  CLRF   x76
0662E:  MOVLB  0
06630:  CALL   0842
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
06634:  MOVLW  0A
06636:  MOVLB  8
06638:  MOVWF  x75
0663A:  CLRF   x76
0663C:  MOVLB  0
0663E:  CALL   0854
....................    
....................    FlashingFlag = 1;
06642:  BSF    1A.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
06644:  MOVFF  6F,77
....................    Address = 1;
06648:  MOVLW  01
0664A:  MOVWF  x78
.................... 
....................    Output.B1 = 1;
0664C:  MOVLB  7
0664E:  BSF    xDE.0
....................    Output.B2 = 1;
06650:  BSF    xDE.1
....................    Output.B3 = 1;
06652:  BSF    xDE.2
....................    Output.B4 = 1;
06654:  BSF    xDE.3
....................    Output.B5 = 1;
06656:  BSF    xDE.4
....................    Output.B6 = 1;
06658:  BSF    xDE.5
....................    Output.B7 = 1;
0665A:  BSF    xDE.6
....................    Output.B8 = 1;
0665C:  BSF    xDE.7
.................... 
....................    
....................    ////////////////////
....................    In.B1 = 0;
0665E:  BCF    xE5.0
....................    In.B2 = 0;
06660:  BCF    xE5.1
....................    In.B3 = 0;
06662:  BCF    xE5.2
....................    In.B4 = 0;
06664:  BCF    xE5.3
....................    In.B5 = 0;
06666:  BCF    xE5.4
....................    In.B6 = 0;
06668:  BCF    xE5.5
....................    In.B7 = 0;
0666A:  BCF    xE5.6
....................    In.B8 = 0;
0666C:  BCF    xE5.7
.................... 
....................    
....................    ////////////////////
....................    In2.B1 = 0;
0666E:  BCF    xE6.0
....................    In2.B2 = 0;
06670:  BCF    xE6.1
....................    In2.B3 = 0;
06672:  BCF    xE6.2
....................    In2.B4 = 0;
06674:  BCF    xE6.3
....................    In2.B5 = 0;
06676:  BCF    xE6.4
....................    In2.B6 = 0;
06678:  BCF    xE6.5
....................    In2.B7 = 0;
0667A:  BCF    xE6.6
....................    In2.B8 = 0;  
0667C:  BCF    xE6.7
....................    ////////////////////////
....................    Ack.B1 = 0;
0667E:  BCF    xE4.0
....................    Ack.B2 = 0;
06680:  BCF    xE4.1
....................    Ack.B3 = 0;
06682:  BCF    xE4.2
....................    Ack.B4 = 0;
06684:  BCF    xE4.3
....................    Ack.B5 = 0;
06686:  BCF    xE4.4
....................    Ack.B6 = 0;
06688:  BCF    xE4.5
....................    Ack.B7 = 0;
0668A:  BCF    xE4.6
....................    Ack.B8 = 0;
0668C:  BCF    xE4.7
....................  
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
0668E:  MOVFF  FF2,875
06692:  BCF    FF2.7
06694:  CLRF   FAA
06696:  CLRF   FA9
06698:  BCF    FA6.6
0669A:  BCF    FA6.7
0669C:  BSF    FA6.0
0669E:  MOVF   FA8,W
066A0:  MOVLB  8
066A2:  BTFSC  x75.7
066A4:  BSF    FF2.7
066A6:  SUBLW  0F
066A8:  BNZ   66B4
....................    {
....................       Read_Config();
066AA:  MOVLB  0
066AC:  CALL   0868
....................    }
066B0:  BRA    6850
066B2:  MOVLB  8
....................    else
....................    {
....................       FlashingRateTime = 25;
066B4:  MOVLW  19
066B6:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
066B8:  MOVLW  F0
066BA:  MOVLB  0
066BC:  MOVWF  x6A
....................       Address = 0x01;
066BE:  MOVLW  01
066C0:  MOVWF  x78
.................... 
....................       AutoAckTime = 5;
066C2:  MOVLW  05
066C4:  MOVWF  x6B
....................       FlashingRate = 25;
066C6:  MOVLW  19
066C8:  MOVWF  x6C
....................       NoOfPoint = 16;
066CA:  MOVLW  10
066CC:  MOVWF  x6D
....................       FlashingRateTime = 0x00;
066CE:  CLRF   1B
.................... 
.................... 
....................       InputType.B1 = 1;
066D0:  MOVLB  7
066D2:  BSF    xDF.0
....................       InputType.B2 = 1;
066D4:  BSF    xDF.1
....................       InputType.B3 = 1;
066D6:  BSF    xDF.2
....................       InputType.B4 = 1;
066D8:  BSF    xDF.3
....................       InputType.B5 = 1;
066DA:  BSF    xDF.4
....................       InputType.B6 = 1;
066DC:  BSF    xDF.5
....................       InputType.B7 = 1;
066DE:  BSF    xDF.6
....................       InputType.B8 = 1;
066E0:  BSF    xDF.7
....................       
....................       FaultNCNO[1] = 1;
066E2:  MOVLB  8
066E4:  BSF    x6C.1
....................       FaultNCNO[2] = 1;
066E6:  BSF    x6C.2
....................       FaultNCNO[3] = 1;
066E8:  BSF    x6C.3
....................       FaultNCNO[4] = 1;
066EA:  BSF    x6C.4
....................       FaultNCNO[5] = 1;
066EC:  BSF    x6C.5
....................       FaultNCNO[6] = 1;
066EE:  BSF    x6C.6
....................       FaultNCNO[7] = 1;
066F0:  BSF    x6C.7
....................       FaultNCNO[8] = 1;
066F2:  BSF    x6D.0
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
066F4:  MOVLB  7
066F6:  BSF    xE0.0
....................       FaultType.B2= 1;
066F8:  BSF    xE0.1
....................       FaultType.B3 = 1;
066FA:  BSF    xE0.2
....................       FaultType.B4 = 1;
066FC:  BSF    xE0.3
....................       FaultType.B5 = 1;
066FE:  BSF    xE0.4
....................       FaultType.B6 = 1;
06700:  BSF    xE0.5
....................       FaultType.B7 = 1;
06702:  BSF    xE0.6
....................       FaultType.B8 = 1;
06704:  BSF    xE0.7
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
06706:  BSF    xE1.0
....................       OutputType.B2 = 1;
06708:  BSF    xE1.1
....................       OutputType.B3 = 1;
0670A:  BSF    xE1.2
....................       OutputType.B4 = 1;
0670C:  BSF    xE1.3
....................       OutputType.B5 = 1;
0670E:  BSF    xE1.4
....................       OutputType.B6 = 1;
06710:  BSF    xE1.5
....................       OutputType.B7 = 1;
06712:  BSF    xE1.6
....................       OutputType.B8 = 1;
06714:  BSF    xE1.7
.................... 
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
06716:  BSF    xE2.0
....................       OutputBoth.B2 = 1;
06718:  BSF    xE2.1
....................       OutputBoth.B3 = 1;
0671A:  BSF    xE2.2
....................       OutputBoth.B4 = 1;
0671C:  BSF    xE2.3
....................       OutputBoth.B5 = 1;
0671E:  BSF    xE2.4
....................       OutputBoth.B6 = 1;
06720:  BSF    xE2.5
....................       OutputBoth.B7 = 1;
06722:  BSF    xE2.6
....................       OutputBoth.B8 = 1;
06724:  BSF    xE2.7
.................... 
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
06726:  BSF    xE3.0
....................       AlarmIndicator.B2 = 1;
06728:  BSF    xE3.1
....................       AlarmIndicator.B3 = 1;
0672A:  BSF    xE3.2
....................       AlarmIndicator.B4 = 1;
0672C:  BSF    xE3.3
....................       AlarmIndicator.B5 = 1;
0672E:  BSF    xE3.4
....................       AlarmIndicator.B6 = 1;
06730:  BSF    xE3.5
....................       AlarmIndicator.B7 = 1;
06732:  BSF    xE3.6
....................       AlarmIndicator.B8 = 1;
06734:  BSF    xE3.7
.................... 
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
06736:  MOVFF  FF2,875
0673A:  BCF    FF2.7
0673C:  CLRF   FAA
0673E:  MOVLW  10
06740:  MOVWF  FA9
06742:  BCF    FA6.6
06744:  BCF    FA6.7
06746:  BSF    FA6.0
06748:  MOVF   FA8,W
0674A:  MOVLB  8
0674C:  BTFSC  x75.7
0674E:  BSF    FF2.7
06750:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
06752:  MOVLB  7
06754:  BCF    xE9.0
06756:  BTFSC  39.0
06758:  BSF    xE9.0
....................    RED_Colour.B2 = EEpDat >> 1;
0675A:  BCF    FD8.0
0675C:  RRCF   39,W
0675E:  BCF    xE9.1
06760:  BTFSC  FE8.0
06762:  BSF    xE9.1
....................    RED_Colour.B3 = EEpDat >> 2;
06764:  RRCF   39,W
06766:  MOVWF  00
06768:  RRCF   00,F
0676A:  MOVLW  3F
0676C:  ANDWF  00,F
0676E:  BCF    xE9.2
06770:  BTFSC  00.0
06772:  BSF    xE9.2
....................    RED_Colour.B4 = EEpDat >> 3;
06774:  RRCF   39,W
06776:  MOVWF  00
06778:  RRCF   00,F
0677A:  RRCF   00,F
0677C:  MOVLW  1F
0677E:  ANDWF  00,F
06780:  BCF    xE9.3
06782:  BTFSC  00.0
06784:  BSF    xE9.3
....................    RED_Colour.B5 = EEpDat >> 4;
06786:  SWAPF  39,W
06788:  MOVWF  00
0678A:  MOVLW  0F
0678C:  ANDWF  00,F
0678E:  BCF    xE9.4
06790:  BTFSC  00.0
06792:  BSF    xE9.4
....................    RED_Colour.B6 = EEpDat >> 5;
06794:  SWAPF  39,W
06796:  MOVWF  00
06798:  RRCF   00,F
0679A:  MOVLW  07
0679C:  ANDWF  00,F
0679E:  BCF    xE9.5
067A0:  BTFSC  00.0
067A2:  BSF    xE9.5
....................    RED_Colour.B7 = EEpDat >> 6;
067A4:  SWAPF  39,W
067A6:  MOVWF  00
067A8:  RRCF   00,F
067AA:  RRCF   00,F
067AC:  MOVLW  03
067AE:  ANDWF  00,F
067B0:  BCF    xE9.6
067B2:  BTFSC  00.0
067B4:  BSF    xE9.6
....................    RED_Colour.B8 = EEpDat >> 7;
067B6:  CLRF   00
067B8:  BTFSC  39.7
067BA:  BSF    00.0
067BC:  BCF    xE9.7
067BE:  BTFSC  00.0
067C0:  BSF    xE9.7
....................       
....................    EEpDat = read_eeprom(0x14);
067C2:  MOVFF  FF2,875
067C6:  BCF    FF2.7
067C8:  CLRF   FAA
067CA:  MOVLW  14
067CC:  MOVWF  FA9
067CE:  BCF    FA6.6
067D0:  BCF    FA6.7
067D2:  BSF    FA6.0
067D4:  MOVF   FA8,W
067D6:  MOVLB  8
067D8:  BTFSC  x75.7
067DA:  BSF    FF2.7
067DC:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
067DE:  MOVLB  7
067E0:  BCF    xEA.0
067E2:  BTFSC  39.0
067E4:  BSF    xEA.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
067E6:  BCF    FD8.0
067E8:  RRCF   39,W
067EA:  BCF    xEA.1
067EC:  BTFSC  FE8.0
067EE:  BSF    xEA.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
067F0:  RRCF   39,W
067F2:  MOVWF  00
067F4:  RRCF   00,F
067F6:  MOVLW  3F
067F8:  ANDWF  00,F
067FA:  BCF    xEA.2
067FC:  BTFSC  00.0
067FE:  BSF    xEA.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
06800:  RRCF   39,W
06802:  MOVWF  00
06804:  RRCF   00,F
06806:  RRCF   00,F
06808:  MOVLW  1F
0680A:  ANDWF  00,F
0680C:  BCF    xEA.3
0680E:  BTFSC  00.0
06810:  BSF    xEA.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
06812:  SWAPF  39,W
06814:  MOVWF  00
06816:  MOVLW  0F
06818:  ANDWF  00,F
0681A:  BCF    xEA.4
0681C:  BTFSC  00.0
0681E:  BSF    xEA.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
06820:  SWAPF  39,W
06822:  MOVWF  00
06824:  RRCF   00,F
06826:  MOVLW  07
06828:  ANDWF  00,F
0682A:  BCF    xEA.5
0682C:  BTFSC  00.0
0682E:  BSF    xEA.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
06830:  SWAPF  39,W
06832:  MOVWF  00
06834:  RRCF   00,F
06836:  RRCF   00,F
06838:  MOVLW  03
0683A:  ANDWF  00,F
0683C:  BCF    xEA.6
0683E:  BTFSC  00.0
06840:  BSF    xEA.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
06842:  CLRF   00
06844:  BTFSC  39.7
06846:  BSF    00.0
06848:  BCF    xEA.7
0684A:  BTFSC  00.0
0684C:  BSF    xEA.7
0684E:  MOVLB  0
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
06850:  MOVLW  00
06852:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
06854:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
06856:  MOVLW  C0
06858:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
0685A:  BSF    FD1.0
....................    Read_input(); restart_wdt();
0685C:  CALL   15BC
06860:  CLRWDT
....................    output_bit(Pbuzzer,1);  //Clear Buzzer
06862:  BSF    F89.4
06864:  BCF    F92.4
....................    output_bit(Pbell,1);   //Clear Bell
06866:  BSF    F89.3
06868:  BCF    F92.3
....................    output_bit(P485ctrl,0);
0686A:  BCF    F8A.3
0686C:  BCF    F93.3
....................    //output_bit(P485ctrl,0);
....................    output_bit(PIN_B4,0); //jj
0686E:  BCF    F8A.4
06870:  BCF    F93.4
....................    Send_Ouput();
06872:  CALL   1CEC
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
06876:  MOVLW  04
06878:  MOVLB  8
0687A:  MOVWF  x7D
0687C:  SETF   x7E
0687E:  MOVLB  0
06880:  CALL   1CC0
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
06884:  MOVLW  04
06886:  MOVLB  8
06888:  MOVWF  x7D
0688A:  SETF   x7E
0688C:  MOVLB  0
0688E:  CALL   1CD6
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
06892:  MOVLW  06
06894:  MOVLB  8
06896:  MOVWF  x7D
06898:  SETF   x7E
0689A:  MOVLB  0
0689C:  CALL   1CC0
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
068A0:  MOVLW  06
068A2:  MOVLB  8
068A4:  MOVWF  x7D
068A6:  SETF   x7E
068A8:  MOVLB  0
068AA:  CALL   1CD6
....................    
....................    
....................    char loop;
....................    for(loop=0;loop<=2;loop++)
068AE:  MOVLB  8
068B0:  CLRF   x72
068B2:  MOVF   x72,W
068B4:  SUBLW  02
068B6:  BTFSS  FD8.0
068B8:  BRA    69B6
....................    {
....................       
....................       IO_OUTPUT_A(IO_DEVICE_2, 0);
068BA:  MOVLW  04
068BC:  MOVWF  x7D
068BE:  CLRF   x7E
068C0:  MOVLB  0
068C2:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_2, 0);
068C6:  MOVLW  04
068C8:  MOVLB  8
068CA:  MOVWF  x7D
068CC:  CLRF   x7E
068CE:  MOVLB  0
068D0:  CALL   1CD6
....................                 
....................       IO_OUTPUT_A(IO_DEVICE_3, 0);
068D4:  MOVLW  06
068D6:  MOVLB  8
068D8:  MOVWF  x7D
068DA:  CLRF   x7E
068DC:  MOVLB  0
068DE:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_3, 0);
068E2:  MOVLW  06
068E4:  MOVLB  8
068E6:  MOVWF  x7D
068E8:  CLRF   x7E
068EA:  MOVLB  0
068EC:  CALL   1CD6
....................      
....................       IO_OUTPUT_A(IO_DEVICE_4, 0);
068F0:  MOVLW  08
068F2:  MOVLB  8
068F4:  MOVWF  x7D
068F6:  CLRF   x7E
068F8:  MOVLB  0
068FA:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_4, 0);
068FE:  MOVLW  08
06900:  MOVLB  8
06902:  MOVWF  x7D
06904:  CLRF   x7E
06906:  MOVLB  0
06908:  CALL   1CD6
....................                
....................       IO_OUTPUT_A(IO_DEVICE_5, 0);
0690C:  MOVLW  0A
0690E:  MOVLB  8
06910:  MOVWF  x7D
06912:  CLRF   x7E
06914:  MOVLB  0
06916:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_5, 0);
0691A:  MOVLW  0A
0691C:  MOVLB  8
0691E:  MOVWF  x7D
06920:  CLRF   x7E
06922:  MOVLB  0
06924:  CALL   1CD6
....................       delay_ms(200);
06928:  MOVLW  C8
0692A:  MOVLB  8
0692C:  MOVWF  x7E
0692E:  MOVLB  0
06930:  CALL   074A
....................       
....................       IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
06934:  MOVLW  04
06936:  MOVLB  8
06938:  MOVWF  x7D
0693A:  SETF   x7E
0693C:  MOVLB  0
0693E:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
06942:  MOVLW  04
06944:  MOVLB  8
06946:  MOVWF  x7D
06948:  SETF   x7E
0694A:  MOVLB  0
0694C:  CALL   1CD6
....................                 
....................       IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
06950:  MOVLW  06
06952:  MOVLB  8
06954:  MOVWF  x7D
06956:  SETF   x7E
06958:  MOVLB  0
0695A:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
0695E:  MOVLW  06
06960:  MOVLB  8
06962:  MOVWF  x7D
06964:  SETF   x7E
06966:  MOVLB  0
06968:  CALL   1CD6
....................      
....................       IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
0696C:  MOVLW  08
0696E:  MOVLB  8
06970:  MOVWF  x7D
06972:  SETF   x7E
06974:  MOVLB  0
06976:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
0697A:  MOVLW  08
0697C:  MOVLB  8
0697E:  MOVWF  x7D
06980:  SETF   x7E
06982:  MOVLB  0
06984:  CALL   1CD6
....................                
....................       IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
06988:  MOVLW  0A
0698A:  MOVLB  8
0698C:  MOVWF  x7D
0698E:  SETF   x7E
06990:  MOVLB  0
06992:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
06996:  MOVLW  0A
06998:  MOVLB  8
0699A:  MOVWF  x7D
0699C:  SETF   x7E
0699E:  MOVLB  0
069A0:  CALL   1CD6
....................       
....................       delay_ms(200);
069A4:  MOVLW  C8
069A6:  MOVLB  8
069A8:  MOVWF  x7E
069AA:  MOVLB  0
069AC:  CALL   074A
069B0:  MOVLB  8
069B2:  INCF   x72,F
069B4:  BRA    68B2
....................    }
....................    // jj
....................    char i;
....................    for(i=1;i<=8;i++)
069B6:  MOVLW  01
069B8:  MOVWF  x73
069BA:  MOVF   x73,W
069BC:  SUBLW  08
069BE:  BTFSS  FD8.0
069C0:  BRA    6ACE
....................    {
....................       FaultAgo[i] = 0;
069C2:  MOVFF  873,882
069C6:  CLRF   x83
069C8:  MOVLW  07
069CA:  MOVWF  x85
069CC:  MOVLW  EC
069CE:  MOVWF  x84
069D0:  MOVLB  0
069D2:  CALL   151C
....................       FaultNow[i] = 0;
069D6:  MOVFF  873,882
069DA:  MOVLB  8
069DC:  CLRF   x83
069DE:  MOVLW  07
069E0:  MOVWF  x85
069E2:  MOVLW  F0
069E4:  MOVWF  x84
069E6:  MOVLB  0
069E8:  CALL   151C
....................       ReleaseTime[i] = 0;
069EC:  BCF    FD8.0
069EE:  MOVLB  8
069F0:  RLCF   x73,W
069F2:  CLRF   03
069F4:  ADDLW  F4
069F6:  MOVWF  FE9
069F8:  MOVLW  07
069FA:  ADDWFC 03,W
069FC:  MOVWF  FEA
069FE:  CLRF   FEC
06A00:  MOVF   FED,F
06A02:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
06A04:  MOVFF  873,882
06A08:  MOVLW  08
06A0A:  MOVWF  x84
06A0C:  MOVLW  6C
06A0E:  MOVWF  x83
06A10:  MOVLB  0
06A12:  CALL   14C4
06A16:  MOVF   01,W
06A18:  ANDLW  01
06A1A:  SUBLW  01
06A1C:  BNZ   6A76
....................       {
....................          switch(i)
06A1E:  MOVLW  01
06A20:  MOVLB  8
06A22:  SUBWF  x73,W
06A24:  ADDLW  F8
06A26:  BC    6A72
06A28:  ADDLW  08
06A2A:  MOVLB  0
06A2C:  GOTO   6C7C
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
06A30:  MOVLB  7
06A32:  BSF    xDD.0
....................             break;
06A34:  MOVLB  8
06A36:  BRA    6A72
....................             case 2:
....................                Inputt.B2 = 1; 
06A38:  MOVLB  7
06A3A:  BSF    xDD.1
....................             break;
06A3C:  MOVLB  8
06A3E:  BRA    6A72
....................             case 3:
....................                Inputt.B3 = 1; 
06A40:  MOVLB  7
06A42:  BSF    xDD.2
....................             break;
06A44:  MOVLB  8
06A46:  BRA    6A72
....................             case 4:
....................                Inputt.B4 = 1; 
06A48:  MOVLB  7
06A4A:  BSF    xDD.3
....................             break;
06A4C:  MOVLB  8
06A4E:  BRA    6A72
....................             case 5:
....................                Inputt.B5 = 1; 
06A50:  MOVLB  7
06A52:  BSF    xDD.4
....................             break;
06A54:  MOVLB  8
06A56:  BRA    6A72
....................             case 6:
....................                Inputt.B6 = 1; 
06A58:  MOVLB  7
06A5A:  BSF    xDD.5
....................             break;
06A5C:  MOVLB  8
06A5E:  BRA    6A72
....................             case 7:
....................                Inputt.B7 = 1; 
06A60:  MOVLB  7
06A62:  BSF    xDD.6
....................              break;
06A64:  MOVLB  8
06A66:  BRA    6A72
....................              case 8:
....................                Inputt.B8 = 1; 
06A68:  MOVLB  7
06A6A:  BSF    xDD.7
....................             break;
06A6C:  MOVLB  8
06A6E:  BRA    6A72
06A70:  MOVLB  8
....................          
....................          }                 
....................       }
06A72:  BRA    6ACA
06A74:  MOVLB  0
....................       else
....................       {
....................          switch(i)
06A76:  MOVLW  01
06A78:  MOVLB  8
06A7A:  SUBWF  x73,W
06A7C:  ADDLW  F8
06A7E:  BC    6ACA
06A80:  ADDLW  08
06A82:  MOVLB  0
06A84:  GOTO   6CA6
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
06A88:  MOVLB  7
06A8A:  BCF    xDD.0
....................             break;
06A8C:  MOVLB  8
06A8E:  BRA    6ACA
....................             case 2:
....................                Inputt.B2 = 0; 
06A90:  MOVLB  7
06A92:  BCF    xDD.1
....................             break;
06A94:  MOVLB  8
06A96:  BRA    6ACA
....................             case 3:
....................                Inputt.B3 = 0; 
06A98:  MOVLB  7
06A9A:  BCF    xDD.2
....................             break;
06A9C:  MOVLB  8
06A9E:  BRA    6ACA
....................             case 4:
....................                Inputt.B4 = 0; 
06AA0:  MOVLB  7
06AA2:  BCF    xDD.3
....................             break;
06AA4:  MOVLB  8
06AA6:  BRA    6ACA
....................             case 5:
....................                Inputt.B5 = 0; 
06AA8:  MOVLB  7
06AAA:  BCF    xDD.4
....................             break;
06AAC:  MOVLB  8
06AAE:  BRA    6ACA
....................             case 6:
....................                Inputt.B6 = 0; 
06AB0:  MOVLB  7
06AB2:  BCF    xDD.5
....................             break;
06AB4:  MOVLB  8
06AB6:  BRA    6ACA
....................             case 7:
....................                Inputt.B7 = 0; 
06AB8:  MOVLB  7
06ABA:  BCF    xDD.6
....................              break;
06ABC:  MOVLB  8
06ABE:  BRA    6ACA
....................              case 8:
....................                Inputt.B8 = 0; 
06AC0:  MOVLB  7
06AC2:  BCF    xDD.7
....................             break;
06AC4:  MOVLB  8
06AC6:  BRA    6ACA
06AC8:  MOVLB  8
....................       
....................          }                 
....................       }
06ACA:  INCF   x73,F
06ACC:  BRA    69BA
....................    }
....................    //GSM SIM900 Init
....................    delay_ms(1000);
06ACE:  MOVLW  04
06AD0:  MOVWF  x75
06AD2:  MOVLW  FA
06AD4:  MOVWF  x7E
06AD6:  MOVLB  0
06AD8:  CALL   074A
06ADC:  MOVLB  8
06ADE:  DECFSZ x75,F
06AE0:  BRA    6AD2
....................    fprintf(CH2,"AT+CMGF=1"); 
06AE2:  MOVLW  40
06AE4:  MOVWF  FF6
06AE6:  MOVLW  07
06AE8:  MOVWF  FF7
06AEA:  MOVLB  0
06AEC:  CALL   1F0C
....................    putc('\n',CH2);
06AF0:  MOVLW  0A
06AF2:  MOVLB  8
06AF4:  MOVWF  x7F
06AF6:  MOVLB  0
06AF8:  CALL   1EC6
....................    delay_ms(50);
06AFC:  MOVLW  32
06AFE:  MOVLB  8
06B00:  MOVWF  x7E
06B02:  MOVLB  0
06B04:  CALL   074A
....................    
....................    SendSMS.B1 =0;
06B08:  MOVLB  7
06B0A:  BCF    xEB.0
....................    SendSMS.B2 =0;
06B0C:  BCF    xEB.1
....................    SendSMS.B3 =0;
06B0E:  BCF    xEB.2
....................    SendSMS.B4 =0;
06B10:  BCF    xEB.3
....................    SendSMS.B5 =0;
06B12:  BCF    xEB.4
....................    SendSMS.B6 =0;
06B14:  BCF    xEB.5
....................    SendSMS.B7 =0;
06B16:  BCF    xEB.6
....................    SendSMS.B8 =0;
06B18:  BCF    xEB.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
06B1A:  MOVLB  8
06B1C:  CLRF   x74
06B1E:  MOVF   x74,W
06B20:  SUBLW  09
06B22:  BNC   6B56
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
06B24:  CLRF   03
06B26:  MOVF   x74,W
06B28:  ADDLW  86
06B2A:  MOVWF  FE9
06B2C:  MOVLW  06
06B2E:  ADDWFC 03,W
06B30:  MOVWF  FEA
06B32:  MOVLW  32
06B34:  ADDWF  x74,W
06B36:  MOVWF  x77
06B38:  MOVFF  FF2,878
06B3C:  BCF    FF2.7
06B3E:  CLRF   FAA
06B40:  MOVFF  877,FA9
06B44:  BCF    FA6.6
06B46:  BCF    FA6.7
06B48:  BSF    FA6.0
06B4A:  MOVF   FA8,W
06B4C:  BTFSC  x78.7
06B4E:  BSF    FF2.7
06B50:  MOVWF  FEF
06B52:  INCF   x74,F
06B54:  BRA    6B1E
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
06B56:  CLRF   03
06B58:  MOVF   x74,W
06B5A:  ADDLW  86
06B5C:  MOVWF  FE9
06B5E:  MOVLW  06
06B60:  ADDWFC 03,W
06B62:  MOVWF  FEA
06B64:  CLRF   FEF
....................    
....................    
....................    while(TRUE)
....................    {
.................... 
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
06B66:  CLRF   x7D
06B68:  SETF   x7E
06B6A:  MOVLB  0
06B6C:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
06B70:  MOVLB  8
06B72:  CLRF   x7D
06B74:  SETF   x7E
06B76:  MOVLB  0
06B78:  CALL   1CD6
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
06B7C:  MOVLW  02
06B7E:  MOVLB  8
06B80:  MOVWF  x7D
06B82:  SETF   x7E
06B84:  MOVLB  0
06B86:  CALL   1CC0
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
06B8A:  MOVLW  02
06B8C:  MOVLB  8
06B8E:  MOVWF  x7D
06B90:  SETF   x7E
06B92:  MOVLB  0
06B94:  CALL   1CD6
....................       
....................       restart_wdt();
06B98:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
06B9A:  BTFSS  30.5
06B9C:  BRA    6BA4
....................       {
....................          Modbus_Function();
06B9E:  GOTO   239A
....................          recieve_completed = 0 ;
06BA2:  BCF    30.5
....................       }
....................   
....................       check_ack();
06BA4:  CALL   2134
....................       check_reset();
06BA8:  CALL   2218
....................       check_test();
06BAC:  GOTO   636E
....................       
....................       restart_wdt();
06BB0:  CLRWDT
.................... 
....................       Read_input(); restart_wdt(); //must be first
06BB2:  CALL   15BC
06BB6:  CLRWDT
....................       Anal_Function(); restart_wdt();
06BB8:  CALL   49B0
06BBC:  CLRWDT
....................       Send_Ouput(); restart_wdt();
06BBE:  CALL   1CEC
06BC2:  CLRWDT
....................       //Driver595(); restart_wdt();
....................       
....................       output_toggle(PIN_A0);
06BC4:  BCF    F92.0
06BC6:  BTG    F89.0
....................       
....................       if(RefreshConfigData)
06BC8:  BTFSS  30.4
06BCA:  BRA    6C76
....................       {
....................          RefreshConfigData =0;
06BCC:  BCF    30.4
....................          Read_Config();
06BCE:  CALL   0868
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
06BD2:  MOVLB  8
06BD4:  CLRF   x75
06BD6:  SETF   x76
06BD8:  MOVLB  0
06BDA:  CALL   0842
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
06BDE:  MOVLB  8
06BE0:  CLRF   x75
06BE2:  SETF   x76
06BE4:  MOVLB  0
06BE6:  CALL   0854
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
06BEA:  MOVLW  02
06BEC:  MOVLB  8
06BEE:  MOVWF  x75
06BF0:  SETF   x76
06BF2:  MOVLB  0
06BF4:  CALL   0842
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt 
06BF8:  MOVLW  02
06BFA:  MOVLB  8
06BFC:  MOVWF  x75
06BFE:  SETF   x76
06C00:  MOVLB  0
06C02:  CALL   0854
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
06C06:  MOVLW  04
06C08:  MOVLB  8
06C0A:  MOVWF  x75
06C0C:  CLRF   x76
06C0E:  MOVLB  0
06C10:  CALL   0842
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
06C14:  MOVLW  04
06C16:  MOVLB  8
06C18:  MOVWF  x75
06C1A:  CLRF   x76
06C1C:  MOVLB  0
06C1E:  CALL   0854
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
06C22:  MOVLW  06
06C24:  MOVLB  8
06C26:  MOVWF  x75
06C28:  CLRF   x76
06C2A:  MOVLB  0
06C2C:  CALL   0842
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
06C30:  MOVLW  06
06C32:  MOVLB  8
06C34:  MOVWF  x75
06C36:  CLRF   x76
06C38:  MOVLB  0
06C3A:  CALL   0854
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
06C3E:  MOVLW  08
06C40:  MOVLB  8
06C42:  MOVWF  x75
06C44:  CLRF   x76
06C46:  MOVLB  0
06C48:  CALL   0842
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
06C4C:  MOVLW  08
06C4E:  MOVLB  8
06C50:  MOVWF  x75
06C52:  CLRF   x76
06C54:  MOVLB  0
06C56:  CALL   0854
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
06C5A:  MOVLW  0A
06C5C:  MOVLB  8
06C5E:  MOVWF  x75
06C60:  CLRF   x76
06C62:  MOVLB  0
06C64:  CALL   0842
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
06C68:  MOVLW  0A
06C6A:  MOVLB  8
06C6C:  MOVWF  x75
06C6E:  CLRF   x76
06C70:  MOVLB  0
06C72:  CALL   0854
....................       }
06C76:  MOVLB  8
06C78:  BRA    6B66
....................       
.................... 
....................    }
....................    
.................... }
06C7A:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
