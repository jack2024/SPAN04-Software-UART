F N "Read_input" 0 57 ""
D G "__PCH__" 0 196 ""5.091""
D G "__DEVICE__" 0 196 "2622"
D G "__DATE__" 0 196 ""28-Sep-21""
D G "__TIME__" 0 196 ""16:57:51""
D G "_UNICODE" 0 196 ""?""
D G "__EVAL" 0 196 ""?"" "(C) Copyright 1996,2008 Custom Computer Services            ////"
D G "_STRING" 1 12 ""
D G "_STDDEF" 2 13 ""
D G "ptrdiff_t" 2 18 "unsigned int16"
D G "size_t" 2 24 "unsigned int16"
D G "wchar_t" 2 26 "unsigned char"
D G "NULL" 2 27 "0"
D G "offsetof" 2 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 3 12 ""
D G "islower" 3 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 3 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 3 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 3 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 3 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 3 19 "(x)  ((x)==' ')"
D G "isxdigit" 3 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 3 21 "(x)  ((x)<' ')"
D G "isprint" 3 22 "(x)  ((x)>=' ')"
D G "isgraph" 3 23 "(x)  ((x)>' ')"
D G "ispunct" 3 24 "(x)  (((x)>' ')&&!isalnum(x))"
F N "memmove" 1 34 ""
V L "s1" 1 34 "*void" `55 
V L "s2" 1 34 "*void" `56 
V L "n" 1 34 "int16" `57 
F G "memmove" 1 35 "*int8(*void s1,*void s2,int16 n)" `54 
V L "sc1" 1 36 "*int8" `58 
V L "sc2" 1 37 "*int8" `59 
D G "strcopy" 1 54 "strcpy"
C L "strncpy" 1 19 4 "FUNCTION"
F N "strncpy" 1 61 ""
V L "s1" 1 61 "*int8" `61 
V L "s2" 1 61 "*int8" `62 
V L "n" 1 61 "int16" `63 
F G "strncpy" 1 62 "*int8(*int8 s1,*int8 s2,int16 n)" `60 
V L "s" 1 63 "*int8" `64 
C L "strcat" 1 19 3 "FUNCTION"
F N "strcat" 1 78 ""
V L "s1" 1 78 "*int8" `66 
V L "s2" 1 78 "*int8" `67 
F G "strcat" 1 79 "*int8(*int8 s1,*int8 s2)" `65 
V L "s" 1 80 "*int8" `68 
C L "strncat" 1 19 2 "FUNCTION"
F N "strncat" 1 96 ""
V L "s1" 1 96 "*int8" `70 
V L "s2" 1 96 "*int8" `71 
V L "n" 1 96 "int16" `72 
F G "strncat" 1 97 "*int8(*int8 s1,*int8 s2,int16 n)" `69 
V L "s" 1 98 "*int8" `73 
C L "memcmp" 1 19 3 "FUNCTION"
F N "memcmp" 1 120 ""
V L "s1" 1 120 "*void" `75 
V L "s2" 1 120 "*void" `76 
V L "n" 1 120 "int16" `77 
F G "memcmp" 1 121 "sint8(*void s1,*void s2,int16 n)" `74 
V L "su1" 1 122 "*int8" `78 
V L "su2" 1 122 "*int8" `79 
C L "strcmp" 1 19 2 "FUNCTION"
F N "strcmp" 1 134 ""
V L "s1" 1 134 "*int8" `81 
V L "s2" 1 134 "*int8" `82 
F G "strcmp" 1 135 "sint8(*int8 s1,*int8 s2)" `80 
C L "strcoll" 1 19 2 "FUNCTION"
F N "strcoll" 1 144 ""
V L "s1" 1 144 "*int8" `84 
V L "s2" 1 144 "*int8" `85 
F G "strcoll" 1 145 "sint8(*int8 s1,*int8 s2)" `83 
C L "strncmp" 1 19 4 "FUNCTION"
F N "strncmp" 1 157 ""
V L "s1" 1 157 "*int8" `87 
V L "s2" 1 157 "*int8" `88 
V L "n" 1 157 "int16" `89 
F G "strncmp" 1 158 "sint8(*int8 s1,*int8 s2,int16 n)" `86 
C L "strxfrm" 1 19 4 "FUNCTION"
F N "strxfrm" 1 170 ""
V L "s1" 1 170 "*int8" `91 
V L "s2" 1 170 "*int8" `92 
V L "n" 1 170 "int16" `93 
F G "strxfrm" 1 171 "int16(*int8 s1,*int8 s2,int16 n)" `90 
V L "c" 1 172 "int8" `94 
V L "n1" 1 173 "int8" `95 
C L "strxfrm" 1 19 1 "FUNCTION"
C L "memchr" 1 19 3 "FUNCTION"
F N "memchr" 1 201 ""
V L "s" 1 201 "*void" `97 
V L "c" 1 201 "int8" `98 
V L "n" 1 201 "int16" `99 
F G "memchr" 1 202 "*int8(*void s,int8 c,int16 n)" `96 
V L "uc" 1 203 "int8" `100 
V L "su" 1 204 "*int8" `101 
C L "strchr" 1 19 2 "FUNCTION"
F N "strchr" 1 215 ""
V L "s" 1 215 "*int8" `103 
V L "c" 1 215 "int8" `104 
F G "strchr" 1 216 "*int8(*int8 s,int8 c)" `102 
C L "strcspn" 1 19 4 "FUNCTION"
F N "strcspn" 1 227 ""
V L "s1" 1 227 "*int8" `106 
V L "s2" 1 227 "*int8" `107 
F G "strcspn" 1 228 "int16(*int8 s1,*int8 s2)" `105 
V L "sc1" 1 229 "*int8" `108 
V L "sc2" 1 229 "*int8" `109 
C L "strpbrk" 1 19 4 "FUNCTION"
F N "strpbrk" 1 242 ""
V L "s1" 1 242 "*int8" `111 
V L "s2" 1 242 "*int8" `112 
F G "strpbrk" 1 243 "*int8(*int8 s1,*int8 s2)" `110 
V L "sc1" 1 244 "*int8" `113 
V L "sc2" 1 244 "*int8" `114 
C L "strrchr" 1 19 2 "FUNCTION"
F N "strrchr" 1 257 ""
V L "s" 1 257 "*int8" `116 
V L "c" 1 257 "int8" `117 
F G "strrchr" 1 258 "*int8(*int8 s,int8 c)" `115 
V L "p" 1 259 "*int8" `118 
C L "strspn" 1 19 2 "FUNCTION"
F N "strspn" 1 272 ""
V L "s1" 1 272 "*int8" `120 
V L "s2" 1 272 "*int8" `121 
F G "strspn" 1 273 "int16(*int8 s1,*int8 s2)" `119 
V L "sc1" 1 274 "*int8" `122 
V L "sc2" 1 274 "*int8" `123 
C L "strstr" 1 19 6 "FUNCTION"
F N "strstr" 1 291 ""
V L "s1" 1 291 "*int8" `125 
V L "s2" 1 291 "*int8" `126 
F G "strstr" 1 292 "*int8(*int8 s1,*int8 s2)" `124 
V L "s" 1 293 "*int8" `127 
V L "t" 1 293 "*int8" `128 
C L "strlen" 1 19 2 "FUNCTION"
F N "strlen" 1 318 ""
V L "s" 1 318 "*int8" `130 
F G "strlen" 1 319 "int16(*int8 s)" `129 
V L "sc" 1 320 "*int8" `131 
C L "strtok" 1 19 13 "FUNCTION"
F N "strtok" 1 341 ""
V L "s1" 1 341 "*int8" `133 
V L "s2" 1 341 "*int8" `134 
F G "strtok" 1 342 "*int8(*int8 s1,*int8 s2)" `132 
V L "beg" 1 343 "*int8" `135 
V L "end" 1 343 "*int8" `136 
V L "save" 1 344 "*int8" `137 
C L "stricmp" 1 19 6 "FUNCTION"
F N "stricmp" 1 392 ""
V L "s1" 1 392 "*int8" `139 
V L "s2" 1 392 "*int8" `140 
F G "stricmp" 1 393 "sint8(*int8 s1,*int8 s2)" `138 
C L "strlwr" 1 19 3 "FUNCTION"
F N "strlwr" 1 406 ""
V L "s" 1 406 "*int8" `144 
F G "strlwr" 1 407 "*int8(*int8 s)" `143 
V L "p" 1 408 "*int8" `145 
C L "strupr" 1 19 3 "FUNCTION"
F N "strupr" 1 420 ""
V L "s" 1 420 "*int8" `147 
F G "strupr" 1 421 "*int8(*int8 s)" `146 
V L "p" 1 422 "*int8" `148 
c L "set_tris_a" 5 1 6 "FUNCTION"
f N "set_tris_a" 5 45 ""
v L "value" 5 45 "int8" `150 
f B "set_tris_a" 5 45 "void(int8 value)" `149 
f N "set_tris_b" 5 46 ""
v L "value" 5 46 "int8" `152 
f B "set_tris_b" 5 46 "void(int8 value)" `151 
f N "set_tris_c" 5 47 ""
v L "value" 5 47 "int8" `154 
f B "set_tris_c" 5 47 "void(int8 value)" `153 
f N "set_tris_e" 5 48 ""
v L "value" 5 48 "int8" `156 
f B "set_tris_e" 5 48 "void(int8 value)" `155 
f N "get_tris_a" 5 49 ""
f B "get_tris_a" 5 49 "int8()" `157 
f N "get_tris_b" 5 50 ""
f B "get_tris_b" 5 50 "int8()" `158 
f N "get_tris_c" 5 51 ""
f B "get_tris_c" 5 51 "int8()" `159 
f N "get_tris_e" 5 52 ""
f B "get_tris_e" 5 52 "int8()" `160 
f N "output_a" 5 53 ""
v L "value" 5 53 "int8" `162 
f B "output_a" 5 53 "void(int8 value)" `161 
f N "output_b" 5 54 ""
v L "value" 5 54 "int8" `164 
f B "output_b" 5 54 "void(int8 value)" `163 
f N "output_c" 5 55 ""
v L "value" 5 55 "int8" `166 
f B "output_c" 5 55 "void(int8 value)" `165 
f N "output_e" 5 56 ""
v L "value" 5 56 "int8" `168 
f B "output_e" 5 56 "void(int8 value)" `167 
f N "input_a" 5 57 ""
f B "input_a" 5 57 "int8()" `169 
f N "input_b" 5 58 ""
f B "input_b" 5 58 "int8()" `170 
f N "input_c" 5 59 ""
f B "input_c" 5 59 "int8()" `171 
f N "input_e" 5 60 ""
f B "input_e" 5 60 "int8()" `172 
f N "input_change_a" 5 61 ""
f B "input_change_a" 5 61 "int8()" `173 
f N "input_change_b" 5 62 ""
f B "input_change_b" 5 62 "int8()" `174 
f N "input_change_c" 5 63 ""
f B "input_change_c" 5 63 "int8()" `175 
f N "input_change_e" 5 64 ""
f B "input_change_e" 5 64 "int8()" `176 
f N "port_b_pullups" 5 65 ""
v L "upmask" 5 65 "int8" `178 
f B "port_b_pullups" 5 65 "void(int8 upmask)" `177 
f N "port_e_pullups" 5 66 ""
v L "value" 5 66 "int8" `180 
f B "port_e_pullups" 5 66 "void(int8 value)" `179 
f N "set_slow_slew_a" 5 67 ""
v L "value" 5 67 "int8" `182 
f B "set_slow_slew_a" 5 67 "void(int8 value)" `181 
f N "set_slow_slew_b" 5 68 ""
v L "value" 5 68 "int8" `184 
f B "set_slow_slew_b" 5 68 "void(int8 value)" `183 
f N "set_slow_slew_c" 5 69 ""
v L "value" 5 69 "int8" `186 
f B "set_slow_slew_c" 5 69 "void(int8 value)" `185 
f N "set_slow_slew_e" 5 70 ""
v L "value" 5 70 "int8" `188 
f B "set_slow_slew_e" 5 70 "void(int8 value)" `187 
f N "input" 5 71 ""
v L "pin" 5 71 "int16" `190 
f B "input" 5 71 "int8(int16 pin)" `189 
f N "input_state" 5 72 ""
v L "pin" 5 72 "int16" `192 
f B "input_state" 5 72 "int8(int16 pin)" `191 
f N "output_low" 5 73 ""
v L "pin" 5 73 "int16" `194 
f B "output_low" 5 73 "void(int16 pin)" `193 
f N "output_high" 5 74 ""
v L "pin" 5 74 "int16" `196 
f B "output_high" 5 74 "void(int16 pin)" `195 
f N "output_toggle" 5 75 ""
v L "pin" 5 75 "int16" `198 
f B "output_toggle" 5 75 "void(int16 pin)" `197 
f N "output_bit" 5 76 ""
v L "pin" 5 76 "int16" `200 
v L "level" 5 76 "int8" `201 
f B "output_bit" 5 76 "void(int16 pin,int8 level)" `199 
f N "output_float" 5 77 ""
v L "pin" 5 77 "int16" `203 
f B "output_float" 5 77 "void(int16 pin)" `202 
f N "output_drive" 5 78 ""
v L "pin" 5 78 "int16" `205 
f B "output_drive" 5 78 "void(int16 pin)" `204  "Constants used to identify pins in the above are:"
d G "PIN_A0" 5 82 "31744"
d G "PIN_A1" 5 83 "31745"
d G "PIN_A2" 5 84 "31746"
d G "PIN_A3" 5 85 "31747"
d G "PIN_A4" 5 86 "31748"
d G "PIN_A5" 5 87 "31749"
d G "PIN_A6" 5 88 "31750"
d G "PIN_A7" 5 89 "31751"
d G "PIN_B0" 5 91 "31752"
d G "PIN_B1" 5 92 "31753"
d G "PIN_B2" 5 93 "31754"
d G "PIN_B3" 5 94 "31755"
d G "PIN_B4" 5 95 "31756"
d G "PIN_B5" 5 96 "31757"
d G "PIN_B6" 5 97 "31758"
d G "PIN_B7" 5 98 "31759"
d G "PIN_C0" 5 100 "31760"
d G "PIN_C1" 5 101 "31761"
d G "PIN_C2" 5 102 "31762"
d G "PIN_C3" 5 103 "31763"
d G "PIN_C4" 5 104 "31764"
d G "PIN_C5" 5 105 "31765"
d G "PIN_C6" 5 106 "31766"
d G "PIN_C7" 5 107 "31767"
d G "PIN_E3" 5 109 "31779"
d G "FALSE" 5 112 "0"
d G "TRUE" 5 113 "1"
d G "BYTE" 5 115 "int8"
d G "BOOLEAN" 5 116 "int1"
d G "getc" 5 118 "getch"
d G "fgetc" 5 119 "getch"
d G "getchar" 5 120 "getch"
d G "putc" 5 121 "putchar"
d G "fputc" 5 122 "putchar"
d G "fgets" 5 123 "gets"
d G "fputs" 5 124 "puts"
c L "output_drive" 5 1 3 "FUNCTION"
f N "restart_cause" 5 129 ""
f B "restart_cause" 5 129 "int8()" `206 
f N "reset_cpu" 5 130 ""
f B "reset_cpu" 5 130 "void()" `207 
f N "sleep" 5 131 ""
f B "sleep" 5 131 "void()" `208 
f N "sleep" 5 132 ""
v L "type" 5 132 "int8" `210 
f B "sleep" 5 132 "void(int8 type)" `209  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 5 134 "7"
d G "MCLR_FROM_SLEEP" 5 135 "11"
d G "MCLR_FROM_RUN" 5 136 "15"
d G "NORMAL_POWER_UP" 5 137 "12"
d G "BROWNOUT_RESTART" 5 138 "14"
d G "WDT_FROM_SLEEP" 5 139 "3"
d G "RESET_INSTRUCTION" 5 140 "0"
d G "SLEEP_FULL" 5 143 "0" "Default"
d G "SLEEP_IDLE" 5 144 "1" "Clock and peripherals don't stop"
c L "sleep" 5 1 5 "FUNCTION"
f N "setup_timer_0" 5 151 ""
v L "mode" 5 151 "int8" `212 
f B "setup_timer_0" 5 151 "void(int8 mode)" `211 
f N "set_timer0" 5 152 ""
v L "value" 5 152 "int16" `214 
f B "set_timer0" 5 152 "void(int16 value)" `213 
f N "get_timer0" 5 153 ""
f B "get_timer0" 5 153 "int16()" `215 
f N "setup_counters" 5 154 ""
v L "mode" 5 154 "int8" `217 
v L "prescaler" 5 154 "int8" `218 
f B "setup_counters" 5 154 "void(int8 mode,int8 prescaler)" `216 
f N "set_rtcc" 5 155 ""
v L "value" 5 155 "int16" `220 
f B "set_rtcc" 5 155 "void(int16 value)" `219 
f N "get_rtcc" 5 156 ""
f B "get_rtcc" 5 156 "int16()" `221  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 5 158 "0"
d G "T0_EXT_L_TO_H" 5 159 "32"
d G "T0_EXT_H_TO_L" 5 160 "48"
d G "T0_DIV_1" 5 162 "8"
d G "T0_DIV_2" 5 163 "0"
d G "T0_DIV_4" 5 164 "1"
d G "T0_DIV_8" 5 165 "2"
d G "T0_DIV_16" 5 166 "3"
d G "T0_DIV_32" 5 167 "4"
d G "T0_DIV_64" 5 168 "5"
d G "T0_DIV_128" 5 169 "6"
d G "T0_DIV_256" 5 170 "7"
d G "T0_OFF" 5 172 "0x80"
d G "T0_8_BIT" 5 174 "0x40"
d G "RTCC_INTERNAL" 5 178 "0"
d G "RTCC_EXT_L_TO_H" 5 179 "32"
d G "RTCC_EXT_H_TO_L" 5 180 "48"
d G "RTCC_DIV_1" 5 181 "8"
d G "RTCC_DIV_2" 5 182 "0"
d G "RTCC_DIV_4" 5 183 "1"
d G "RTCC_DIV_8" 5 184 "2"
d G "RTCC_DIV_16" 5 185 "3"
d G "RTCC_DIV_32" 5 186 "4"
d G "RTCC_DIV_64" 5 187 "5"
d G "RTCC_DIV_128" 5 188 "6"
d G "RTCC_DIV_256" 5 189 "7"
d G "RTCC_OFF" 5 190 "0x80"
d G "RTCC_8_BIT" 5 191 "0x40"
c L "get_rtcc" 5 1 8 "FUNCTION"
f N "setup_wdt" 5 202 ""
v L "mode" 5 202 "int16" `223 
f B "setup_wdt" 5 202 "void(int16 mode)" `222 
f N "restart_wdt" 5 203 ""
f B "restart_wdt" 5 203 "void()" `224  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 5 205 "0x100"
d G "WDT_OFF" 5 206 "0"
d G "WDT_4MS" 5 208 "0x300"
d G "WDT_8MS" 5 209 "0x500"
d G "WDT_16MS" 5 210 "0x700"
d G "WDT_32MS" 5 211 "0x900"
d G "WDT_64MS" 5 212 "0xB00"
d G "WDT_128MS" 5 213 "0xD00"
d G "WDT_256MS" 5 214 "0xF00"
d G "WDT_512MS" 5 215 "0x1100"
d G "WDT_1S" 5 216 "0x1300"
d G "WDT_2S" 5 217 "0x1500"
d G "WDT_4S" 5 218 "0x1700"
d G "WDT_8S" 5 219 "0x1900"
d G "WDT_16S" 5 220 "0x1B00"
d G "WDT_32S" 5 221 "0x1D00"
d G "WDT_64S" 5 222 "0x1F00"
d G "WDT_128S" 5 223 "0x2100"
c L "restart_wdt" 5 1 3 "FUNCTION"
f N "setup_timer_1" 5 228 ""
v L "mode" 5 228 "int16" `226 
f B "setup_timer_1" 5 228 "void(int16 mode)" `225 
f N "get_timer1" 5 229 ""
f B "get_timer1" 5 229 "int16()" `227 
f N "set_timer1" 5 230 ""
v L "value" 5 230 "int16" `229 
f B "set_timer1" 5 230 "void(int16 value)" `228  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 5 233 "0"
d G "T1_INTERNAL" 5 234 "0x07"
d G "T1_EXTERNAL" 5 235 "0x87"
d G "T1_EXTERNAL_SYNC" 5 236 "0x83"
d G "T1_FOSC" 5 237 "0x47"
d G "T1_ENABLE_SOSC" 5 239 "0x08"
d G "T1_DIV_BY_1" 5 241 "0"
d G "T1_DIV_BY_2" 5 242 "0x10"
d G "T1_DIV_BY_4" 5 243 "0x20"
d G "T1_DIV_BY_8" 5 244 "0x30"
d G "T1_GATE" 5 246 "0x8000"
d G "T1_GATE_INVERTED" 5 247 "0xC000"
d G "T1_GATE_TOGGLE" 5 248 "0xA000"
d G "T1_GATE_SINGLE" 5 249 "0x9000"
d G "T1_GATE_TIMER2" 5 250 "0x8100"
d G "T1_GATE_COMP1" 5 251 "0x8200"
d G "T1_GATE_COMP2" 5 252 "0x8300"
c L "set_timer1" 5 1 3 "FUNCTION"
f N "setup_timer_2" 5 257 ""
v L "mode" 5 257 "int8" `231 
v L "period" 5 257 "int8" `232 
v L "postscale" 5 257 "int8" `233 
f B "setup_timer_2" 5 257 "void(int8 mode,int8 period,int8 postscale)" `230 
f N "get_timer2" 5 258 ""
f B "get_timer2" 5 258 "int8()" `234 
f N "set_timer2" 5 259 ""
v L "value" 5 259 "int8" `236 
f B "set_timer2" 5 259 "void(int8 value)" `235  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 5 261 "0"
d G "T2_DIV_BY_1" 5 262 "4"
d G "T2_DIV_BY_4" 5 263 "5"
d G "T2_DIV_BY_16" 5 264 "6"
c L "set_timer2" 5 1 3 "FUNCTION"
f N "setup_timer_3" 5 269 ""
v L "mode" 5 269 "int16" `238 
f B "setup_timer_3" 5 269 "void(int16 mode)" `237 
f N "get_timer3" 5 270 ""
f B "get_timer3" 5 270 "int16()" `239 
f N "set_timer3" 5 271 ""
v L "value" 5 271 "int16" `241 
f B "set_timer3" 5 271 "void(int16 value)" `240  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 5 274 "0"
d G "T3_INTERNAL" 5 275 "0x07"
d G "T3_EXTERNAL" 5 276 "0x87"
d G "T3_EXTERNAL_SYNC" 5 277 "0x83"
d G "T3_FOSC" 5 278 "0x47"
d G "T3_ENABLE_SOSC" 5 280 "0x08"
d G "T3_DIV_BY_1" 5 282 "0"
d G "T3_DIV_BY_2" 5 283 "0x10"
d G "T3_DIV_BY_4" 5 284 "0x20"
d G "T3_DIV_BY_8" 5 285 "0x30"
d G "T3_GATE" 5 287 "0x8000"
d G "T3_GATE_INVERTED" 5 288 "0xC000"
d G "T3_GATE_TOGGLE" 5 289 "0xA000"
d G "T3_GATE_SINGLE" 5 290 "0x9000"
d G "T3_GATE_TIMER4" 5 291 "0x8100"
d G "T3_GATE_COMP1" 5 292 "0x8200"
d G "T3_GATE_COMP2" 5 293 "0x8300"
c L "set_timer3" 5 1 3 "FUNCTION"
f N "setup_timer_4" 5 298 ""
v L "mode" 5 298 "int16" `243 
v L "period" 5 298 "int8" `244 
v L "postscaler" 5 298 "int8" `245 
f B "setup_timer_4" 5 298 "void(int16 mode,int8 period,int8 postscaler)" `242 
f N "get_timer4" 5 299 ""
f B "get_timer4" 5 299 "int8()" `246 
f N "set_timer4" 5 300 ""
v L "value" 5 300 "int8" `248 
f B "set_timer4" 5 300 "void(int8 value)" `247  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 5 302 "0"
d G "T4_DIV_BY_1" 5 303 "4"
d G "T4_DIV_BY_4" 5 304 "5"
d G "T4_DIV_BY_16" 5 305 "6"
c L "set_timer4" 5 1 3 "FUNCTION"
f N "setup_timer_5" 5 310 ""
v L "mode" 5 310 "int16" `250 
f B "setup_timer_5" 5 310 "void(int16 mode)" `249 
f N "get_timer5" 5 311 ""
f B "get_timer5" 5 311 "int16()" `251 
f N "set_timer5" 5 312 ""
v L "value" 5 312 "int16" `253 
f B "set_timer5" 5 312 "void(int16 value)" `252  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 5 315 "0"
d G "T5_INTERNAL" 5 316 "0x07"
d G "T5_EXTERNAL" 5 317 "0x87"
d G "T5_EXTERNAL_SYNC" 5 318 "0x83"
d G "T5_FOSC" 5 319 "0x47"
d G "T5_LFINTRC" 5 320 "0xC7"
d G "T5_ENABLE_SOSC" 5 322 "0x08"
d G "T5_DIV_BY_1" 5 324 "0"
d G "T5_DIV_BY_2" 5 325 "0x10"
d G "T5_DIV_BY_4" 5 326 "0x20"
d G "T5_DIV_BY_8" 5 327 "0x30"
d G "T5_GATE" 5 329 "0x8000"
d G "T5_GATE_INVERTED" 5 330 "0xC000"
d G "T5_GATE_TOGGLE" 5 331 "0xA000"
d G "T5_GATE_SINGLE" 5 332 "0x9000"
d G "T5_GATE_TIMER6" 5 333 "0x8100"
d G "T5_GATE_COMP1" 5 334 "0x8200"
d G "T5_GATE_COMP2" 5 335 "0x8300"
c L "set_timer5" 5 1 3 "FUNCTION"
f N "setup_timer_6" 5 340 ""
v L "mode" 5 340 "int16" `255 
v L "period" 5 340 "int8" `256 
v L "postscaler" 5 340 "int8" `257 
f B "setup_timer_6" 5 340 "void(int16 mode,int8 period,int8 postscaler)" `254 
f N "get_timer6" 5 341 ""
f B "get_timer6" 5 341 "int8()" `258 
f N "set_timer6" 5 342 ""
v L "value" 5 342 "int8" `260 
f B "set_timer6" 5 342 "void(int8 value)" `259  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 5 345 "0"
d G "T6_DIV_BY_1" 5 346 "4"
d G "T6_DIV_BY_4" 5 347 "5"
d G "T6_DIV_BY_16" 5 348 "6"
c L "set_timer6" 5 1 4 "FUNCTION"
f N "setup_ccp1" 5 354 ""
v L "mode" 5 354 "int32" `262 
f B "setup_ccp1" 5 354 "void(int32 mode)" `261 
f N "setup_ccp1" 5 355 ""
v L "mode" 5 355 "int32" `264 
v L "pwm" 5 355 "int8" `265 
f B "setup_ccp1" 5 355 "void(int32 mode,int8 pwm)" `263 
f N "set_pwm1_duty" 5 356 ""
v L "value" 5 356 "int8" `267 
f B "set_pwm1_duty" 5 356 "void(int8 value)" `266 
f N "set_pwm1_duty" 5 357 ""
v L "value" 5 357 "int16" `269 
f B "set_pwm1_duty" 5 357 "void(int16 value)" `268  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 5 359 "0"
d G "CCP_CAPTURE_FE" 5 360 "0x04"
d G "CCP_CAPTURE_RE" 5 361 "0x05"
d G "CCP_CAPTURE_DIV_4" 5 362 "0x06"
d G "CCP_CAPTURE_DIV_16" 5 363 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 5 364 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 5 365 "0x09"
d G "CCP_COMPARE_INT" 5 366 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 5 367 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 5 368 "0x0B"
d G "CCP_PWM" 5 369 "0x0C"
d G "CCP_PWM_PLUS_1" 5 370 "0x1c"
d G "CCP_PWM_PLUS_2" 5 371 "0x2c"
d G "CCP_PWM_PLUS_3" 5 372 "0x3c"
c L "set_pwm1_duty" 5 1 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 5 382 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 5 383 "0x0100"
d G "CCP_USE_TIMER5_AND_TIMER6" 5 384 "0x0200"
d G "CCP_PWM_H_H" 5 387 "0x0c"
d G "CCP_PWM_H_L" 5 388 "0x0d"
d G "CCP_PWM_L_H" 5 389 "0x0e"
d G "CCP_PWM_L_L" 5 390 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 5 392 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 5 393 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 5 394 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 5 396 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 5 397 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 5 398 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 5 399 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 5 400 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 5 401 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 5 402 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 5 404 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 5 405 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 5 406 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 5 408 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 5 409 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 5 410 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 5 412 "0x80000000"
d G "CCP_PULSE_STEERING_A" 5 414 "0x01000000"
d G "CCP_PULSE_STEERING_B" 5 415 "0x02000000"
d G "CCP_PULSE_STEERING_C" 5 416 "0x04000000"
d G "CCP_PULSE_STEERING_D" 5 417 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 5 418 "0x10000000"
c L "set_pwm1_duty" 5 1 1 "FUNCTION"
f N "setup_ccp2" 5 421 ""
v L "mode" 5 421 "int32" `274 
f B "setup_ccp2" 5 421 "void(int32 mode)" `273 
f N "setup_ccp2" 5 422 ""
v L "mode" 5 422 "int32" `276 
v L "pwm" 5 422 "int8" `277 
f B "setup_ccp2" 5 422 "void(int32 mode,int8 pwm)" `275 
f N "set_pwm2_duty" 5 423 ""
v L "value" 5 423 "int8" `279 
f B "set_pwm2_duty" 5 423 "void(int8 value)" `278 
f N "set_pwm2_duty" 5 424 ""
v L "value" 5 424 "int16" `281 
f B "set_pwm2_duty" 5 424 "void(int16 value)" `280 
c L "set_pwm2_duty" 5 1 1 "FUNCTION"
f N "setup_ccp3" 5 430 ""
v L "mode" 5 430 "int32" `286 
f B "setup_ccp3" 5 430 "void(int32 mode)" `285 
f N "setup_ccp3" 5 431 ""
v L "mode" 5 431 "int32" `288 
v L "pwm" 5 431 "int8" `289 
f B "setup_ccp3" 5 431 "void(int32 mode,int8 pwm)" `287 
f N "set_pwm3_duty" 5 432 ""
v L "value" 5 432 "int8" `291 
f B "set_pwm3_duty" 5 432 "void(int8 value)" `290 
f N "set_pwm3_duty" 5 433 ""
v L "value" 5 433 "int16" `293 
f B "set_pwm3_duty" 5 433 "void(int16 value)" `292 
c L "set_pwm3_duty" 5 1 1 "FUNCTION"
f N "setup_ccp4" 5 439 ""
v L "mode" 5 439 "int32" `298 
f B "setup_ccp4" 5 439 "void(int32 mode)" `297 
f N "setup_ccp4" 5 440 ""
v L "mode" 5 440 "int32" `300 
v L "pwm" 5 440 "int8" `301 
f B "setup_ccp4" 5 440 "void(int32 mode,int8 pwm)" `299 
f N "set_pwm4_duty" 5 441 ""
v L "value" 5 441 "int8" `303 
f B "set_pwm4_duty" 5 441 "void(int8 value)" `302 
f N "set_pwm4_duty" 5 442 ""
v L "value" 5 442 "int16" `305 
f B "set_pwm4_duty" 5 442 "void(int16 value)" `304 
c L "set_pwm4_duty" 5 1 1 "FUNCTION"
f N "setup_ccp5" 5 448 ""
v L "mode" 5 448 "int32" `310 
f B "setup_ccp5" 5 448 "void(int32 mode)" `309 
f N "setup_ccp5" 5 449 ""
v L "mode" 5 449 "int32" `312 
v L "pwm" 5 449 "int8" `313 
f B "setup_ccp5" 5 449 "void(int32 mode,int8 pwm)" `311 
f N "set_pwm5_duty" 5 450 ""
v L "value" 5 450 "int8" `315 
f B "set_pwm5_duty" 5 450 "void(int8 value)" `314 
f N "set_pwm5_duty" 5 451 ""
v L "value" 5 451 "int16" `317 
f B "set_pwm5_duty" 5 451 "void(int16 value)" `316 
c L "set_pwm5_duty" 5 1 3 "FUNCTION"
f N "setup_spi" 5 459 ""
v L "mode" 5 459 "int32" `322 
f B "setup_spi" 5 459 "void(int32 mode)" `321 
f N "spi_write" 5 460 ""
v L "value" 5 460 "int8" `324 
f B "spi_write" 5 460 "void(int8 value)" `323 
f N "spi_write" 5 461 ""
v L "wait" 5 461 "int8" `326 
v L "value" 5 461 "int8" `327 
f B "spi_write" 5 461 "void(int8 wait,int8 value)" `325 
f N "spi_read" 5 462 ""
f B "spi_read" 5 462 "int8()" `328 
f N "spi_read" 5 463 ""
v L "value" 5 463 "int8" `330 
f B "spi_read" 5 463 "int8(int8 value)" `329 
f N "spi_data_is_in" 5 464 ""
f B "spi_data_is_in" 5 464 "int8()" `331 
f N "setup_spi2" 5 465 ""
v L "mode" 5 465 "int32" `333 
f B "setup_spi2" 5 465 "void(int32 mode)" `332 
f N "spi_write2" 5 466 ""
v L "value" 5 466 "int8" `335 
f B "spi_write2" 5 466 "void(int8 value)" `334 
f N "spi_read2" 5 467 ""
f B "spi_read2" 5 467 "int8()" `336 
f N "spi_read2" 5 468 ""
v L "value" 5 468 "int8" `338 
f B "spi_read2" 5 468 "int8(int8 value)" `337 
f N "spi_data_is_in2" 5 469 ""
f B "spi_data_is_in2" 5 469 "int8()" `339  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 5 471 "0x00"
d G "SPI_MASTER" 5 472 "0x20"
d G "SPI_SLAVE" 5 473 "0x24"
d G "SPI_SCK_IDLE_HIGH" 5 474 "0x10"
d G "SPI_SCK_IDLE_LOW" 5 475 "0x00"
d G "SPI_CLK_DIV_4" 5 476 "0x00"
d G "SPI_CLK_DIV_16" 5 477 "0x01"
d G "SPI_CLK_DIV_64" 5 478 "0x02"
d G "SPI_CLK_T2" 5 479 "0x03"
d G "SPI_SS_DISABLED" 5 480 "0x01"
d G "SPI_XMIT_L_TO_H" 5 482 "0x4000"
d G "SPI_XMIT_H_TO_L" 5 483 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 5 485 "0x0000"
d G "SPI_SAMPLE_AT_END" 5 486 "0x8000"
d G "SPI_L_TO_H" 5 489 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 5 490 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 5 1 2 "FUNCTION"
f N "setup_uart" 5 494 ""
v L "baud" 5 494 "int32" `341 
f B "setup_uart" 5 494 "void(int32 baud)" `340 
f N "setup_uart" 5 495 ""
v L "baud" 5 495 "int32" `343 
v L "stream" 5 495 "int8" `344 
f B "setup_uart" 5 495 "void(int32 baud,int8 stream)" `342 
f N "setup_uart" 5 496 ""
v L "baud" 5 496 "int32" `346 
v L "stream" 5 496 "int8" `347 
v L "clock" 5 496 "int32" `348 
f B "setup_uart" 5 496 "void(int32 baud,int8 stream,int32 clock)" `345 
f N "set_uart_speed" 5 497 ""
v L "baud" 5 497 "int32" `350 
f B "set_uart_speed" 5 497 "void(int32 baud)" `349 
f N "set_uart_speed" 5 498 ""
v L "baud" 5 498 "int32" `352 
v L "stream" 5 498 "int8" `353 
f B "set_uart_speed" 5 498 "void(int32 baud,int8 stream)" `351 
f N "set_uart_speed" 5 499 ""
v L "baud" 5 499 "int32" `355 
v L "stream" 5 499 "int8" `356 
v L "clock" 5 499 "int32" `357 
f B "set_uart_speed" 5 499 "void(int32 baud,int8 stream,int32 clock)" `354  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 5 503 "2"
d G "UART_DATA" 5 504 "4"
d G "UART_AUTODETECT" 5 505 "8"
d G "UART_AUTODETECT_NOWAIT" 5 506 "9"
d G "UART_WAKEUP_ON_RDA" 5 507 "10"
d G "UART_SEND_BREAK" 5 508 "13"
c L "set_uart_speed" 5 1 3 "FUNCTION"
f N "setup_comparator" 5 513 ""
v L "mode" 5 513 "int32" `359 
f B "setup_comparator" 5 513 "void(int32 mode)" `358  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 5 516 "0x404"
d G "NC_NC" 5 517 "0x404"
d G "CP1_A0_A3" 5 520 "0x000080"
d G "CP1_A1_A3" 5 521 "0x000081"
d G "CP1_B3_A3" 5 522 "0x000082"
d G "CP1_B1_A3" 5 523 "0x000083"
d G "CP1_A0_DAC" 5 524 "0x000084"
d G "CP1_A1_DAC" 5 525 "0x000085"
d G "CP1_B3_DAC" 5 526 "0x000086"
d G "CP1_B1_DAC" 5 527 "0x000087"
d G "CP1_A0_FVR" 5 528 "0x200084"
d G "CP1_A1_FVR" 5 529 "0x200085"
d G "CP1_B3_FVR" 5 530 "0x200086"
d G "CP1_B1_FVR" 5 531 "0x200087"
d G "CP1_OUT_ON_A4" 5 533 "0x000020"
d G "CP1_INVERT" 5 534 "0x000010"
d G "CP1_FAST" 5 535 "0x000008"
d G "CP1_HYST" 5 536 "0x080000"
d G "CP1_SYNC" 5 537 "0x020000"
d G "CP2_A0_A2" 5 540 "0x008000"
d G "CP2_A1_A2" 5 541 "0x008100"
d G "CP2_B3_A2" 5 542 "0x008200"
d G "CP2_B1_A2" 5 543 "0x008300"
d G "CP2_A0_DAC" 5 544 "0x008400"
d G "CP2_A1_DAC" 5 545 "0x008500"
d G "CP2_B3_DAC" 5 546 "0x008600"
d G "CP2_B1_DAC" 5 547 "0x008700"
d G "CP2_A0_FVR" 5 548 "0x108400"
d G "CP2_A1_FVR" 5 549 "0x108500"
d G "CP2_B3_FVR" 5 550 "0x108600"
d G "CP2_B1_FVR" 5 551 "0x108700"
d G "CP2_OUT_ON_A5" 5 553 "0x002000"
d G "CP2_INVERT" 5 554 "0x001000"
d G "CP2_FAST" 5 555 "0x000800"
d G "CP2_HYST" 5 556 "0x040000"
d G "CP2_SYNC" 5 557 "0x010000"
c L "setup_comparator" 5 1 2 "FUNCTION"
f N "setup_vref" 5 564 ""
v L "mode" 5 564 "int8" `363 
f B "setup_vref" 5 564 "void(int8 mode)" `362  "Constants used in setup_vref() are:"
d G "VREF_OFF" 5 566 "0"
d G "VREF_1v024" 5 567 "0x90"
d G "VREF_2v048" 5 568 "0xA0"
d G "VREF_4v096" 5 569 "0xB0"
c L "setup_vref" 5 1 2 "FUNCTION"
f N "setup_low_volt_detect" 5 573 ""
v L "mode" 5 573 "int8" `365 
f B "setup_low_volt_detect" 5 573 "void(int8 mode)" `364  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 5 575 "0x1F"
d G "LVD_47" 5 576 "0x1E"
d G "LVD_43" 5 577 "0x1D"
d G "LVD_41" 5 578 "0x1C"
d G "LVD_38" 5 579 "0x1B"
d G "LVD_36" 5 580 "0x1A"
d G "LVD_34" 5 581 "0x19"
d G "LVD_32" 5 582 "0x18"
d G "LVD_29" 5 583 "0x17"
d G "LVD_28" 5 584 "0x16"
d G "LVD_27" 5 585 "0x15"
d G "LVD_25" 5 586 "0x14"
d G "LVD_24" 5 587 "0x13"
d G "LVD_22" 5 588 "0x12"
d G "LVD_20" 5 589 "0x11"
d G "LVD_18" 5 590 "0x10"
d G "LVD_TRIGGER_BELOW" 5 592 "0"
d G "LVD_TRIGGER_ABOVE" 5 593 "0x80"
c L "setup_low_volt_detect" 5 1 3 "FUNCTION"
f N "setup_dac" 5 598 ""
v L "mode" 5 598 "int8" `367 
f B "setup_dac" 5 598 "void(int8 mode)" `366 
f N "dac_write" 5 599 ""
v L "value" 5 599 "int8" `369 
f B "dac_write" 5 599 "void(int8 value)" `368  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 5 601 "0"
d G "DAC_VSS_VDD" 5 602 "0x80"
d G "DAC_VREF_VDD" 5 603 "0x81"
d G "DAC_VSS_VREF" 5 604 "0x84"
d G "DAC_VREF_VREF" 5 605 "0x85"
d G "DAC_VSS_FVR" 5 606 "0x88"
d G "DAC_VREF_FVR" 5 607 "0x89"
d G "DAC_OUTPUT" 5 609 "0x20"
d G "DAC_LVP_POS" 5 610 "0x40"
d G "DAC_LVP_NEG" 5 611 "0"
c L "dac_write" 5 1 2 "FUNCTION"
f N "setup_oscillator" 5 616 ""
v L "mode" 5 616 "int16" `371 
f B "setup_oscillator" 5 616 "int8(int16 mode)" `370 
f N "setup_oscillator" 5 617 ""
v L "mode" 5 617 "int16" `373 
v L "tune" 5 617 "sint8" `374 
f B "setup_oscillator" 5 617 "int8(int16 mode,sint8 tune)" `372  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 5 619 "0x4000"
d G "OSC_PLL_OFF" 5 620 "0"
d G "OSC_31250" 5 621 "0x8000"
d G "OSC_31KHZ" 5 622 "0x00"
d G "OSC_250KHZ" 5 623 "0x10"
d G "OSC_500KHZ" 5 624 "0x20"
d G "OSC_1MHZ" 5 625 "0x30"
d G "OSC_2MHZ" 5 626 "0x40"
d G "OSC_4MHZ" 5 627 "0x50"
d G "OSC_8MHZ" 5 628 "0x60"
d G "OSC_16MHZ" 5 629 "0x70"
d G "OSC_32MHZ" 5 630 "0x4060"
d G "OSC_64MHZ" 5 631 "0x4070"
d G "OSC_TIMER1" 5 633 "1"
d G "OSC_INTRC" 5 634 "2"
d G "OSC_NORMAL" 5 635 "0"
d G "OSC_IDLE_MODE" 5 637 "0x80"
d G "OSC_STATE_STABLE" 5 641 "4"
d G "OSC_STATE_EXT_RUNNING" 5 642 "8"
c L "setup_oscillator" 5 1 4 "FUNCTION"
f N "setup_adc" 5 649 ""
v L "mode" 5 649 "int16" `376 
f B "setup_adc" 5 649 "void(int16 mode)" `375 
f N "read_adc" 5 650 ""
f B "read_adc" 5 650 "int8()" `377 
f N "read_adc" 5 651 ""
v L "mode" 5 651 "int8" `379 
f B "read_adc" 5 651 "int8(int8 mode)" `378 
f N "read_adc" 5 652 ""
f G "read_adc" 5 652 "int16()" `380 
f N "read_adc" 5 653 ""
v L "mode" 5 653 "int8" `381 
f G "read_adc" 5 653 "int16(int8 mode,int32 pins)" `380 
f N "adc_done" 5 654 ""
f B "adc_done" 5 654 "int8(int8 mode,int32 pins)" `380  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 5 656 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 5 657 "0x100"
d G "ADC_CLOCK_DIV_4" 5 658 "0x04"
d G "ADC_CLOCK_DIV_8" 5 659 "0x01"
d G "ADC_CLOCK_DIV_16" 5 660 "0x05"
d G "ADC_CLOCK_DIV_32" 5 661 "0x02"
d G "ADC_CLOCK_DIV_64" 5 662 "0x06"
d G "ADC_CLOCK_INTERNAL" 5 663 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 5 665 "0x00"
d G "ADC_TAD_MUL_2" 5 666 "0x08"
d G "ADC_TAD_MUL_4" 5 667 "0x10"
d G "ADC_TAD_MUL_6" 5 668 "0x18"
d G "ADC_TAD_MUL_8" 5 669 "0x20"
d G "ADC_TAD_MUL_12" 5 670 "0x28"
d G "ADC_TAD_MUL_16" 5 671 "0x30"
d G "ADC_TAD_MUL_20" 5 672 "0x38"
c L "adc_done" 5 1 1 "FUNCTION"
f N "setup_adc_ports" 5 675 ""
v L "pins" 5 675 "int32" `382 
f B "setup_adc_ports" 5 675 "void(int32 pins)" `381 
f N "setup_adc_ports" 5 676 ""
v L "pins" 5 676 "int32" `384 
v L "reference" 5 676 "int32" `385 
f B "setup_adc_ports" 5 676 "void(int32 pins,int32 reference)" `383 
f N "set_analog_pins" 5 677 ""
v L "pin" 5 677 "int8" `387 
f B "set_analog_pins" 5 677 "void(int8 pin,*int8 _VA_LIST)" `386 
f N "setup_adc_reference" 5 678 ""
v L "reference" 5 678 "int32" `390 
f B "setup_adc_reference" 5 678 "void(int32 reference)" `389 
f N "set_adc_channel" 5 679 ""
v L "channel" 5 679 "int8" `392 
f B "set_adc_channel" 5 679 "void(int8 channel)" `391  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 5 683 "0x00800000" "| A0"
d G "sAN1" 5 684 "0x01000000" "| A1"
d G "sAN2" 5 685 "0x02000000" "| A2"
d G "sAN3" 5 686 "0x04000000" "| A3"
d G "sAN4" 5 687 "0x08000000" "| A5"
d G "sAN8" 5 688 "0x00010000" "| B2"
d G "sAN9" 5 689 "0x00020000" "| B3"
d G "sAN10" 5 690 "0x00008000" "| B1"
d G "sAN11" 5 691 "0x00040000" "| B4"
d G "sAN12" 5 692 "0x00004000" "| B0"
d G "sAN13" 5 693 "0x00080000" "| B5"
d G "sAN14" 5 694 "0x00000100" "| C2"
d G "sAN15" 5 695 "0x00000200" "| C3"
d G "sAN16" 5 696 "0x00000400" "| C4"
d G "sAN17" 5 697 "0x00000800" "| C5"
d G "sAN18" 5 698 "0x00001000" "| C6"
d G "sAN19" 5 699 "0x00002000" "| C7"
d G "NO_ANALOGS" 5 700 "0" "None"
d G "ALL_ANALOG" 5 701 "0x0F8FFF00" "A0 A1 A2 A3 A5 B2 B3 B1 B4 B0 B5 C2 C3 C4 C5 C6 C7"
d G "VSS_VDD" 5 704 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 5 705 "0x40000000" "| Range 0-VrefH"
d G "VSS_FVR" 5 706 "0x80000000" "| Range 0-Fvr BUF2"
d G "VREF_VDD" 5 707 "0x10000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 5 708 "0x50000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 5 709 "0x90000000" "| Range VrefL-Fvr BUF2"
d G "CTMU_CHANNEL" 5 713 "0x1D"
d G "DAC_CHANNEL" 5 714 "0x1E"
d G "FVR_CHANNEL" 5 715 "0x1F"
d G "ADC_START_AND_READ" 5 718 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 5 719 "1"
d G "ADC_READ_ONLY" 5 720 "6"
c L "set_adc_channel" 5 1 3 "FUNCTION"
f N "abs" 5 726 ""
v L "x" 5 726 "sint8" `394 
f B "abs" 5 726 "sint8(sint8 x)" `393 
f N "abs" 5 727 ""
v L "x" 5 727 "sint16" `396 
f B "abs" 5 727 "sint16(sint16 x)" `395 
f N "abs" 5 728 ""
v L "x" 5 728 "sint32" `398 
f B "abs" 5 728 "sint32(sint32 x)" `397 
f N "abs" 5 729 ""
v L "x" 5 729 "float" `400 
f B "abs" 5 729 "float(float x)" `399 
f N "_mul" 5 730 ""
v L "??65535" 5 730 "int8" `402 
v L "??65535" 5 730 "int8" `403 
f B "_mul" 5 730 "int16(int8 ,int8 )" `401 
f N "_mul" 5 731 ""
v L "??65535" 5 731 "sint8" `405 
v L "??65535" 5 731 "sint8" `406 
f B "_mul" 5 731 "sint16(sint8 ,sint8 )" `404 
f N "_mul" 5 732 ""
v L "??65535" 5 732 "int16" `408 
v L "??65535" 5 732 "int16" `409 
f B "_mul" 5 732 "int32(int16 ,int16 )" `407 
f N "_mul" 5 733 ""
v L "??65535" 5 733 "sint16" `411 
v L "??65535" 5 733 "sint16" `412 
f B "_mul" 5 733 "sint32(sint16 ,sint16 )" `410  "Memory Manipulation Prototypes:"
f N "read_bank" 5 736 ""
v L "bank" 5 736 "int8" `414 
v L "offset" 5 736 "int8" `415 
f B "read_bank" 5 736 "int8(int8 bank,int8 offset)" `413 
f N "write_bank" 5 737 ""
v L "bank" 5 737 "int8" `417 
v L "offset" 5 737 "int8" `418 
v L "value" 5 737 "int8" `419 
f B "write_bank" 5 737 "void(int8 bank,int8 offset,int8 value)" `416 
f N "strcpy" 5 738 ""
v L "dest" 5 738 "*int8" `421 
v L "src" 5 738 "*int8" `422 
f B "strcpy" 5 738 "void(*int8 dest,*int8 src)" `420 
f N "memset" 5 739 ""
v L "destination" 5 739 "*int8" `424 
v L "value" 5 739 "int8" `425 
v L "num" 5 739 "int16" `426 
f B "memset" 5 739 "void(*int8 destination,int8 value,int16 num)" `423 
f N "memcpy" 5 740 ""
v L "destination" 5 740 "*int8" `428 
v L "source" 5 740 "*int8" `429 
v L "num" 5 740 "int16" `430 
f B "memcpy" 5 740 "void(*int8 destination,*int8 source,int16 num)" `427  "String Prototypes:"
f N "toupper" 5 743 ""
v L "cvalue" 5 743 "int8" `432 
f B "toupper" 5 743 "int8(int8 cvalue)" `431 
f N "tolower" 5 744 ""
v L "cvalue" 5 744 "int8" `434 
f B "tolower" 5 744 "int8(int8 cvalue)" `433 
f N "sprintf" 5 745 ""
v L "string" 5 745 "*int8" `436 
v L "cstring" 5 745 "*int8" `437 
f B "sprintf" 5 745 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `435  "Data Manipulators Prototypes:"
f N "shift_left" 5 748 ""
v L "address" 5 748 "*int8" `440 
v L "bytes" 5 748 "int8" `441 
v L "value" 5 748 "int8" `442 
f B "shift_left" 5 748 "int8(*int8 address,int8 bytes,int8 value)" `439 
f N "shift_right" 5 749 ""
v L "address" 5 749 "*int8" `444 
v L "bytes" 5 749 "int8" `445 
v L "value" 5 749 "int8" `446 
f B "shift_right" 5 749 "int8(*int8 address,int8 bytes,int8 value)" `443 
f N "rotate_left" 5 750 ""
v L "address" 5 750 "*int8" `448 
v L "bytes" 5 750 "int8" `449 
f B "rotate_left" 5 750 "void(*int8 address,int8 bytes)" `447 
f N "rotate_right" 5 751 ""
v L "address" 5 751 "*int8" `451 
v L "bytes" 5 751 "int8" `452 
f B "rotate_right" 5 751 "void(*int8 address,int8 bytes)" `450 
f N "swap" 5 752 ""
v L "value" 5 752 "int8" `454 
f B "swap" 5 752 "void(int8 value)" `453 
f N "make8" 5 753 ""
v L "var" 5 753 "int16" `456 
v L "offset" 5 753 "int8" `457 
f B "make8" 5 753 "int8(int16 var,int8 offset)" `455 
f N "make8" 5 754 ""
v L "var" 5 754 "int32" `459 
v L "offset" 5 754 "int8" `460 
f B "make8" 5 754 "int8(int32 var,int8 offset)" `458 
f N "make16" 5 755 ""
v L "varhigh" 5 755 "int8" `462 
v L "varlow" 5 755 "int8" `463 
f B "make16" 5 755 "int16(int8 varhigh,int8 varlow)" `461 
f N "make32" 5 756 ""
v L "var1" 5 756 "int16" `465 
f B "make32" 5 756 "int32(int16 var1)" `464 
f N "make32" 5 757 ""
v L "var1" 5 757 "int16" `467 
v L "var2" 5 757 "int16" `468 
f B "make32" 5 757 "int32(int16 var1,int16 var2)" `466 
f N "make32" 5 758 ""
v L "var1" 5 758 "int16" `470 
v L "var2" 5 758 "int8" `471 
f B "make32" 5 758 "int32(int16 var1,int8 var2)" `469 
f N "make32" 5 759 ""
v L "var1" 5 759 "int16" `473 
v L "var2" 5 759 "int8" `474 
v L "var3" 5 759 "int8" `475 
f B "make32" 5 759 "int32(int16 var1,int8 var2,int8 var3)" `472 
f N "make32" 5 760 ""
v L "var1" 5 760 "int8" `477 
f B "make32" 5 760 "int32(int8 var1)" `476 
f N "make32" 5 761 ""
v L "var1" 5 761 "int8" `479 
v L "var2" 5 761 "int8" `480 
f B "make32" 5 761 "int32(int8 var1,int8 var2)" `478 
f N "make32" 5 762 ""
v L "var1" 5 762 "int8" `482 
v L "var2" 5 762 "int8" `483 
v L "var3" 5 762 "int8" `484 
f B "make32" 5 762 "int32(int8 var1,int8 var2,int8 var3)" `481 
f N "make32" 5 763 ""
v L "var1" 5 763 "int8" `486 
v L "var2" 5 763 "int8" `487 
v L "var3" 5 763 "int8" `488 
v L "var4" 5 763 "int8" `489 
f B "make32" 5 763 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `485 
f N "make32" 5 764 ""
v L "var1" 5 764 "int8" `491 
v L "var2" 5 764 "int16" `492 
f B "make32" 5 764 "int32(int8 var1,int16 var2)" `490 
f N "make32" 5 765 ""
v L "var1" 5 765 "int8" `494 
v L "var2" 5 765 "int16" `495 
v L "var3" 5 765 "int8" `496 
f B "make32" 5 765 "int32(int8 var1,int16 var2,int8 var3)" `493 
f N "make32" 5 766 ""
v L "var1" 5 766 "int8" `498 
v L "var2" 5 766 "int8" `499 
v L "var3" 5 766 "int16" `500 
f B "make32" 5 766 "int32(int8 var1,int8 var2,int16 var3)" `497 
f N "bit_set" 5 767 ""
v L "var" 5 767 "int8" `502 
v L "bit" 5 767 "int8" `503 
f B "bit_set" 5 767 "void(int8 var,int8 bit)" `501 
f N "bit_set" 5 768 ""
v L "var" 5 768 "int16" `505 
v L "bit" 5 768 "int8" `506 
f B "bit_set" 5 768 "void(int16 var,int8 bit)" `504 
f N "bit_set" 5 769 ""
v L "var" 5 769 "int32" `508 
v L "bit" 5 769 "int8" `509 
f B "bit_set" 5 769 "void(int32 var,int8 bit)" `507 
f N "bit_clear" 5 770 ""
v L "var" 5 770 "int8" `511 
v L "bit" 5 770 "int8" `512 
f B "bit_clear" 5 770 "void(int8 var,int8 bit)" `510 
f N "bit_clear" 5 771 ""
v L "var" 5 771 "int16" `514 
v L "bit" 5 771 "int8" `515 
f B "bit_clear" 5 771 "void(int16 var,int8 bit)" `513 
f N "bit_clear" 5 772 ""
v L "var" 5 772 "int32" `517 
v L "bit" 5 772 "int8" `518 
f B "bit_clear" 5 772 "void(int32 var,int8 bit)" `516 
f N "bit_test" 5 773 ""
v L "var" 5 773 "int8" `520 
v L "bit" 5 773 "int8" `521 
f B "bit_test" 5 773 "int8(int8 var,int8 bit)" `519 
f N "bit_test" 5 774 ""
v L "var" 5 774 "int16" `523 
v L "bit" 5 774 "int8" `524 
f B "bit_test" 5 774 "int8(int16 var,int8 bit)" `522 
f N "bit_test" 5 775 ""
v L "var" 5 775 "int32" `526 
v L "bit" 5 775 "int8" `527 
f B "bit_test" 5 775 "int8(int32 var,int8 bit)" `525  "#use delay() Prototypes:"
f N "delay_cycles" 5 778 ""
v L "count" 5 778 "int8" `529 
f B "delay_cycles" 5 778 "void(int8 count)" `528 
f N "delay_ms" 5 779 ""
v L "time" 5 779 "int16" `531 
f B "delay_ms" 5 779 "void(int16 time)" `530 
f N "delay_us" 5 780 ""
v L "time" 5 780 "int16" `533 
f B "delay_us" 5 780 "void(int16 time)" `532  "#use rs232() Prototypes:"
f N "putchar" 5 783 ""
v L "cdata" 5 783 "int8" `535 
f B "putchar" 5 783 "void(int8 cdata)" `534 
f N "putchar" 5 784 ""
v L "cdata" 5 784 "int8" `537 
v L "stream" 5 784 "int8" `538 
f B "putchar" 5 784 "void(int8 cdata,int8 stream)" `536 
f N "puts" 5 785 ""
v L "string" 5 785 "*int8" `540 
f B "puts" 5 785 "void(*int8 string)" `539 
f N "puts" 5 786 ""
v L "string" 5 786 "*int8" `542 
v L "stream" 5 786 "int8" `543 
f B "puts" 5 786 "void(*int8 string,int8 stream)" `541 
f N "getch" 5 787 ""
f B "getch" 5 787 "int8()" `544 
f N "getch" 5 788 ""
v L "stream" 5 788 "int8" `546 
f B "getch" 5 788 "int8(int8 stream)" `545 
f N "gets" 5 789 ""
v L "string" 5 789 "*int8" `548 
f B "gets" 5 789 "void(*int8 string)" `547 
f N "gets" 5 790 ""
v L "string" 5 790 "*int8" `550 
v L "stream" 5 790 "int8" `551 
f B "gets" 5 790 "void(*int8 string,int8 stream)" `549 
f N "kbhit" 5 791 ""
f B "kbhit" 5 791 "int8()" `552 
f N "kbhit" 5 792 ""
v L "stream" 5 792 "int8" `554 
f B "kbhit" 5 792 "int8(int8 stream)" `553 
f N "printf" 5 793 ""
v L "string" 5 793 "*int8" `556 
f B "printf" 5 793 "void(*int8 string,*int8 _VA_LIST)" `555 
f N "fprintf" 5 794 ""
v L "stream" 5 794 "int8" `559 
v L "string" 5 794 "*int8" `560 
f B "fprintf" 5 794 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `558 
f N "putc_send" 5 795 ""
f B "putc_send" 5 795 "void()" `562 
f N "fputc_send" 5 796 ""
v L "stream" 5 796 "int8" `564 
f B "fputc_send" 5 796 "void(int8 stream)" `563 
f N "rcv_buffer_full" 5 797 ""
f B "rcv_buffer_full" 5 797 "int8()" `565 
f N "rcv_buffer_full" 5 798 ""
v L "stream" 5 798 "int8" `567 
f B "rcv_buffer_full" 5 798 "int8(int8 stream)" `566 
f N "rcv_buffer_bytes" 5 799 ""
f B "rcv_buffer_bytes" 5 799 "int16()" `568 
f N "rcv_buffer_bytes" 5 800 ""
v L "stream" 5 800 "int8" `570 
f B "rcv_buffer_bytes" 5 800 "int16(int8 stream)" `569 
f N "tx_buffer_full" 5 801 ""
f B "tx_buffer_full" 5 801 "int8()" `571 
f N "tx_buffer_full" 5 802 ""
v L "stream" 5 802 "int8" `573 
f B "tx_buffer_full" 5 802 "int8(int8 stream)" `572 
f N "tx_buffer_bytes" 5 803 ""
f B "tx_buffer_bytes" 5 803 "int16()" `574 
f N "tx_buffer_bytes" 5 804 ""
v L "stream" 5 804 "int8" `576 
f B "tx_buffer_bytes" 5 804 "int16(int8 stream)" `575  "#use i2c() Prototypes:"
f N "i2c_read" 5 807 ""
f B "i2c_read" 5 807 "int8()" `577 
f N "i2c_read" 5 808 ""
v L "ack" 5 808 "int8" `579 
f B "i2c_read" 5 808 "int8(int8 ack)" `578 
f N "i2c_read" 5 809 ""
v L "stream" 5 809 "int8" `581 
v L "ack" 5 809 "int8" `582 
f B "i2c_read" 5 809 "int8(int8 stream,int8 ack)" `580 
f N "i2c_write" 5 810 ""
v L "data" 5 810 "int8" `584 
f B "i2c_write" 5 810 "int8(int8 data)" `583 
f N "i2c_write" 5 811 ""
v L "stream" 5 811 "int8" `586 
v L "data" 5 811 "int8" `587 
f B "i2c_write" 5 811 "int8(int8 stream,int8 data)" `585 
f N "i2c_start" 5 812 ""
f B "i2c_start" 5 812 "void()" `588 
f N "i2c_start" 5 813 ""
v L "stream" 5 813 "int8" `590 
f B "i2c_start" 5 813 "void(int8 stream)" `589 
f N "i2c_start" 5 814 ""
v L "stream" 5 814 "int8" `592 
v L "restart" 5 814 "int8" `593 
f B "i2c_start" 5 814 "void(int8 stream,int8 restart)" `591 
f N "i2c_stop" 5 815 ""
f B "i2c_stop" 5 815 "void()" `594 
f N "i2c_stop" 5 816 ""
v L "stream" 5 816 "int8" `596 
f B "i2c_stop" 5 816 "void(int8 stream)" `595 
f N "i2c_isr_state" 5 817 ""
f B "i2c_isr_state" 5 817 "int8()" `597 
f N "i2c_slaveaddr" 5 818 ""
v L "addr" 5 818 "int8" `599 
f B "i2c_slaveaddr" 5 818 "void(int8 addr)" `598 
f N "i2c_slaveaddr" 5 819 ""
v L "stream" 5 819 "int8" `601 
v L "addr" 5 819 "int8" `602 
f B "i2c_slaveaddr" 5 819 "void(int8 stream,int8 addr)" `600 
f N "i2c_poll" 5 820 ""
f B "i2c_poll" 5 820 "int8()" `603 
f N "i2c_poll" 5 821 ""
v L "stream" 5 821 "int8" `605 
f B "i2c_poll" 5 821 "int8(int8 stream)" `604 
f N "i2c_init" 5 822 ""
v L "baud" 5 822 "int32" `607 
f B "i2c_init" 5 822 "void(int32 baud)" `606 
f N "i2c_init" 5 823 ""
v L "stream" 5 823 "int8" `609 
v L "baud" 5 823 "int32" `610 
f B "i2c_init" 5 823 "void(int8 stream,int32 baud)" `608 
f N "i2c_transfer" 5 824 ""
v L "address" 5 824 "int8" `612 
v L "wData" 5 824 "*int8" `613 
v L "wCount" 5 824 "int8" `614 
f B "i2c_transfer" 5 824 "int8(int8 address,*int8 wData,int8 wCount)" `611 
f N "i2c_transfer" 5 825 ""
v L "address" 5 825 "int8" `616 
v L "wData" 5 825 "*int8" `617 
v L "wCount" 5 825 "int8" `618 
v L "rData" 5 825 "*int8" `619 
v L "rCount" 5 825 "*int8" `620 
f B "i2c_transfer" 5 825 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `615 
f N "i2c_transfer" 5 826 ""
v L "stream" 5 826 "int8" `622 
v L "address" 5 826 "int8" `623 
v L "wData" 5 826 "*int8" `624 
v L "wCount" 5 826 "int8" `625 
f B "i2c_transfer" 5 826 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `621 
f N "i2c_transfer" 5 827 ""
v L "stream" 5 827 "int8" `627 
v L "address" 5 827 "int8" `628 
v L "wData" 5 827 "*int8" `629 
v L "wCount" 5 827 "int8" `630 
v L "rData" 5 827 "*int8" `631 
v L "rCount" 5 827 "*int8" `632 
f B "i2c_transfer" 5 827 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `626 
f N "i2c_transfer_out" 5 828 ""
v L "address" 5 828 "int8" `634 
v L "wData" 5 828 "*int8" `635 
v L "wCount" 5 828 "int8" `636 
f B "i2c_transfer_out" 5 828 "int8(int8 address,*int8 wData,int8 wCount)" `633 
f N "i2c_transfer_out" 5 829 ""
v L "stream" 5 829 "int8" `638 
v L "address" 5 829 "int8" `639 
v L "wData" 5 829 "*int8" `640 
v L "wCount" 5 829 "int8" `641 
f B "i2c_transfer_out" 5 829 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `637 
f N "i2c_transfer_in" 5 830 ""
v L "address" 5 830 "int8" `643 
v L "rData" 5 830 "*int8" `644 
v L "rCount" 5 830 "int8" `645 
f B "i2c_transfer_in" 5 830 "int8(int8 address,*int8 rData,int8 rCount)" `642 
f N "i2c_transfer_in" 5 831 ""
v L "stream" 5 831 "int8" `647 
v L "address" 5 831 "int8" `648 
v L "rData" 5 831 "*int8" `649 
v L "rCount" 5 831 "int8" `650 
f B "i2c_transfer_in" 5 831 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `646  "#use spi() Prototypes:"
f N "spi_xfer" 5 834 ""
f B "spi_xfer" 5 834 "int8()" `651 
f N "spi_xfer" 5 835 ""
f G "spi_xfer" 5 835 "int16(int8 data)" `652 
f N "spi_xfer" 5 836 ""
f G "spi_xfer" 5 836 "int32(int8 data)" `652 
f N "spi_xfer" 5 837 ""
v L "data" 5 837 "int8" `653 
f B "spi_xfer" 5 837 "int8(int8 data)" `652 
f N "spi_xfer" 5 838 ""
v L "data" 5 838 "int16" `655 
f B "spi_xfer" 5 838 "int16(int16 data)" `654 
f N "spi_xfer" 5 839 ""
v L "data" 5 839 "int32" `657 
f B "spi_xfer" 5 839 "int32(int32 data)" `656 
f N "spi_xfer" 5 840 ""
v L "stream" 5 840 "int8" `659 
v L "data" 5 840 "int8" `660 
f B "spi_xfer" 5 840 "int8(int8 stream,int8 data)" `658 
f N "spi_xfer" 5 841 ""
v L "stream" 5 841 "int8" `662 
v L "data" 5 841 "int16" `663 
f B "spi_xfer" 5 841 "int16(int8 stream,int16 data)" `661 
f N "spi_xfer" 5 842 ""
v L "stream" 5 842 "int8" `665 
v L "data" 5 842 "int32" `666 
f B "spi_xfer" 5 842 "int32(int8 stream,int32 data)" `664 
f N "spi_xfer" 5 843 ""
v L "stream" 5 843 "int8" `668 
v L "data" 5 843 "int8" `669 
v L "bits" 5 843 "int8" `670 
f B "spi_xfer" 5 843 "int8(int8 stream,int8 data,int8 bits)" `667 
f N "spi_xfer" 5 844 ""
v L "stream" 5 844 "int8" `672 
v L "data" 5 844 "int16" `673 
v L "bits" 5 844 "int8" `674 
f B "spi_xfer" 5 844 "int16(int8 stream,int16 data,int8 bits)" `671 
f N "spi_xfer" 5 845 ""
v L "stream" 5 845 "int8" `676 
v L "data" 5 845 "int32" `677 
v L "bits" 5 845 "int8" `678 
f B "spi_xfer" 5 845 "int32(int8 stream,int32 data,int8 bits)" `675 
f N "spi_init" 5 846 ""
v L "baud" 5 846 "int32" `680 
f B "spi_init" 5 846 "void(int32 baud)" `679 
f N "spi_init" 5 847 ""
v L "stream" 5 847 "int8" `682 
v L "baud" 5 847 "int32" `683 
f B "spi_init" 5 847 "void(int8 stream,int32 baud)" `681 
f N "spi_speed" 5 848 ""
v L "baud" 5 848 "int32" `685 
f B "spi_speed" 5 848 "void(int32 baud)" `684 
f N "spi_speed" 5 849 ""
v L "stream" 5 849 "int8" `687 
v L "baud" 5 849 "int32" `688 
f B "spi_speed" 5 849 "void(int8 stream,int32 baud)" `686 
f N "spi_speed" 5 850 ""
v L "stream" 5 850 "int8" `690 
v L "baud" 5 850 "int32" `691 
v L "clock" 5 850 "int32" `692 
f B "spi_speed" 5 850 "void(int8 stream,int32 baud,int32 clock)" `689 
f N "spi_prewrite" 5 851 ""
v L "data" 5 851 "int8" `694 
f B "spi_prewrite" 5 851 "void(int8 data)" `693 
f N "spi_prewrite" 5 852 ""
v L "data" 5 852 "int16" `696 
f B "spi_prewrite" 5 852 "void(int16 data)" `695 
f N "spi_prewrite" 5 853 ""
v L "data" 5 853 "int32" `698 
f B "spi_prewrite" 5 853 "void(int32 data)" `697 
f N "spi_prewrite" 5 854 ""
v L "??65535" 5 854 "int8" `700 
v L "data" 5 854 "int8" `701 
f B "spi_prewrite" 5 854 "void(int8 ,int8 data)" `699 
f N "spi_prewrite" 5 855 ""
v L "??65535" 5 855 "int8" `703 
v L "data" 5 855 "int16" `704 
f B "spi_prewrite" 5 855 "void(int8 ,int16 data)" `702 
f N "spi_prewrite" 5 856 ""
v L "??65535" 5 856 "int8" `706 
v L "data" 5 856 "int32" `707 
f B "spi_prewrite" 5 856 "void(int8 ,int32 data)" `705 
f N "spi_xfer_in" 5 857 ""
f B "spi_xfer_in" 5 857 "int8()" `708 
f N "spi_xfer_in" 5 858 ""
f G "spi_xfer_in" 5 858 "int16(int8 bits)" `709 
f N "spi_xfer_in" 5 859 ""
f G "spi_xfer_in" 5 859 "int32(int8 bits)" `709 
f N "spi_xfer_in" 5 860 ""
v L "bits" 5 860 "int8" `710 
f B "spi_xfer_in" 5 860 "int8(int8 bits)" `709 
f N "spi_xfer_in" 5 861 ""
v L "bits" 5 861 "int8" `712 
f G "spi_xfer_in" 5 861 "int16(int8 bits,int8 bits)" `711 
f N "spi_xfer_in" 5 862 ""
v L "bits" 5 862 "int8" `712 
f G "spi_xfer_in" 5 862 "int32(int8 bits,int8 bits)" `711 
f N "spi_xfer_in" 5 863 ""
v L "stream" 5 863 "int8" `712 
v L "bits" 5 863 "int8" `713 
f B "spi_xfer_in" 5 863 "int8(int8 stream,int8 bits)" `711 
f N "spi_xfer_in" 5 864 ""
v L "stream" 5 864 "int8" `712 
v L "bits" 5 864 "int8" `716 
f G "spi_xfer_in" 5 864 "int16(int8 stream,int8 bits,int16 count)" `714 
f N "spi_xfer_in" 5 865 ""
v L "stream" 5 865 "int8" `712 
v L "bits" 5 865 "int8" `716 
f G "spi_xfer_in" 5 865 "int32(int8 stream,int8 bits,int16 count)" `714 
f N "spi_transfer" 5 866 ""
v L "wData" 5 866 "*int8" `715 
v L "rData" 5 866 "*int8" `716 
v L "count" 5 866 "int16" `717 
f B "spi_transfer" 5 866 "void(*int8 wData,*int8 rData,int16 count)" `714 
f N "spi_transfer" 5 867 ""
v L "stream" 5 867 "int8" `719 
v L "wData" 5 867 "*int8" `720 
v L "rData" 5 867 "*int8" `721 
v L "count" 5 867 "int16" `722 
f B "spi_transfer" 5 867 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `718 
f N "spi_transfer_write" 5 868 ""
v L "wData" 5 868 "*int8" `724 
v L "count" 5 868 "int16" `725 
f B "spi_transfer_write" 5 868 "void(*int8 wData,int16 count)" `723 
f N "spi_transfer_write" 5 869 ""
v L "stream" 5 869 "int8" `727 
v L "wData" 5 869 "*int8" `728 
v L "count" 5 869 "int16" `729 
f B "spi_transfer_write" 5 869 "void(int8 stream,*int8 wData,int16 count)" `726 
f N "spi_transfer_read" 5 870 ""
v L "rData" 5 870 "*int8" `731 
v L "count" 5 870 "int16" `732 
f B "spi_transfer_read" 5 870 "void(*int8 rData,int16 count)" `730 
f N "spi_transfer_read" 5 871 ""
v L "stream" 5 871 "int8" `734 
v L "rData" 5 871 "*int8" `735 
v L "count" 5 871 "int16" `736 
f B "spi_transfer_read" 5 871 "void(int8 stream,*int8 rData,int16 count)" `733  "#use rtos() Prototypes:"
f N "rtos_run" 5 874 ""
f B "rtos_run" 5 874 "void()" `737 
f N "rtos_yield" 5 875 ""
f B "rtos_yield" 5 875 "void()" `738 
f N "rtos_enable" 5 876 ""
v L "task" 5 876 "int8" `740 
f B "rtos_enable" 5 876 "void(int8 task)" `739 
f N "rtos_disable" 5 877 ""
v L "task" 5 877 "int8" `742 
f B "rtos_disable" 5 877 "void(int8 task)" `741 
f N "rtos_terminate" 5 878 ""
f B "rtos_terminate" 5 878 "void()" `743 
f N "rtos_await" 5 879 ""
v L "flag" 5 879 "int8" `745 
f B "rtos_await" 5 879 "void(int8 flag)" `744 
f N "rtos_wait" 5 880 ""
v L "sem" 5 880 "int8" `747 
f B "rtos_wait" 5 880 "void(int8 sem)" `746 
f N "rtos_signal" 5 881 ""
v L "sem" 5 881 "int8" `749 
f B "rtos_signal" 5 881 "void(int8 sem)" `748 
f N "rtos_msg_send" 5 882 ""
v L "task" 5 882 "int8" `751 
v L "msg" 5 882 "int8" `752 
f B "rtos_msg_send" 5 882 "void(int8 task,int8 msg)" `750 
f N "rtos_msg_read" 5 883 ""
f B "rtos_msg_read" 5 883 "int8()" `753 
f N "rtos_msg_poll" 5 884 ""
f B "rtos_msg_poll" 5 884 "int8()" `754 
f N "rtos_overrun" 5 885 ""
v L "task" 5 885 "int8" `756 
f B "rtos_overrun" 5 885 "int8(int8 task)" `755 
f N "rtos_stats" 5 886 ""
v L "task" 5 886 "int8" `758 
v L "stat" 5 886 "*int8" `759 
f B "rtos_stats" 5 886 "void(int8 task,*int8 stat)" `757  "#use timer() Prototypes:"
f N "get_ticks" 5 889 ""
f B "get_ticks" 5 889 "int8()" `760 
f N "get_ticks" 5 890 ""
f G "get_ticks" 5 890 "int16(int8 stream)" `761 
f N "get_ticks" 5 891 ""
f G "get_ticks" 5 891 "int32(int8 stream)" `761 
f N "get_ticks" 5 892 ""
v L "stream" 5 892 "int8" `762 
f B "get_ticks" 5 892 "int8(int8 stream)" `761 
f N "get_ticks" 5 893 ""
v L "stream" 5 893 "int8" `764 
f G "get_ticks" 5 893 "int16(int8 stream)" `763 
f N "get_ticks" 5 894 ""
v L "stream" 5 894 "int8" `764 
f G "get_ticks" 5 894 "int32(int8 stream)" `763 
f N "set_ticks" 5 895 ""
v L "value" 5 895 "int8" `764 
f B "set_ticks" 5 895 "void(int8 value)" `763 
f N "set_ticks" 5 896 ""
v L "value" 5 896 "int16" `766 
f B "set_ticks" 5 896 "void(int16 value)" `765 
f N "set_ticks" 5 897 ""
v L "value" 5 897 "int32" `768 
f B "set_ticks" 5 897 "void(int32 value)" `767 
f N "set_ticks" 5 898 ""
v L "stream" 5 898 "int8" `770 
v L "value" 5 898 "int8" `771 
f B "set_ticks" 5 898 "void(int8 stream,int8 value)" `769 
f N "set_ticks" 5 899 ""
v L "stream" 5 899 "int8" `773 
v L "value" 5 899 "int16" `774 
f B "set_ticks" 5 899 "void(int8 stream,int16 value)" `772 
f N "set_ticks" 5 900 ""
v L "stream" 5 900 "int8" `776 
v L "value" 5 900 "int32" `777 
f B "set_ticks" 5 900 "void(int8 stream,int32 value)" `775  "#use pwm() Prototypes:"
f N "pwm_on" 5 903 ""
f B "pwm_on" 5 903 "void()" `778 
f N "pwm_on" 5 904 ""
v L "stream" 5 904 "int8" `780 
f B "pwm_on" 5 904 "void(int8 stream)" `779 
f N "pwm_off" 5 905 ""
f B "pwm_off" 5 905 "void()" `781 
f N "pwm_off" 5 906 ""
v L "stream" 5 906 "int8" `783 
f B "pwm_off" 5 906 "void(int8 stream)" `782 
f N "pwm_set_duty" 5 907 ""
v L "duty" 5 907 "int16" `785 
f B "pwm_set_duty" 5 907 "void(int16 duty)" `784 
f N "pwm_set_duty" 5 908 ""
v L "stream" 5 908 "int8" `787 
v L "duty" 5 908 "int16" `788 
f B "pwm_set_duty" 5 908 "void(int8 stream,int16 duty)" `786 
f N "pwm_set_duty_percent" 5 909 ""
v L "percent" 5 909 "int16" `790 
f B "pwm_set_duty_percent" 5 909 "void(int16 percent)" `789 
f N "pwm_set_duty_percent" 5 910 ""
v L "stream" 5 910 "int8" `792 
v L "percent" 5 910 "int16" `793 
f B "pwm_set_duty_percent" 5 910 "void(int8 stream,int16 percent)" `791 
f N "pwm_set_frequency" 5 911 ""
v L "frequency" 5 911 "int32" `795 
f B "pwm_set_frequency" 5 911 "void(int32 frequency)" `794 
f N "pwm_set_frequency" 5 912 ""
v L "stream" 5 912 "int8" `797 
v L "frequency" 5 912 "int32" `798 
f B "pwm_set_frequency" 5 912 "void(int8 stream,int32 frequency)" `796  "#use capture() Prototypes:"
f N "get_capture_time" 5 915 ""
f B "get_capture_time" 5 915 "int16()" `799 
f N "get_capture_time" 5 916 ""
v L "stream" 5 916 "int8" `801 
f B "get_capture_time" 5 916 "int16(int8 stream)" `800 
f N "get_capture_event" 5 917 ""
f B "get_capture_event" 5 917 "int8()" `802 
f N "get_capture_event" 5 918 ""
v L "stream" 5 918 "int8" `804 
f B "get_capture_event" 5 918 "int8(int8 stream)" `803  "Enviroment Prototypes:"
c L "get_capture_event" 5 1 2 "FUNCTION"
f N "goto_address" 5 931 ""
v L "address" 5 931 "int32" `806 
f B "goto_address" 5 931 "void(int32 address)" `805 
f N "label_address" 5 932 ""
v L "label" 5 932 "int32" `808 
f B "label_address" 5 932 "int32(int32 label)" `807  "Program Memory Read Prototypes:"
f N "read_program_memory" 5 935 ""
v L "address" 5 935 "int32" `810 
v L "dataptr" 5 935 "*int8" `811 
v L "count" 5 935 "int16" `812 
f B "read_program_memory" 5 935 "void(int32 address,*int8 dataptr,int16 count)" `809 
f N "read_program_eeprom" 5 936 ""
v L "address" 5 936 "int32" `814 
f B "read_program_eeprom" 5 936 "int16(int32 address)" `813  "Program Memory Write Prototypes:"
f N "write_program_memory" 5 939 ""
v L "address" 5 939 "int32" `816 
v L "dataptr" 5 939 "*int8" `817 
v L "count" 5 939 "int16" `818 
f B "write_program_memory" 5 939 "void(int32 address,*int8 dataptr,int16 count)" `815 
f N "write_program_eeprom" 5 940 ""
v L "address" 5 940 "int32" `820 
v L "data" 5 940 "int16" `821 
f B "write_program_eeprom" 5 940 "void(int32 address,int16 data)" `819  "EEPROM Prototypes:"
d G "__EEADDRESS__" 5 945 "unsigned int16"
f N "read_eeprom" 5 950 ""
v L "address" 5 950 "int16" `823 
f B "read_eeprom" 5 950 "int8(int16 address)" `822 
f N "write_eeprom" 5 951 ""
v L "address" 5 951 "int16" `825 
v L "value" 5 951 "int8" `826 
f B "write_eeprom" 5 951 "void(int16 address,int8 value)" `824  "#use touchpad() Prototypes:"
f N "touchpad_state" 5 954 ""
v L "state" 5 954 "int8" `828 
f B "touchpad_state" 5 954 "void(int8 state)" `827 
f N "touchpad_getc" 5 955 ""
f B "touchpad_getc" 5 955 "int8()" `829 
f N "touchpad_hit" 5 956 ""
f B "touchpad_hit" 5 956 "int8()" `830  "INT"
c L "touchpad_hit" 5 1 4 "FUNCTION"
f N "enable_interrupts" 5 962 ""
v L "interrupt" 5 962 "int32" `832 
f B "enable_interrupts" 5 962 "void(int32 interrupt)" `831 
f N "disable_interrupts" 5 963 ""
v L "interrupt" 5 963 "int32" `834 
f B "disable_interrupts" 5 963 "void(int32 interrupt)" `833 
f N "clear_interrupt" 5 964 ""
v L "interrupt" 5 964 "int32" `836 
f B "clear_interrupt" 5 964 "void(int32 interrupt)" `835 
f N "interrupt_active" 5 965 ""
v L "interrupt" 5 965 "int32" `838 
f B "interrupt_active" 5 965 "int8(int32 interrupt)" `837 
f N "interrupt_enabled" 5 966 ""
v L "interrupt" 5 966 "int32" `840 
f B "interrupt_enabled" 5 966 "int8(int32 interrupt)" `839 
f N "ext_int_edge" 5 967 ""
v L "source" 5 967 "int8" `842 
v L "edge" 5 967 "int8" `843 
f B "ext_int_edge" 5 967 "void(int8 source,int8 edge)" `841 
f N "jump_to_isr" 5 968 ""
v L "address" 5 968 "int16" `845 
f B "jump_to_isr" 5 968 "void(int16 address)" `844  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 5 970 "0x40"
d G "H_TO_L" 5 971 "0"
d G "GLOBAL" 5 973 "0xF2C0"
d G "PERIPH" 5 974 "0xF240"
d G "INT_RTCC" 5 975 "0x00F220"
d G "INT_TIMER0" 5 976 "0x00F220"
d G "INT_TIMER1" 5 977 "0x009D01"
d G "INT_TIMER2" 5 978 "0x009D02"
d G "INT_TIMER3" 5 979 "0x00A002"
d G "INT_EXT_L2H" 5 980 "0x5000F210"
d G "INT_EXT_H2L" 5 981 "0x6000F210"
d G "INT_EXT" 5 982 "0x00F210"
d G "INT_EXT1_L2H" 5 983 "0x5001F008"
d G "INT_EXT1_H2L" 5 984 "0x6001F008"
d G "INT_EXT1" 5 985 "0x00F008"
d G "INT_EXT2_L2H" 5 986 "0x5002F010"
d G "INT_EXT2_H2L" 5 987 "0x6002F010"
d G "INT_EXT2" 5 988 "0x00F010"
d G "INT_RB" 5 989 "0x01FFF208"
d G "INT_AD" 5 990 "0x009D40"
d G "INT_RDA" 5 991 "0x009D20"
d G "INT_TBE" 5 992 "0x009D10"
d G "INT_SSP" 5 993 "0x009D08"
d G "INT_CCP1" 5 994 "0x009D04"
d G "INT_CCP2" 5 995 "0x00A001"
d G "INT_BUSCOL" 5 996 "0x00A008"
d G "INT_COMP" 5 997 "0x00A040"
d G "INT_EEPROM" 5 998 "0x00A010"
d G "INT_TBE2" 5 999 "0x00A310"
d G "INT_RDA2" 5 1000 "0x00A320"
d G "INT_OSCF" 5 1001 "0x00A080"
d G "INT_HLVD" 5 1002 "0x00A004"
d G "INT_BUSCOL2" 5 1003 "0x00A340"
d G "INT_COMP2" 5 1004 "0x00A020"
d G "INT_SSP2" 5 1005 "0x00A380"
d G "INT_TIMER4" 5 1006 "0x007D01"
d G "INT_TIMER5" 5 1007 "0x007D02"
d G "INT_TIMER6" 5 1008 "0x007D04"
d G "INT_CCP3" 5 1009 "0x007A01"
d G "INT_CCP4" 5 1010 "0x007A02"
d G "INT_CCP5" 5 1011 "0x007A04"
d G "INT_TMR1G" 5 1012 "0x00A301"
d G "INT_TMR3G" 5 1013 "0x00A302"
d G "INT_TMR5G" 5 1014 "0x00A304"
d G "INT_CTMU" 5 1015 "0x00A308"
d G "INT_RB4" 5 1016 "0x110F208"
d G "INT_RB5" 5 1017 "0x120F208"
d G "INT_RB6" 5 1018 "0x140F208"
d G "INT_RB7" 5 1019 "0x180F208"
D G "CLOCK_SP" 4 34 "16000000" "Clock Speed 20MHz"
D G "IO_MULTIPLE_DEVICES" 4 37 ""
D G "IO_CS_PIN" 4 38 "PIN_A5"
C L "jump_to_isr" 4 3 18 "FUNCTION"
D G "MCP23S17" 6 147 ""
D G "IO_DEVICE_ADDRESS_READ" 6 158 "0b01000001"
D G "IO_DEVICE_ADDRESS_WRITE" 6 159 "0b01000000"
D G "IO_DEVICE_0" 6 175 "0b00000000"
D G "IO_DEVICE_1" 6 176 "0b00000010"
D G "IO_DEVICE_2" 6 177 "0b00000100"
D G "IO_DEVICE_3" 6 178 "0b00000110"
D G "IO_DEVICE_4" 6 179 "0b00001000"
D G "IO_DEVICE_5" 6 180 "0b00001010"
D G "IO_DEVICE_6" 6 181 "0b00001100"
D G "IO_DEVICE_7" 6 182 "0b00001110"
D G "IODIRA" 6 193 "0x00" "0x00   Data Direction Register for PORTA"
D G "IPOLA" 6 194 "0x01" "0x02   Input Polarity Register for PORTA"
D G "GPINTENA" 6 195 "0x02" "0x04     Interrupt-on-change enable Register for PORTA"
D G "DEFVALA" 6 196 "0x03" "0x06   Default Value Register for PORTA"
D G "INTCONA" 6 197 "0x04" "0x08   Interrupt-on-change control Register for PORTA"
D G "IOCON" 6 198 "0x05" "0x0A   Configuration register for device"
D G "GPPUA" 6 199 "0x06" "0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)"
D G "INTFA" 6 200 "0x07" "0x0E   Interrupt flag Register for PORTA"
D G "INTCAPA" 6 201 "0x08" "0x10   Interrupt captured value Register for PORTA"
D G "GPIOA" 6 202 "0x09" "0x12   General purpose I/O Register for PORTA"
D G "OLATA" 6 203 "0x0A" "0x14   Output latch Register for PORTA"
D G "IODIRB" 6 205 "0x10" "0x01   Data Direction Register for PORTB"
D G "IPOLB" 6 206 "0x11" "0x03   Input Polarity Register for PORTB"
D G "GPINTENB" 6 207 "0x12" "0x05     Interrupt-on-change enable Register for PORTB"
D G "DEFVALB" 6 208 "0x13" "0x07   Default Value Register for PORTB"
D G "INTCONB" 6 209 "0x14" "0x09   Interrupt-on-change control Register for PORTB"
D G "GPPUB" 6 211 "0x16" "0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)"
D G "INTFB" 6 212 "0x17" "0x0F   Interrupt flag Register for PORTB"
D G "INTCAPB" 6 213 "0x18" "0x11   Interrupt captured value Register for PORTB"
D G "GPIOB" 6 214 "0x19" "0x13   General purpose I/O Register for PORTB"
D G "OLATB" 6 215 "0x1A" "0x15   Output latch Register for PORTB"
D G "IO_PIN_A0" 6 223 "0x80"
D G "IO_PIN_A1" 6 224 "0x81"
D G "IO_PIN_A2" 6 225 "0x82"
D G "IO_PIN_A3" 6 226 "0x83"
D G "IO_PIN_A4" 6 227 "0x84"
D G "IO_PIN_A5" 6 228 "0x85"
D G "IO_PIN_A6" 6 229 "0x86"
D G "IO_PIN_A7" 6 230 "0x87"
D G "IO_PIN_B0" 6 232 "0x00"
D G "IO_PIN_B1" 6 233 "0x01"
D G "IO_PIN_B2" 6 234 "0x02"
D G "IO_PIN_B3" 6 235 "0x03"
D G "IO_PIN_B4" 6 236 "0x04"
D G "IO_PIN_B5" 6 237 "0x05"
D G "IO_PIN_B6" 6 238 "0x06"
D G "IO_PIN_B7" 6 239 "0x07"
D G "IO_IOCON_BANK" 6 247 "0x80" "Sets register addresses. Initialized to 1."
D G "IO_IOCON_MIRROR" 6 248 "0x40" "Internally connect interrupt PINs."
D G "IO_IOCON_SEQOP" 6 249 "0x20" "Sets ~Sequential/Byte mode. Driver only uses byte mode."
D G "IO_IOCON_DISSLW" 6 250 "0x10" "Enables slew rate for SDA output"
D G "IO_IOCON_HAEN" 6 251 "0x08" "Enables hardware address pins. If 0 only one device can be used."
D G "IO_IOCON_ODR" 6 252 "0x04" "Open drain/~active drive interrupt pin outputs"
D G "IO_IOCON_INTPOL" 6 253 "0x02" "Sets INT output as active high/~low"
C L "jump_to_isr" 6 255 1 "*"
F N "IO_INIT" 6 259 ""
f G "IO_INIT" 6 259 "void()" `850  "don't need multiple inits because all devices are assumed 0 before HAEN is set"
F N "IO_WRITE_REGISTER" 6 281 ""
V L "address" 6 281 "int8" `852 
V L "reg" 6 281 "int8" `853 
V L "data" 6 281 "int8" `854 
f G "IO_WRITE_REGISTER" 6 281 "void(int8 address,int8 reg,int8 data)" `851 
F N "IO_READ_REGISTER" 6 282 ""
V L "address" 6 282 "int8" `856 
V L "reg" 6 282 "int8" `857 
f G "IO_READ_REGISTER" 6 282 "int8(int8 address,int8 reg)" `855 
F N "IO_OUTPUT_A" 6 283 ""
V L "address" 6 283 "int8" `859 
V L "data" 6 283 "int8" `860 
f G "IO_OUTPUT_A" 6 283 "void(int8 address,int8 data)" `858 
F N "IO_OUTPUT_B" 6 284 ""
V L "address" 6 284 "int8" `862 
V L "data" 6 284 "int8" `863 
f G "IO_OUTPUT_B" 6 284 "void(int8 address,int8 data)" `861 
F N "IO_INPUT_A" 6 285 ""
V L "address" 6 285 "int8" `865 
f G "IO_INPUT_A" 6 285 "int8(int8 address)" `864 
F N "IO_INPUT_B" 6 286 ""
V L "address" 6 286 "int8" `867 
f G "IO_INPUT_B" 6 286 "int8(int8 address)" `866 
F N "IO_OUTPUT_BIT" 6 287 ""
V L "address" 6 287 "int8" `869 
V L "pin" 6 287 "int8" `870 
V L "state" 6 287 "int8" `871 
f G "IO_OUTPUT_BIT" 6 287 "void(int8 address,int8 pin,int8 state)" `868 
F N "IO_OUTPUT_HIGH" 6 288 ""
V L "address" 6 288 "int8" `873 
V L "pin" 6 288 "int8" `874 
f G "IO_OUTPUT_HIGH" 6 288 "void(int8 address,int8 pin)" `872 
F N "IO_OUTPUT_LOW" 6 289 ""
V L "address" 6 289 "int8" `876 
V L "pin" 6 289 "int8" `877 
f G "IO_OUTPUT_LOW" 6 289 "void(int8 address,int8 pin)" `875 
F N "IO_OUTPUT_FLOAT" 6 290 ""
V L "address" 6 290 "int8" `879 
V L "pin" 6 290 "int8" `880 
f G "IO_OUTPUT_FLOAT" 6 290 "void(int8 address,int8 pin)" `878 
F N "IO_OUTPUT_TOGGLE" 6 291 ""
V L "address" 6 291 "int8" `882 
V L "pin" 6 291 "int8" `883 
f G "IO_OUTPUT_TOGGLE" 6 291 "void(int8 address,int8 pin)" `881 
F N "IO_OUTPUT_DRIVE" 6 292 ""
V L "address" 6 292 "int8" `885 
V L "pin" 6 292 "int8" `886 
f G "IO_OUTPUT_DRIVE" 6 292 "void(int8 address,int8 pin)" `884 
F N "IO_INPUT" 6 293 ""
V L "address" 6 293 "int8" `888 
V L "pin" 6 293 "int8" `889 
f G "IO_INPUT" 6 293 "int8(int8 address,int8 pin)" `887 
F N "IO_INPUT_STATE" 6 294 ""
V L "address" 6 294 "int8" `891 
V L "pin" 6 294 "int8" `892 
f G "IO_INPUT_STATE" 6 294 "int8(int8 address,int8 pin)" `890 
F N "IO_GET_TRIS_A" 6 295 ""
V L "address" 6 295 "int8" `894 
f G "IO_GET_TRIS_A" 6 295 "int8(int8 address)" `893 
F N "IO_SET_TRIS_A" 6 296 ""
V L "address" 6 296 "int8" `896 
V L "data" 6 296 "int8" `897 
f G "IO_SET_TRIS_A" 6 296 "void(int8 address,int8 data)" `895 
F N "IO_GET_TRIS_B" 6 297 ""
V L "address" 6 297 "int8" `899 
f G "IO_GET_TRIS_B" 6 297 "int8(int8 address)" `898 
F N "IO_SET_TRIS_B" 6 298 ""
V L "address" 6 298 "int8" `901 
V L "data" 6 298 "int8" `902 
f G "IO_SET_TRIS_B" 6 298 "void(int8 address,int8 data)" `900  "**** FUNCTIONS"
C L "IO_SET_TRIS_B" 6 255 13 "FUNCTION"
F N "IO_INIT" 6 322 ""
F G "IO_INIT" 6 322 "void()" `850 
C L "IO_INIT" 6 255 1 "FUNCTION"
C L "IO_INIT" 6 255 1 "FUNCTION"
C L "IO_INIT" 6 255 1 "FUNCTION"
C L "IO_INIT" 6 255 1 "FUNCTION"
C L "IO_INIT" 6 255 1 "FUNCTION"
C L "IO_INIT" 6 255 1 "FUNCTION"
C L "IO_INIT" 6 255 1 "FUNCTION"
C L "IO_WRITE_REGISTER" 6 255 8 "FUNCTION"
F N "IO_WRITE_REGISTER" 6 357 ""
V L "address" 6 357 "int8" `852 
V L "reg" 6 357 "int8" `853 
V L "data" 6 357 "int8" `906 
F G "IO_WRITE_REGISTER" 6 357 "void(int8 address,int8 reg,int8 data)" `851 
C L "IO_READ_REGISTER" 6 255 7 "FUNCTION"
F N "IO_READ_REGISTER" 6 390 ""
V L "address" 6 390 "int8" `856 
V L "reg" 6 390 "int8" `905 
F G "IO_READ_REGISTER" 6 390 "int8(int8 address,int8 reg)" `855 
V L "retVal" 6 392 "int8" `903 
C L "IO_OUTPUT_A" 6 255 8 "FUNCTION"
F N "IO_OUTPUT_A" 6 427 ""
V L "address" 6 427 "int8" `859 
V L "data" 6 427 "int8" `906 
F G "IO_OUTPUT_A" 6 427 "void(int8 address,int8 data)" `858 
C L "IO_OUTPUT_B" 6 255 8 "FUNCTION"
F N "IO_OUTPUT_B" 6 454 ""
V L "address" 6 454 "int8" `862 
V L "data" 6 454 "int8" `906 
F G "IO_OUTPUT_B" 6 454 "void(int8 address,int8 data)" `861 
C L "IO_INPUT_A" 6 255 7 "FUNCTION"
F N "IO_INPUT_A" 6 481 ""
V L "address" 6 481 "int8" `905 
F G "IO_INPUT_A" 6 481 "int8(int8 address)" `864 
V L "retVal" 6 484 "int8" `904 
C L "IO_INPUT_B" 6 255 7 "FUNCTION"
F N "IO_INPUT_B" 6 512 ""
V L "address" 6 512 "int8" `906 
F G "IO_INPUT_B" 6 512 "int8(int8 address)" `866 
V L "retVal" 6 515 "int8" `905 
C L "IO_OUTPUT_BIT" 6 255 8 "FUNCTION"
F N "IO_OUTPUT_BIT" 6 544 ""
V L "address" 6 544 "int8" `869 
V L "pin" 6 544 "int8" `870 
V L "state" 6 544 "int8" `909 
F G "IO_OUTPUT_BIT" 6 544 "void(int8 address,int8 pin,int8 state)" `868 
V L "tempReg" 6 547 "int8" `906 
C L "IO_OUTPUT_BIT" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_BIT" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_BIT" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_BIT" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_BIT" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_BIT" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_HIGH" 6 255 7 "FUNCTION"
F N "IO_OUTPUT_HIGH" 6 601 ""
V L "address" 6 601 "int8" `873 
V L "pin" 6 601 "int8" `909 
F G "IO_OUTPUT_HIGH" 6 601 "void(int8 address,int8 pin)" `872 
V L "tempReg" 6 604 "int8" `907 
C L "IO_OUTPUT_HIGH" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_HIGH" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_LOW" 6 255 7 "FUNCTION"
F N "IO_OUTPUT_LOW" 6 650 ""
V L "address" 6 650 "int8" `876 
V L "pin" 6 650 "int8" `910 
F G "IO_OUTPUT_LOW" 6 650 "void(int8 address,int8 pin)" `875 
V L "tempReg" 6 653 "int8" `908 
C L "IO_OUTPUT_LOW" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_LOW" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_FLOAT" 6 255 7 "FUNCTION"
F N "IO_OUTPUT_FLOAT" 6 699 ""
V L "address" 6 699 "int8" `879 
V L "pin" 6 699 "int8" `911 
F G "IO_OUTPUT_FLOAT" 6 699 "void(int8 address,int8 pin)" `878 
V L "tempReg" 6 702 "int8" `909 
C L "IO_OUTPUT_FLOAT" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_FLOAT" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_TOGGLE" 6 255 7 "FUNCTION"
F N "IO_OUTPUT_TOGGLE" 6 748 ""
V L "address" 6 748 "int8" `882 
V L "pin" 6 748 "int8" `912 
F G "IO_OUTPUT_TOGGLE" 6 748 "void(int8 address,int8 pin)" `881 
V L "tempReg" 6 751 "int8" `910 
C L "IO_OUTPUT_TOGGLE" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_TOGGLE" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_DRIVE" 6 255 7 "FUNCTION"
F N "IO_OUTPUT_DRIVE" 6 797 ""
V L "address" 6 797 "int8" `885 
V L "pin" 6 797 "int8" `913 
F G "IO_OUTPUT_DRIVE" 6 797 "void(int8 address,int8 pin)" `884 
V L "tempReg" 6 800 "int8" `911 
C L "IO_OUTPUT_DRIVE" 6 255 1 "FUNCTION"
C L "IO_OUTPUT_DRIVE" 6 255 1 "FUNCTION"
C L "IO_INPUT" 6 255 8 "FUNCTION"
F N "IO_INPUT" 6 847 ""
V L "address" 6 847 "int8" `888 
V L "pin" 6 847 "int8" `914 
F G "IO_INPUT" 6 847 "int8(int8 address,int8 pin)" `887 
V L "retVal" 6 849 "int1" `912 
V L "tempReg" 6 850 "int8" `913 
C L "IO_INPUT_STATE" 6 255 7 "FUNCTION"
F N "IO_INPUT_STATE" 6 893 ""
V L "address" 6 893 "int8" `891 
V L "pin" 6 893 "int8" `916 
F G "IO_INPUT_STATE" 6 893 "int8(int8 address,int8 pin)" `890 
V L "retVal" 6 895 "int1" `914 
V L "tempReg" 6 896 "int8" `915 
C L "IO_GET_TRIS_A" 6 255 6 "FUNCTION"
F N "IO_GET_TRIS_A" 6 932 ""
V L "address" 6 932 "int8" `917 
F G "IO_GET_TRIS_A" 6 932 "int8(int8 address)" `893 
V L "retVal" 6 935 "int8" `916 
C L "IO_SET_TRIS_A" 6 255 7 "FUNCTION"
F N "IO_SET_TRIS_A" 6 963 ""
V L "address" 6 963 "int8" `896 
V L "data" 6 963 "int8" `919 
F G "IO_SET_TRIS_A" 6 963 "void(int8 address,int8 data)" `895 
C L "IO_GET_TRIS_B" 6 255 6 "FUNCTION"
F N "IO_GET_TRIS_B" 6 989 ""
V L "address" 6 989 "int8" `918 
F G "IO_GET_TRIS_B" 6 989 "int8(int8 address)" `898 
V L "retVal" 6 992 "int8" `917 
C L "IO_SET_TRIS_B" 6 255 7 "FUNCTION"
F N "IO_SET_TRIS_B" 6 1020 ""
V L "address" 6 1020 "int8" `901 
V L "data" 6 1020 "int8" `920 
F G "IO_SET_TRIS_B" 6 1020 "void(int8 address,int8 data)" `900 
D G "Pled" 0 6 "PIN_B5"
D G "I2C_SDA" 0 7 "PIN_C4"
D G "I2C_SCL" 0 8 "PIN_C3"
D G "Pack" 0 10 "PIN_C0"
D G "Preset" 0 11 "PIN_C1"
D G "Ptest" 0 12 "PIN_C2"
D G "Pbell" 0 14 "PIN_A3"
D G "Pbuzzer" 0 15 "PIN_A4"
D G "P485ctrl" 0 17 "PIN_B3" "---jj"
D G "PTxD" 0 18 "PIN_C6"
D G "PRxD" 0 19 "PIN_C7"
D G "Red" 0 28 "0"
D G "Green" 0 29 "1"
D G "Ambian" 0 30 "2"
D G "TX2" 0 40 "PIN_B0" "RC0 = TXD"
D G "RX2" 0 41 "PIN_B1" "RC1 = RXD"
C L "check_ack" 0 21 5 "FUNCTION"
F N "check_ack" 0 51 ""
f G "check_ack" 0 51 "void()" `924 
F N "check_test" 0 52 ""
f G "check_test" 0 52 "void()" `925 
F N "check_reset" 0 53 ""
f G "check_reset" 0 53 "void()" `926 
F N "CheckAutoReset" 0 54 ""
V L "DatType" 0 54 "int8" `928 
f G "CheckAutoReset" 0 54 "int8(int8 DatType)" `927 
F N "Read_Config" 0 55 ""
f G "Read_Config" 0 55 "void()" `929 
F N "ForceAllAlarm" 0 56 ""
f G "ForceAllAlarm" 0 56 "void()" `930 
F N "Read_input" 0 57 ""
f G "Read_input" 0 57 "void()" `931 
V G "StatusTime" 0 59 "int8" `932 
C L "Read_input" 0 21 1 "FUNCTION"
V G "HearthbeatInd" 0 60 "int1" `933 
C L "Read_input" 0 21 1 "FUNCTION"
V G "FlashingRateTime" 0 61 "int8" `934 
V G "FlashingFlag" 0 62 "int1" `935 
V G "TimeBase1s" 0 63 "int8" `936 
V G "AutoAckDelayTime" 0 64 "int8" `937 
V G "Input1_8_Send" 0 66 "int8" `938 
V G "Input9_16_Send" 0 67 "int8" `939 
V G "Input17_24_Send" 0 68 "int8" `940 
V G "Input25_32_Send" 0 69 "int8" `941 
V G "Input33_40_Send" 0 70 "int8" `942 
V G "Input41_48_Send" 0 71 "int8" `943 
V G "Input49_56_Send" 0 72 "int8" `944 
V G "Input57_64_Send" 0 73 "int8" `945 
V G "Ack1_8_Send" 0 75 "int8" `946 
V G "Ack9_16_Send" 0 76 "int8" `947 
V G "Ack17_24_Send" 0 77 "int8" `948 
V G "Ack25_32_Send" 0 78 "int8" `949 
V G "Ack33_40_Send" 0 79 "int8" `950 
V G "Ack41_48_Send" 0 80 "int8" `951 
V G "Ack49_56_Send" 0 81 "int8" `952 
V G "Ack57_64_Send" 0 82 "int8" `953 
V G "AutoAckFlag" 0 84 "int1" `954 
V G "AutoResetFlag" 0 85 "int1" `955 
V G "AutoTestFlag" 0 86 "int1" `956 
V G "SBUF" 0 88 "int8" `957 
V G "Test_fault" 0 90 "int1" `958 
V G "T_test" 0 91 "int8" `959 
V G "Test" 0 93 "int1" `960 
V G "Ack_F" 0 94 "int1" `961 
V G "Reset_F" 0 95 "int1" `962 
V G "functointest_f" 0 97 "int1" `963 
V G "SyncStatus" 0 99 "int1" `964 
C L "Read_input" 0 21 1 "FUNCTION"
V G "SyncFlag" 0 100 "int1" `965 
C L "Read_input" 0 21 1 "FUNCTION"
V G "Synctimer" 0 101 "int8" `966 
C L "Read_input" 0 21 1 "FUNCTION"
V G "Output1_8" 0 103 "int8" `967 
V G "Output9_16" 0 104 "int8" `968 
V G "Output595" 0 106 "int8[4]" `969 
V G "tempdata" 0 108 "int8" `970 
V G "EEpDat" 0 110 "int8" `971  "Data from EEProm ///////"
C L "Read_input" 0 21 1 "FUNCTION"
V G "InputType1_8" 0 115 "int8" `972 
V G "InputType9_16" 0 116 "int8" `973 
V G "InputType17_24" 0 117 "int8" `974 
V G "FaultType1_8" 0 119 "int8" `975 
V G "FaultType9_16" 0 120 "int8" `976 
V G "FaultType17_24" 0 121 "int8" `977 
V G "OutputType1_8" 0 123 "int8" `978 
V G "OutputType9_16" 0 124 "int8" `979 
V G "OutputType17_24" 0 125 "int8" `980 
V G "OutputBoth1_8" 0 127 "int8" `981 
V G "OutputBoth9_16" 0 128 "int8" `982 
V G "OutputBoth17_24" 0 129 "int8" `983 
V G "Alarm_Indicator1_8" 0 131 "int8" `984 
V G "Alarm_Indicator9_16" 0 132 "int8" `985 
V G "Alarm_Indicator17_24" 0 133 "int8" `986 
V G "Input1_8" 0 135 "int8" `987 
V G "Input9_16" 0 136 "int8" `988 
V G "Input9_10" 0 138 "int8" `989 
V G "Input11_18" 0 139 "int8" `990 
V G "Input19_20" 0 140 "int8" `991 
V G "Red1_7" 0 142 "int8" `992 
V G "Red8_8" 0 143 "int8" `993 
V G "Red9_15" 0 144 "int8" `994 
V G "Red16_16" 0 145 "int8" `995 
V G "Green1_7" 0 147 "int8" `996 
V G "Green8_8" 0 148 "int8" `997 
V G "Green9_15" 0 149 "int8" `998 
V G "Green16_16" 0 150 "int8" `999 
V G "Red1_8" 0 152 "int8" `1000 
V G "Red9_16" 0 153 "int8" `1001 
V G "Red9_10" 0 155 "int8" `1002 
V G "Red11_18" 0 156 "int8" `1003 
V G "Red19_20" 0 157 "int8" `1004 
V G "Green1_8" 0 159 "int8" `1005 
V G "Green9_16" 0 160 "int8" `1006 
V G "Green9_10" 0 162 "int8" `1007 
V G "Green11_18" 0 163 "int8" `1008 
V G "Green19_20" 0 164 "int8" `1009 
V G "OUTRed1_8" 0 166 "int8" `1010 
V G "OUTRed9_16" 0 167 "int8" `1011 
V G "OUTRed9_10" 0 169 "int8" `1012 
V G "OUTRed11_18" 0 170 "int8" `1013 
V G "OUTRed19_20" 0 171 "int8" `1014 
V G "OUTGreen1_8" 0 173 "int8" `1015 
V G "OUTGreen9_16" 0 174 "int8" `1016 
V G "OUTGreen9_10" 0 176 "int8" `1017 
V G "OUTGreen11_18" 0 177 "int8" `1018 
V G "OUTGreen19_20" 0 178 "int8" `1019 
V G "AutoAck" 0 180 "int8" `1020 
V G "AutoAckTime" 0 181 "int8" `1021 
V G "FlashingRate" 0 182 "int8" `1022 
V G "NoOfPoint" 0 183 "int8" `1023 
V G "MasterSlaveSync" 0 184 "int8" `1024 
V G "RefreshConfigData" 0 186 "int1" `1025 
C L "Read_input" 0 21 4 "FUNCTION"
V G "addr_sq" 0 194 "int8" `1026 
V G "end_sq" 0 194 "int8" `1028 
V G "code_sq" 0 194 "int8" `1029 
V G "start_addr_hi_sq" 0 194 "int8" `1030 
V G "start_addr_lo_sq" 0 194 "int8" `1031 
C L "Read_input" 0 21 1 "FUNCTION"
V G "ubyte_hi_sq" 0 195 "int8" `1032 
V G "ubyte_lo_sq" 0 195 "int8" `1034 
V G "crc_hi_sq" 0 195 "int8" `1035 
V G "second_numofdata" 0 195 "int8" `1036 
V G "byte_count_sq" 0 195 "int8" `1037 
V G "data_sq" 0 195 "int8" `1038 
C L "Read_input" 0 21 1 "FUNCTION"
V G "recieve_completed" 0 197 "int1" `1039 
V G "sequence" 0 198 "int8" `1040  "keep sequence use for RxD"
V G "address" 0 199 "int8" `1041 
V G "RxD_DataLen" 0 200 "int8" `1042 
V G "TxD_Buff" 0 201 "int8[255]" `1043 
V G "RxD_Buff" 0 202 "int8[512]" `1044 
V G "CRC_Lo" 0 203 "int8" `1045 
V G "CRC_Hi" 0 204 "int8" `1046 
V G "Send_check_Time" 0 205 "int16" `1047 
C L "Read_input" 0 21 1 "FUNCTION"
V G "Start_Address" 0 207 "int16" `1048 
V G "No_PointCount" 0 208 "int16" `1049 
V G "Data_ByteCount" 0 209 "int8" `1050 
V G "Data_Buff" 0 210 "int8[512]" `1051  "unsigned char DataTemp;"
C L "Read_input" 0 21 1 "FUNCTION"
V G "MCP23s17_Ip_dat" 0 214 "int8" `1052 
V G "MCP23s17_Op_dat" 0 216 "int8" `1053 
V G "T_timeout" 0 218 "int8" `1054  "use for calculate RxD timeout"
V G "index" 0 219 "int16" `1055 
C L "Read_input" 0 21 1 "FUNCTION"
V G "outmcp23" 0 221 "int8" `1056 
V G "sms_phonenumber" 0 223 "int8[15]" `1057  "unsigned char SMS_Massage[20][20];"
V G "SMS_Massage1" 0 227 "int8[32]" `1058 
V G "SMS_Massage2" 0 228 "int8[32]" `1059 
V G "SMS_Massage3" 0 229 "int8[32]" `1060 
V G "SMS_Massage4" 0 230 "int8[32]" `1061 
V G "SMS_Massage5" 0 231 "int8[32]" `1062 
V G "SMS_Massage6" 0 232 "int8[32]" `1063 
V G "SMS_Massage7" 0 233 "int8[32]" `1064 
V G "SMS_Massage8" 0 234 "int8[32]" `1065 
V G "SMS_MassageSUM" 0 236 "int8[160]" `1066 
V G "spacestring" 0 238 "int8[1]" `1067 
V G "send_SMS_period" 0 240 "int8" `1068 
V G "send_SMS_count" 0 240 "int8" `1069 
V G "CRC_Table_Hi" 0 242 "[1]" `1071 
V G "CRC_Table_Lo" 0 263 "[1]" `1074 
C L "Read_input" 0 21 1 "FUNCTION"
C L "Read_input" 0 21 1 "FUNCTION"
V G "Inputt" 0 293 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1085 
V G "Output" 0 293 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1086 
V G "InputType" 0 293 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1087 
V G "FaultType" 0 293 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1088 
V G "OutputType" 0 293 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1089 
V G "OutputBoth" 0 293 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1090 
V G "AlarmIndicator" 0 294 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1091 
V G "ack" 0 294 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1092 
V G "In" 0 294 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1093 
V G "In2" 0 294 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1094 
V G "LED_Colour" 0 295 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1095 
V G "AckSend" 0 295 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1096 
V G "RED_Colour" 0 295 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1097 
V G "GREEN_Colour" 0 295 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1098 
V G "SendSMS" 0 296 "{int1 B1,int1 B2,int1 B3,int1 B4,int1 B5,int1 B6,int1 B7,int1 B8}" `1099 
V G "FaultAgo" 0 298 "int1[20]" `1100 
V G "FaultNow" 0 299 "int1[20]" `1101 
V G "ReleaseTime" 0 300 "int16[20]" `1102 
V G "FaultDelayTime" 0 301 "int16[20]" `1103 
V G "AllFaultDelayTime" 0 302 "int8" `1104 
V G "FaultNCNO" 0 303 "int1[20]" `1105 
D G "NO" 0 304 "1"
D G "NC" 0 305 "0"
C L "Read_input" 0 21 2 "FUNCTION"
F N "StoreReleaseFault" 0 312 ""
F G "StoreReleaseFault" 0 313 "void(int16 )" `1106 
V L "i" 0 314 "sint8" `1107 
F N "CRC" 0 321 ""
V L "puchMsg" 0 321 "*int8" `1116 
V L "usDataLen" 0 321 "int8" `1117 
F G "CRC" 0 322 "void(*int8 puchMsg,int8 usDataLen)" `1115 
V L "uIndex" 0 323 "int8" `1118  "fill index into CRC lookup table *"
V L "i" 0 324 "int8" `1119 
C L "CRC" 0 21 1 "FUNCTION"
C L "CRC" 0 21 1 "FUNCTION"
C G "" 0 338 32 "*"
V G "blankSigned" 0 387 "int8[1]" `1120 
F N "sendsum_sms" 0 388 ""
F G "sendsum_sms" 0 389 "void()" `1121 
F N "Alarmtosend" 0 413 ""
F G "Alarmtosend" 0 414 "void()" `1130 
C L "Alarmtosend" 0 338 1 "FUNCTION"
C L "Alarmtosend" 0 338 1 "FUNCTION"
V G "count_bytecount" 0 478 "int8" `1131 
F N "checkCommand" 0 479 ""
F G "checkCommand" 0 480 "void()" `1132 
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "checkCommand" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
F N "Modbus_Function" 0 627 ""
F G "Modbus_Function" 0 628 "void(int16 ,int16 )" `1133 
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 3 "FUNCTION"
C L "Modbus_Function" 0 338 2 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 2 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 2 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 2 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 2 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 2 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 2 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
V L "a" 0 1444 "int16" `1134 
V L "phonenum" 0 1445 "int8" `1135 
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
V L "i" 0 1492 "int16" `1136 
V L "j" 0 1492 "int16" `1137 
V L "k" 0 1492 "int16" `1138 
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
C L "Modbus_Function" 0 338 1 "FUNCTION"
F N "Read_input" 0 1721 ""
F G "Read_input" 0 1722 "void()" `931  "if(NoOfPoint >= 10)"
C L "Read_input" 0 338 2 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
V L "i" 0 1757 "int8" `1139 
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_input" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 2 "FUNCTION"
F N "Read_Config" 0 1966 ""
F G "Read_Config" 0 1967 "void()" `929 
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
V L "a" 0 2104 "int8" `1147 
V L "phonenum" 0 2105 "int8" `1148 
V L "i" 0 2122 "int16" `1149 
V L "j" 0 2122 "int16" `1150 
V L "k" 0 2122 "int16" `1151 
V L "buff" 0 2122 "int16" `1152 
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
C L "Read_Config" 0 338 1 "FUNCTION"
F N "RDA_isr" 0 2285 ""
F G "RDA_isr" 0 2286 "void()" `1153 
F N "TIMER2_isr" 0 2292 ""
C L "TIMER2_isr" 0 338 1 "FUNCTION"
F G "TIMER2_isr" 0 2293 "void()" `1154 
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
C L "TIMER2_isr" 0 338 1 "FUNCTION"
F N "Anal_Function" 0 2402 ""
F G "Anal_Function" 0 2403 "void()" `1155  "MANUAL RESET /////////////////////////////////"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 2 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 11 "FUNCTION"
C L "Anal_Function" 0 338 3 "FUNCTION"
V L "inputflag" 0 3261 "int8" `1156 
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 8 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 8 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 8 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 8 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 8 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 8 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 8 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 8 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
C L "Anal_Function" 0 338 1 "FUNCTION"
F N "Send_Ouput" 0 4004 ""
F G "Send_Ouput" 0 4005 "void()" `1157 
C L "Send_Ouput" 0 338 2 "FUNCTION"
C L "Send_Ouput" 0 338 2 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
C L "Send_Ouput" 0 338 1 "FUNCTION"
F N "ForceAllAlarm" 0 4205 ""
F G "ForceAllAlarm" 0 4206 "void()" `930 
C L "ForceAllAlarm" 0 338 16 "FUNCTION"
C L "check_test" 0 338 1 "FUNCTION"
F N "check_test" 0 4240 ""
F G "check_test" 0 4241 "void()" `925 
V L "output_temp" 0 4242 "int8[8]" `1158 
C L "check_test" 0 338 1 "FUNCTION"
C L "check_test" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
F N "check_ack" 0 4298 ""
F G "check_ack" 0 4299 "void()" `924 
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_ack" 0 338 1 "FUNCTION"
C L "check_reset" 0 338 1 "FUNCTION"
F N "check_reset" 0 4394 ""
F G "check_reset" 0 4395 "void()" `926 
C L "CheckAutoReset" 0 338 1 "FUNCTION"
F N "CheckAutoReset" 0 4426 ""
V L "DatType" 0 4426 "int8" `1160 
F G "CheckAutoReset" 0 4427 "int8(int8 DatType)" `927 
V L "check" 0 4428 "int1" `1159  "/ "1" = true  //Other Alarm active or not "ACK""
C L "CheckAutoReset" 0 338 1 "FUNCTION"
C L "CheckAutoReset" 0 338 1 "FUNCTION"
F N "MAIN" 0 4465 ""
F G "MAIN" 0 4466 "void()" `1160 
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 4 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 3 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
V L "i" 0 4564 "int8" `1163 
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 58 "FUNCTION"
V L "m" 0 4765 "int8" `1165 
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 2 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
C L "MAIN" 0 338 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
